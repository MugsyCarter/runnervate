/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _angular = __webpack_require__(1);
	
	var _angular2 = _interopRequireDefault(_angular);
	
	__webpack_require__(3);
	
	var _components = __webpack_require__(7);
	
	var _components2 = _interopRequireDefault(_components);
	
	var _services = __webpack_require__(34);
	
	var _services2 = _interopRequireDefault(_services);
	
	var _angularUiRouter = __webpack_require__(40);
	
	var _angularUiRouter2 = _interopRequireDefault(_angularUiRouter);
	
	var _ngmap = __webpack_require__(41);
	
	var _ngmap2 = _interopRequireDefault(_ngmap);
	
	var _routes = __webpack_require__(42);
	
	var _routes2 = _interopRequireDefault(_routes);
	
	__webpack_require__(43);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var app = _angular2.default.module('myApp', [_components2.default, _services2.default, _angularUiRouter2.default, _ngmap2.default]);
	
	// import defaultRoute from 'angular-ui-router-default';
	
	
	app.value('apiUrl', 'http://localhost:3000/api');
	// app.value('apiUrl', 'https://lynching-database.herokuapp.com/api');
	
	
	app.value('googleMapsUrl', 'https://maps.googleapis.com/maps/api/js?key=AIzaSyC2HGq4Hh7k7CUBs6VNkEJDI6UbPchNQyY');
	
	app.config(_routes2.default);
	
	// app.config(routes, function(uiGmapGoogleMapApiProvider) {
	//     uiGmapGoogleMapApiProvider.configure({
	//         key: 'AIzaSyC2HGq4Hh7k7CUBs6VNkEJDI6UbPchNQyY',
	//         v: '3.20', //defaults to latest 3.X anyhow
	//         libraries: 'weather,geometry,visualization'
	//     });
	// })
	
	
	//route debugger
	app.run(function ($rootScope) {
	    $rootScope.$on('$stateChangeError', console.log.bind(console));
	});

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(2);
	module.exports = angular;


/***/ },
/* 2 */
/***/ function(module, exports) {

	/**
	 * @license AngularJS v1.6.1
	 * (c) 2010-2016 Google, Inc. http://angularjs.org
	 * License: MIT
	 */
	(function(window) {'use strict';
	
	/**
	 * @description
	 *
	 * This object provides a utility for producing rich Error messages within
	 * Angular. It can be called as follows:
	 *
	 * var exampleMinErr = minErr('example');
	 * throw exampleMinErr('one', 'This {0} is {1}', foo, bar);
	 *
	 * The above creates an instance of minErr in the example namespace. The
	 * resulting error will have a namespaced error code of example.one.  The
	 * resulting error will replace {0} with the value of foo, and {1} with the
	 * value of bar. The object is not restricted in the number of arguments it can
	 * take.
	 *
	 * If fewer arguments are specified than necessary for interpolation, the extra
	 * interpolation markers will be preserved in the final string.
	 *
	 * Since data will be parsed statically during a build step, some restrictions
	 * are applied with respect to how minErr instances are created and called.
	 * Instances should have names of the form namespaceMinErr for a minErr created
	 * using minErr('namespace') . Error codes, namespaces and template strings
	 * should all be static strings, not variables or general expressions.
	 *
	 * @param {string} module The namespace to use for the new minErr instance.
	 * @param {function} ErrorConstructor Custom error constructor to be instantiated when returning
	 *   error from returned function, for cases when a particular type of error is useful.
	 * @returns {function(code:string, template:string, ...templateArgs): Error} minErr instance
	 */
	
	function minErr(module, ErrorConstructor) {
	  ErrorConstructor = ErrorConstructor || Error;
	  return function() {
	    var SKIP_INDEXES = 2;
	
	    var templateArgs = arguments,
	      code = templateArgs[0],
	      message = '[' + (module ? module + ':' : '') + code + '] ',
	      template = templateArgs[1],
	      paramPrefix, i;
	
	    message += template.replace(/\{\d+\}/g, function(match) {
	      var index = +match.slice(1, -1),
	        shiftedIndex = index + SKIP_INDEXES;
	
	      if (shiftedIndex < templateArgs.length) {
	        return toDebugString(templateArgs[shiftedIndex]);
	      }
	
	      return match;
	    });
	
	    message += '\nhttp://errors.angularjs.org/1.6.1/' +
	      (module ? module + '/' : '') + code;
	
	    for (i = SKIP_INDEXES, paramPrefix = '?'; i < templateArgs.length; i++, paramPrefix = '&') {
	      message += paramPrefix + 'p' + (i - SKIP_INDEXES) + '=' +
	        encodeURIComponent(toDebugString(templateArgs[i]));
	    }
	
	    return new ErrorConstructor(message);
	  };
	}
	
	/* We need to tell ESLint what variables are being exported */
	/* exported
	  angular,
	  msie,
	  jqLite,
	  jQuery,
	  slice,
	  splice,
	  push,
	  toString,
	  ngMinErr,
	  angularModule,
	  uid,
	  REGEX_STRING_REGEXP,
	  VALIDITY_STATE_PROPERTY,
	
	  lowercase,
	  uppercase,
	  manualLowercase,
	  manualUppercase,
	  nodeName_,
	  isArrayLike,
	  forEach,
	  forEachSorted,
	  reverseParams,
	  nextUid,
	  setHashKey,
	  extend,
	  toInt,
	  inherit,
	  merge,
	  noop,
	  identity,
	  valueFn,
	  isUndefined,
	  isDefined,
	  isObject,
	  isBlankObject,
	  isString,
	  isNumber,
	  isNumberNaN,
	  isDate,
	  isArray,
	  isFunction,
	  isRegExp,
	  isWindow,
	  isScope,
	  isFile,
	  isFormData,
	  isBlob,
	  isBoolean,
	  isPromiseLike,
	  trim,
	  escapeForRegexp,
	  isElement,
	  makeMap,
	  includes,
	  arrayRemove,
	  copy,
	  equals,
	  csp,
	  jq,
	  concat,
	  sliceArgs,
	  bind,
	  toJsonReplacer,
	  toJson,
	  fromJson,
	  convertTimezoneToLocal,
	  timezoneToOffset,
	  startingTag,
	  tryDecodeURIComponent,
	  parseKeyValue,
	  toKeyValue,
	  encodeUriSegment,
	  encodeUriQuery,
	  angularInit,
	  bootstrap,
	  getTestability,
	  snake_case,
	  bindJQuery,
	  assertArg,
	  assertArgFn,
	  assertNotHasOwnProperty,
	  getter,
	  getBlockNodes,
	  hasOwnProperty,
	  createMap,
	  stringify,
	
	  NODE_TYPE_ELEMENT,
	  NODE_TYPE_ATTRIBUTE,
	  NODE_TYPE_TEXT,
	  NODE_TYPE_COMMENT,
	  NODE_TYPE_DOCUMENT,
	  NODE_TYPE_DOCUMENT_FRAGMENT
	*/
	
	////////////////////////////////////
	
	/**
	 * @ngdoc module
	 * @name ng
	 * @module ng
	 * @installation
	 * @description
	 *
	 * # ng (core module)
	 * The ng module is loaded by default when an AngularJS application is started. The module itself
	 * contains the essential components for an AngularJS application to function. The table below
	 * lists a high level breakdown of each of the services/factories, filters, directives and testing
	 * components available within this core module.
	 *
	 * <div doc-module-components="ng"></div>
	 */
	
	var REGEX_STRING_REGEXP = /^\/(.+)\/([a-z]*)$/;
	
	// The name of a form control's ValidityState property.
	// This is used so that it's possible for internal tests to create mock ValidityStates.
	var VALIDITY_STATE_PROPERTY = 'validity';
	
	
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	
	/**
	 * @ngdoc function
	 * @name angular.lowercase
	 * @module ng
	 * @kind function
	 *
	 * @deprecated
	 * sinceVersion="1.5.0"
	 * removeVersion="1.7.0"
	 * Use [String.prototype.toLowerCase](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase) instead.
	 *
	 * @description Converts the specified string to lowercase.
	 * @param {string} string String to be converted to lowercase.
	 * @returns {string} Lowercased string.
	 */
	var lowercase = function(string) {return isString(string) ? string.toLowerCase() : string;};
	
	/**
	 * @ngdoc function
	 * @name angular.uppercase
	 * @module ng
	 * @kind function
	 *
	 * @deprecated
	 * sinceVersion="1.5.0"
	 * removeVersion="1.7.0"
	 * Use [String.prototype.toUpperCase](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase) instead.
	 *
	 * @description Converts the specified string to uppercase.
	 * @param {string} string String to be converted to uppercase.
	 * @returns {string} Uppercased string.
	 */
	var uppercase = function(string) {return isString(string) ? string.toUpperCase() : string;};
	
	
	var manualLowercase = function(s) {
	  /* eslint-disable no-bitwise */
	  return isString(s)
	      ? s.replace(/[A-Z]/g, function(ch) {return String.fromCharCode(ch.charCodeAt(0) | 32);})
	      : s;
	  /* eslint-enable */
	};
	var manualUppercase = function(s) {
	  /* eslint-disable no-bitwise */
	  return isString(s)
	      ? s.replace(/[a-z]/g, function(ch) {return String.fromCharCode(ch.charCodeAt(0) & ~32);})
	      : s;
	  /* eslint-enable */
	};
	
	
	// String#toLowerCase and String#toUpperCase don't produce correct results in browsers with Turkish
	// locale, for this reason we need to detect this case and redefine lowercase/uppercase methods
	// with correct but slower alternatives. See https://github.com/angular/angular.js/issues/11387
	if ('i' !== 'I'.toLowerCase()) {
	  lowercase = manualLowercase;
	  uppercase = manualUppercase;
	}
	
	
	var
	    msie,             // holds major version number for IE, or NaN if UA is not IE.
	    jqLite,           // delay binding since jQuery could be loaded after us.
	    jQuery,           // delay binding
	    slice             = [].slice,
	    splice            = [].splice,
	    push              = [].push,
	    toString          = Object.prototype.toString,
	    getPrototypeOf    = Object.getPrototypeOf,
	    ngMinErr          = minErr('ng'),
	
	    /** @name angular */
	    angular           = window.angular || (window.angular = {}),
	    angularModule,
	    uid               = 0;
	
	// Support: IE 9-11 only
	/**
	 * documentMode is an IE-only property
	 * http://msdn.microsoft.com/en-us/library/ie/cc196988(v=vs.85).aspx
	 */
	msie = window.document.documentMode;
	
	
	/**
	 * @private
	 * @param {*} obj
	 * @return {boolean} Returns true if `obj` is an array or array-like object (NodeList, Arguments,
	 *                   String ...)
	 */
	function isArrayLike(obj) {
	
	  // `null`, `undefined` and `window` are not array-like
	  if (obj == null || isWindow(obj)) return false;
	
	  // arrays, strings and jQuery/jqLite objects are array like
	  // * jqLite is either the jQuery or jqLite constructor function
	  // * we have to check the existence of jqLite first as this method is called
	  //   via the forEach method when constructing the jqLite object in the first place
	  if (isArray(obj) || isString(obj) || (jqLite && obj instanceof jqLite)) return true;
	
	  // Support: iOS 8.2 (not reproducible in simulator)
	  // "length" in obj used to prevent JIT error (gh-11508)
	  var length = 'length' in Object(obj) && obj.length;
	
	  // NodeList objects (with `item` method) and
	  // other objects with suitable length characteristics are array-like
	  return isNumber(length) &&
	    (length >= 0 && ((length - 1) in obj || obj instanceof Array) || typeof obj.item === 'function');
	
	}
	
	/**
	 * @ngdoc function
	 * @name angular.forEach
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Invokes the `iterator` function once for each item in `obj` collection, which can be either an
	 * object or an array. The `iterator` function is invoked with `iterator(value, key, obj)`, where `value`
	 * is the value of an object property or an array element, `key` is the object property key or
	 * array element index and obj is the `obj` itself. Specifying a `context` for the function is optional.
	 *
	 * It is worth noting that `.forEach` does not iterate over inherited properties because it filters
	 * using the `hasOwnProperty` method.
	 *
	 * Unlike ES262's
	 * [Array.prototype.forEach](http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.18),
	 * providing 'undefined' or 'null' values for `obj` will not throw a TypeError, but rather just
	 * return the value provided.
	 *
	   ```js
	     var values = {name: 'misko', gender: 'male'};
	     var log = [];
	     angular.forEach(values, function(value, key) {
	       this.push(key + ': ' + value);
	     }, log);
	     expect(log).toEqual(['name: misko', 'gender: male']);
	   ```
	 *
	 * @param {Object|Array} obj Object to iterate over.
	 * @param {Function} iterator Iterator function.
	 * @param {Object=} context Object to become context (`this`) for the iterator function.
	 * @returns {Object|Array} Reference to `obj`.
	 */
	
	function forEach(obj, iterator, context) {
	  var key, length;
	  if (obj) {
	    if (isFunction(obj)) {
	      for (key in obj) {
	        if (key !== 'prototype' && key !== 'length' && key !== 'name' && obj.hasOwnProperty(key)) {
	          iterator.call(context, obj[key], key, obj);
	        }
	      }
	    } else if (isArray(obj) || isArrayLike(obj)) {
	      var isPrimitive = typeof obj !== 'object';
	      for (key = 0, length = obj.length; key < length; key++) {
	        if (isPrimitive || key in obj) {
	          iterator.call(context, obj[key], key, obj);
	        }
	      }
	    } else if (obj.forEach && obj.forEach !== forEach) {
	        obj.forEach(iterator, context, obj);
	    } else if (isBlankObject(obj)) {
	      // createMap() fast path --- Safe to avoid hasOwnProperty check because prototype chain is empty
	      for (key in obj) {
	        iterator.call(context, obj[key], key, obj);
	      }
	    } else if (typeof obj.hasOwnProperty === 'function') {
	      // Slow path for objects inheriting Object.prototype, hasOwnProperty check needed
	      for (key in obj) {
	        if (obj.hasOwnProperty(key)) {
	          iterator.call(context, obj[key], key, obj);
	        }
	      }
	    } else {
	      // Slow path for objects which do not have a method `hasOwnProperty`
	      for (key in obj) {
	        if (hasOwnProperty.call(obj, key)) {
	          iterator.call(context, obj[key], key, obj);
	        }
	      }
	    }
	  }
	  return obj;
	}
	
	function forEachSorted(obj, iterator, context) {
	  var keys = Object.keys(obj).sort();
	  for (var i = 0; i < keys.length; i++) {
	    iterator.call(context, obj[keys[i]], keys[i]);
	  }
	  return keys;
	}
	
	
	/**
	 * when using forEach the params are value, key, but it is often useful to have key, value.
	 * @param {function(string, *)} iteratorFn
	 * @returns {function(*, string)}
	 */
	function reverseParams(iteratorFn) {
	  return function(value, key) {iteratorFn(key, value);};
	}
	
	/**
	 * A consistent way of creating unique IDs in angular.
	 *
	 * Using simple numbers allows us to generate 28.6 million unique ids per second for 10 years before
	 * we hit number precision issues in JavaScript.
	 *
	 * Math.pow(2,53) / 60 / 60 / 24 / 365 / 10 = 28.6M
	 *
	 * @returns {number} an unique alpha-numeric string
	 */
	function nextUid() {
	  return ++uid;
	}
	
	
	/**
	 * Set or clear the hashkey for an object.
	 * @param obj object
	 * @param h the hashkey (!truthy to delete the hashkey)
	 */
	function setHashKey(obj, h) {
	  if (h) {
	    obj.$$hashKey = h;
	  } else {
	    delete obj.$$hashKey;
	  }
	}
	
	
	function baseExtend(dst, objs, deep) {
	  var h = dst.$$hashKey;
	
	  for (var i = 0, ii = objs.length; i < ii; ++i) {
	    var obj = objs[i];
	    if (!isObject(obj) && !isFunction(obj)) continue;
	    var keys = Object.keys(obj);
	    for (var j = 0, jj = keys.length; j < jj; j++) {
	      var key = keys[j];
	      var src = obj[key];
	
	      if (deep && isObject(src)) {
	        if (isDate(src)) {
	          dst[key] = new Date(src.valueOf());
	        } else if (isRegExp(src)) {
	          dst[key] = new RegExp(src);
	        } else if (src.nodeName) {
	          dst[key] = src.cloneNode(true);
	        } else if (isElement(src)) {
	          dst[key] = src.clone();
	        } else {
	          if (!isObject(dst[key])) dst[key] = isArray(src) ? [] : {};
	          baseExtend(dst[key], [src], true);
	        }
	      } else {
	        dst[key] = src;
	      }
	    }
	  }
	
	  setHashKey(dst, h);
	  return dst;
	}
	
	/**
	 * @ngdoc function
	 * @name angular.extend
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Extends the destination object `dst` by copying own enumerable properties from the `src` object(s)
	 * to `dst`. You can specify multiple `src` objects. If you want to preserve original objects, you can do so
	 * by passing an empty object as the target: `var object = angular.extend({}, object1, object2)`.
	 *
	 * **Note:** Keep in mind that `angular.extend` does not support recursive merge (deep copy). Use
	 * {@link angular.merge} for this.
	 *
	 * @param {Object} dst Destination object.
	 * @param {...Object} src Source object(s).
	 * @returns {Object} Reference to `dst`.
	 */
	function extend(dst) {
	  return baseExtend(dst, slice.call(arguments, 1), false);
	}
	
	
	/**
	* @ngdoc function
	* @name angular.merge
	* @module ng
	* @kind function
	*
	* @description
	* Deeply extends the destination object `dst` by copying own enumerable properties from the `src` object(s)
	* to `dst`. You can specify multiple `src` objects. If you want to preserve original objects, you can do so
	* by passing an empty object as the target: `var object = angular.merge({}, object1, object2)`.
	*
	* Unlike {@link angular.extend extend()}, `merge()` recursively descends into object properties of source
	* objects, performing a deep copy.
	*
	* @param {Object} dst Destination object.
	* @param {...Object} src Source object(s).
	* @returns {Object} Reference to `dst`.
	*/
	function merge(dst) {
	  return baseExtend(dst, slice.call(arguments, 1), true);
	}
	
	
	
	function toInt(str) {
	  return parseInt(str, 10);
	}
	
	var isNumberNaN = Number.isNaN || function isNumberNaN(num) {
	  // eslint-disable-next-line no-self-compare
	  return num !== num;
	};
	
	
	function inherit(parent, extra) {
	  return extend(Object.create(parent), extra);
	}
	
	/**
	 * @ngdoc function
	 * @name angular.noop
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * A function that performs no operations. This function can be useful when writing code in the
	 * functional style.
	   ```js
	     function foo(callback) {
	       var result = calculateResult();
	       (callback || angular.noop)(result);
	     }
	   ```
	 */
	function noop() {}
	noop.$inject = [];
	
	
	/**
	 * @ngdoc function
	 * @name angular.identity
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * A function that returns its first argument. This function is useful when writing code in the
	 * functional style.
	 *
	   ```js
	   function transformer(transformationFn, value) {
	     return (transformationFn || angular.identity)(value);
	   };
	
	   // E.g.
	   function getResult(fn, input) {
	     return (fn || angular.identity)(input);
	   };
	
	   getResult(function(n) { return n * 2; }, 21);   // returns 42
	   getResult(null, 21);                            // returns 21
	   getResult(undefined, 21);                       // returns 21
	   ```
	 *
	 * @param {*} value to be returned.
	 * @returns {*} the value passed in.
	 */
	function identity($) {return $;}
	identity.$inject = [];
	
	
	function valueFn(value) {return function valueRef() {return value;};}
	
	function hasCustomToString(obj) {
	  return isFunction(obj.toString) && obj.toString !== toString;
	}
	
	
	/**
	 * @ngdoc function
	 * @name angular.isUndefined
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is undefined.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is undefined.
	 */
	function isUndefined(value) {return typeof value === 'undefined';}
	
	
	/**
	 * @ngdoc function
	 * @name angular.isDefined
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is defined.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is defined.
	 */
	function isDefined(value) {return typeof value !== 'undefined';}
	
	
	/**
	 * @ngdoc function
	 * @name angular.isObject
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is an `Object`. Unlike `typeof` in JavaScript, `null`s are not
	 * considered to be objects. Note that JavaScript arrays are objects.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is an `Object` but not `null`.
	 */
	function isObject(value) {
	  // http://jsperf.com/isobject4
	  return value !== null && typeof value === 'object';
	}
	
	
	/**
	 * Determine if a value is an object with a null prototype
	 *
	 * @returns {boolean} True if `value` is an `Object` with a null prototype
	 */
	function isBlankObject(value) {
	  return value !== null && typeof value === 'object' && !getPrototypeOf(value);
	}
	
	
	/**
	 * @ngdoc function
	 * @name angular.isString
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is a `String`.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is a `String`.
	 */
	function isString(value) {return typeof value === 'string';}
	
	
	/**
	 * @ngdoc function
	 * @name angular.isNumber
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is a `Number`.
	 *
	 * This includes the "special" numbers `NaN`, `+Infinity` and `-Infinity`.
	 *
	 * If you wish to exclude these then you can use the native
	 * [`isFinite'](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isFinite)
	 * method.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is a `Number`.
	 */
	function isNumber(value) {return typeof value === 'number';}
	
	
	/**
	 * @ngdoc function
	 * @name angular.isDate
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a value is a date.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is a `Date`.
	 */
	function isDate(value) {
	  return toString.call(value) === '[object Date]';
	}
	
	
	/**
	 * @ngdoc function
	 * @name angular.isArray
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is an `Array`. Alias of Array.isArray.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is an `Array`.
	 */
	var isArray = Array.isArray;
	
	/**
	 * @ngdoc function
	 * @name angular.isFunction
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is a `Function`.
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is a `Function`.
	 */
	function isFunction(value) {return typeof value === 'function';}
	
	
	/**
	 * Determines if a value is a regular expression object.
	 *
	 * @private
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is a `RegExp`.
	 */
	function isRegExp(value) {
	  return toString.call(value) === '[object RegExp]';
	}
	
	
	/**
	 * Checks if `obj` is a window object.
	 *
	 * @private
	 * @param {*} obj Object to check
	 * @returns {boolean} True if `obj` is a window obj.
	 */
	function isWindow(obj) {
	  return obj && obj.window === obj;
	}
	
	
	function isScope(obj) {
	  return obj && obj.$evalAsync && obj.$watch;
	}
	
	
	function isFile(obj) {
	  return toString.call(obj) === '[object File]';
	}
	
	
	function isFormData(obj) {
	  return toString.call(obj) === '[object FormData]';
	}
	
	
	function isBlob(obj) {
	  return toString.call(obj) === '[object Blob]';
	}
	
	
	function isBoolean(value) {
	  return typeof value === 'boolean';
	}
	
	
	function isPromiseLike(obj) {
	  return obj && isFunction(obj.then);
	}
	
	
	var TYPED_ARRAY_REGEXP = /^\[object (?:Uint8|Uint8Clamped|Uint16|Uint32|Int8|Int16|Int32|Float32|Float64)Array]$/;
	function isTypedArray(value) {
	  return value && isNumber(value.length) && TYPED_ARRAY_REGEXP.test(toString.call(value));
	}
	
	function isArrayBuffer(obj) {
	  return toString.call(obj) === '[object ArrayBuffer]';
	}
	
	
	var trim = function(value) {
	  return isString(value) ? value.trim() : value;
	};
	
	// Copied from:
	// http://docs.closure-library.googlecode.com/git/local_closure_goog_string_string.js.source.html#line1021
	// Prereq: s is a string.
	var escapeForRegexp = function(s) {
	  return s
	    .replace(/([-()[\]{}+?*.$^|,:#<!\\])/g, '\\$1')
	    // eslint-disable-next-line no-control-regex
	    .replace(/\x08/g, '\\x08');
	};
	
	
	/**
	 * @ngdoc function
	 * @name angular.isElement
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if a reference is a DOM element (or wrapped jQuery element).
	 *
	 * @param {*} value Reference to check.
	 * @returns {boolean} True if `value` is a DOM element (or wrapped jQuery element).
	 */
	function isElement(node) {
	  return !!(node &&
	    (node.nodeName  // We are a direct element.
	    || (node.prop && node.attr && node.find)));  // We have an on and find method part of jQuery API.
	}
	
	/**
	 * @param str 'key1,key2,...'
	 * @returns {object} in the form of {key1:true, key2:true, ...}
	 */
	function makeMap(str) {
	  var obj = {}, items = str.split(','), i;
	  for (i = 0; i < items.length; i++) {
	    obj[items[i]] = true;
	  }
	  return obj;
	}
	
	
	function nodeName_(element) {
	  return lowercase(element.nodeName || (element[0] && element[0].nodeName));
	}
	
	function includes(array, obj) {
	  return Array.prototype.indexOf.call(array, obj) !== -1;
	}
	
	function arrayRemove(array, value) {
	  var index = array.indexOf(value);
	  if (index >= 0) {
	    array.splice(index, 1);
	  }
	  return index;
	}
	
	/**
	 * @ngdoc function
	 * @name angular.copy
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Creates a deep copy of `source`, which should be an object or an array.
	 *
	 * * If no destination is supplied, a copy of the object or array is created.
	 * * If a destination is provided, all of its elements (for arrays) or properties (for objects)
	 *   are deleted and then all elements/properties from the source are copied to it.
	 * * If `source` is not an object or array (inc. `null` and `undefined`), `source` is returned.
	 * * If `source` is identical to `destination` an exception will be thrown.
	 *
	 * <br />
	 * <div class="alert alert-warning">
	 *   Only enumerable properties are taken into account. Non-enumerable properties (both on `source`
	 *   and on `destination`) will be ignored.
	 * </div>
	 *
	 * @param {*} source The source that will be used to make a copy.
	 *                   Can be any type, including primitives, `null`, and `undefined`.
	 * @param {(Object|Array)=} destination Destination into which the source is copied. If
	 *     provided, must be of the same type as `source`.
	 * @returns {*} The copy or updated `destination`, if `destination` was specified.
	 *
	 * @example
	  <example module="copyExample" name="angular-copy">
	    <file name="index.html">
	      <div ng-controller="ExampleController">
	        <form novalidate class="simple-form">
	          <label>Name: <input type="text" ng-model="user.name" /></label><br />
	          <label>Age:  <input type="number" ng-model="user.age" /></label><br />
	          Gender: <label><input type="radio" ng-model="user.gender" value="male" />male</label>
	                  <label><input type="radio" ng-model="user.gender" value="female" />female</label><br />
	          <button ng-click="reset()">RESET</button>
	          <button ng-click="update(user)">SAVE</button>
	        </form>
	        <pre>form = {{user | json}}</pre>
	        <pre>master = {{master | json}}</pre>
	      </div>
	    </file>
	    <file name="script.js">
	      // Module: copyExample
	      angular.
	        module('copyExample', []).
	        controller('ExampleController', ['$scope', function($scope) {
	          $scope.master = {};
	
	          $scope.reset = function() {
	            // Example with 1 argument
	            $scope.user = angular.copy($scope.master);
	          };
	
	          $scope.update = function(user) {
	            // Example with 2 arguments
	            angular.copy(user, $scope.master);
	          };
	
	          $scope.reset();
	        }]);
	    </file>
	  </example>
	 */
	function copy(source, destination) {
	  var stackSource = [];
	  var stackDest = [];
	
	  if (destination) {
	    if (isTypedArray(destination) || isArrayBuffer(destination)) {
	      throw ngMinErr('cpta', 'Can\'t copy! TypedArray destination cannot be mutated.');
	    }
	    if (source === destination) {
	      throw ngMinErr('cpi', 'Can\'t copy! Source and destination are identical.');
	    }
	
	    // Empty the destination object
	    if (isArray(destination)) {
	      destination.length = 0;
	    } else {
	      forEach(destination, function(value, key) {
	        if (key !== '$$hashKey') {
	          delete destination[key];
	        }
	      });
	    }
	
	    stackSource.push(source);
	    stackDest.push(destination);
	    return copyRecurse(source, destination);
	  }
	
	  return copyElement(source);
	
	  function copyRecurse(source, destination) {
	    var h = destination.$$hashKey;
	    var key;
	    if (isArray(source)) {
	      for (var i = 0, ii = source.length; i < ii; i++) {
	        destination.push(copyElement(source[i]));
	      }
	    } else if (isBlankObject(source)) {
	      // createMap() fast path --- Safe to avoid hasOwnProperty check because prototype chain is empty
	      for (key in source) {
	        destination[key] = copyElement(source[key]);
	      }
	    } else if (source && typeof source.hasOwnProperty === 'function') {
	      // Slow path, which must rely on hasOwnProperty
	      for (key in source) {
	        if (source.hasOwnProperty(key)) {
	          destination[key] = copyElement(source[key]);
	        }
	      }
	    } else {
	      // Slowest path --- hasOwnProperty can't be called as a method
	      for (key in source) {
	        if (hasOwnProperty.call(source, key)) {
	          destination[key] = copyElement(source[key]);
	        }
	      }
	    }
	    setHashKey(destination, h);
	    return destination;
	  }
	
	  function copyElement(source) {
	    // Simple values
	    if (!isObject(source)) {
	      return source;
	    }
	
	    // Already copied values
	    var index = stackSource.indexOf(source);
	    if (index !== -1) {
	      return stackDest[index];
	    }
	
	    if (isWindow(source) || isScope(source)) {
	      throw ngMinErr('cpws',
	        'Can\'t copy! Making copies of Window or Scope instances is not supported.');
	    }
	
	    var needsRecurse = false;
	    var destination = copyType(source);
	
	    if (destination === undefined) {
	      destination = isArray(source) ? [] : Object.create(getPrototypeOf(source));
	      needsRecurse = true;
	    }
	
	    stackSource.push(source);
	    stackDest.push(destination);
	
	    return needsRecurse
	      ? copyRecurse(source, destination)
	      : destination;
	  }
	
	  function copyType(source) {
	    switch (toString.call(source)) {
	      case '[object Int8Array]':
	      case '[object Int16Array]':
	      case '[object Int32Array]':
	      case '[object Float32Array]':
	      case '[object Float64Array]':
	      case '[object Uint8Array]':
	      case '[object Uint8ClampedArray]':
	      case '[object Uint16Array]':
	      case '[object Uint32Array]':
	        return new source.constructor(copyElement(source.buffer), source.byteOffset, source.length);
	
	      case '[object ArrayBuffer]':
	        // Support: IE10
	        if (!source.slice) {
	          // If we're in this case we know the environment supports ArrayBuffer
	          /* eslint-disable no-undef */
	          var copied = new ArrayBuffer(source.byteLength);
	          new Uint8Array(copied).set(new Uint8Array(source));
	          /* eslint-enable */
	          return copied;
	        }
	        return source.slice(0);
	
	      case '[object Boolean]':
	      case '[object Number]':
	      case '[object String]':
	      case '[object Date]':
	        return new source.constructor(source.valueOf());
	
	      case '[object RegExp]':
	        var re = new RegExp(source.source, source.toString().match(/[^/]*$/)[0]);
	        re.lastIndex = source.lastIndex;
	        return re;
	
	      case '[object Blob]':
	        return new source.constructor([source], {type: source.type});
	    }
	
	    if (isFunction(source.cloneNode)) {
	      return source.cloneNode(true);
	    }
	  }
	}
	
	
	/**
	 * @ngdoc function
	 * @name angular.equals
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Determines if two objects or two values are equivalent. Supports value types, regular
	 * expressions, arrays and objects.
	 *
	 * Two objects or values are considered equivalent if at least one of the following is true:
	 *
	 * * Both objects or values pass `===` comparison.
	 * * Both objects or values are of the same type and all of their properties are equal by
	 *   comparing them with `angular.equals`.
	 * * Both values are NaN. (In JavaScript, NaN == NaN => false. But we consider two NaN as equal)
	 * * Both values represent the same regular expression (In JavaScript,
	 *   /abc/ == /abc/ => false. But we consider two regular expressions as equal when their textual
	 *   representation matches).
	 *
	 * During a property comparison, properties of `function` type and properties with names
	 * that begin with `$` are ignored.
	 *
	 * Scope and DOMWindow objects are being compared only by identify (`===`).
	 *
	 * @param {*} o1 Object or value to compare.
	 * @param {*} o2 Object or value to compare.
	 * @returns {boolean} True if arguments are equal.
	 *
	 * @example
	   <example module="equalsExample" name="equalsExample">
	     <file name="index.html">
	      <div ng-controller="ExampleController">
	        <form novalidate>
	          <h3>User 1</h3>
	          Name: <input type="text" ng-model="user1.name">
	          Age: <input type="number" ng-model="user1.age">
	
	          <h3>User 2</h3>
	          Name: <input type="text" ng-model="user2.name">
	          Age: <input type="number" ng-model="user2.age">
	
	          <div>
	            <br/>
	            <input type="button" value="Compare" ng-click="compare()">
	          </div>
	          User 1: <pre>{{user1 | json}}</pre>
	          User 2: <pre>{{user2 | json}}</pre>
	          Equal: <pre>{{result}}</pre>
	        </form>
	      </div>
	    </file>
	    <file name="script.js">
	        angular.module('equalsExample', []).controller('ExampleController', ['$scope', function($scope) {
	          $scope.user1 = {};
	          $scope.user2 = {};
	          $scope.compare = function() {
	            $scope.result = angular.equals($scope.user1, $scope.user2);
	          };
	        }]);
	    </file>
	  </example>
	 */
	function equals(o1, o2) {
	  if (o1 === o2) return true;
	  if (o1 === null || o2 === null) return false;
	  // eslint-disable-next-line no-self-compare
	  if (o1 !== o1 && o2 !== o2) return true; // NaN === NaN
	  var t1 = typeof o1, t2 = typeof o2, length, key, keySet;
	  if (t1 === t2 && t1 === 'object') {
	    if (isArray(o1)) {
	      if (!isArray(o2)) return false;
	      if ((length = o1.length) === o2.length) {
	        for (key = 0; key < length; key++) {
	          if (!equals(o1[key], o2[key])) return false;
	        }
	        return true;
	      }
	    } else if (isDate(o1)) {
	      if (!isDate(o2)) return false;
	      return equals(o1.getTime(), o2.getTime());
	    } else if (isRegExp(o1)) {
	      if (!isRegExp(o2)) return false;
	      return o1.toString() === o2.toString();
	    } else {
	      if (isScope(o1) || isScope(o2) || isWindow(o1) || isWindow(o2) ||
	        isArray(o2) || isDate(o2) || isRegExp(o2)) return false;
	      keySet = createMap();
	      for (key in o1) {
	        if (key.charAt(0) === '$' || isFunction(o1[key])) continue;
	        if (!equals(o1[key], o2[key])) return false;
	        keySet[key] = true;
	      }
	      for (key in o2) {
	        if (!(key in keySet) &&
	            key.charAt(0) !== '$' &&
	            isDefined(o2[key]) &&
	            !isFunction(o2[key])) return false;
	      }
	      return true;
	    }
	  }
	  return false;
	}
	
	var csp = function() {
	  if (!isDefined(csp.rules)) {
	
	
	    var ngCspElement = (window.document.querySelector('[ng-csp]') ||
	                    window.document.querySelector('[data-ng-csp]'));
	
	    if (ngCspElement) {
	      var ngCspAttribute = ngCspElement.getAttribute('ng-csp') ||
	                    ngCspElement.getAttribute('data-ng-csp');
	      csp.rules = {
	        noUnsafeEval: !ngCspAttribute || (ngCspAttribute.indexOf('no-unsafe-eval') !== -1),
	        noInlineStyle: !ngCspAttribute || (ngCspAttribute.indexOf('no-inline-style') !== -1)
	      };
	    } else {
	      csp.rules = {
	        noUnsafeEval: noUnsafeEval(),
	        noInlineStyle: false
	      };
	    }
	  }
	
	  return csp.rules;
	
	  function noUnsafeEval() {
	    try {
	      // eslint-disable-next-line no-new, no-new-func
	      new Function('');
	      return false;
	    } catch (e) {
	      return true;
	    }
	  }
	};
	
	/**
	 * @ngdoc directive
	 * @module ng
	 * @name ngJq
	 *
	 * @element ANY
	 * @param {string=} ngJq the name of the library available under `window`
	 * to be used for angular.element
	 * @description
	 * Use this directive to force the angular.element library.  This should be
	 * used to force either jqLite by leaving ng-jq blank or setting the name of
	 * the jquery variable under window (eg. jQuery).
	 *
	 * Since angular looks for this directive when it is loaded (doesn't wait for the
	 * DOMContentLoaded event), it must be placed on an element that comes before the script
	 * which loads angular. Also, only the first instance of `ng-jq` will be used and all
	 * others ignored.
	 *
	 * @example
	 * This example shows how to force jqLite using the `ngJq` directive to the `html` tag.
	 ```html
	 <!doctype html>
	 <html ng-app ng-jq>
	 ...
	 ...
	 </html>
	 ```
	 * @example
	 * This example shows how to use a jQuery based library of a different name.
	 * The library name must be available at the top most 'window'.
	 ```html
	 <!doctype html>
	 <html ng-app ng-jq="jQueryLib">
	 ...
	 ...
	 </html>
	 ```
	 */
	var jq = function() {
	  if (isDefined(jq.name_)) return jq.name_;
	  var el;
	  var i, ii = ngAttrPrefixes.length, prefix, name;
	  for (i = 0; i < ii; ++i) {
	    prefix = ngAttrPrefixes[i];
	    el = window.document.querySelector('[' + prefix.replace(':', '\\:') + 'jq]');
	    if (el) {
	      name = el.getAttribute(prefix + 'jq');
	      break;
	    }
	  }
	
	  return (jq.name_ = name);
	};
	
	function concat(array1, array2, index) {
	  return array1.concat(slice.call(array2, index));
	}
	
	function sliceArgs(args, startIndex) {
	  return slice.call(args, startIndex || 0);
	}
	
	
	/**
	 * @ngdoc function
	 * @name angular.bind
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Returns a function which calls function `fn` bound to `self` (`self` becomes the `this` for
	 * `fn`). You can supply optional `args` that are prebound to the function. This feature is also
	 * known as [partial application](http://en.wikipedia.org/wiki/Partial_application), as
	 * distinguished from [function currying](http://en.wikipedia.org/wiki/Currying#Contrast_with_partial_function_application).
	 *
	 * @param {Object} self Context which `fn` should be evaluated in.
	 * @param {function()} fn Function to be bound.
	 * @param {...*} args Optional arguments to be prebound to the `fn` function call.
	 * @returns {function()} Function that wraps the `fn` with all the specified bindings.
	 */
	function bind(self, fn) {
	  var curryArgs = arguments.length > 2 ? sliceArgs(arguments, 2) : [];
	  if (isFunction(fn) && !(fn instanceof RegExp)) {
	    return curryArgs.length
	      ? function() {
	          return arguments.length
	            ? fn.apply(self, concat(curryArgs, arguments, 0))
	            : fn.apply(self, curryArgs);
	        }
	      : function() {
	          return arguments.length
	            ? fn.apply(self, arguments)
	            : fn.call(self);
	        };
	  } else {
	    // In IE, native methods are not functions so they cannot be bound (note: they don't need to be).
	    return fn;
	  }
	}
	
	
	function toJsonReplacer(key, value) {
	  var val = value;
	
	  if (typeof key === 'string' && key.charAt(0) === '$' && key.charAt(1) === '$') {
	    val = undefined;
	  } else if (isWindow(value)) {
	    val = '$WINDOW';
	  } else if (value &&  window.document === value) {
	    val = '$DOCUMENT';
	  } else if (isScope(value)) {
	    val = '$SCOPE';
	  }
	
	  return val;
	}
	
	
	/**
	 * @ngdoc function
	 * @name angular.toJson
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Serializes input into a JSON-formatted string. Properties with leading $$ characters will be
	 * stripped since angular uses this notation internally.
	 *
	 * @param {Object|Array|Date|string|number|boolean} obj Input to be serialized into JSON.
	 * @param {boolean|number} [pretty=2] If set to true, the JSON output will contain newlines and whitespace.
	 *    If set to an integer, the JSON output will contain that many spaces per indentation.
	 * @returns {string|undefined} JSON-ified string representing `obj`.
	 * @knownIssue
	 *
	 * The Safari browser throws a `RangeError` instead of returning `null` when it tries to stringify a `Date`
	 * object with an invalid date value. The only reliable way to prevent this is to monkeypatch the
	 * `Date.prototype.toJSON` method as follows:
	 *
	 * ```
	 * var _DatetoJSON = Date.prototype.toJSON;
	 * Date.prototype.toJSON = function() {
	 *   try {
	 *     return _DatetoJSON.call(this);
	 *   } catch(e) {
	 *     if (e instanceof RangeError) {
	 *       return null;
	 *     }
	 *     throw e;
	 *   }
	 * };
	 * ```
	 *
	 * See https://github.com/angular/angular.js/pull/14221 for more information.
	 */
	function toJson(obj, pretty) {
	  if (isUndefined(obj)) return undefined;
	  if (!isNumber(pretty)) {
	    pretty = pretty ? 2 : null;
	  }
	  return JSON.stringify(obj, toJsonReplacer, pretty);
	}
	
	
	/**
	 * @ngdoc function
	 * @name angular.fromJson
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Deserializes a JSON string.
	 *
	 * @param {string} json JSON string to deserialize.
	 * @returns {Object|Array|string|number} Deserialized JSON string.
	 */
	function fromJson(json) {
	  return isString(json)
	      ? JSON.parse(json)
	      : json;
	}
	
	
	var ALL_COLONS = /:/g;
	function timezoneToOffset(timezone, fallback) {
	  // Support: IE 9-11 only, Edge 13-14+
	  // IE/Edge do not "understand" colon (`:`) in timezone
	  timezone = timezone.replace(ALL_COLONS, '');
	  var requestedTimezoneOffset = Date.parse('Jan 01, 1970 00:00:00 ' + timezone) / 60000;
	  return isNumberNaN(requestedTimezoneOffset) ? fallback : requestedTimezoneOffset;
	}
	
	
	function addDateMinutes(date, minutes) {
	  date = new Date(date.getTime());
	  date.setMinutes(date.getMinutes() + minutes);
	  return date;
	}
	
	
	function convertTimezoneToLocal(date, timezone, reverse) {
	  reverse = reverse ? -1 : 1;
	  var dateTimezoneOffset = date.getTimezoneOffset();
	  var timezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);
	  return addDateMinutes(date, reverse * (timezoneOffset - dateTimezoneOffset));
	}
	
	
	/**
	 * @returns {string} Returns the string representation of the element.
	 */
	function startingTag(element) {
	  element = jqLite(element).clone();
	  try {
	    // turns out IE does not let you set .html() on elements which
	    // are not allowed to have children. So we just ignore it.
	    element.empty();
	  } catch (e) { /* empty */ }
	  var elemHtml = jqLite('<div>').append(element).html();
	  try {
	    return element[0].nodeType === NODE_TYPE_TEXT ? lowercase(elemHtml) :
	        elemHtml.
	          match(/^(<[^>]+>)/)[1].
	          replace(/^<([\w-]+)/, function(match, nodeName) {return '<' + lowercase(nodeName);});
	  } catch (e) {
	    return lowercase(elemHtml);
	  }
	
	}
	
	
	/////////////////////////////////////////////////
	
	/**
	 * Tries to decode the URI component without throwing an exception.
	 *
	 * @private
	 * @param str value potential URI component to check.
	 * @returns {boolean} True if `value` can be decoded
	 * with the decodeURIComponent function.
	 */
	function tryDecodeURIComponent(value) {
	  try {
	    return decodeURIComponent(value);
	  } catch (e) {
	    // Ignore any invalid uri component.
	  }
	}
	
	
	/**
	 * Parses an escaped url query string into key-value pairs.
	 * @returns {Object.<string,boolean|Array>}
	 */
	function parseKeyValue(/**string*/keyValue) {
	  var obj = {};
	  forEach((keyValue || '').split('&'), function(keyValue) {
	    var splitPoint, key, val;
	    if (keyValue) {
	      key = keyValue = keyValue.replace(/\+/g,'%20');
	      splitPoint = keyValue.indexOf('=');
	      if (splitPoint !== -1) {
	        key = keyValue.substring(0, splitPoint);
	        val = keyValue.substring(splitPoint + 1);
	      }
	      key = tryDecodeURIComponent(key);
	      if (isDefined(key)) {
	        val = isDefined(val) ? tryDecodeURIComponent(val) : true;
	        if (!hasOwnProperty.call(obj, key)) {
	          obj[key] = val;
	        } else if (isArray(obj[key])) {
	          obj[key].push(val);
	        } else {
	          obj[key] = [obj[key],val];
	        }
	      }
	    }
	  });
	  return obj;
	}
	
	function toKeyValue(obj) {
	  var parts = [];
	  forEach(obj, function(value, key) {
	    if (isArray(value)) {
	      forEach(value, function(arrayValue) {
	        parts.push(encodeUriQuery(key, true) +
	                   (arrayValue === true ? '' : '=' + encodeUriQuery(arrayValue, true)));
	      });
	    } else {
	    parts.push(encodeUriQuery(key, true) +
	               (value === true ? '' : '=' + encodeUriQuery(value, true)));
	    }
	  });
	  return parts.length ? parts.join('&') : '';
	}
	
	
	/**
	 * We need our custom method because encodeURIComponent is too aggressive and doesn't follow
	 * http://www.ietf.org/rfc/rfc3986.txt with regards to the character set (pchar) allowed in path
	 * segments:
	 *    segment       = *pchar
	 *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"
	 *    pct-encoded   = "%" HEXDIG HEXDIG
	 *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
	 *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
	 *                     / "*" / "+" / "," / ";" / "="
	 */
	function encodeUriSegment(val) {
	  return encodeUriQuery(val, true).
	             replace(/%26/gi, '&').
	             replace(/%3D/gi, '=').
	             replace(/%2B/gi, '+');
	}
	
	
	/**
	 * This method is intended for encoding *key* or *value* parts of query component. We need a custom
	 * method because encodeURIComponent is too aggressive and encodes stuff that doesn't have to be
	 * encoded per http://tools.ietf.org/html/rfc3986:
	 *    query         = *( pchar / "/" / "?" )
	 *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"
	 *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
	 *    pct-encoded   = "%" HEXDIG HEXDIG
	 *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
	 *                     / "*" / "+" / "," / ";" / "="
	 */
	function encodeUriQuery(val, pctEncodeSpaces) {
	  return encodeURIComponent(val).
	             replace(/%40/gi, '@').
	             replace(/%3A/gi, ':').
	             replace(/%24/g, '$').
	             replace(/%2C/gi, ',').
	             replace(/%3B/gi, ';').
	             replace(/%20/g, (pctEncodeSpaces ? '%20' : '+'));
	}
	
	var ngAttrPrefixes = ['ng-', 'data-ng-', 'ng:', 'x-ng-'];
	
	function getNgAttribute(element, ngAttr) {
	  var attr, i, ii = ngAttrPrefixes.length;
	  for (i = 0; i < ii; ++i) {
	    attr = ngAttrPrefixes[i] + ngAttr;
	    if (isString(attr = element.getAttribute(attr))) {
	      return attr;
	    }
	  }
	  return null;
	}
	
	function allowAutoBootstrap(document) {
	  if (!document.currentScript) {
	    return true;
	  }
	  var src = document.currentScript.getAttribute('src');
	  var link = document.createElement('a');
	  link.href = src;
	  if (document.location.origin === link.origin) {
	    // Same-origin resources are always allowed, even for non-whitelisted schemes.
	    return true;
	  }
	  // Disabled bootstrapping unless angular.js was loaded from a known scheme used on the web.
	  // This is to prevent angular.js bundled with browser extensions from being used to bypass the
	  // content security policy in web pages and other browser extensions.
	  switch (link.protocol) {
	    case 'http:':
	    case 'https:':
	    case 'ftp:':
	    case 'blob:':
	    case 'file:':
	    case 'data:':
	      return true;
	    default:
	      return false;
	  }
	}
	
	// Cached as it has to run during loading so that document.currentScript is available.
	var isAutoBootstrapAllowed = allowAutoBootstrap(window.document);
	
	/**
	 * @ngdoc directive
	 * @name ngApp
	 * @module ng
	 *
	 * @element ANY
	 * @param {angular.Module} ngApp an optional application
	 *   {@link angular.module module} name to load.
	 * @param {boolean=} ngStrictDi if this attribute is present on the app element, the injector will be
	 *   created in "strict-di" mode. This means that the application will fail to invoke functions which
	 *   do not use explicit function annotation (and are thus unsuitable for minification), as described
	 *   in {@link guide/di the Dependency Injection guide}, and useful debugging info will assist in
	 *   tracking down the root of these bugs.
	 *
	 * @description
	 *
	 * Use this directive to **auto-bootstrap** an AngularJS application. The `ngApp` directive
	 * designates the **root element** of the application and is typically placed near the root element
	 * of the page - e.g. on the `<body>` or `<html>` tags.
	 *
	 * There are a few things to keep in mind when using `ngApp`:
	 * - only one AngularJS application can be auto-bootstrapped per HTML document. The first `ngApp`
	 *   found in the document will be used to define the root element to auto-bootstrap as an
	 *   application. To run multiple applications in an HTML document you must manually bootstrap them using
	 *   {@link angular.bootstrap} instead.
	 * - AngularJS applications cannot be nested within each other.
	 * - Do not use a directive that uses {@link ng.$compile#transclusion transclusion} on the same element as `ngApp`.
	 *   This includes directives such as {@link ng.ngIf `ngIf`}, {@link ng.ngInclude `ngInclude`} and
	 *   {@link ngRoute.ngView `ngView`}.
	 *   Doing this misplaces the app {@link ng.$rootElement `$rootElement`} and the app's {@link auto.$injector injector},
	 *   causing animations to stop working and making the injector inaccessible from outside the app.
	 *
	 * You can specify an **AngularJS module** to be used as the root module for the application.  This
	 * module will be loaded into the {@link auto.$injector} when the application is bootstrapped. It
	 * should contain the application code needed or have dependencies on other modules that will
	 * contain the code. See {@link angular.module} for more information.
	 *
	 * In the example below if the `ngApp` directive were not placed on the `html` element then the
	 * document would not be compiled, the `AppController` would not be instantiated and the `{{ a+b }}`
	 * would not be resolved to `3`.
	 *
	 * `ngApp` is the easiest, and most common way to bootstrap an application.
	 *
	 <example module="ngAppDemo" name="ng-app">
	   <file name="index.html">
	   <div ng-controller="ngAppDemoController">
	     I can add: {{a}} + {{b}} =  {{ a+b }}
	   </div>
	   </file>
	   <file name="script.js">
	   angular.module('ngAppDemo', []).controller('ngAppDemoController', function($scope) {
	     $scope.a = 1;
	     $scope.b = 2;
	   });
	   </file>
	 </example>
	 *
	 * Using `ngStrictDi`, you would see something like this:
	 *
	 <example ng-app-included="true" name="strict-di">
	   <file name="index.html">
	   <div ng-app="ngAppStrictDemo" ng-strict-di>
	       <div ng-controller="GoodController1">
	           I can add: {{a}} + {{b}} =  {{ a+b }}
	
	           <p>This renders because the controller does not fail to
	              instantiate, by using explicit annotation style (see
	              script.js for details)
	           </p>
	       </div>
	
	       <div ng-controller="GoodController2">
	           Name: <input ng-model="name"><br />
	           Hello, {{name}}!
	
	           <p>This renders because the controller does not fail to
	              instantiate, by using explicit annotation style
	              (see script.js for details)
	           </p>
	       </div>
	
	       <div ng-controller="BadController">
	           I can add: {{a}} + {{b}} =  {{ a+b }}
	
	           <p>The controller could not be instantiated, due to relying
	              on automatic function annotations (which are disabled in
	              strict mode). As such, the content of this section is not
	              interpolated, and there should be an error in your web console.
	           </p>
	       </div>
	   </div>
	   </file>
	   <file name="script.js">
	   angular.module('ngAppStrictDemo', [])
	     // BadController will fail to instantiate, due to relying on automatic function annotation,
	     // rather than an explicit annotation
	     .controller('BadController', function($scope) {
	       $scope.a = 1;
	       $scope.b = 2;
	     })
	     // Unlike BadController, GoodController1 and GoodController2 will not fail to be instantiated,
	     // due to using explicit annotations using the array style and $inject property, respectively.
	     .controller('GoodController1', ['$scope', function($scope) {
	       $scope.a = 1;
	       $scope.b = 2;
	     }])
	     .controller('GoodController2', GoodController2);
	     function GoodController2($scope) {
	       $scope.name = 'World';
	     }
	     GoodController2.$inject = ['$scope'];
	   </file>
	   <file name="style.css">
	   div[ng-controller] {
	       margin-bottom: 1em;
	       -webkit-border-radius: 4px;
	       border-radius: 4px;
	       border: 1px solid;
	       padding: .5em;
	   }
	   div[ng-controller^=Good] {
	       border-color: #d6e9c6;
	       background-color: #dff0d8;
	       color: #3c763d;
	   }
	   div[ng-controller^=Bad] {
	       border-color: #ebccd1;
	       background-color: #f2dede;
	       color: #a94442;
	       margin-bottom: 0;
	   }
	   </file>
	 </example>
	 */
	function angularInit(element, bootstrap) {
	  var appElement,
	      module,
	      config = {};
	
	  // The element `element` has priority over any other element.
	  forEach(ngAttrPrefixes, function(prefix) {
	    var name = prefix + 'app';
	
	    if (!appElement && element.hasAttribute && element.hasAttribute(name)) {
	      appElement = element;
	      module = element.getAttribute(name);
	    }
	  });
	  forEach(ngAttrPrefixes, function(prefix) {
	    var name = prefix + 'app';
	    var candidate;
	
	    if (!appElement && (candidate = element.querySelector('[' + name.replace(':', '\\:') + ']'))) {
	      appElement = candidate;
	      module = candidate.getAttribute(name);
	    }
	  });
	  if (appElement) {
	    if (!isAutoBootstrapAllowed) {
	      window.console.error('Angular: disabling automatic bootstrap. <script> protocol indicates ' +
	          'an extension, document.location.href does not match.');
	      return;
	    }
	    config.strictDi = getNgAttribute(appElement, 'strict-di') !== null;
	    bootstrap(appElement, module ? [module] : [], config);
	  }
	}
	
	/**
	 * @ngdoc function
	 * @name angular.bootstrap
	 * @module ng
	 * @description
	 * Use this function to manually start up angular application.
	 *
	 * For more information, see the {@link guide/bootstrap Bootstrap guide}.
	 *
	 * Angular will detect if it has been loaded into the browser more than once and only allow the
	 * first loaded script to be bootstrapped and will report a warning to the browser console for
	 * each of the subsequent scripts. This prevents strange results in applications, where otherwise
	 * multiple instances of Angular try to work on the DOM.
	 *
	 * <div class="alert alert-warning">
	 * **Note:** Protractor based end-to-end tests cannot use this function to bootstrap manually.
	 * They must use {@link ng.directive:ngApp ngApp}.
	 * </div>
	 *
	 * <div class="alert alert-warning">
	 * **Note:** Do not bootstrap the app on an element with a directive that uses {@link ng.$compile#transclusion transclusion},
	 * such as {@link ng.ngIf `ngIf`}, {@link ng.ngInclude `ngInclude`} and {@link ngRoute.ngView `ngView`}.
	 * Doing this misplaces the app {@link ng.$rootElement `$rootElement`} and the app's {@link auto.$injector injector},
	 * causing animations to stop working and making the injector inaccessible from outside the app.
	 * </div>
	 *
	 * ```html
	 * <!doctype html>
	 * <html>
	 * <body>
	 * <div ng-controller="WelcomeController">
	 *   {{greeting}}
	 * </div>
	 *
	 * <script src="angular.js"></script>
	 * <script>
	 *   var app = angular.module('demo', [])
	 *   .controller('WelcomeController', function($scope) {
	 *       $scope.greeting = 'Welcome!';
	 *   });
	 *   angular.bootstrap(document, ['demo']);
	 * </script>
	 * </body>
	 * </html>
	 * ```
	 *
	 * @param {DOMElement} element DOM element which is the root of angular application.
	 * @param {Array<String|Function|Array>=} modules an array of modules to load into the application.
	 *     Each item in the array should be the name of a predefined module or a (DI annotated)
	 *     function that will be invoked by the injector as a `config` block.
	 *     See: {@link angular.module modules}
	 * @param {Object=} config an object for defining configuration options for the application. The
	 *     following keys are supported:
	 *
	 * * `strictDi` - disable automatic function annotation for the application. This is meant to
	 *   assist in finding bugs which break minified code. Defaults to `false`.
	 *
	 * @returns {auto.$injector} Returns the newly created injector for this app.
	 */
	function bootstrap(element, modules, config) {
	  if (!isObject(config)) config = {};
	  var defaultConfig = {
	    strictDi: false
	  };
	  config = extend(defaultConfig, config);
	  var doBootstrap = function() {
	    element = jqLite(element);
	
	    if (element.injector()) {
	      var tag = (element[0] === window.document) ? 'document' : startingTag(element);
	      // Encode angle brackets to prevent input from being sanitized to empty string #8683.
	      throw ngMinErr(
	          'btstrpd',
	          'App already bootstrapped with this element \'{0}\'',
	          tag.replace(/</,'&lt;').replace(/>/,'&gt;'));
	    }
	
	    modules = modules || [];
	    modules.unshift(['$provide', function($provide) {
	      $provide.value('$rootElement', element);
	    }]);
	
	    if (config.debugInfoEnabled) {
	      // Pushing so that this overrides `debugInfoEnabled` setting defined in user's `modules`.
	      modules.push(['$compileProvider', function($compileProvider) {
	        $compileProvider.debugInfoEnabled(true);
	      }]);
	    }
	
	    modules.unshift('ng');
	    var injector = createInjector(modules, config.strictDi);
	    injector.invoke(['$rootScope', '$rootElement', '$compile', '$injector',
	       function bootstrapApply(scope, element, compile, injector) {
	        scope.$apply(function() {
	          element.data('$injector', injector);
	          compile(element)(scope);
	        });
	      }]
	    );
	    return injector;
	  };
	
	  var NG_ENABLE_DEBUG_INFO = /^NG_ENABLE_DEBUG_INFO!/;
	  var NG_DEFER_BOOTSTRAP = /^NG_DEFER_BOOTSTRAP!/;
	
	  if (window && NG_ENABLE_DEBUG_INFO.test(window.name)) {
	    config.debugInfoEnabled = true;
	    window.name = window.name.replace(NG_ENABLE_DEBUG_INFO, '');
	  }
	
	  if (window && !NG_DEFER_BOOTSTRAP.test(window.name)) {
	    return doBootstrap();
	  }
	
	  window.name = window.name.replace(NG_DEFER_BOOTSTRAP, '');
	  angular.resumeBootstrap = function(extraModules) {
	    forEach(extraModules, function(module) {
	      modules.push(module);
	    });
	    return doBootstrap();
	  };
	
	  if (isFunction(angular.resumeDeferredBootstrap)) {
	    angular.resumeDeferredBootstrap();
	  }
	}
	
	/**
	 * @ngdoc function
	 * @name angular.reloadWithDebugInfo
	 * @module ng
	 * @description
	 * Use this function to reload the current application with debug information turned on.
	 * This takes precedence over a call to `$compileProvider.debugInfoEnabled(false)`.
	 *
	 * See {@link ng.$compileProvider#debugInfoEnabled} for more.
	 */
	function reloadWithDebugInfo() {
	  window.name = 'NG_ENABLE_DEBUG_INFO!' + window.name;
	  window.location.reload();
	}
	
	/**
	 * @name angular.getTestability
	 * @module ng
	 * @description
	 * Get the testability service for the instance of Angular on the given
	 * element.
	 * @param {DOMElement} element DOM element which is the root of angular application.
	 */
	function getTestability(rootElement) {
	  var injector = angular.element(rootElement).injector();
	  if (!injector) {
	    throw ngMinErr('test',
	      'no injector found for element argument to getTestability');
	  }
	  return injector.get('$$testability');
	}
	
	var SNAKE_CASE_REGEXP = /[A-Z]/g;
	function snake_case(name, separator) {
	  separator = separator || '_';
	  return name.replace(SNAKE_CASE_REGEXP, function(letter, pos) {
	    return (pos ? separator : '') + letter.toLowerCase();
	  });
	}
	
	var bindJQueryFired = false;
	function bindJQuery() {
	  var originalCleanData;
	
	  if (bindJQueryFired) {
	    return;
	  }
	
	  // bind to jQuery if present;
	  var jqName = jq();
	  jQuery = isUndefined(jqName) ? window.jQuery :   // use jQuery (if present)
	           !jqName             ? undefined     :   // use jqLite
	                                 window[jqName];   // use jQuery specified by `ngJq`
	
	  // Use jQuery if it exists with proper functionality, otherwise default to us.
	  // Angular 1.2+ requires jQuery 1.7+ for on()/off() support.
	  // Angular 1.3+ technically requires at least jQuery 2.1+ but it may work with older
	  // versions. It will not work for sure with jQuery <1.7, though.
	  if (jQuery && jQuery.fn.on) {
	    jqLite = jQuery;
	    extend(jQuery.fn, {
	      scope: JQLitePrototype.scope,
	      isolateScope: JQLitePrototype.isolateScope,
	      controller: JQLitePrototype.controller,
	      injector: JQLitePrototype.injector,
	      inheritedData: JQLitePrototype.inheritedData
	    });
	
	    // All nodes removed from the DOM via various jQuery APIs like .remove()
	    // are passed through jQuery.cleanData. Monkey-patch this method to fire
	    // the $destroy event on all removed nodes.
	    originalCleanData = jQuery.cleanData;
	    jQuery.cleanData = function(elems) {
	      var events;
	      for (var i = 0, elem; (elem = elems[i]) != null; i++) {
	        events = jQuery._data(elem, 'events');
	        if (events && events.$destroy) {
	          jQuery(elem).triggerHandler('$destroy');
	        }
	      }
	      originalCleanData(elems);
	    };
	  } else {
	    jqLite = JQLite;
	  }
	
	  angular.element = jqLite;
	
	  // Prevent double-proxying.
	  bindJQueryFired = true;
	}
	
	/**
	 * throw error if the argument is falsy.
	 */
	function assertArg(arg, name, reason) {
	  if (!arg) {
	    throw ngMinErr('areq', 'Argument \'{0}\' is {1}', (name || '?'), (reason || 'required'));
	  }
	  return arg;
	}
	
	function assertArgFn(arg, name, acceptArrayAnnotation) {
	  if (acceptArrayAnnotation && isArray(arg)) {
	      arg = arg[arg.length - 1];
	  }
	
	  assertArg(isFunction(arg), name, 'not a function, got ' +
	      (arg && typeof arg === 'object' ? arg.constructor.name || 'Object' : typeof arg));
	  return arg;
	}
	
	/**
	 * throw error if the name given is hasOwnProperty
	 * @param  {String} name    the name to test
	 * @param  {String} context the context in which the name is used, such as module or directive
	 */
	function assertNotHasOwnProperty(name, context) {
	  if (name === 'hasOwnProperty') {
	    throw ngMinErr('badname', 'hasOwnProperty is not a valid {0} name', context);
	  }
	}
	
	/**
	 * Return the value accessible from the object by path. Any undefined traversals are ignored
	 * @param {Object} obj starting object
	 * @param {String} path path to traverse
	 * @param {boolean} [bindFnToScope=true]
	 * @returns {Object} value as accessible by path
	 */
	//TODO(misko): this function needs to be removed
	function getter(obj, path, bindFnToScope) {
	  if (!path) return obj;
	  var keys = path.split('.');
	  var key;
	  var lastInstance = obj;
	  var len = keys.length;
	
	  for (var i = 0; i < len; i++) {
	    key = keys[i];
	    if (obj) {
	      obj = (lastInstance = obj)[key];
	    }
	  }
	  if (!bindFnToScope && isFunction(obj)) {
	    return bind(lastInstance, obj);
	  }
	  return obj;
	}
	
	/**
	 * Return the DOM siblings between the first and last node in the given array.
	 * @param {Array} array like object
	 * @returns {Array} the inputted object or a jqLite collection containing the nodes
	 */
	function getBlockNodes(nodes) {
	  // TODO(perf): update `nodes` instead of creating a new object?
	  var node = nodes[0];
	  var endNode = nodes[nodes.length - 1];
	  var blockNodes;
	
	  for (var i = 1; node !== endNode && (node = node.nextSibling); i++) {
	    if (blockNodes || nodes[i] !== node) {
	      if (!blockNodes) {
	        blockNodes = jqLite(slice.call(nodes, 0, i));
	      }
	      blockNodes.push(node);
	    }
	  }
	
	  return blockNodes || nodes;
	}
	
	
	/**
	 * Creates a new object without a prototype. This object is useful for lookup without having to
	 * guard against prototypically inherited properties via hasOwnProperty.
	 *
	 * Related micro-benchmarks:
	 * - http://jsperf.com/object-create2
	 * - http://jsperf.com/proto-map-lookup/2
	 * - http://jsperf.com/for-in-vs-object-keys2
	 *
	 * @returns {Object}
	 */
	function createMap() {
	  return Object.create(null);
	}
	
	function stringify(value) {
	  if (value == null) { // null || undefined
	    return '';
	  }
	  switch (typeof value) {
	    case 'string':
	      break;
	    case 'number':
	      value = '' + value;
	      break;
	    default:
	      if (hasCustomToString(value) && !isArray(value) && !isDate(value)) {
	        value = value.toString();
	      } else {
	        value = toJson(value);
	      }
	  }
	
	  return value;
	}
	
	var NODE_TYPE_ELEMENT = 1;
	var NODE_TYPE_ATTRIBUTE = 2;
	var NODE_TYPE_TEXT = 3;
	var NODE_TYPE_COMMENT = 8;
	var NODE_TYPE_DOCUMENT = 9;
	var NODE_TYPE_DOCUMENT_FRAGMENT = 11;
	
	/**
	 * @ngdoc type
	 * @name angular.Module
	 * @module ng
	 * @description
	 *
	 * Interface for configuring angular {@link angular.module modules}.
	 */
	
	function setupModuleLoader(window) {
	
	  var $injectorMinErr = minErr('$injector');
	  var ngMinErr = minErr('ng');
	
	  function ensure(obj, name, factory) {
	    return obj[name] || (obj[name] = factory());
	  }
	
	  var angular = ensure(window, 'angular', Object);
	
	  // We need to expose `angular.$$minErr` to modules such as `ngResource` that reference it during bootstrap
	  angular.$$minErr = angular.$$minErr || minErr;
	
	  return ensure(angular, 'module', function() {
	    /** @type {Object.<string, angular.Module>} */
	    var modules = {};
	
	    /**
	     * @ngdoc function
	     * @name angular.module
	     * @module ng
	     * @description
	     *
	     * The `angular.module` is a global place for creating, registering and retrieving Angular
	     * modules.
	     * All modules (angular core or 3rd party) that should be available to an application must be
	     * registered using this mechanism.
	     *
	     * Passing one argument retrieves an existing {@link angular.Module},
	     * whereas passing more than one argument creates a new {@link angular.Module}
	     *
	     *
	     * # Module
	     *
	     * A module is a collection of services, directives, controllers, filters, and configuration information.
	     * `angular.module` is used to configure the {@link auto.$injector $injector}.
	     *
	     * ```js
	     * // Create a new module
	     * var myModule = angular.module('myModule', []);
	     *
	     * // register a new service
	     * myModule.value('appName', 'MyCoolApp');
	     *
	     * // configure existing services inside initialization blocks.
	     * myModule.config(['$locationProvider', function($locationProvider) {
	     *   // Configure existing providers
	     *   $locationProvider.hashPrefix('!');
	     * }]);
	     * ```
	     *
	     * Then you can create an injector and load your modules like this:
	     *
	     * ```js
	     * var injector = angular.injector(['ng', 'myModule'])
	     * ```
	     *
	     * However it's more likely that you'll just use
	     * {@link ng.directive:ngApp ngApp} or
	     * {@link angular.bootstrap} to simplify this process for you.
	     *
	     * @param {!string} name The name of the module to create or retrieve.
	     * @param {!Array.<string>=} requires If specified then new module is being created. If
	     *        unspecified then the module is being retrieved for further configuration.
	     * @param {Function=} configFn Optional configuration function for the module. Same as
	     *        {@link angular.Module#config Module#config()}.
	     * @returns {angular.Module} new module with the {@link angular.Module} api.
	     */
	    return function module(name, requires, configFn) {
	      var assertNotHasOwnProperty = function(name, context) {
	        if (name === 'hasOwnProperty') {
	          throw ngMinErr('badname', 'hasOwnProperty is not a valid {0} name', context);
	        }
	      };
	
	      assertNotHasOwnProperty(name, 'module');
	      if (requires && modules.hasOwnProperty(name)) {
	        modules[name] = null;
	      }
	      return ensure(modules, name, function() {
	        if (!requires) {
	          throw $injectorMinErr('nomod', 'Module \'{0}\' is not available! You either misspelled ' +
	             'the module name or forgot to load it. If registering a module ensure that you ' +
	             'specify the dependencies as the second argument.', name);
	        }
	
	        /** @type {!Array.<Array.<*>>} */
	        var invokeQueue = [];
	
	        /** @type {!Array.<Function>} */
	        var configBlocks = [];
	
	        /** @type {!Array.<Function>} */
	        var runBlocks = [];
	
	        var config = invokeLater('$injector', 'invoke', 'push', configBlocks);
	
	        /** @type {angular.Module} */
	        var moduleInstance = {
	          // Private state
	          _invokeQueue: invokeQueue,
	          _configBlocks: configBlocks,
	          _runBlocks: runBlocks,
	
	          /**
	           * @ngdoc property
	           * @name angular.Module#requires
	           * @module ng
	           *
	           * @description
	           * Holds the list of modules which the injector will load before the current module is
	           * loaded.
	           */
	          requires: requires,
	
	          /**
	           * @ngdoc property
	           * @name angular.Module#name
	           * @module ng
	           *
	           * @description
	           * Name of the module.
	           */
	          name: name,
	
	
	          /**
	           * @ngdoc method
	           * @name angular.Module#provider
	           * @module ng
	           * @param {string} name service name
	           * @param {Function} providerType Construction function for creating new instance of the
	           *                                service.
	           * @description
	           * See {@link auto.$provide#provider $provide.provider()}.
	           */
	          provider: invokeLaterAndSetModuleName('$provide', 'provider'),
	
	          /**
	           * @ngdoc method
	           * @name angular.Module#factory
	           * @module ng
	           * @param {string} name service name
	           * @param {Function} providerFunction Function for creating new instance of the service.
	           * @description
	           * See {@link auto.$provide#factory $provide.factory()}.
	           */
	          factory: invokeLaterAndSetModuleName('$provide', 'factory'),
	
	          /**
	           * @ngdoc method
	           * @name angular.Module#service
	           * @module ng
	           * @param {string} name service name
	           * @param {Function} constructor A constructor function that will be instantiated.
	           * @description
	           * See {@link auto.$provide#service $provide.service()}.
	           */
	          service: invokeLaterAndSetModuleName('$provide', 'service'),
	
	          /**
	           * @ngdoc method
	           * @name angular.Module#value
	           * @module ng
	           * @param {string} name service name
	           * @param {*} object Service instance object.
	           * @description
	           * See {@link auto.$provide#value $provide.value()}.
	           */
	          value: invokeLater('$provide', 'value'),
	
	          /**
	           * @ngdoc method
	           * @name angular.Module#constant
	           * @module ng
	           * @param {string} name constant name
	           * @param {*} object Constant value.
	           * @description
	           * Because the constants are fixed, they get applied before other provide methods.
	           * See {@link auto.$provide#constant $provide.constant()}.
	           */
	          constant: invokeLater('$provide', 'constant', 'unshift'),
	
	           /**
	           * @ngdoc method
	           * @name angular.Module#decorator
	           * @module ng
	           * @param {string} name The name of the service to decorate.
	           * @param {Function} decorFn This function will be invoked when the service needs to be
	           *                           instantiated and should return the decorated service instance.
	           * @description
	           * See {@link auto.$provide#decorator $provide.decorator()}.
	           */
	          decorator: invokeLaterAndSetModuleName('$provide', 'decorator', configBlocks),
	
	          /**
	           * @ngdoc method
	           * @name angular.Module#animation
	           * @module ng
	           * @param {string} name animation name
	           * @param {Function} animationFactory Factory function for creating new instance of an
	           *                                    animation.
	           * @description
	           *
	           * **NOTE**: animations take effect only if the **ngAnimate** module is loaded.
	           *
	           *
	           * Defines an animation hook that can be later used with
	           * {@link $animate $animate} service and directives that use this service.
	           *
	           * ```js
	           * module.animation('.animation-name', function($inject1, $inject2) {
	           *   return {
	           *     eventName : function(element, done) {
	           *       //code to run the animation
	           *       //once complete, then run done()
	           *       return function cancellationFunction(element) {
	           *         //code to cancel the animation
	           *       }
	           *     }
	           *   }
	           * })
	           * ```
	           *
	           * See {@link ng.$animateProvider#register $animateProvider.register()} and
	           * {@link ngAnimate ngAnimate module} for more information.
	           */
	          animation: invokeLaterAndSetModuleName('$animateProvider', 'register'),
	
	          /**
	           * @ngdoc method
	           * @name angular.Module#filter
	           * @module ng
	           * @param {string} name Filter name - this must be a valid angular expression identifier
	           * @param {Function} filterFactory Factory function for creating new instance of filter.
	           * @description
	           * See {@link ng.$filterProvider#register $filterProvider.register()}.
	           *
	           * <div class="alert alert-warning">
	           * **Note:** Filter names must be valid angular {@link expression} identifiers, such as `uppercase` or `orderBy`.
	           * Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace
	           * your filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores
	           * (`myapp_subsection_filterx`).
	           * </div>
	           */
	          filter: invokeLaterAndSetModuleName('$filterProvider', 'register'),
	
	          /**
	           * @ngdoc method
	           * @name angular.Module#controller
	           * @module ng
	           * @param {string|Object} name Controller name, or an object map of controllers where the
	           *    keys are the names and the values are the constructors.
	           * @param {Function} constructor Controller constructor function.
	           * @description
	           * See {@link ng.$controllerProvider#register $controllerProvider.register()}.
	           */
	          controller: invokeLaterAndSetModuleName('$controllerProvider', 'register'),
	
	          /**
	           * @ngdoc method
	           * @name angular.Module#directive
	           * @module ng
	           * @param {string|Object} name Directive name, or an object map of directives where the
	           *    keys are the names and the values are the factories.
	           * @param {Function} directiveFactory Factory function for creating new instance of
	           * directives.
	           * @description
	           * See {@link ng.$compileProvider#directive $compileProvider.directive()}.
	           */
	          directive: invokeLaterAndSetModuleName('$compileProvider', 'directive'),
	
	          /**
	           * @ngdoc method
	           * @name angular.Module#component
	           * @module ng
	           * @param {string} name Name of the component in camel-case (i.e. myComp which will match as my-comp)
	           * @param {Object} options Component definition object (a simplified
	           *    {@link ng.$compile#directive-definition-object directive definition object})
	           *
	           * @description
	           * See {@link ng.$compileProvider#component $compileProvider.component()}.
	           */
	          component: invokeLaterAndSetModuleName('$compileProvider', 'component'),
	
	          /**
	           * @ngdoc method
	           * @name angular.Module#config
	           * @module ng
	           * @param {Function} configFn Execute this function on module load. Useful for service
	           *    configuration.
	           * @description
	           * Use this method to register work which needs to be performed on module loading.
	           * For more about how to configure services, see
	           * {@link providers#provider-recipe Provider Recipe}.
	           */
	          config: config,
	
	          /**
	           * @ngdoc method
	           * @name angular.Module#run
	           * @module ng
	           * @param {Function} initializationFn Execute this function after injector creation.
	           *    Useful for application initialization.
	           * @description
	           * Use this method to register work which should be performed when the injector is done
	           * loading all modules.
	           */
	          run: function(block) {
	            runBlocks.push(block);
	            return this;
	          }
	        };
	
	        if (configFn) {
	          config(configFn);
	        }
	
	        return moduleInstance;
	
	        /**
	         * @param {string} provider
	         * @param {string} method
	         * @param {String=} insertMethod
	         * @returns {angular.Module}
	         */
	        function invokeLater(provider, method, insertMethod, queue) {
	          if (!queue) queue = invokeQueue;
	          return function() {
	            queue[insertMethod || 'push']([provider, method, arguments]);
	            return moduleInstance;
	          };
	        }
	
	        /**
	         * @param {string} provider
	         * @param {string} method
	         * @returns {angular.Module}
	         */
	        function invokeLaterAndSetModuleName(provider, method, queue) {
	          if (!queue) queue = invokeQueue;
	          return function(recipeName, factoryFunction) {
	            if (factoryFunction && isFunction(factoryFunction)) factoryFunction.$$moduleName = name;
	            queue.push([provider, method, arguments]);
	            return moduleInstance;
	          };
	        }
	      });
	    };
	  });
	
	}
	
	/* global shallowCopy: true */
	
	/**
	 * Creates a shallow copy of an object, an array or a primitive.
	 *
	 * Assumes that there are no proto properties for objects.
	 */
	function shallowCopy(src, dst) {
	  if (isArray(src)) {
	    dst = dst || [];
	
	    for (var i = 0, ii = src.length; i < ii; i++) {
	      dst[i] = src[i];
	    }
	  } else if (isObject(src)) {
	    dst = dst || {};
	
	    for (var key in src) {
	      if (!(key.charAt(0) === '$' && key.charAt(1) === '$')) {
	        dst[key] = src[key];
	      }
	    }
	  }
	
	  return dst || src;
	}
	
	/* global toDebugString: true */
	
	function serializeObject(obj) {
	  var seen = [];
	
	  return JSON.stringify(obj, function(key, val) {
	    val = toJsonReplacer(key, val);
	    if (isObject(val)) {
	
	      if (seen.indexOf(val) >= 0) return '...';
	
	      seen.push(val);
	    }
	    return val;
	  });
	}
	
	function toDebugString(obj) {
	  if (typeof obj === 'function') {
	    return obj.toString().replace(/ \{[\s\S]*$/, '');
	  } else if (isUndefined(obj)) {
	    return 'undefined';
	  } else if (typeof obj !== 'string') {
	    return serializeObject(obj);
	  }
	  return obj;
	}
	
	/* global angularModule: true,
	  version: true,
	
	  $CompileProvider,
	
	  htmlAnchorDirective,
	  inputDirective,
	  inputDirective,
	  formDirective,
	  scriptDirective,
	  selectDirective,
	  optionDirective,
	  ngBindDirective,
	  ngBindHtmlDirective,
	  ngBindTemplateDirective,
	  ngClassDirective,
	  ngClassEvenDirective,
	  ngClassOddDirective,
	  ngCloakDirective,
	  ngControllerDirective,
	  ngFormDirective,
	  ngHideDirective,
	  ngIfDirective,
	  ngIncludeDirective,
	  ngIncludeFillContentDirective,
	  ngInitDirective,
	  ngNonBindableDirective,
	  ngPluralizeDirective,
	  ngRepeatDirective,
	  ngShowDirective,
	  ngStyleDirective,
	  ngSwitchDirective,
	  ngSwitchWhenDirective,
	  ngSwitchDefaultDirective,
	  ngOptionsDirective,
	  ngTranscludeDirective,
	  ngModelDirective,
	  ngListDirective,
	  ngChangeDirective,
	  patternDirective,
	  patternDirective,
	  requiredDirective,
	  requiredDirective,
	  minlengthDirective,
	  minlengthDirective,
	  maxlengthDirective,
	  maxlengthDirective,
	  ngValueDirective,
	  ngModelOptionsDirective,
	  ngAttributeAliasDirectives,
	  ngEventDirectives,
	
	  $AnchorScrollProvider,
	  $AnimateProvider,
	  $CoreAnimateCssProvider,
	  $$CoreAnimateJsProvider,
	  $$CoreAnimateQueueProvider,
	  $$AnimateRunnerFactoryProvider,
	  $$AnimateAsyncRunFactoryProvider,
	  $BrowserProvider,
	  $CacheFactoryProvider,
	  $ControllerProvider,
	  $DateProvider,
	  $DocumentProvider,
	  $$IsDocumentHiddenProvider,
	  $ExceptionHandlerProvider,
	  $FilterProvider,
	  $$ForceReflowProvider,
	  $InterpolateProvider,
	  $IntervalProvider,
	  $$HashMapProvider,
	  $HttpProvider,
	  $HttpParamSerializerProvider,
	  $HttpParamSerializerJQLikeProvider,
	  $HttpBackendProvider,
	  $xhrFactoryProvider,
	  $jsonpCallbacksProvider,
	  $LocationProvider,
	  $LogProvider,
	  $ParseProvider,
	  $RootScopeProvider,
	  $QProvider,
	  $$QProvider,
	  $$SanitizeUriProvider,
	  $SceProvider,
	  $SceDelegateProvider,
	  $SnifferProvider,
	  $TemplateCacheProvider,
	  $TemplateRequestProvider,
	  $$TestabilityProvider,
	  $TimeoutProvider,
	  $$RAFProvider,
	  $WindowProvider,
	  $$jqLiteProvider,
	  $$CookieReaderProvider
	*/
	
	
	/**
	 * @ngdoc object
	 * @name angular.version
	 * @module ng
	 * @description
	 * An object that contains information about the current AngularJS version.
	 *
	 * This object has the following properties:
	 *
	 * - `full` – `{string}` – Full version string, such as "0.9.18".
	 * - `major` – `{number}` – Major version number, such as "0".
	 * - `minor` – `{number}` – Minor version number, such as "9".
	 * - `dot` – `{number}` – Dot version number, such as "18".
	 * - `codeName` – `{string}` – Code name of the release, such as "jiggling-armfat".
	 */
	var version = {
	  // These placeholder strings will be replaced by grunt's `build` task.
	  // They need to be double- or single-quoted.
	  full: '1.6.1',
	  major: 1,
	  minor: 6,
	  dot: 1,
	  codeName: 'promise-rectification'
	};
	
	
	function publishExternalAPI(angular) {
	  extend(angular, {
	    'bootstrap': bootstrap,
	    'copy': copy,
	    'extend': extend,
	    'merge': merge,
	    'equals': equals,
	    'element': jqLite,
	    'forEach': forEach,
	    'injector': createInjector,
	    'noop': noop,
	    'bind': bind,
	    'toJson': toJson,
	    'fromJson': fromJson,
	    'identity': identity,
	    'isUndefined': isUndefined,
	    'isDefined': isDefined,
	    'isString': isString,
	    'isFunction': isFunction,
	    'isObject': isObject,
	    'isNumber': isNumber,
	    'isElement': isElement,
	    'isArray': isArray,
	    'version': version,
	    'isDate': isDate,
	    'lowercase': lowercase,
	    'uppercase': uppercase,
	    'callbacks': {$$counter: 0},
	    'getTestability': getTestability,
	    'reloadWithDebugInfo': reloadWithDebugInfo,
	    '$$minErr': minErr,
	    '$$csp': csp,
	    '$$encodeUriSegment': encodeUriSegment,
	    '$$encodeUriQuery': encodeUriQuery,
	    '$$stringify': stringify
	  });
	
	  angularModule = setupModuleLoader(window);
	
	  angularModule('ng', ['ngLocale'], ['$provide',
	    function ngModule($provide) {
	      // $$sanitizeUriProvider needs to be before $compileProvider as it is used by it.
	      $provide.provider({
	        $$sanitizeUri: $$SanitizeUriProvider
	      });
	      $provide.provider('$compile', $CompileProvider).
	        directive({
	            a: htmlAnchorDirective,
	            input: inputDirective,
	            textarea: inputDirective,
	            form: formDirective,
	            script: scriptDirective,
	            select: selectDirective,
	            option: optionDirective,
	            ngBind: ngBindDirective,
	            ngBindHtml: ngBindHtmlDirective,
	            ngBindTemplate: ngBindTemplateDirective,
	            ngClass: ngClassDirective,
	            ngClassEven: ngClassEvenDirective,
	            ngClassOdd: ngClassOddDirective,
	            ngCloak: ngCloakDirective,
	            ngController: ngControllerDirective,
	            ngForm: ngFormDirective,
	            ngHide: ngHideDirective,
	            ngIf: ngIfDirective,
	            ngInclude: ngIncludeDirective,
	            ngInit: ngInitDirective,
	            ngNonBindable: ngNonBindableDirective,
	            ngPluralize: ngPluralizeDirective,
	            ngRepeat: ngRepeatDirective,
	            ngShow: ngShowDirective,
	            ngStyle: ngStyleDirective,
	            ngSwitch: ngSwitchDirective,
	            ngSwitchWhen: ngSwitchWhenDirective,
	            ngSwitchDefault: ngSwitchDefaultDirective,
	            ngOptions: ngOptionsDirective,
	            ngTransclude: ngTranscludeDirective,
	            ngModel: ngModelDirective,
	            ngList: ngListDirective,
	            ngChange: ngChangeDirective,
	            pattern: patternDirective,
	            ngPattern: patternDirective,
	            required: requiredDirective,
	            ngRequired: requiredDirective,
	            minlength: minlengthDirective,
	            ngMinlength: minlengthDirective,
	            maxlength: maxlengthDirective,
	            ngMaxlength: maxlengthDirective,
	            ngValue: ngValueDirective,
	            ngModelOptions: ngModelOptionsDirective
	        }).
	        directive({
	          ngInclude: ngIncludeFillContentDirective
	        }).
	        directive(ngAttributeAliasDirectives).
	        directive(ngEventDirectives);
	      $provide.provider({
	        $anchorScroll: $AnchorScrollProvider,
	        $animate: $AnimateProvider,
	        $animateCss: $CoreAnimateCssProvider,
	        $$animateJs: $$CoreAnimateJsProvider,
	        $$animateQueue: $$CoreAnimateQueueProvider,
	        $$AnimateRunner: $$AnimateRunnerFactoryProvider,
	        $$animateAsyncRun: $$AnimateAsyncRunFactoryProvider,
	        $browser: $BrowserProvider,
	        $cacheFactory: $CacheFactoryProvider,
	        $controller: $ControllerProvider,
	        $document: $DocumentProvider,
	        $$isDocumentHidden: $$IsDocumentHiddenProvider,
	        $exceptionHandler: $ExceptionHandlerProvider,
	        $filter: $FilterProvider,
	        $$forceReflow: $$ForceReflowProvider,
	        $interpolate: $InterpolateProvider,
	        $interval: $IntervalProvider,
	        $http: $HttpProvider,
	        $httpParamSerializer: $HttpParamSerializerProvider,
	        $httpParamSerializerJQLike: $HttpParamSerializerJQLikeProvider,
	        $httpBackend: $HttpBackendProvider,
	        $xhrFactory: $xhrFactoryProvider,
	        $jsonpCallbacks: $jsonpCallbacksProvider,
	        $location: $LocationProvider,
	        $log: $LogProvider,
	        $parse: $ParseProvider,
	        $rootScope: $RootScopeProvider,
	        $q: $QProvider,
	        $$q: $$QProvider,
	        $sce: $SceProvider,
	        $sceDelegate: $SceDelegateProvider,
	        $sniffer: $SnifferProvider,
	        $templateCache: $TemplateCacheProvider,
	        $templateRequest: $TemplateRequestProvider,
	        $$testability: $$TestabilityProvider,
	        $timeout: $TimeoutProvider,
	        $window: $WindowProvider,
	        $$rAF: $$RAFProvider,
	        $$jqLite: $$jqLiteProvider,
	        $$HashMap: $$HashMapProvider,
	        $$cookieReader: $$CookieReaderProvider
	      });
	    }
	  ]);
	}
	
	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 *     Any commits to this file should be reviewed with security in mind.  *
	 *   Changes to this file can potentially create security vulnerabilities. *
	 *          An approval from 2 Core members with history of modifying      *
	 *                         this file is required.                          *
	 *                                                                         *
	 *  Does the change somehow allow for arbitrary javascript to be executed? *
	 *    Or allows for someone to change the prototype of built-in objects?   *
	 *     Or gives undesired access to variables likes document or window?    *
	 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
	
	/* global
	  JQLitePrototype: true,
	  BOOLEAN_ATTR: true,
	  ALIASED_ATTR: true
	*/
	
	//////////////////////////////////
	//JQLite
	//////////////////////////////////
	
	/**
	 * @ngdoc function
	 * @name angular.element
	 * @module ng
	 * @kind function
	 *
	 * @description
	 * Wraps a raw DOM element or HTML string as a [jQuery](http://jquery.com) element.
	 *
	 * If jQuery is available, `angular.element` is an alias for the
	 * [jQuery](http://api.jquery.com/jQuery/) function. If jQuery is not available, `angular.element`
	 * delegates to Angular's built-in subset of jQuery, called "jQuery lite" or **jqLite**.
	 *
	 * jqLite is a tiny, API-compatible subset of jQuery that allows
	 * Angular to manipulate the DOM in a cross-browser compatible way. jqLite implements only the most
	 * commonly needed functionality with the goal of having a very small footprint.
	 *
	 * To use `jQuery`, simply ensure it is loaded before the `angular.js` file. You can also use the
	 * {@link ngJq `ngJq`} directive to specify that jqlite should be used over jQuery, or to use a
	 * specific version of jQuery if multiple versions exist on the page.
	 *
	 * <div class="alert alert-info">**Note:** All element references in Angular are always wrapped with jQuery or
	 * jqLite (such as the element argument in a directive's compile / link function). They are never raw DOM references.</div>
	 *
	 * <div class="alert alert-warning">**Note:** Keep in mind that this function will not find elements
	 * by tag name / CSS selector. For lookups by tag name, try instead `angular.element(document).find(...)`
	 * or `$document.find()`, or use the standard DOM APIs, e.g. `document.querySelectorAll()`.</div>
	 *
	 * ## Angular's jqLite
	 * jqLite provides only the following jQuery methods:
	 *
	 * - [`addClass()`](http://api.jquery.com/addClass/) - Does not support a function as first argument
	 * - [`after()`](http://api.jquery.com/after/)
	 * - [`append()`](http://api.jquery.com/append/)
	 * - [`attr()`](http://api.jquery.com/attr/) - Does not support functions as parameters
	 * - [`bind()`](http://api.jquery.com/bind/) (_deprecated_, use [`on()`](http://api.jquery.com/on/)) - Does not support namespaces, selectors or eventData
	 * - [`children()`](http://api.jquery.com/children/) - Does not support selectors
	 * - [`clone()`](http://api.jquery.com/clone/)
	 * - [`contents()`](http://api.jquery.com/contents/)
	 * - [`css()`](http://api.jquery.com/css/) - Only retrieves inline-styles, does not call `getComputedStyle()`.
	 *   As a setter, does not convert numbers to strings or append 'px', and also does not have automatic property prefixing.
	 * - [`data()`](http://api.jquery.com/data/)
	 * - [`detach()`](http://api.jquery.com/detach/)
	 * - [`empty()`](http://api.jquery.com/empty/)
	 * - [`eq()`](http://api.jquery.com/eq/)
	 * - [`find()`](http://api.jquery.com/find/) - Limited to lookups by tag name
	 * - [`hasClass()`](http://api.jquery.com/hasClass/)
	 * - [`html()`](http://api.jquery.com/html/)
	 * - [`next()`](http://api.jquery.com/next/) - Does not support selectors
	 * - [`on()`](http://api.jquery.com/on/) - Does not support namespaces, selectors or eventData
	 * - [`off()`](http://api.jquery.com/off/) - Does not support namespaces, selectors or event object as parameter
	 * - [`one()`](http://api.jquery.com/one/) - Does not support namespaces or selectors
	 * - [`parent()`](http://api.jquery.com/parent/) - Does not support selectors
	 * - [`prepend()`](http://api.jquery.com/prepend/)
	 * - [`prop()`](http://api.jquery.com/prop/)
	 * - [`ready()`](http://api.jquery.com/ready/) (_deprecated_, use `angular.element(callback)` instead of `angular.element(document).ready(callback)`)
	 * - [`remove()`](http://api.jquery.com/remove/)
	 * - [`removeAttr()`](http://api.jquery.com/removeAttr/) - Does not support multiple attributes
	 * - [`removeClass()`](http://api.jquery.com/removeClass/) - Does not support a function as first argument
	 * - [`removeData()`](http://api.jquery.com/removeData/)
	 * - [`replaceWith()`](http://api.jquery.com/replaceWith/)
	 * - [`text()`](http://api.jquery.com/text/)
	 * - [`toggleClass()`](http://api.jquery.com/toggleClass/) - Does not support a function as first argument
	 * - [`triggerHandler()`](http://api.jquery.com/triggerHandler/) - Passes a dummy event object to handlers
	 * - [`unbind()`](http://api.jquery.com/unbind/) (_deprecated_, use [`off()`](http://api.jquery.com/off/)) - Does not support namespaces or event object as parameter
	 * - [`val()`](http://api.jquery.com/val/)
	 * - [`wrap()`](http://api.jquery.com/wrap/)
	 *
	 * ## jQuery/jqLite Extras
	 * Angular also provides the following additional methods and events to both jQuery and jqLite:
	 *
	 * ### Events
	 * - `$destroy` - AngularJS intercepts all jqLite/jQuery's DOM destruction apis and fires this event
	 *    on all DOM nodes being removed.  This can be used to clean up any 3rd party bindings to the DOM
	 *    element before it is removed.
	 *
	 * ### Methods
	 * - `controller(name)` - retrieves the controller of the current element or its parent. By default
	 *   retrieves controller associated with the `ngController` directive. If `name` is provided as
	 *   camelCase directive name, then the controller for this directive will be retrieved (e.g.
	 *   `'ngModel'`).
	 * - `injector()` - retrieves the injector of the current element or its parent.
	 * - `scope()` - retrieves the {@link ng.$rootScope.Scope scope} of the current
	 *   element or its parent. Requires {@link guide/production#disabling-debug-data Debug Data} to
	 *   be enabled.
	 * - `isolateScope()` - retrieves an isolate {@link ng.$rootScope.Scope scope} if one is attached directly to the
	 *   current element. This getter should be used only on elements that contain a directive which starts a new isolate
	 *   scope. Calling `scope()` on this element always returns the original non-isolate scope.
	 *   Requires {@link guide/production#disabling-debug-data Debug Data} to be enabled.
	 * - `inheritedData()` - same as `data()`, but walks up the DOM until a value is found or the top
	 *   parent element is reached.
	 *
	 * @knownIssue You cannot spy on `angular.element` if you are using Jasmine version 1.x. See
	 * https://github.com/angular/angular.js/issues/14251 for more information.
	 *
	 * @param {string|DOMElement} element HTML string or DOMElement to be wrapped into jQuery.
	 * @returns {Object} jQuery object.
	 */
	
	JQLite.expando = 'ng339';
	
	var jqCache = JQLite.cache = {},
	    jqId = 1;
	
	/*
	 * !!! This is an undocumented "private" function !!!
	 */
	JQLite._data = function(node) {
	  //jQuery always returns an object on cache miss
	  return this.cache[node[this.expando]] || {};
	};
	
	function jqNextId() { return ++jqId; }
	
	
	var DASH_LOWERCASE_REGEXP = /-([a-z])/g;
	var MS_HACK_REGEXP = /^-ms-/;
	var MOUSE_EVENT_MAP = { mouseleave: 'mouseout', mouseenter: 'mouseover' };
	var jqLiteMinErr = minErr('jqLite');
	
	/**
	 * Converts kebab-case to camelCase.
	 * There is also a special case for the ms prefix starting with a lowercase letter.
	 * @param name Name to normalize
	 */
	function cssKebabToCamel(name) {
	    return kebabToCamel(name.replace(MS_HACK_REGEXP, 'ms-'));
	}
	
	function fnCamelCaseReplace(all, letter) {
	  return letter.toUpperCase();
	}
	
	/**
	 * Converts kebab-case to camelCase.
	 * @param name Name to normalize
	 */
	function kebabToCamel(name) {
	  return name
	    .replace(DASH_LOWERCASE_REGEXP, fnCamelCaseReplace);
	}
	
	var SINGLE_TAG_REGEXP = /^<([\w-]+)\s*\/?>(?:<\/\1>|)$/;
	var HTML_REGEXP = /<|&#?\w+;/;
	var TAG_NAME_REGEXP = /<([\w:-]+)/;
	var XHTML_TAG_REGEXP = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi;
	
	var wrapMap = {
	  'option': [1, '<select multiple="multiple">', '</select>'],
	
	  'thead': [1, '<table>', '</table>'],
	  'col': [2, '<table><colgroup>', '</colgroup></table>'],
	  'tr': [2, '<table><tbody>', '</tbody></table>'],
	  'td': [3, '<table><tbody><tr>', '</tr></tbody></table>'],
	  '_default': [0, '', '']
	};
	
	wrapMap.optgroup = wrapMap.option;
	wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
	wrapMap.th = wrapMap.td;
	
	
	function jqLiteIsTextNode(html) {
	  return !HTML_REGEXP.test(html);
	}
	
	function jqLiteAcceptsData(node) {
	  // The window object can accept data but has no nodeType
	  // Otherwise we are only interested in elements (1) and documents (9)
	  var nodeType = node.nodeType;
	  return nodeType === NODE_TYPE_ELEMENT || !nodeType || nodeType === NODE_TYPE_DOCUMENT;
	}
	
	function jqLiteHasData(node) {
	  for (var key in jqCache[node.ng339]) {
	    return true;
	  }
	  return false;
	}
	
	function jqLiteCleanData(nodes) {
	  for (var i = 0, ii = nodes.length; i < ii; i++) {
	    jqLiteRemoveData(nodes[i]);
	  }
	}
	
	function jqLiteBuildFragment(html, context) {
	  var tmp, tag, wrap,
	      fragment = context.createDocumentFragment(),
	      nodes = [], i;
	
	  if (jqLiteIsTextNode(html)) {
	    // Convert non-html into a text node
	    nodes.push(context.createTextNode(html));
	  } else {
	    // Convert html into DOM nodes
	    tmp = fragment.appendChild(context.createElement('div'));
	    tag = (TAG_NAME_REGEXP.exec(html) || ['', ''])[1].toLowerCase();
	    wrap = wrapMap[tag] || wrapMap._default;
	    tmp.innerHTML = wrap[1] + html.replace(XHTML_TAG_REGEXP, '<$1></$2>') + wrap[2];
	
	    // Descend through wrappers to the right content
	    i = wrap[0];
	    while (i--) {
	      tmp = tmp.lastChild;
	    }
	
	    nodes = concat(nodes, tmp.childNodes);
	
	    tmp = fragment.firstChild;
	    tmp.textContent = '';
	  }
	
	  // Remove wrapper from fragment
	  fragment.textContent = '';
	  fragment.innerHTML = ''; // Clear inner HTML
	  forEach(nodes, function(node) {
	    fragment.appendChild(node);
	  });
	
	  return fragment;
	}
	
	function jqLiteParseHTML(html, context) {
	  context = context || window.document;
	  var parsed;
	
	  if ((parsed = SINGLE_TAG_REGEXP.exec(html))) {
	    return [context.createElement(parsed[1])];
	  }
	
	  if ((parsed = jqLiteBuildFragment(html, context))) {
	    return parsed.childNodes;
	  }
	
	  return [];
	}
	
	function jqLiteWrapNode(node, wrapper) {
	  var parent = node.parentNode;
	
	  if (parent) {
	    parent.replaceChild(wrapper, node);
	  }
	
	  wrapper.appendChild(node);
	}
	
	
	// IE9-11 has no method "contains" in SVG element and in Node.prototype. Bug #10259.
	var jqLiteContains = window.Node.prototype.contains || /** @this */ function(arg) {
	  // eslint-disable-next-line no-bitwise
	  return !!(this.compareDocumentPosition(arg) & 16);
	};
	
	/////////////////////////////////////////////
	function JQLite(element) {
	  if (element instanceof JQLite) {
	    return element;
	  }
	
	  var argIsString;
	
	  if (isString(element)) {
	    element = trim(element);
	    argIsString = true;
	  }
	  if (!(this instanceof JQLite)) {
	    if (argIsString && element.charAt(0) !== '<') {
	      throw jqLiteMinErr('nosel', 'Looking up elements via selectors is not supported by jqLite! See: http://docs.angularjs.org/api/angular.element');
	    }
	    return new JQLite(element);
	  }
	
	  if (argIsString) {
	    jqLiteAddNodes(this, jqLiteParseHTML(element));
	  } else if (isFunction(element)) {
	    jqLiteReady(element);
	  } else {
	    jqLiteAddNodes(this, element);
	  }
	}
	
	function jqLiteClone(element) {
	  return element.cloneNode(true);
	}
	
	function jqLiteDealoc(element, onlyDescendants) {
	  if (!onlyDescendants) jqLiteRemoveData(element);
	
	  if (element.querySelectorAll) {
	    var descendants = element.querySelectorAll('*');
	    for (var i = 0, l = descendants.length; i < l; i++) {
	      jqLiteRemoveData(descendants[i]);
	    }
	  }
	}
	
	function jqLiteOff(element, type, fn, unsupported) {
	  if (isDefined(unsupported)) throw jqLiteMinErr('offargs', 'jqLite#off() does not support the `selector` argument');
	
	  var expandoStore = jqLiteExpandoStore(element);
	  var events = expandoStore && expandoStore.events;
	  var handle = expandoStore && expandoStore.handle;
	
	  if (!handle) return; //no listeners registered
	
	  if (!type) {
	    for (type in events) {
	      if (type !== '$destroy') {
	        element.removeEventListener(type, handle);
	      }
	      delete events[type];
	    }
	  } else {
	
	    var removeHandler = function(type) {
	      var listenerFns = events[type];
	      if (isDefined(fn)) {
	        arrayRemove(listenerFns || [], fn);
	      }
	      if (!(isDefined(fn) && listenerFns && listenerFns.length > 0)) {
	        element.removeEventListener(type, handle);
	        delete events[type];
	      }
	    };
	
	    forEach(type.split(' '), function(type) {
	      removeHandler(type);
	      if (MOUSE_EVENT_MAP[type]) {
	        removeHandler(MOUSE_EVENT_MAP[type]);
	      }
	    });
	  }
	}
	
	function jqLiteRemoveData(element, name) {
	  var expandoId = element.ng339;
	  var expandoStore = expandoId && jqCache[expandoId];
	
	  if (expandoStore) {
	    if (name) {
	      delete expandoStore.data[name];
	      return;
	    }
	
	    if (expandoStore.handle) {
	      if (expandoStore.events.$destroy) {
	        expandoStore.handle({}, '$destroy');
	      }
	      jqLiteOff(element);
	    }
	    delete jqCache[expandoId];
	    element.ng339 = undefined; // don't delete DOM expandos. IE and Chrome don't like it
	  }
	}
	
	
	function jqLiteExpandoStore(element, createIfNecessary) {
	  var expandoId = element.ng339,
	      expandoStore = expandoId && jqCache[expandoId];
	
	  if (createIfNecessary && !expandoStore) {
	    element.ng339 = expandoId = jqNextId();
	    expandoStore = jqCache[expandoId] = {events: {}, data: {}, handle: undefined};
	  }
	
	  return expandoStore;
	}
	
	
	function jqLiteData(element, key, value) {
	  if (jqLiteAcceptsData(element)) {
	    var prop;
	
	    var isSimpleSetter = isDefined(value);
	    var isSimpleGetter = !isSimpleSetter && key && !isObject(key);
	    var massGetter = !key;
	    var expandoStore = jqLiteExpandoStore(element, !isSimpleGetter);
	    var data = expandoStore && expandoStore.data;
	
	    if (isSimpleSetter) { // data('key', value)
	      data[kebabToCamel(key)] = value;
	    } else {
	      if (massGetter) {  // data()
	        return data;
	      } else {
	        if (isSimpleGetter) { // data('key')
	          // don't force creation of expandoStore if it doesn't exist yet
	          return data && data[kebabToCamel(key)];
	        } else { // mass-setter: data({key1: val1, key2: val2})
	          for (prop in key) {
	            data[kebabToCamel(prop)] = key[prop];
	          }
	        }
	      }
	    }
	  }
	}
	
	function jqLiteHasClass(element, selector) {
	  if (!element.getAttribute) return false;
	  return ((' ' + (element.getAttribute('class') || '') + ' ').replace(/[\n\t]/g, ' ').
	      indexOf(' ' + selector + ' ') > -1);
	}
	
	function jqLiteRemoveClass(element, cssClasses) {
	  if (cssClasses && element.setAttribute) {
	    forEach(cssClasses.split(' '), function(cssClass) {
	      element.setAttribute('class', trim(
	          (' ' + (element.getAttribute('class') || '') + ' ')
	          .replace(/[\n\t]/g, ' ')
	          .replace(' ' + trim(cssClass) + ' ', ' '))
	      );
	    });
	  }
	}
	
	function jqLiteAddClass(element, cssClasses) {
	  if (cssClasses && element.setAttribute) {
	    var existingClasses = (' ' + (element.getAttribute('class') || '') + ' ')
	                            .replace(/[\n\t]/g, ' ');
	
	    forEach(cssClasses.split(' '), function(cssClass) {
	      cssClass = trim(cssClass);
	      if (existingClasses.indexOf(' ' + cssClass + ' ') === -1) {
	        existingClasses += cssClass + ' ';
	      }
	    });
	
	    element.setAttribute('class', trim(existingClasses));
	  }
	}
	
	
	function jqLiteAddNodes(root, elements) {
	  // THIS CODE IS VERY HOT. Don't make changes without benchmarking.
	
	  if (elements) {
	
	    // if a Node (the most common case)
	    if (elements.nodeType) {
	      root[root.length++] = elements;
	    } else {
	      var length = elements.length;
	
	      // if an Array or NodeList and not a Window
	      if (typeof length === 'number' && elements.window !== elements) {
	        if (length) {
	          for (var i = 0; i < length; i++) {
	            root[root.length++] = elements[i];
	          }
	        }
	      } else {
	        root[root.length++] = elements;
	      }
	    }
	  }
	}
	
	
	function jqLiteController(element, name) {
	  return jqLiteInheritedData(element, '$' + (name || 'ngController') + 'Controller');
	}
	
	function jqLiteInheritedData(element, name, value) {
	  // if element is the document object work with the html element instead
	  // this makes $(document).scope() possible
	  if (element.nodeType === NODE_TYPE_DOCUMENT) {
	    element = element.documentElement;
	  }
	  var names = isArray(name) ? name : [name];
	
	  while (element) {
	    for (var i = 0, ii = names.length; i < ii; i++) {
	      if (isDefined(value = jqLite.data(element, names[i]))) return value;
	    }
	
	    // If dealing with a document fragment node with a host element, and no parent, use the host
	    // element as the parent. This enables directives within a Shadow DOM or polyfilled Shadow DOM
	    // to lookup parent controllers.
	    element = element.parentNode || (element.nodeType === NODE_TYPE_DOCUMENT_FRAGMENT && element.host);
	  }
	}
	
	function jqLiteEmpty(element) {
	  jqLiteDealoc(element, true);
	  while (element.firstChild) {
	    element.removeChild(element.firstChild);
	  }
	}
	
	function jqLiteRemove(element, keepData) {
	  if (!keepData) jqLiteDealoc(element);
	  var parent = element.parentNode;
	  if (parent) parent.removeChild(element);
	}
	
	
	function jqLiteDocumentLoaded(action, win) {
	  win = win || window;
	  if (win.document.readyState === 'complete') {
	    // Force the action to be run async for consistent behavior
	    // from the action's point of view
	    // i.e. it will definitely not be in a $apply
	    win.setTimeout(action);
	  } else {
	    // No need to unbind this handler as load is only ever called once
	    jqLite(win).on('load', action);
	  }
	}
	
	function jqLiteReady(fn) {
	  function trigger() {
	    window.document.removeEventListener('DOMContentLoaded', trigger);
	    window.removeEventListener('load', trigger);
	    fn();
	  }
	
	  // check if document is already loaded
	  if (window.document.readyState === 'complete') {
	    window.setTimeout(fn);
	  } else {
	    // We can not use jqLite since we are not done loading and jQuery could be loaded later.
	
	    // Works for modern browsers and IE9
	    window.document.addEventListener('DOMContentLoaded', trigger);
	
	    // Fallback to window.onload for others
	    window.addEventListener('load', trigger);
	  }
	}
	
	//////////////////////////////////////////
	// Functions which are declared directly.
	//////////////////////////////////////////
	var JQLitePrototype = JQLite.prototype = {
	  ready: jqLiteReady,
	  toString: function() {
	    var value = [];
	    forEach(this, function(e) { value.push('' + e);});
	    return '[' + value.join(', ') + ']';
	  },
	
	  eq: function(index) {
	      return (index >= 0) ? jqLite(this[index]) : jqLite(this[this.length + index]);
	  },
	
	  length: 0,
	  push: push,
	  sort: [].sort,
	  splice: [].splice
	};
	
	//////////////////////////////////////////
	// Functions iterating getter/setters.
	// these functions return self on setter and
	// value on get.
	//////////////////////////////////////////
	var BOOLEAN_ATTR = {};
	forEach('multiple,selected,checked,disabled,readOnly,required,open'.split(','), function(value) {
	  BOOLEAN_ATTR[lowercase(value)] = value;
	});
	var BOOLEAN_ELEMENTS = {};
	forEach('input,select,option,textarea,button,form,details'.split(','), function(value) {
	  BOOLEAN_ELEMENTS[value] = true;
	});
	var ALIASED_ATTR = {
	  'ngMinlength': 'minlength',
	  'ngMaxlength': 'maxlength',
	  'ngMin': 'min',
	  'ngMax': 'max',
	  'ngPattern': 'pattern',
	  'ngStep': 'step'
	};
	
	function getBooleanAttrName(element, name) {
	  // check dom last since we will most likely fail on name
	  var booleanAttr = BOOLEAN_ATTR[name.toLowerCase()];
	
	  // booleanAttr is here twice to minimize DOM access
	  return booleanAttr && BOOLEAN_ELEMENTS[nodeName_(element)] && booleanAttr;
	}
	
	function getAliasedAttrName(name) {
	  return ALIASED_ATTR[name];
	}
	
	forEach({
	  data: jqLiteData,
	  removeData: jqLiteRemoveData,
	  hasData: jqLiteHasData,
	  cleanData: jqLiteCleanData
	}, function(fn, name) {
	  JQLite[name] = fn;
	});
	
	forEach({
	  data: jqLiteData,
	  inheritedData: jqLiteInheritedData,
	
	  scope: function(element) {
	    // Can't use jqLiteData here directly so we stay compatible with jQuery!
	    return jqLite.data(element, '$scope') || jqLiteInheritedData(element.parentNode || element, ['$isolateScope', '$scope']);
	  },
	
	  isolateScope: function(element) {
	    // Can't use jqLiteData here directly so we stay compatible with jQuery!
	    return jqLite.data(element, '$isolateScope') || jqLite.data(element, '$isolateScopeNoTemplate');
	  },
	
	  controller: jqLiteController,
	
	  injector: function(element) {
	    return jqLiteInheritedData(element, '$injector');
	  },
	
	  removeAttr: function(element, name) {
	    element.removeAttribute(name);
	  },
	
	  hasClass: jqLiteHasClass,
	
	  css: function(element, name, value) {
	    name = cssKebabToCamel(name);
	
	    if (isDefined(value)) {
	      element.style[name] = value;
	    } else {
	      return element.style[name];
	    }
	  },
	
	  attr: function(element, name, value) {
	    var ret;
	    var nodeType = element.nodeType;
	    if (nodeType === NODE_TYPE_TEXT || nodeType === NODE_TYPE_ATTRIBUTE || nodeType === NODE_TYPE_COMMENT ||
	      !element.getAttribute) {
	      return;
	    }
	
	    var lowercasedName = lowercase(name);
	    var isBooleanAttr = BOOLEAN_ATTR[lowercasedName];
	
	    if (isDefined(value)) {
	      // setter
	
	      if (value === null || (value === false && isBooleanAttr)) {
	        element.removeAttribute(name);
	      } else {
	        element.setAttribute(name, isBooleanAttr ? lowercasedName : value);
	      }
	    } else {
	      // getter
	
	      ret = element.getAttribute(name);
	
	      if (isBooleanAttr && ret !== null) {
	        ret = lowercasedName;
	      }
	      // Normalize non-existing attributes to undefined (as jQuery).
	      return ret === null ? undefined : ret;
	    }
	  },
	
	  prop: function(element, name, value) {
	    if (isDefined(value)) {
	      element[name] = value;
	    } else {
	      return element[name];
	    }
	  },
	
	  text: (function() {
	    getText.$dv = '';
	    return getText;
	
	    function getText(element, value) {
	      if (isUndefined(value)) {
	        var nodeType = element.nodeType;
	        return (nodeType === NODE_TYPE_ELEMENT || nodeType === NODE_TYPE_TEXT) ? element.textContent : '';
	      }
	      element.textContent = value;
	    }
	  })(),
	
	  val: function(element, value) {
	    if (isUndefined(value)) {
	      if (element.multiple && nodeName_(element) === 'select') {
	        var result = [];
	        forEach(element.options, function(option) {
	          if (option.selected) {
	            result.push(option.value || option.text);
	          }
	        });
	        return result;
	      }
	      return element.value;
	    }
	    element.value = value;
	  },
	
	  html: function(element, value) {
	    if (isUndefined(value)) {
	      return element.innerHTML;
	    }
	    jqLiteDealoc(element, true);
	    element.innerHTML = value;
	  },
	
	  empty: jqLiteEmpty
	}, function(fn, name) {
	  /**
	   * Properties: writes return selection, reads return first value
	   */
	  JQLite.prototype[name] = function(arg1, arg2) {
	    var i, key;
	    var nodeCount = this.length;
	
	    // jqLiteHasClass has only two arguments, but is a getter-only fn, so we need to special-case it
	    // in a way that survives minification.
	    // jqLiteEmpty takes no arguments but is a setter.
	    if (fn !== jqLiteEmpty &&
	        (isUndefined((fn.length === 2 && (fn !== jqLiteHasClass && fn !== jqLiteController)) ? arg1 : arg2))) {
	      if (isObject(arg1)) {
	
	        // we are a write, but the object properties are the key/values
	        for (i = 0; i < nodeCount; i++) {
	          if (fn === jqLiteData) {
	            // data() takes the whole object in jQuery
	            fn(this[i], arg1);
	          } else {
	            for (key in arg1) {
	              fn(this[i], key, arg1[key]);
	            }
	          }
	        }
	        // return self for chaining
	        return this;
	      } else {
	        // we are a read, so read the first child.
	        // TODO: do we still need this?
	        var value = fn.$dv;
	        // Only if we have $dv do we iterate over all, otherwise it is just the first element.
	        var jj = (isUndefined(value)) ? Math.min(nodeCount, 1) : nodeCount;
	        for (var j = 0; j < jj; j++) {
	          var nodeValue = fn(this[j], arg1, arg2);
	          value = value ? value + nodeValue : nodeValue;
	        }
	        return value;
	      }
	    } else {
	      // we are a write, so apply to all children
	      for (i = 0; i < nodeCount; i++) {
	        fn(this[i], arg1, arg2);
	      }
	      // return self for chaining
	      return this;
	    }
	  };
	});
	
	function createEventHandler(element, events) {
	  var eventHandler = function(event, type) {
	    // jQuery specific api
	    event.isDefaultPrevented = function() {
	      return event.defaultPrevented;
	    };
	
	    var eventFns = events[type || event.type];
	    var eventFnsLength = eventFns ? eventFns.length : 0;
	
	    if (!eventFnsLength) return;
	
	    if (isUndefined(event.immediatePropagationStopped)) {
	      var originalStopImmediatePropagation = event.stopImmediatePropagation;
	      event.stopImmediatePropagation = function() {
	        event.immediatePropagationStopped = true;
	
	        if (event.stopPropagation) {
	          event.stopPropagation();
	        }
	
	        if (originalStopImmediatePropagation) {
	          originalStopImmediatePropagation.call(event);
	        }
	      };
	    }
	
	    event.isImmediatePropagationStopped = function() {
	      return event.immediatePropagationStopped === true;
	    };
	
	    // Some events have special handlers that wrap the real handler
	    var handlerWrapper = eventFns.specialHandlerWrapper || defaultHandlerWrapper;
	
	    // Copy event handlers in case event handlers array is modified during execution.
	    if ((eventFnsLength > 1)) {
	      eventFns = shallowCopy(eventFns);
	    }
	
	    for (var i = 0; i < eventFnsLength; i++) {
	      if (!event.isImmediatePropagationStopped()) {
	        handlerWrapper(element, event, eventFns[i]);
	      }
	    }
	  };
	
	  // TODO: this is a hack for angularMocks/clearDataCache that makes it possible to deregister all
	  //       events on `element`
	  eventHandler.elem = element;
	  return eventHandler;
	}
	
	function defaultHandlerWrapper(element, event, handler) {
	  handler.call(element, event);
	}
	
	function specialMouseHandlerWrapper(target, event, handler) {
	  // Refer to jQuery's implementation of mouseenter & mouseleave
	  // Read about mouseenter and mouseleave:
	  // http://www.quirksmode.org/js/events_mouse.html#link8
	  var related = event.relatedTarget;
	  // For mousenter/leave call the handler if related is outside the target.
	  // NB: No relatedTarget if the mouse left/entered the browser window
	  if (!related || (related !== target && !jqLiteContains.call(target, related))) {
	    handler.call(target, event);
	  }
	}
	
	//////////////////////////////////////////
	// Functions iterating traversal.
	// These functions chain results into a single
	// selector.
	//////////////////////////////////////////
	forEach({
	  removeData: jqLiteRemoveData,
	
	  on: function jqLiteOn(element, type, fn, unsupported) {
	    if (isDefined(unsupported)) throw jqLiteMinErr('onargs', 'jqLite#on() does not support the `selector` or `eventData` parameters');
	
	    // Do not add event handlers to non-elements because they will not be cleaned up.
	    if (!jqLiteAcceptsData(element)) {
	      return;
	    }
	
	    var expandoStore = jqLiteExpandoStore(element, true);
	    var events = expandoStore.events;
	    var handle = expandoStore.handle;
	
	    if (!handle) {
	      handle = expandoStore.handle = createEventHandler(element, events);
	    }
	
	    // http://jsperf.com/string-indexof-vs-split
	    var types = type.indexOf(' ') >= 0 ? type.split(' ') : [type];
	    var i = types.length;
	
	    var addHandler = function(type, specialHandlerWrapper, noEventListener) {
	      var eventFns = events[type];
	
	      if (!eventFns) {
	        eventFns = events[type] = [];
	        eventFns.specialHandlerWrapper = specialHandlerWrapper;
	        if (type !== '$destroy' && !noEventListener) {
	          element.addEventListener(type, handle);
	        }
	      }
	
	      eventFns.push(fn);
	    };
	
	    while (i--) {
	      type = types[i];
	      if (MOUSE_EVENT_MAP[type]) {
	        addHandler(MOUSE_EVENT_MAP[type], specialMouseHandlerWrapper);
	        addHandler(type, undefined, true);
	      } else {
	        addHandler(type);
	      }
	    }
	  },
	
	  off: jqLiteOff,
	
	  one: function(element, type, fn) {
	    element = jqLite(element);
	
	    //add the listener twice so that when it is called
	    //you can remove the original function and still be
	    //able to call element.off(ev, fn) normally
	    element.on(type, function onFn() {
	      element.off(type, fn);
	      element.off(type, onFn);
	    });
	    element.on(type, fn);
	  },
	
	  replaceWith: function(element, replaceNode) {
	    var index, parent = element.parentNode;
	    jqLiteDealoc(element);
	    forEach(new JQLite(replaceNode), function(node) {
	      if (index) {
	        parent.insertBefore(node, index.nextSibling);
	      } else {
	        parent.replaceChild(node, element);
	      }
	      index = node;
	    });
	  },
	
	  children: function(element) {
	    var children = [];
	    forEach(element.childNodes, function(element) {
	      if (element.nodeType === NODE_TYPE_ELEMENT) {
	        children.push(element);
	      }
	    });
	    return children;
	  },
	
	  contents: function(element) {
	    return element.contentDocument || element.childNodes || [];
	  },
	
	  append: function(element, node) {
	    var nodeType = element.nodeType;
	    if (nodeType !== NODE_TYPE_ELEMENT && nodeType !== NODE_TYPE_DOCUMENT_FRAGMENT) return;
	
	    node = new JQLite(node);
	
	    for (var i = 0, ii = node.length; i < ii; i++) {
	      var child = node[i];
	      element.appendChild(child);
	    }
	  },
	
	  prepend: function(element, node) {
	    if (element.nodeType === NODE_TYPE_ELEMENT) {
	      var index = element.firstChild;
	      forEach(new JQLite(node), function(child) {
	        element.insertBefore(child, index);
	      });
	    }
	  },
	
	  wrap: function(element, wrapNode) {
	    jqLiteWrapNode(element, jqLite(wrapNode).eq(0).clone()[0]);
	  },
	
	  remove: jqLiteRemove,
	
	  detach: function(element) {
	    jqLiteRemove(element, true);
	  },
	
	  after: function(element, newElement) {
	    var index = element, parent = element.parentNode;
	
	    if (parent) {
	      newElement = new JQLite(newElement);
	
	      for (var i = 0, ii = newElement.length; i < ii; i++) {
	        var node = newElement[i];
	        parent.insertBefore(node, index.nextSibling);
	        index = node;
	      }
	    }
	  },
	
	  addClass: jqLiteAddClass,
	  removeClass: jqLiteRemoveClass,
	
	  toggleClass: function(element, selector, condition) {
	    if (selector) {
	      forEach(selector.split(' '), function(className) {
	        var classCondition = condition;
	        if (isUndefined(classCondition)) {
	          classCondition = !jqLiteHasClass(element, className);
	        }
	        (classCondition ? jqLiteAddClass : jqLiteRemoveClass)(element, className);
	      });
	    }
	  },
	
	  parent: function(element) {
	    var parent = element.parentNode;
	    return parent && parent.nodeType !== NODE_TYPE_DOCUMENT_FRAGMENT ? parent : null;
	  },
	
	  next: function(element) {
	    return element.nextElementSibling;
	  },
	
	  find: function(element, selector) {
	    if (element.getElementsByTagName) {
	      return element.getElementsByTagName(selector);
	    } else {
	      return [];
	    }
	  },
	
	  clone: jqLiteClone,
	
	  triggerHandler: function(element, event, extraParameters) {
	
	    var dummyEvent, eventFnsCopy, handlerArgs;
	    var eventName = event.type || event;
	    var expandoStore = jqLiteExpandoStore(element);
	    var events = expandoStore && expandoStore.events;
	    var eventFns = events && events[eventName];
	
	    if (eventFns) {
	      // Create a dummy event to pass to the handlers
	      dummyEvent = {
	        preventDefault: function() { this.defaultPrevented = true; },
	        isDefaultPrevented: function() { return this.defaultPrevented === true; },
	        stopImmediatePropagation: function() { this.immediatePropagationStopped = true; },
	        isImmediatePropagationStopped: function() { return this.immediatePropagationStopped === true; },
	        stopPropagation: noop,
	        type: eventName,
	        target: element
	      };
	
	      // If a custom event was provided then extend our dummy event with it
	      if (event.type) {
	        dummyEvent = extend(dummyEvent, event);
	      }
	
	      // Copy event handlers in case event handlers array is modified during execution.
	      eventFnsCopy = shallowCopy(eventFns);
	      handlerArgs = extraParameters ? [dummyEvent].concat(extraParameters) : [dummyEvent];
	
	      forEach(eventFnsCopy, function(fn) {
	        if (!dummyEvent.isImmediatePropagationStopped()) {
	          fn.apply(element, handlerArgs);
	        }
	      });
	    }
	  }
	}, function(fn, name) {
	  /**
	   * chaining functions
	   */
	  JQLite.prototype[name] = function(arg1, arg2, arg3) {
	    var value;
	
	    for (var i = 0, ii = this.length; i < ii; i++) {
	      if (isUndefined(value)) {
	        value = fn(this[i], arg1, arg2, arg3);
	        if (isDefined(value)) {
	          // any function which returns a value needs to be wrapped
	          value = jqLite(value);
	        }
	      } else {
	        jqLiteAddNodes(value, fn(this[i], arg1, arg2, arg3));
	      }
	    }
	    return isDefined(value) ? value : this;
	  };
	});
	
	// bind legacy bind/unbind to on/off
	JQLite.prototype.bind = JQLite.prototype.on;
	JQLite.prototype.unbind = JQLite.prototype.off;
	
	
	// Provider for private $$jqLite service
	/** @this */
	function $$jqLiteProvider() {
	  this.$get = function $$jqLite() {
	    return extend(JQLite, {
	      hasClass: function(node, classes) {
	        if (node.attr) node = node[0];
	        return jqLiteHasClass(node, classes);
	      },
	      addClass: function(node, classes) {
	        if (node.attr) node = node[0];
	        return jqLiteAddClass(node, classes);
	      },
	      removeClass: function(node, classes) {
	        if (node.attr) node = node[0];
	        return jqLiteRemoveClass(node, classes);
	      }
	    });
	  };
	}
	
	/**
	 * Computes a hash of an 'obj'.
	 * Hash of a:
	 *  string is string
	 *  number is number as string
	 *  object is either result of calling $$hashKey function on the object or uniquely generated id,
	 *         that is also assigned to the $$hashKey property of the object.
	 *
	 * @param obj
	 * @returns {string} hash string such that the same input will have the same hash string.
	 *         The resulting string key is in 'type:hashKey' format.
	 */
	function hashKey(obj, nextUidFn) {
	  var key = obj && obj.$$hashKey;
	
	  if (key) {
	    if (typeof key === 'function') {
	      key = obj.$$hashKey();
	    }
	    return key;
	  }
	
	  var objType = typeof obj;
	  if (objType === 'function' || (objType === 'object' && obj !== null)) {
	    key = obj.$$hashKey = objType + ':' + (nextUidFn || nextUid)();
	  } else {
	    key = objType + ':' + obj;
	  }
	
	  return key;
	}
	
	/**
	 * HashMap which can use objects as keys
	 */
	function HashMap(array, isolatedUid) {
	  if (isolatedUid) {
	    var uid = 0;
	    this.nextUid = function() {
	      return ++uid;
	    };
	  }
	  forEach(array, this.put, this);
	}
	HashMap.prototype = {
	  /**
	   * Store key value pair
	   * @param key key to store can be any type
	   * @param value value to store can be any type
	   */
	  put: function(key, value) {
	    this[hashKey(key, this.nextUid)] = value;
	  },
	
	  /**
	   * @param key
	   * @returns {Object} the value for the key
	   */
	  get: function(key) {
	    return this[hashKey(key, this.nextUid)];
	  },
	
	  /**
	   * Remove the key/value pair
	   * @param key
	   */
	  remove: function(key) {
	    var value = this[key = hashKey(key, this.nextUid)];
	    delete this[key];
	    return value;
	  }
	};
	
	var $$HashMapProvider = [/** @this */function() {
	  this.$get = [function() {
	    return HashMap;
	  }];
	}];
	
	/**
	 * @ngdoc function
	 * @module ng
	 * @name angular.injector
	 * @kind function
	 *
	 * @description
	 * Creates an injector object that can be used for retrieving services as well as for
	 * dependency injection (see {@link guide/di dependency injection}).
	 *
	 * @param {Array.<string|Function>} modules A list of module functions or their aliases. See
	 *     {@link angular.module}. The `ng` module must be explicitly added.
	 * @param {boolean=} [strictDi=false] Whether the injector should be in strict mode, which
	 *     disallows argument name annotation inference.
	 * @returns {injector} Injector object. See {@link auto.$injector $injector}.
	 *
	 * @example
	 * Typical usage
	 * ```js
	 *   // create an injector
	 *   var $injector = angular.injector(['ng']);
	 *
	 *   // use the injector to kick off your application
	 *   // use the type inference to auto inject arguments, or use implicit injection
	 *   $injector.invoke(function($rootScope, $compile, $document) {
	 *     $compile($document)($rootScope);
	 *     $rootScope.$digest();
	 *   });
	 * ```
	 *
	 * Sometimes you want to get access to the injector of a currently running Angular app
	 * from outside Angular. Perhaps, you want to inject and compile some markup after the
	 * application has been bootstrapped. You can do this using the extra `injector()` added
	 * to JQuery/jqLite elements. See {@link angular.element}.
	 *
	 * *This is fairly rare but could be the case if a third party library is injecting the
	 * markup.*
	 *
	 * In the following example a new block of HTML containing a `ng-controller`
	 * directive is added to the end of the document body by JQuery. We then compile and link
	 * it into the current AngularJS scope.
	 *
	 * ```js
	 * var $div = $('<div ng-controller="MyCtrl">{{content.label}}</div>');
	 * $(document.body).append($div);
	 *
	 * angular.element(document).injector().invoke(function($compile) {
	 *   var scope = angular.element($div).scope();
	 *   $compile($div)(scope);
	 * });
	 * ```
	 */
	
	
	/**
	 * @ngdoc module
	 * @name auto
	 * @installation
	 * @description
	 *
	 * Implicit module which gets automatically added to each {@link auto.$injector $injector}.
	 */
	
	var ARROW_ARG = /^([^(]+?)=>/;
	var FN_ARGS = /^[^(]*\(\s*([^)]*)\)/m;
	var FN_ARG_SPLIT = /,/;
	var FN_ARG = /^\s*(_?)(\S+?)\1\s*$/;
	var STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg;
	var $injectorMinErr = minErr('$injector');
	
	function stringifyFn(fn) {
	  // Support: Chrome 50-51 only
	  // Creating a new string by adding `' '` at the end, to hack around some bug in Chrome v50/51
	  // (See https://github.com/angular/angular.js/issues/14487.)
	  // TODO (gkalpak): Remove workaround when Chrome v52 is released
	  return Function.prototype.toString.call(fn) + ' ';
	}
	
	function extractArgs(fn) {
	  var fnText = stringifyFn(fn).replace(STRIP_COMMENTS, ''),
	      args = fnText.match(ARROW_ARG) || fnText.match(FN_ARGS);
	  return args;
	}
	
	function anonFn(fn) {
	  // For anonymous functions, showing at the very least the function signature can help in
	  // debugging.
	  var args = extractArgs(fn);
	  if (args) {
	    return 'function(' + (args[1] || '').replace(/[\s\r\n]+/, ' ') + ')';
	  }
	  return 'fn';
	}
	
	function annotate(fn, strictDi, name) {
	  var $inject,
	      argDecl,
	      last;
	
	  if (typeof fn === 'function') {
	    if (!($inject = fn.$inject)) {
	      $inject = [];
	      if (fn.length) {
	        if (strictDi) {
	          if (!isString(name) || !name) {
	            name = fn.name || anonFn(fn);
	          }
	          throw $injectorMinErr('strictdi',
	            '{0} is not using explicit annotation and cannot be invoked in strict mode', name);
	        }
	        argDecl = extractArgs(fn);
	        forEach(argDecl[1].split(FN_ARG_SPLIT), function(arg) {
	          arg.replace(FN_ARG, function(all, underscore, name) {
	            $inject.push(name);
	          });
	        });
	      }
	      fn.$inject = $inject;
	    }
	  } else if (isArray(fn)) {
	    last = fn.length - 1;
	    assertArgFn(fn[last], 'fn');
	    $inject = fn.slice(0, last);
	  } else {
	    assertArgFn(fn, 'fn', true);
	  }
	  return $inject;
	}
	
	///////////////////////////////////////
	
	/**
	 * @ngdoc service
	 * @name $injector
	 *
	 * @description
	 *
	 * `$injector` is used to retrieve object instances as defined by
	 * {@link auto.$provide provider}, instantiate types, invoke methods,
	 * and load modules.
	 *
	 * The following always holds true:
	 *
	 * ```js
	 *   var $injector = angular.injector();
	 *   expect($injector.get('$injector')).toBe($injector);
	 *   expect($injector.invoke(function($injector) {
	 *     return $injector;
	 *   })).toBe($injector);
	 * ```
	 *
	 * # Injection Function Annotation
	 *
	 * JavaScript does not have annotations, and annotations are needed for dependency injection. The
	 * following are all valid ways of annotating function with injection arguments and are equivalent.
	 *
	 * ```js
	 *   // inferred (only works if code not minified/obfuscated)
	 *   $injector.invoke(function(serviceA){});
	 *
	 *   // annotated
	 *   function explicit(serviceA) {};
	 *   explicit.$inject = ['serviceA'];
	 *   $injector.invoke(explicit);
	 *
	 *   // inline
	 *   $injector.invoke(['serviceA', function(serviceA){}]);
	 * ```
	 *
	 * ## Inference
	 *
	 * In JavaScript calling `toString()` on a function returns the function definition. The definition
	 * can then be parsed and the function arguments can be extracted. This method of discovering
	 * annotations is disallowed when the injector is in strict mode.
	 * *NOTE:* This does not work with minification, and obfuscation tools since these tools change the
	 * argument names.
	 *
	 * ## `$inject` Annotation
	 * By adding an `$inject` property onto a function the injection parameters can be specified.
	 *
	 * ## Inline
	 * As an array of injection names, where the last item in the array is the function to call.
	 */
	
	/**
	 * @ngdoc method
	 * @name $injector#get
	 *
	 * @description
	 * Return an instance of the service.
	 *
	 * @param {string} name The name of the instance to retrieve.
	 * @param {string=} caller An optional string to provide the origin of the function call for error messages.
	 * @return {*} The instance.
	 */
	
	/**
	 * @ngdoc method
	 * @name $injector#invoke
	 *
	 * @description
	 * Invoke the method and supply the method arguments from the `$injector`.
	 *
	 * @param {Function|Array.<string|Function>} fn The injectable function to invoke. Function parameters are
	 *   injected according to the {@link guide/di $inject Annotation} rules.
	 * @param {Object=} self The `this` for the invoked method.
	 * @param {Object=} locals Optional object. If preset then any argument names are read from this
	 *                         object first, before the `$injector` is consulted.
	 * @returns {*} the value returned by the invoked `fn` function.
	 */
	
	/**
	 * @ngdoc method
	 * @name $injector#has
	 *
	 * @description
	 * Allows the user to query if the particular service exists.
	 *
	 * @param {string} name Name of the service to query.
	 * @returns {boolean} `true` if injector has given service.
	 */
	
	/**
	 * @ngdoc method
	 * @name $injector#instantiate
	 * @description
	 * Create a new instance of JS type. The method takes a constructor function, invokes the new
	 * operator, and supplies all of the arguments to the constructor function as specified by the
	 * constructor annotation.
	 *
	 * @param {Function} Type Annotated constructor function.
	 * @param {Object=} locals Optional object. If preset then any argument names are read from this
	 * object first, before the `$injector` is consulted.
	 * @returns {Object} new instance of `Type`.
	 */
	
	/**
	 * @ngdoc method
	 * @name $injector#annotate
	 *
	 * @description
	 * Returns an array of service names which the function is requesting for injection. This API is
	 * used by the injector to determine which services need to be injected into the function when the
	 * function is invoked. There are three ways in which the function can be annotated with the needed
	 * dependencies.
	 *
	 * # Argument names
	 *
	 * The simplest form is to extract the dependencies from the arguments of the function. This is done
	 * by converting the function into a string using `toString()` method and extracting the argument
	 * names.
	 * ```js
	 *   // Given
	 *   function MyController($scope, $route) {
	 *     // ...
	 *   }
	 *
	 *   // Then
	 *   expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);
	 * ```
	 *
	 * You can disallow this method by using strict injection mode.
	 *
	 * This method does not work with code minification / obfuscation. For this reason the following
	 * annotation strategies are supported.
	 *
	 * # The `$inject` property
	 *
	 * If a function has an `$inject` property and its value is an array of strings, then the strings
	 * represent names of services to be injected into the function.
	 * ```js
	 *   // Given
	 *   var MyController = function(obfuscatedScope, obfuscatedRoute) {
	 *     // ...
	 *   }
	 *   // Define function dependencies
	 *   MyController['$inject'] = ['$scope', '$route'];
	 *
	 *   // Then
	 *   expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);
	 * ```
	 *
	 * # The array notation
	 *
	 * It is often desirable to inline Injected functions and that's when setting the `$inject` property
	 * is very inconvenient. In these situations using the array notation to specify the dependencies in
	 * a way that survives minification is a better choice:
	 *
	 * ```js
	 *   // We wish to write this (not minification / obfuscation safe)
	 *   injector.invoke(function($compile, $rootScope) {
	 *     // ...
	 *   });
	 *
	 *   // We are forced to write break inlining
	 *   var tmpFn = function(obfuscatedCompile, obfuscatedRootScope) {
	 *     // ...
	 *   };
	 *   tmpFn.$inject = ['$compile', '$rootScope'];
	 *   injector.invoke(tmpFn);
	 *
	 *   // To better support inline function the inline annotation is supported
	 *   injector.invoke(['$compile', '$rootScope', function(obfCompile, obfRootScope) {
	 *     // ...
	 *   }]);
	 *
	 *   // Therefore
	 *   expect(injector.annotate(
	 *      ['$compile', '$rootScope', function(obfus_$compile, obfus_$rootScope) {}])
	 *    ).toEqual(['$compile', '$rootScope']);
	 * ```
	 *
	 * @param {Function|Array.<string|Function>} fn Function for which dependent service names need to
	 * be retrieved as described above.
	 *
	 * @param {boolean=} [strictDi=false] Disallow argument name annotation inference.
	 *
	 * @returns {Array.<string>} The names of the services which the function requires.
	 */
	
	
	
	/**
	 * @ngdoc service
	 * @name $provide
	 *
	 * @description
	 *
	 * The {@link auto.$provide $provide} service has a number of methods for registering components
	 * with the {@link auto.$injector $injector}. Many of these functions are also exposed on
	 * {@link angular.Module}.
	 *
	 * An Angular **service** is a singleton object created by a **service factory**.  These **service
	 * factories** are functions which, in turn, are created by a **service provider**.
	 * The **service providers** are constructor functions. When instantiated they must contain a
	 * property called `$get`, which holds the **service factory** function.
	 *
	 * When you request a service, the {@link auto.$injector $injector} is responsible for finding the
	 * correct **service provider**, instantiating it and then calling its `$get` **service factory**
	 * function to get the instance of the **service**.
	 *
	 * Often services have no configuration options and there is no need to add methods to the service
	 * provider.  The provider will be no more than a constructor function with a `$get` property. For
	 * these cases the {@link auto.$provide $provide} service has additional helper methods to register
	 * services without specifying a provider.
	 *
	 * * {@link auto.$provide#provider provider(name, provider)} - registers a **service provider** with the
	 *     {@link auto.$injector $injector}
	 * * {@link auto.$provide#constant constant(name, obj)} - registers a value/object that can be accessed by
	 *     providers and services.
	 * * {@link auto.$provide#value value(name, obj)} - registers a value/object that can only be accessed by
	 *     services, not providers.
	 * * {@link auto.$provide#factory factory(name, fn)} - registers a service **factory function**
	 *     that will be wrapped in a **service provider** object, whose `$get` property will contain the
	 *     given factory function.
	 * * {@link auto.$provide#service service(name, Fn)} - registers a **constructor function**
	 *     that will be wrapped in a **service provider** object, whose `$get` property will instantiate
	 *      a new object using the given constructor function.
	 * * {@link auto.$provide#decorator decorator(name, decorFn)} - registers a **decorator function** that
	 *      will be able to modify or replace the implementation of another service.
	 *
	 * See the individual methods for more information and examples.
	 */
	
	/**
	 * @ngdoc method
	 * @name $provide#provider
	 * @description
	 *
	 * Register a **provider function** with the {@link auto.$injector $injector}. Provider functions
	 * are constructor functions, whose instances are responsible for "providing" a factory for a
	 * service.
	 *
	 * Service provider names start with the name of the service they provide followed by `Provider`.
	 * For example, the {@link ng.$log $log} service has a provider called
	 * {@link ng.$logProvider $logProvider}.
	 *
	 * Service provider objects can have additional methods which allow configuration of the provider
	 * and its service. Importantly, you can configure what kind of service is created by the `$get`
	 * method, or how that service will act. For example, the {@link ng.$logProvider $logProvider} has a
	 * method {@link ng.$logProvider#debugEnabled debugEnabled}
	 * which lets you specify whether the {@link ng.$log $log} service will log debug messages to the
	 * console or not.
	 *
	 * @param {string} name The name of the instance. NOTE: the provider will be available under `name +
	                        'Provider'` key.
	 * @param {(Object|function())} provider If the provider is:
	 *
	 *   - `Object`: then it should have a `$get` method. The `$get` method will be invoked using
	 *     {@link auto.$injector#invoke $injector.invoke()} when an instance needs to be created.
	 *   - `Constructor`: a new instance of the provider will be created using
	 *     {@link auto.$injector#instantiate $injector.instantiate()}, then treated as `object`.
	 *
	 * @returns {Object} registered provider instance
	
	 * @example
	 *
	 * The following example shows how to create a simple event tracking service and register it using
	 * {@link auto.$provide#provider $provide.provider()}.
	 *
	 * ```js
	 *  // Define the eventTracker provider
	 *  function EventTrackerProvider() {
	 *    var trackingUrl = '/track';
	 *
	 *    // A provider method for configuring where the tracked events should been saved
	 *    this.setTrackingUrl = function(url) {
	 *      trackingUrl = url;
	 *    };
	 *
	 *    // The service factory function
	 *    this.$get = ['$http', function($http) {
	 *      var trackedEvents = {};
	 *      return {
	 *        // Call this to track an event
	 *        event: function(event) {
	 *          var count = trackedEvents[event] || 0;
	 *          count += 1;
	 *          trackedEvents[event] = count;
	 *          return count;
	 *        },
	 *        // Call this to save the tracked events to the trackingUrl
	 *        save: function() {
	 *          $http.post(trackingUrl, trackedEvents);
	 *        }
	 *      };
	 *    }];
	 *  }
	 *
	 *  describe('eventTracker', function() {
	 *    var postSpy;
	 *
	 *    beforeEach(module(function($provide) {
	 *      // Register the eventTracker provider
	 *      $provide.provider('eventTracker', EventTrackerProvider);
	 *    }));
	 *
	 *    beforeEach(module(function(eventTrackerProvider) {
	 *      // Configure eventTracker provider
	 *      eventTrackerProvider.setTrackingUrl('/custom-track');
	 *    }));
	 *
	 *    it('tracks events', inject(function(eventTracker) {
	 *      expect(eventTracker.event('login')).toEqual(1);
	 *      expect(eventTracker.event('login')).toEqual(2);
	 *    }));
	 *
	 *    it('saves to the tracking url', inject(function(eventTracker, $http) {
	 *      postSpy = spyOn($http, 'post');
	 *      eventTracker.event('login');
	 *      eventTracker.save();
	 *      expect(postSpy).toHaveBeenCalled();
	 *      expect(postSpy.mostRecentCall.args[0]).not.toEqual('/track');
	 *      expect(postSpy.mostRecentCall.args[0]).toEqual('/custom-track');
	 *      expect(postSpy.mostRecentCall.args[1]).toEqual({ 'login': 1 });
	 *    }));
	 *  });
	 * ```
	 */
	
	/**
	 * @ngdoc method
	 * @name $provide#factory
	 * @description
	 *
	 * Register a **service factory**, which will be called to return the service instance.
	 * This is short for registering a service where its provider consists of only a `$get` property,
	 * which is the given service factory function.
	 * You should use {@link auto.$provide#factory $provide.factory(getFn)} if you do not need to
	 * configure your service in a provider.
	 *
	 * @param {string} name The name of the instance.
	 * @param {Function|Array.<string|Function>} $getFn The injectable $getFn for the instance creation.
	 *                      Internally this is a short hand for `$provide.provider(name, {$get: $getFn})`.
	 * @returns {Object} registered provider instance
	 *
	 * @example
	 * Here is an example of registering a service
	 * ```js
	 *   $provide.factory('ping', ['$http', function($http) {
	 *     return function ping() {
	 *       return $http.send('/ping');
	 *     };
	 *   }]);
	 * ```
	 * You would then inject and use this service like this:
	 * ```js
	 *   someModule.controller('Ctrl', ['ping', function(ping) {
	 *     ping();
	 *   }]);
	 * ```
	 */
	
	
	/**
	 * @ngdoc method
	 * @name $provide#service
	 * @description
	 *
	 * Register a **service constructor**, which will be invoked with `new` to create the service
	 * instance.
	 * This is short for registering a service where its provider's `$get` property is a factory
	 * function that returns an instance instantiated by the injector from the service constructor
	 * function.
	 *
	 * Internally it looks a bit like this:
	 *
	 * ```
	 * {
	 *   $get: function() {
	 *     return $injector.instantiate(constructor);
	 *   }
	 * }
	 * ```
	 *
	 *
	 * You should use {@link auto.$provide#service $provide.service(class)} if you define your service
	 * as a type/class.
	 *
	 * @param {string} name The name of the instance.
	 * @param {Function|Array.<string|Function>} constructor An injectable class (constructor function)
	 *     that will be instantiated.
	 * @returns {Object} registered provider instance
	 *
	 * @example
	 * Here is an example of registering a service using
	 * {@link auto.$provide#service $provide.service(class)}.
	 * ```js
	 *   var Ping = function($http) {
	 *     this.$http = $http;
	 *   };
	 *
	 *   Ping.$inject = ['$http'];
	 *
	 *   Ping.prototype.send = function() {
	 *     return this.$http.get('/ping');
	 *   };
	 *   $provide.service('ping', Ping);
	 * ```
	 * You would then inject and use this service like this:
	 * ```js
	 *   someModule.controller('Ctrl', ['ping', function(ping) {
	 *     ping.send();
	 *   }]);
	 * ```
	 */
	
	
	/**
	 * @ngdoc method
	 * @name $provide#value
	 * @description
	 *
	 * Register a **value service** with the {@link auto.$injector $injector}, such as a string, a
	 * number, an array, an object or a function. This is short for registering a service where its
	 * provider's `$get` property is a factory function that takes no arguments and returns the **value
	 * service**. That also means it is not possible to inject other services into a value service.
	 *
	 * Value services are similar to constant services, except that they cannot be injected into a
	 * module configuration function (see {@link angular.Module#config}) but they can be overridden by
	 * an Angular {@link auto.$provide#decorator decorator}.
	 *
	 * @param {string} name The name of the instance.
	 * @param {*} value The value.
	 * @returns {Object} registered provider instance
	 *
	 * @example
	 * Here are some examples of creating value services.
	 * ```js
	 *   $provide.value('ADMIN_USER', 'admin');
	 *
	 *   $provide.value('RoleLookup', { admin: 0, writer: 1, reader: 2 });
	 *
	 *   $provide.value('halfOf', function(value) {
	 *     return value / 2;
	 *   });
	 * ```
	 */
	
	
	/**
	 * @ngdoc method
	 * @name $provide#constant
	 * @description
	 *
	 * Register a **constant service** with the {@link auto.$injector $injector}, such as a string,
	 * a number, an array, an object or a function. Like the {@link auto.$provide#value value}, it is not
	 * possible to inject other services into a constant.
	 *
	 * But unlike {@link auto.$provide#value value}, a constant can be
	 * injected into a module configuration function (see {@link angular.Module#config}) and it cannot
	 * be overridden by an Angular {@link auto.$provide#decorator decorator}.
	 *
	 * @param {string} name The name of the constant.
	 * @param {*} value The constant value.
	 * @returns {Object} registered instance
	 *
	 * @example
	 * Here a some examples of creating constants:
	 * ```js
	 *   $provide.constant('SHARD_HEIGHT', 306);
	 *
	 *   $provide.constant('MY_COLOURS', ['red', 'blue', 'grey']);
	 *
	 *   $provide.constant('double', function(value) {
	 *     return value * 2;
	 *   });
	 * ```
	 */
	
	
	/**
	 * @ngdoc method
	 * @name $provide#decorator
	 * @description
	 *
	 * Register a **decorator function** with the {@link auto.$injector $injector}. A decorator function
	 * intercepts the creation of a service, allowing it to override or modify the behavior of the
	 * service. The return value of the decorator function may be the original service, or a new service
	 * that replaces (or wraps and delegates to) the original service.
	 *
	 * You can find out more about using decorators in the {@link guide/decorators} guide.
	 *
	 * @param {string} name The name of the service to decorate.
	 * @param {Function|Array.<string|Function>} decorator This function will be invoked when the service needs to be
	 *    provided and should return the decorated service instance. The function is called using
	 *    the {@link auto.$injector#invoke injector.invoke} method and is therefore fully injectable.
	 *    Local injection arguments:
	 *
	 *    * `$delegate` - The original service instance, which can be replaced, monkey patched, configured,
	 *      decorated or delegated to.
	 *
	 * @example
	 * Here we decorate the {@link ng.$log $log} service to convert warnings to errors by intercepting
	 * calls to {@link ng.$log#error $log.warn()}.
	 * ```js
	 *   $provide.decorator('$log', ['$delegate', function($delegate) {
	 *     $delegate.warn = $delegate.error;
	 *     return $delegate;
	 *   }]);
	 * ```
	 */
	
	
	function createInjector(modulesToLoad, strictDi) {
	  strictDi = (strictDi === true);
	  var INSTANTIATING = {},
	      providerSuffix = 'Provider',
	      path = [],
	      loadedModules = new HashMap([], true),
	      providerCache = {
	        $provide: {
	            provider: supportObject(provider),
	            factory: supportObject(factory),
	            service: supportObject(service),
	            value: supportObject(value),
	            constant: supportObject(constant),
	            decorator: decorator
	          }
	      },
	      providerInjector = (providerCache.$injector =
	          createInternalInjector(providerCache, function(serviceName, caller) {
	            if (angular.isString(caller)) {
	              path.push(caller);
	            }
	            throw $injectorMinErr('unpr', 'Unknown provider: {0}', path.join(' <- '));
	          })),
	      instanceCache = {},
	      protoInstanceInjector =
	          createInternalInjector(instanceCache, function(serviceName, caller) {
	            var provider = providerInjector.get(serviceName + providerSuffix, caller);
	            return instanceInjector.invoke(
	                provider.$get, provider, undefined, serviceName);
	          }),
	      instanceInjector = protoInstanceInjector;
	
	  providerCache['$injector' + providerSuffix] = { $get: valueFn(protoInstanceInjector) };
	  var runBlocks = loadModules(modulesToLoad);
	  instanceInjector = protoInstanceInjector.get('$injector');
	  instanceInjector.strictDi = strictDi;
	  forEach(runBlocks, function(fn) { if (fn) instanceInjector.invoke(fn); });
	
	  return instanceInjector;
	
	  ////////////////////////////////////
	  // $provider
	  ////////////////////////////////////
	
	  function supportObject(delegate) {
	    return function(key, value) {
	      if (isObject(key)) {
	        forEach(key, reverseParams(delegate));
	      } else {
	        return delegate(key, value);
	      }
	    };
	  }
	
	  function provider(name, provider_) {
	    assertNotHasOwnProperty(name, 'service');
	    if (isFunction(provider_) || isArray(provider_)) {
	      provider_ = providerInjector.instantiate(provider_);
	    }
	    if (!provider_.$get) {
	      throw $injectorMinErr('pget', 'Provider \'{0}\' must define $get factory method.', name);
	    }
	    return (providerCache[name + providerSuffix] = provider_);
	  }
	
	  function enforceReturnValue(name, factory) {
	    return /** @this */ function enforcedReturnValue() {
	      var result = instanceInjector.invoke(factory, this);
	      if (isUndefined(result)) {
	        throw $injectorMinErr('undef', 'Provider \'{0}\' must return a value from $get factory method.', name);
	      }
	      return result;
	    };
	  }
	
	  function factory(name, factoryFn, enforce) {
	    return provider(name, {
	      $get: enforce !== false ? enforceReturnValue(name, factoryFn) : factoryFn
	    });
	  }
	
	  function service(name, constructor) {
	    return factory(name, ['$injector', function($injector) {
	      return $injector.instantiate(constructor);
	    }]);
	  }
	
	  function value(name, val) { return factory(name, valueFn(val), false); }
	
	  function constant(name, value) {
	    assertNotHasOwnProperty(name, 'constant');
	    providerCache[name] = value;
	    instanceCache[name] = value;
	  }
	
	  function decorator(serviceName, decorFn) {
	    var origProvider = providerInjector.get(serviceName + providerSuffix),
	        orig$get = origProvider.$get;
	
	    origProvider.$get = function() {
	      var origInstance = instanceInjector.invoke(orig$get, origProvider);
	      return instanceInjector.invoke(decorFn, null, {$delegate: origInstance});
	    };
	  }
	
	  ////////////////////////////////////
	  // Module Loading
	  ////////////////////////////////////
	  function loadModules(modulesToLoad) {
	    assertArg(isUndefined(modulesToLoad) || isArray(modulesToLoad), 'modulesToLoad', 'not an array');
	    var runBlocks = [], moduleFn;
	    forEach(modulesToLoad, function(module) {
	      if (loadedModules.get(module)) return;
	      loadedModules.put(module, true);
	
	      function runInvokeQueue(queue) {
	        var i, ii;
	        for (i = 0, ii = queue.length; i < ii; i++) {
	          var invokeArgs = queue[i],
	              provider = providerInjector.get(invokeArgs[0]);
	
	          provider[invokeArgs[1]].apply(provider, invokeArgs[2]);
	        }
	      }
	
	      try {
	        if (isString(module)) {
	          moduleFn = angularModule(module);
	          runBlocks = runBlocks.concat(loadModules(moduleFn.requires)).concat(moduleFn._runBlocks);
	          runInvokeQueue(moduleFn._invokeQueue);
	          runInvokeQueue(moduleFn._configBlocks);
	        } else if (isFunction(module)) {
	            runBlocks.push(providerInjector.invoke(module));
	        } else if (isArray(module)) {
	            runBlocks.push(providerInjector.invoke(module));
	        } else {
	          assertArgFn(module, 'module');
	        }
	      } catch (e) {
	        if (isArray(module)) {
	          module = module[module.length - 1];
	        }
	        if (e.message && e.stack && e.stack.indexOf(e.message) === -1) {
	          // Safari & FF's stack traces don't contain error.message content
	          // unlike those of Chrome and IE
	          // So if stack doesn't contain message, we create a new string that contains both.
	          // Since error.stack is read-only in Safari, I'm overriding e and not e.stack here.
	          // eslint-disable-next-line no-ex-assign
	          e = e.message + '\n' + e.stack;
	        }
	        throw $injectorMinErr('modulerr', 'Failed to instantiate module {0} due to:\n{1}',
	                  module, e.stack || e.message || e);
	      }
	    });
	    return runBlocks;
	  }
	
	  ////////////////////////////////////
	  // internal Injector
	  ////////////////////////////////////
	
	  function createInternalInjector(cache, factory) {
	
	    function getService(serviceName, caller) {
	      if (cache.hasOwnProperty(serviceName)) {
	        if (cache[serviceName] === INSTANTIATING) {
	          throw $injectorMinErr('cdep', 'Circular dependency found: {0}',
	                    serviceName + ' <- ' + path.join(' <- '));
	        }
	        return cache[serviceName];
	      } else {
	        try {
	          path.unshift(serviceName);
	          cache[serviceName] = INSTANTIATING;
	          cache[serviceName] = factory(serviceName, caller);
	          return cache[serviceName];
	        } catch (err) {
	          if (cache[serviceName] === INSTANTIATING) {
	            delete cache[serviceName];
	          }
	          throw err;
	        } finally {
	          path.shift();
	        }
	      }
	    }
	
	
	    function injectionArgs(fn, locals, serviceName) {
	      var args = [],
	          $inject = createInjector.$$annotate(fn, strictDi, serviceName);
	
	      for (var i = 0, length = $inject.length; i < length; i++) {
	        var key = $inject[i];
	        if (typeof key !== 'string') {
	          throw $injectorMinErr('itkn',
	                  'Incorrect injection token! Expected service name as string, got {0}', key);
	        }
	        args.push(locals && locals.hasOwnProperty(key) ? locals[key] :
	                                                         getService(key, serviceName));
	      }
	      return args;
	    }
	
	    function isClass(func) {
	      // Support: IE 9-11 only
	      // IE 9-11 do not support classes and IE9 leaks with the code below.
	      if (msie || typeof func !== 'function') {
	        return false;
	      }
	      var result = func.$$ngIsClass;
	      if (!isBoolean(result)) {
	        // Support: Edge 12-13 only
	        // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/6156135/
	        result = func.$$ngIsClass = /^(?:class\b|constructor\()/.test(stringifyFn(func));
	      }
	      return result;
	    }
	
	    function invoke(fn, self, locals, serviceName) {
	      if (typeof locals === 'string') {
	        serviceName = locals;
	        locals = null;
	      }
	
	      var args = injectionArgs(fn, locals, serviceName);
	      if (isArray(fn)) {
	        fn = fn[fn.length - 1];
	      }
	
	      if (!isClass(fn)) {
	        // http://jsperf.com/angularjs-invoke-apply-vs-switch
	        // #5388
	        return fn.apply(self, args);
	      } else {
	        args.unshift(null);
	        return new (Function.prototype.bind.apply(fn, args))();
	      }
	    }
	
	
	    function instantiate(Type, locals, serviceName) {
	      // Check if Type is annotated and use just the given function at n-1 as parameter
	      // e.g. someModule.factory('greeter', ['$window', function(renamed$window) {}]);
	      var ctor = (isArray(Type) ? Type[Type.length - 1] : Type);
	      var args = injectionArgs(Type, locals, serviceName);
	      // Empty object at position 0 is ignored for invocation with `new`, but required.
	      args.unshift(null);
	      return new (Function.prototype.bind.apply(ctor, args))();
	    }
	
	
	    return {
	      invoke: invoke,
	      instantiate: instantiate,
	      get: getService,
	      annotate: createInjector.$$annotate,
	      has: function(name) {
	        return providerCache.hasOwnProperty(name + providerSuffix) || cache.hasOwnProperty(name);
	      }
	    };
	  }
	}
	
	createInjector.$$annotate = annotate;
	
	/**
	 * @ngdoc provider
	 * @name $anchorScrollProvider
	 * @this
	 *
	 * @description
	 * Use `$anchorScrollProvider` to disable automatic scrolling whenever
	 * {@link ng.$location#hash $location.hash()} changes.
	 */
	function $AnchorScrollProvider() {
	
	  var autoScrollingEnabled = true;
	
	  /**
	   * @ngdoc method
	   * @name $anchorScrollProvider#disableAutoScrolling
	   *
	   * @description
	   * By default, {@link ng.$anchorScroll $anchorScroll()} will automatically detect changes to
	   * {@link ng.$location#hash $location.hash()} and scroll to the element matching the new hash.<br />
	   * Use this method to disable automatic scrolling.
	   *
	   * If automatic scrolling is disabled, one must explicitly call
	   * {@link ng.$anchorScroll $anchorScroll()} in order to scroll to the element related to the
	   * current hash.
	   */
	  this.disableAutoScrolling = function() {
	    autoScrollingEnabled = false;
	  };
	
	  /**
	   * @ngdoc service
	   * @name $anchorScroll
	   * @kind function
	   * @requires $window
	   * @requires $location
	   * @requires $rootScope
	   *
	   * @description
	   * When called, it scrolls to the element related to the specified `hash` or (if omitted) to the
	   * current value of {@link ng.$location#hash $location.hash()}, according to the rules specified
	   * in the
	   * [HTML5 spec](http://www.w3.org/html/wg/drafts/html/master/browsers.html#an-indicated-part-of-the-document).
	   *
	   * It also watches the {@link ng.$location#hash $location.hash()} and automatically scrolls to
	   * match any anchor whenever it changes. This can be disabled by calling
	   * {@link ng.$anchorScrollProvider#disableAutoScrolling $anchorScrollProvider.disableAutoScrolling()}.
	   *
	   * Additionally, you can use its {@link ng.$anchorScroll#yOffset yOffset} property to specify a
	   * vertical scroll-offset (either fixed or dynamic).
	   *
	   * @param {string=} hash The hash specifying the element to scroll to. If omitted, the value of
	   *                       {@link ng.$location#hash $location.hash()} will be used.
	   *
	   * @property {(number|function|jqLite)} yOffset
	   * If set, specifies a vertical scroll-offset. This is often useful when there are fixed
	   * positioned elements at the top of the page, such as navbars, headers etc.
	   *
	   * `yOffset` can be specified in various ways:
	   * - **number**: A fixed number of pixels to be used as offset.<br /><br />
	   * - **function**: A getter function called everytime `$anchorScroll()` is executed. Must return
	   *   a number representing the offset (in pixels).<br /><br />
	   * - **jqLite**: A jqLite/jQuery element to be used for specifying the offset. The distance from
	   *   the top of the page to the element's bottom will be used as offset.<br />
	   *   **Note**: The element will be taken into account only as long as its `position` is set to
	   *   `fixed`. This option is useful, when dealing with responsive navbars/headers that adjust
	   *   their height and/or positioning according to the viewport's size.
	   *
	   * <br />
	   * <div class="alert alert-warning">
	   * In order for `yOffset` to work properly, scrolling should take place on the document's root and
	   * not some child element.
	   * </div>
	   *
	   * @example
	     <example module="anchorScrollExample" name="anchor-scroll">
	       <file name="index.html">
	         <div id="scrollArea" ng-controller="ScrollController">
	           <a ng-click="gotoBottom()">Go to bottom</a>
	           <a id="bottom"></a> You're at the bottom!
	         </div>
	       </file>
	       <file name="script.js">
	         angular.module('anchorScrollExample', [])
	           .controller('ScrollController', ['$scope', '$location', '$anchorScroll',
	             function($scope, $location, $anchorScroll) {
	               $scope.gotoBottom = function() {
	                 // set the location.hash to the id of
	                 // the element you wish to scroll to.
	                 $location.hash('bottom');
	
	                 // call $anchorScroll()
	                 $anchorScroll();
	               };
	             }]);
	       </file>
	       <file name="style.css">
	         #scrollArea {
	           height: 280px;
	           overflow: auto;
	         }
	
	         #bottom {
	           display: block;
	           margin-top: 2000px;
	         }
	       </file>
	     </example>
	   *
	   * <hr />
	   * The example below illustrates the use of a vertical scroll-offset (specified as a fixed value).
	   * See {@link ng.$anchorScroll#yOffset $anchorScroll.yOffset} for more details.
	   *
	   * @example
	     <example module="anchorScrollOffsetExample" name="anchor-scroll-offset">
	       <file name="index.html">
	         <div class="fixed-header" ng-controller="headerCtrl">
	           <a href="" ng-click="gotoAnchor(x)" ng-repeat="x in [1,2,3,4,5]">
	             Go to anchor {{x}}
	           </a>
	         </div>
	         <div id="anchor{{x}}" class="anchor" ng-repeat="x in [1,2,3,4,5]">
	           Anchor {{x}} of 5
	         </div>
	       </file>
	       <file name="script.js">
	         angular.module('anchorScrollOffsetExample', [])
	           .run(['$anchorScroll', function($anchorScroll) {
	             $anchorScroll.yOffset = 50;   // always scroll by 50 extra pixels
	           }])
	           .controller('headerCtrl', ['$anchorScroll', '$location', '$scope',
	             function($anchorScroll, $location, $scope) {
	               $scope.gotoAnchor = function(x) {
	                 var newHash = 'anchor' + x;
	                 if ($location.hash() !== newHash) {
	                   // set the $location.hash to `newHash` and
	                   // $anchorScroll will automatically scroll to it
	                   $location.hash('anchor' + x);
	                 } else {
	                   // call $anchorScroll() explicitly,
	                   // since $location.hash hasn't changed
	                   $anchorScroll();
	                 }
	               };
	             }
	           ]);
	       </file>
	       <file name="style.css">
	         body {
	           padding-top: 50px;
	         }
	
	         .anchor {
	           border: 2px dashed DarkOrchid;
	           padding: 10px 10px 200px 10px;
	         }
	
	         .fixed-header {
	           background-color: rgba(0, 0, 0, 0.2);
	           height: 50px;
	           position: fixed;
	           top: 0; left: 0; right: 0;
	         }
	
	         .fixed-header > a {
	           display: inline-block;
	           margin: 5px 15px;
	         }
	       </file>
	     </example>
	   */
	  this.$get = ['$window', '$location', '$rootScope', function($window, $location, $rootScope) {
	    var document = $window.document;
	
	    // Helper function to get first anchor from a NodeList
	    // (using `Array#some()` instead of `angular#forEach()` since it's more performant
	    //  and working in all supported browsers.)
	    function getFirstAnchor(list) {
	      var result = null;
	      Array.prototype.some.call(list, function(element) {
	        if (nodeName_(element) === 'a') {
	          result = element;
	          return true;
	        }
	      });
	      return result;
	    }
	
	    function getYOffset() {
	
	      var offset = scroll.yOffset;
	
	      if (isFunction(offset)) {
	        offset = offset();
	      } else if (isElement(offset)) {
	        var elem = offset[0];
	        var style = $window.getComputedStyle(elem);
	        if (style.position !== 'fixed') {
	          offset = 0;
	        } else {
	          offset = elem.getBoundingClientRect().bottom;
	        }
	      } else if (!isNumber(offset)) {
	        offset = 0;
	      }
	
	      return offset;
	    }
	
	    function scrollTo(elem) {
	      if (elem) {
	        elem.scrollIntoView();
	
	        var offset = getYOffset();
	
	        if (offset) {
	          // `offset` is the number of pixels we should scroll UP in order to align `elem` properly.
	          // This is true ONLY if the call to `elem.scrollIntoView()` initially aligns `elem` at the
	          // top of the viewport.
	          //
	          // IF the number of pixels from the top of `elem` to the end of the page's content is less
	          // than the height of the viewport, then `elem.scrollIntoView()` will align the `elem` some
	          // way down the page.
	          //
	          // This is often the case for elements near the bottom of the page.
	          //
	          // In such cases we do not need to scroll the whole `offset` up, just the difference between
	          // the top of the element and the offset, which is enough to align the top of `elem` at the
	          // desired position.
	          var elemTop = elem.getBoundingClientRect().top;
	          $window.scrollBy(0, elemTop - offset);
	        }
	      } else {
	        $window.scrollTo(0, 0);
	      }
	    }
	
	    function scroll(hash) {
	      // Allow numeric hashes
	      hash = isString(hash) ? hash : isNumber(hash) ? hash.toString() : $location.hash();
	      var elm;
	
	      // empty hash, scroll to the top of the page
	      if (!hash) scrollTo(null);
	
	      // element with given id
	      else if ((elm = document.getElementById(hash))) scrollTo(elm);
	
	      // first anchor with given name :-D
	      else if ((elm = getFirstAnchor(document.getElementsByName(hash)))) scrollTo(elm);
	
	      // no element and hash === 'top', scroll to the top of the page
	      else if (hash === 'top') scrollTo(null);
	    }
	
	    // does not scroll when user clicks on anchor link that is currently on
	    // (no url change, no $location.hash() change), browser native does scroll
	    if (autoScrollingEnabled) {
	      $rootScope.$watch(function autoScrollWatch() {return $location.hash();},
	        function autoScrollWatchAction(newVal, oldVal) {
	          // skip the initial scroll if $location.hash is empty
	          if (newVal === oldVal && newVal === '') return;
	
	          jqLiteDocumentLoaded(function() {
	            $rootScope.$evalAsync(scroll);
	          });
	        });
	    }
	
	    return scroll;
	  }];
	}
	
	var $animateMinErr = minErr('$animate');
	var ELEMENT_NODE = 1;
	var NG_ANIMATE_CLASSNAME = 'ng-animate';
	
	function mergeClasses(a,b) {
	  if (!a && !b) return '';
	  if (!a) return b;
	  if (!b) return a;
	  if (isArray(a)) a = a.join(' ');
	  if (isArray(b)) b = b.join(' ');
	  return a + ' ' + b;
	}
	
	function extractElementNode(element) {
	  for (var i = 0; i < element.length; i++) {
	    var elm = element[i];
	    if (elm.nodeType === ELEMENT_NODE) {
	      return elm;
	    }
	  }
	}
	
	function splitClasses(classes) {
	  if (isString(classes)) {
	    classes = classes.split(' ');
	  }
	
	  // Use createMap() to prevent class assumptions involving property names in
	  // Object.prototype
	  var obj = createMap();
	  forEach(classes, function(klass) {
	    // sometimes the split leaves empty string values
	    // incase extra spaces were applied to the options
	    if (klass.length) {
	      obj[klass] = true;
	    }
	  });
	  return obj;
	}
	
	// if any other type of options value besides an Object value is
	// passed into the $animate.method() animation then this helper code
	// will be run which will ignore it. While this patch is not the
	// greatest solution to this, a lot of existing plugins depend on
	// $animate to either call the callback (< 1.2) or return a promise
	// that can be changed. This helper function ensures that the options
	// are wiped clean incase a callback function is provided.
	function prepareAnimateOptions(options) {
	  return isObject(options)
	      ? options
	      : {};
	}
	
	var $$CoreAnimateJsProvider = /** @this */ function() {
	  this.$get = noop;
	};
	
	// this is prefixed with Core since it conflicts with
	// the animateQueueProvider defined in ngAnimate/animateQueue.js
	var $$CoreAnimateQueueProvider = /** @this */ function() {
	  var postDigestQueue = new HashMap();
	  var postDigestElements = [];
	
	  this.$get = ['$$AnimateRunner', '$rootScope',
	       function($$AnimateRunner,   $rootScope) {
	    return {
	      enabled: noop,
	      on: noop,
	      off: noop,
	      pin: noop,
	
	      push: function(element, event, options, domOperation) {
	        if (domOperation) {
	          domOperation();
	        }
	
	        options = options || {};
	        if (options.from) {
	          element.css(options.from);
	        }
	        if (options.to) {
	          element.css(options.to);
	        }
	
	        if (options.addClass || options.removeClass) {
	          addRemoveClassesPostDigest(element, options.addClass, options.removeClass);
	        }
	
	        var runner = new $$AnimateRunner();
	
	        // since there are no animations to run the runner needs to be
	        // notified that the animation call is complete.
	        runner.complete();
	        return runner;
	      }
	    };
	
	
	    function updateData(data, classes, value) {
	      var changed = false;
	      if (classes) {
	        classes = isString(classes) ? classes.split(' ') :
	                  isArray(classes) ? classes : [];
	        forEach(classes, function(className) {
	          if (className) {
	            changed = true;
	            data[className] = value;
	          }
	        });
	      }
	      return changed;
	    }
	
	    function handleCSSClassChanges() {
	      forEach(postDigestElements, function(element) {
	        var data = postDigestQueue.get(element);
	        if (data) {
	          var existing = splitClasses(element.attr('class'));
	          var toAdd = '';
	          var toRemove = '';
	          forEach(data, function(status, className) {
	            var hasClass = !!existing[className];
	            if (status !== hasClass) {
	              if (status) {
	                toAdd += (toAdd.length ? ' ' : '') + className;
	              } else {
	                toRemove += (toRemove.length ? ' ' : '') + className;
	              }
	            }
	          });
	
	          forEach(element, function(elm) {
	            if (toAdd) {
	              jqLiteAddClass(elm, toAdd);
	            }
	            if (toRemove) {
	              jqLiteRemoveClass(elm, toRemove);
	            }
	          });
	          postDigestQueue.remove(element);
	        }
	      });
	      postDigestElements.length = 0;
	    }
	
	
	    function addRemoveClassesPostDigest(element, add, remove) {
	      var data = postDigestQueue.get(element) || {};
	
	      var classesAdded = updateData(data, add, true);
	      var classesRemoved = updateData(data, remove, false);
	
	      if (classesAdded || classesRemoved) {
	
	        postDigestQueue.put(element, data);
	        postDigestElements.push(element);
	
	        if (postDigestElements.length === 1) {
	          $rootScope.$$postDigest(handleCSSClassChanges);
	        }
	      }
	    }
	  }];
	};
	
	/**
	 * @ngdoc provider
	 * @name $animateProvider
	 *
	 * @description
	 * Default implementation of $animate that doesn't perform any animations, instead just
	 * synchronously performs DOM updates and resolves the returned runner promise.
	 *
	 * In order to enable animations the `ngAnimate` module has to be loaded.
	 *
	 * To see the functional implementation check out `src/ngAnimate/animate.js`.
	 */
	var $AnimateProvider = ['$provide', /** @this */ function($provide) {
	  var provider = this;
	
	  this.$$registeredAnimations = Object.create(null);
	
	   /**
	   * @ngdoc method
	   * @name $animateProvider#register
	   *
	   * @description
	   * Registers a new injectable animation factory function. The factory function produces the
	   * animation object which contains callback functions for each event that is expected to be
	   * animated.
	   *
	   *   * `eventFn`: `function(element, ... , doneFunction, options)`
	   *   The element to animate, the `doneFunction` and the options fed into the animation. Depending
	   *   on the type of animation additional arguments will be injected into the animation function. The
	   *   list below explains the function signatures for the different animation methods:
	   *
	   *   - setClass: function(element, addedClasses, removedClasses, doneFunction, options)
	   *   - addClass: function(element, addedClasses, doneFunction, options)
	   *   - removeClass: function(element, removedClasses, doneFunction, options)
	   *   - enter, leave, move: function(element, doneFunction, options)
	   *   - animate: function(element, fromStyles, toStyles, doneFunction, options)
	   *
	   *   Make sure to trigger the `doneFunction` once the animation is fully complete.
	   *
	   * ```js
	   *   return {
	   *     //enter, leave, move signature
	   *     eventFn : function(element, done, options) {
	   *       //code to run the animation
	   *       //once complete, then run done()
	   *       return function endFunction(wasCancelled) {
	   *         //code to cancel the animation
	   *       }
	   *     }
	   *   }
	   * ```
	   *
	   * @param {string} name The name of the animation (this is what the class-based CSS value will be compared to).
	   * @param {Function} factory The factory function that will be executed to return the animation
	   *                           object.
	   */
	  this.register = function(name, factory) {
	    if (name && name.charAt(0) !== '.') {
	      throw $animateMinErr('notcsel', 'Expecting class selector starting with \'.\' got \'{0}\'.', name);
	    }
	
	    var key = name + '-animation';
	    provider.$$registeredAnimations[name.substr(1)] = key;
	    $provide.factory(key, factory);
	  };
	
	  /**
	   * @ngdoc method
	   * @name $animateProvider#classNameFilter
	   *
	   * @description
	   * Sets and/or returns the CSS class regular expression that is checked when performing
	   * an animation. Upon bootstrap the classNameFilter value is not set at all and will
	   * therefore enable $animate to attempt to perform an animation on any element that is triggered.
	   * When setting the `classNameFilter` value, animations will only be performed on elements
	   * that successfully match the filter expression. This in turn can boost performance
	   * for low-powered devices as well as applications containing a lot of structural operations.
	   * @param {RegExp=} expression The className expression which will be checked against all animations
	   * @return {RegExp} The current CSS className expression value. If null then there is no expression value
	   */
	  this.classNameFilter = function(expression) {
	    if (arguments.length === 1) {
	      this.$$classNameFilter = (expression instanceof RegExp) ? expression : null;
	      if (this.$$classNameFilter) {
	        var reservedRegex = new RegExp('(\\s+|\\/)' + NG_ANIMATE_CLASSNAME + '(\\s+|\\/)');
	        if (reservedRegex.test(this.$$classNameFilter.toString())) {
	          throw $animateMinErr('nongcls','$animateProvider.classNameFilter(regex) prohibits accepting a regex value which matches/contains the "{0}" CSS class.', NG_ANIMATE_CLASSNAME);
	        }
	      }
	    }
	    return this.$$classNameFilter;
	  };
	
	  this.$get = ['$$animateQueue', function($$animateQueue) {
	    function domInsert(element, parentElement, afterElement) {
	      // if for some reason the previous element was removed
	      // from the dom sometime before this code runs then let's
	      // just stick to using the parent element as the anchor
	      if (afterElement) {
	        var afterNode = extractElementNode(afterElement);
	        if (afterNode && !afterNode.parentNode && !afterNode.previousElementSibling) {
	          afterElement = null;
	        }
	      }
	      if (afterElement) {
	        afterElement.after(element);
	      } else {
	        parentElement.prepend(element);
	      }
	    }
	
	    /**
	     * @ngdoc service
	     * @name $animate
	     * @description The $animate service exposes a series of DOM utility methods that provide support
	     * for animation hooks. The default behavior is the application of DOM operations, however,
	     * when an animation is detected (and animations are enabled), $animate will do the heavy lifting
	     * to ensure that animation runs with the triggered DOM operation.
	     *
	     * By default $animate doesn't trigger any animations. This is because the `ngAnimate` module isn't
	     * included and only when it is active then the animation hooks that `$animate` triggers will be
	     * functional. Once active then all structural `ng-` directives will trigger animations as they perform
	     * their DOM-related operations (enter, leave and move). Other directives such as `ngClass`,
	     * `ngShow`, `ngHide` and `ngMessages` also provide support for animations.
	     *
	     * It is recommended that the`$animate` service is always used when executing DOM-related procedures within directives.
	     *
	     * To learn more about enabling animation support, click here to visit the
	     * {@link ngAnimate ngAnimate module page}.
	     */
	    return {
	      // we don't call it directly since non-existant arguments may
	      // be interpreted as null within the sub enabled function
	
	      /**
	       *
	       * @ngdoc method
	       * @name $animate#on
	       * @kind function
	       * @description Sets up an event listener to fire whenever the animation event (enter, leave, move, etc...)
	       *    has fired on the given element or among any of its children. Once the listener is fired, the provided callback
	       *    is fired with the following params:
	       *
	       * ```js
	       * $animate.on('enter', container,
	       *    function callback(element, phase) {
	       *      // cool we detected an enter animation within the container
	       *    }
	       * );
	       * ```
	       *
	       * @param {string} event the animation event that will be captured (e.g. enter, leave, move, addClass, removeClass, etc...)
	       * @param {DOMElement} container the container element that will capture each of the animation events that are fired on itself
	       *     as well as among its children
	       * @param {Function} callback the callback function that will be fired when the listener is triggered
	       *
	       * The arguments present in the callback function are:
	       * * `element` - The captured DOM element that the animation was fired on.
	       * * `phase` - The phase of the animation. The two possible phases are **start** (when the animation starts) and **close** (when it ends).
	       */
	      on: $$animateQueue.on,
	
	      /**
	       *
	       * @ngdoc method
	       * @name $animate#off
	       * @kind function
	       * @description Deregisters an event listener based on the event which has been associated with the provided element. This method
	       * can be used in three different ways depending on the arguments:
	       *
	       * ```js
	       * // remove all the animation event listeners listening for `enter`
	       * $animate.off('enter');
	       *
	       * // remove listeners for all animation events from the container element
	       * $animate.off(container);
	       *
	       * // remove all the animation event listeners listening for `enter` on the given element and its children
	       * $animate.off('enter', container);
	       *
	       * // remove the event listener function provided by `callback` that is set
	       * // to listen for `enter` on the given `container` as well as its children
	       * $animate.off('enter', container, callback);
	       * ```
	       *
	       * @param {string|DOMElement} event|container the animation event (e.g. enter, leave, move,
	       * addClass, removeClass, etc...), or the container element. If it is the element, all other
	       * arguments are ignored.
	       * @param {DOMElement=} container the container element the event listener was placed on
	       * @param {Function=} callback the callback function that was registered as the listener
	       */
	      off: $$animateQueue.off,
	
	      /**
	       * @ngdoc method
	       * @name $animate#pin
	       * @kind function
	       * @description Associates the provided element with a host parent element to allow the element to be animated even if it exists
	       *    outside of the DOM structure of the Angular application. By doing so, any animation triggered via `$animate` can be issued on the
	       *    element despite being outside the realm of the application or within another application. Say for example if the application
	       *    was bootstrapped on an element that is somewhere inside of the `<body>` tag, but we wanted to allow for an element to be situated
	       *    as a direct child of `document.body`, then this can be achieved by pinning the element via `$animate.pin(element)`. Keep in mind
	       *    that calling `$animate.pin(element, parentElement)` will not actually insert into the DOM anywhere; it will just create the association.
	       *
	       *    Note that this feature is only active when the `ngAnimate` module is used.
	       *
	       * @param {DOMElement} element the external element that will be pinned
	       * @param {DOMElement} parentElement the host parent element that will be associated with the external element
	       */
	      pin: $$animateQueue.pin,
	
	      /**
	       *
	       * @ngdoc method
	       * @name $animate#enabled
	       * @kind function
	       * @description Used to get and set whether animations are enabled or not on the entire application or on an element and its children. This
	       * function can be called in four ways:
	       *
	       * ```js
	       * // returns true or false
	       * $animate.enabled();
	       *
	       * // changes the enabled state for all animations
	       * $animate.enabled(false);
	       * $animate.enabled(true);
	       *
	       * // returns true or false if animations are enabled for an element
	       * $animate.enabled(element);
	       *
	       * // changes the enabled state for an element and its children
	       * $animate.enabled(element, true);
	       * $animate.enabled(element, false);
	       * ```
	       *
	       * @param {DOMElement=} element the element that will be considered for checking/setting the enabled state
	       * @param {boolean=} enabled whether or not the animations will be enabled for the element
	       *
	       * @return {boolean} whether or not animations are enabled
	       */
	      enabled: $$animateQueue.enabled,
	
	      /**
	       * @ngdoc method
	       * @name $animate#cancel
	       * @kind function
	       * @description Cancels the provided animation.
	       *
	       * @param {Promise} animationPromise The animation promise that is returned when an animation is started.
	       */
	      cancel: function(runner) {
	        if (runner.end) {
	          runner.end();
	        }
	      },
	
	      /**
	       *
	       * @ngdoc method
	       * @name $animate#enter
	       * @kind function
	       * @description Inserts the element into the DOM either after the `after` element (if provided) or
	       *   as the first child within the `parent` element and then triggers an animation.
	       *   A promise is returned that will be resolved during the next digest once the animation
	       *   has completed.
	       *
	       * @param {DOMElement} element the element which will be inserted into the DOM
	       * @param {DOMElement} parent the parent element which will append the element as
	       *   a child (so long as the after element is not present)
	       * @param {DOMElement=} after the sibling element after which the element will be appended
	       * @param {object=} options an optional collection of options/styles that will be applied to the element.
	       *   The object can have the following properties:
	       *
	       *   - **addClass** - `{string}` - space-separated CSS classes to add to element
	       *   - **from** - `{Object}` - CSS properties & values at the beginning of animation. Must have matching `to`
	       *   - **removeClass** - `{string}` - space-separated CSS classes to remove from element
	       *   - **to** - `{Object}` - CSS properties & values at end of animation. Must have matching `from`
	       *
	       * @return {Promise} the animation callback promise
	       */
	      enter: function(element, parent, after, options) {
	        parent = parent && jqLite(parent);
	        after = after && jqLite(after);
	        parent = parent || after.parent();
	        domInsert(element, parent, after);
	        return $$animateQueue.push(element, 'enter', prepareAnimateOptions(options));
	      },
	
	      /**
	       *
	       * @ngdoc method
	       * @name $animate#move
	       * @kind function
	       * @description Inserts (moves) the element into its new position in the DOM either after
	       *   the `after` element (if provided) or as the first child within the `parent` element
	       *   and then triggers an animation. A promise is returned that will be resolved
	       *   during the next digest once the animation has completed.
	       *
	       * @param {DOMElement} element the element which will be moved into the new DOM position
	       * @param {DOMElement} parent the parent element which will append the element as
	       *   a child (so long as the after element is not present)
	       * @param {DOMElement=} after the sibling element after which the element will be appended
	       * @param {object=} options an optional collection of options/styles that will be applied to the element.
	       *   The object can have the following properties:
	       *
	       *   - **addClass** - `{string}` - space-separated CSS classes to add to element
	       *   - **from** - `{Object}` - CSS properties & values at the beginning of animation. Must have matching `to`
	       *   - **removeClass** - `{string}` - space-separated CSS classes to remove from element
	       *   - **to** - `{Object}` - CSS properties & values at end of animation. Must have matching `from`
	       *
	       * @return {Promise} the animation callback promise
	       */
	      move: function(element, parent, after, options) {
	        parent = parent && jqLite(parent);
	        after = after && jqLite(after);
	        parent = parent || after.parent();
	        domInsert(element, parent, after);
	        return $$animateQueue.push(element, 'move', prepareAnimateOptions(options));
	      },
	
	      /**
	       * @ngdoc method
	       * @name $animate#leave
	       * @kind function
	       * @description Triggers an animation and then removes the element from the DOM.
	       * When the function is called a promise is returned that will be resolved during the next
	       * digest once the animation has completed.
	       *
	       * @param {DOMElement} element the element which will be removed from the DOM
	       * @param {object=} options an optional collection of options/styles that will be applied to the element.
	       *   The object can have the following properties:
	       *
	       *   - **addClass** - `{string}` - space-separated CSS classes to add to element
	       *   - **from** - `{Object}` - CSS properties & values at the beginning of animation. Must have matching `to`
	       *   - **removeClass** - `{string}` - space-separated CSS classes to remove from element
	       *   - **to** - `{Object}` - CSS properties & values at end of animation. Must have matching `from`
	       *
	       * @return {Promise} the animation callback promise
	       */
	      leave: function(element, options) {
	        return $$animateQueue.push(element, 'leave', prepareAnimateOptions(options), function() {
	          element.remove();
	        });
	      },
	
	      /**
	       * @ngdoc method
	       * @name $animate#addClass
	       * @kind function
	       *
	       * @description Triggers an addClass animation surrounding the addition of the provided CSS class(es). Upon
	       *   execution, the addClass operation will only be handled after the next digest and it will not trigger an
	       *   animation if element already contains the CSS class or if the class is removed at a later step.
	       *   Note that class-based animations are treated differently compared to structural animations
	       *   (like enter, move and leave) since the CSS classes may be added/removed at different points
	       *   depending if CSS or JavaScript animations are used.
	       *
	       * @param {DOMElement} element the element which the CSS classes will be applied to
	       * @param {string} className the CSS class(es) that will be added (multiple classes are separated via spaces)
	       * @param {object=} options an optional collection of options/styles that will be applied to the element.
	       *   The object can have the following properties:
	       *
	       *   - **addClass** - `{string}` - space-separated CSS classes to add to element
	       *   - **from** - `{Object}` - CSS properties & values at the beginning of animation. Must have matching `to`
	       *   - **removeClass** - `{string}` - space-separated CSS classes to remove from element
	       *   - **to** - `{Object}` - CSS properties & values at end of animation. Must have matching `from`
	       *
	       * @return {Promise} the animation callback promise
	       */
	      addClass: function(element, className, options) {
	        options = prepareAnimateOptions(options);
	        options.addClass = mergeClasses(options.addclass, className);
	        return $$animateQueue.push(element, 'addClass', options);
	      },
	
	      /**
	       * @ngdoc method
	       * @name $animate#removeClass
	       * @kind function
	       *
	       * @description Triggers a removeClass animation surrounding the removal of the provided CSS class(es). Upon
	       *   execution, the removeClass operation will only be handled after the next digest and it will not trigger an
	       *   animation if element does not contain the CSS class or if the class is added at a later step.
	       *   Note that class-based animations are treated differently compared to structural animations
	       *   (like enter, move and leave) since the CSS classes may be added/removed at different points
	       *   depending if CSS or JavaScript animations are used.
	       *
	       * @param {DOMElement} element the element which the CSS classes will be applied to
	       * @param {string} className the CSS class(es) that will be removed (multiple classes are separated via spaces)
	       * @param {object=} options an optional collection of options/styles that will be applied to the element.
	       *   The object can have the following properties:
	       *
	       *   - **addClass** - `{string}` - space-separated CSS classes to add to element
	       *   - **from** - `{Object}` - CSS properties & values at the beginning of animation. Must have matching `to`
	       *   - **removeClass** - `{string}` - space-separated CSS classes to remove from element
	       *   - **to** - `{Object}` - CSS properties & values at end of animation. Must have matching `from`
	       *
	       * @return {Promise} the animation callback promise
	       */
	      removeClass: function(element, className, options) {
	        options = prepareAnimateOptions(options);
	        options.removeClass = mergeClasses(options.removeClass, className);
	        return $$animateQueue.push(element, 'removeClass', options);
	      },
	
	      /**
	       * @ngdoc method
	       * @name $animate#setClass
	       * @kind function
	       *
	       * @description Performs both the addition and removal of a CSS classes on an element and (during the process)
	       *    triggers an animation surrounding the class addition/removal. Much like `$animate.addClass` and
	       *    `$animate.removeClass`, `setClass` will only evaluate the classes being added/removed once a digest has
	       *    passed. Note that class-based animations are treated differently compared to structural animations
	       *    (like enter, move and leave) since the CSS classes may be added/removed at different points
	       *    depending if CSS or JavaScript animations are used.
	       *
	       * @param {DOMElement} element the element which the CSS classes will be applied to
	       * @param {string} add the CSS class(es) that will be added (multiple classes are separated via spaces)
	       * @param {string} remove the CSS class(es) that will be removed (multiple classes are separated via spaces)
	       * @param {object=} options an optional collection of options/styles that will be applied to the element.
	       *   The object can have the following properties:
	       *
	       *   - **addClass** - `{string}` - space-separated CSS classes to add to element
	       *   - **from** - `{Object}` - CSS properties & values at the beginning of animation. Must have matching `to`
	       *   - **removeClass** - `{string}` - space-separated CSS classes to remove from element
	       *   - **to** - `{Object}` - CSS properties & values at end of animation. Must have matching `from`
	       *
	       * @return {Promise} the animation callback promise
	       */
	      setClass: function(element, add, remove, options) {
	        options = prepareAnimateOptions(options);
	        options.addClass = mergeClasses(options.addClass, add);
	        options.removeClass = mergeClasses(options.removeClass, remove);
	        return $$animateQueue.push(element, 'setClass', options);
	      },
	
	      /**
	       * @ngdoc method
	       * @name $animate#animate
	       * @kind function
	       *
	       * @description Performs an inline animation on the element which applies the provided to and from CSS styles to the element.
	       * If any detected CSS transition, keyframe or JavaScript matches the provided className value, then the animation will take
	       * on the provided styles. For example, if a transition animation is set for the given className, then the provided `from` and
	       * `to` styles will be applied alongside the given transition. If the CSS style provided in `from` does not have a corresponding
	       * style in `to`, the style in `from` is applied immediately, and no animation is run.
	       * If a JavaScript animation is detected then the provided styles will be given in as function parameters into the `animate`
	       * method (or as part of the `options` parameter):
	       *
	       * ```js
	       * ngModule.animation('.my-inline-animation', function() {
	       *   return {
	       *     animate : function(element, from, to, done, options) {
	       *       //animation
	       *       done();
	       *     }
	       *   }
	       * });
	       * ```
	       *
	       * @param {DOMElement} element the element which the CSS styles will be applied to
	       * @param {object} from the from (starting) CSS styles that will be applied to the element and across the animation.
	       * @param {object} to the to (destination) CSS styles that will be applied to the element and across the animation.
	       * @param {string=} className an optional CSS class that will be applied to the element for the duration of the animation. If
	       *    this value is left as empty then a CSS class of `ng-inline-animate` will be applied to the element.
	       *    (Note that if no animation is detected then this value will not be applied to the element.)
	       * @param {object=} options an optional collection of options/styles that will be applied to the element.
	       *   The object can have the following properties:
	       *
	       *   - **addClass** - `{string}` - space-separated CSS classes to add to element
	       *   - **from** - `{Object}` - CSS properties & values at the beginning of animation. Must have matching `to`
	       *   - **removeClass** - `{string}` - space-separated CSS classes to remove from element
	       *   - **to** - `{Object}` - CSS properties & values at end of animation. Must have matching `from`
	       *
	       * @return {Promise} the animation callback promise
	       */
	      animate: function(element, from, to, className, options) {
	        options = prepareAnimateOptions(options);
	        options.from = options.from ? extend(options.from, from) : from;
	        options.to   = options.to   ? extend(options.to, to)     : to;
	
	        className = className || 'ng-inline-animate';
	        options.tempClasses = mergeClasses(options.tempClasses, className);
	        return $$animateQueue.push(element, 'animate', options);
	      }
	    };
	  }];
	}];
	
	var $$AnimateAsyncRunFactoryProvider = /** @this */ function() {
	  this.$get = ['$$rAF', function($$rAF) {
	    var waitQueue = [];
	
	    function waitForTick(fn) {
	      waitQueue.push(fn);
	      if (waitQueue.length > 1) return;
	      $$rAF(function() {
	        for (var i = 0; i < waitQueue.length; i++) {
	          waitQueue[i]();
	        }
	        waitQueue = [];
	      });
	    }
	
	    return function() {
	      var passed = false;
	      waitForTick(function() {
	        passed = true;
	      });
	      return function(callback) {
	        if (passed) {
	          callback();
	        } else {
	          waitForTick(callback);
	        }
	      };
	    };
	  }];
	};
	
	var $$AnimateRunnerFactoryProvider = /** @this */ function() {
	  this.$get = ['$q', '$sniffer', '$$animateAsyncRun', '$$isDocumentHidden', '$timeout',
	       function($q,   $sniffer,   $$animateAsyncRun,   $$isDocumentHidden,   $timeout) {
	
	    var INITIAL_STATE = 0;
	    var DONE_PENDING_STATE = 1;
	    var DONE_COMPLETE_STATE = 2;
	
	    AnimateRunner.chain = function(chain, callback) {
	      var index = 0;
	
	      next();
	      function next() {
	        if (index === chain.length) {
	          callback(true);
	          return;
	        }
	
	        chain[index](function(response) {
	          if (response === false) {
	            callback(false);
	            return;
	          }
	          index++;
	          next();
	        });
	      }
	    };
	
	    AnimateRunner.all = function(runners, callback) {
	      var count = 0;
	      var status = true;
	      forEach(runners, function(runner) {
	        runner.done(onProgress);
	      });
	
	      function onProgress(response) {
	        status = status && response;
	        if (++count === runners.length) {
	          callback(status);
	        }
	      }
	    };
	
	    function AnimateRunner(host) {
	      this.setHost(host);
	
	      var rafTick = $$animateAsyncRun();
	      var timeoutTick = function(fn) {
	        $timeout(fn, 0, false);
	      };
	
	      this._doneCallbacks = [];
	      this._tick = function(fn) {
	        if ($$isDocumentHidden()) {
	          timeoutTick(fn);
	        } else {
	          rafTick(fn);
	        }
	      };
	      this._state = 0;
	    }
	
	    AnimateRunner.prototype = {
	      setHost: function(host) {
	        this.host = host || {};
	      },
	
	      done: function(fn) {
	        if (this._state === DONE_COMPLETE_STATE) {
	          fn();
	        } else {
	          this._doneCallbacks.push(fn);
	        }
	      },
	
	      progress: noop,
	
	      getPromise: function() {
	        if (!this.promise) {
	          var self = this;
	          this.promise = $q(function(resolve, reject) {
	            self.done(function(status) {
	              if (status === false) {
	                reject();
	              } else {
	                resolve();
	              }
	            });
	          });
	        }
	        return this.promise;
	      },
	
	      then: function(resolveHandler, rejectHandler) {
	        return this.getPromise().then(resolveHandler, rejectHandler);
	      },
	
	      'catch': function(handler) {
	        return this.getPromise()['catch'](handler);
	      },
	
	      'finally': function(handler) {
	        return this.getPromise()['finally'](handler);
	      },
	
	      pause: function() {
	        if (this.host.pause) {
	          this.host.pause();
	        }
	      },
	
	      resume: function() {
	        if (this.host.resume) {
	          this.host.resume();
	        }
	      },
	
	      end: function() {
	        if (this.host.end) {
	          this.host.end();
	        }
	        this._resolve(true);
	      },
	
	      cancel: function() {
	        if (this.host.cancel) {
	          this.host.cancel();
	        }
	        this._resolve(false);
	      },
	
	      complete: function(response) {
	        var self = this;
	        if (self._state === INITIAL_STATE) {
	          self._state = DONE_PENDING_STATE;
	          self._tick(function() {
	            self._resolve(response);
	          });
	        }
	      },
	
	      _resolve: function(response) {
	        if (this._state !== DONE_COMPLETE_STATE) {
	          forEach(this._doneCallbacks, function(fn) {
	            fn(response);
	          });
	          this._doneCallbacks.length = 0;
	          this._state = DONE_COMPLETE_STATE;
	        }
	      }
	    };
	
	    return AnimateRunner;
	  }];
	};
	
	/* exported $CoreAnimateCssProvider */
	
	/**
	 * @ngdoc service
	 * @name $animateCss
	 * @kind object
	 * @this
	 *
	 * @description
	 * This is the core version of `$animateCss`. By default, only when the `ngAnimate` is included,
	 * then the `$animateCss` service will actually perform animations.
	 *
	 * Click here {@link ngAnimate.$animateCss to read the documentation for $animateCss}.
	 */
	var $CoreAnimateCssProvider = function() {
	  this.$get = ['$$rAF', '$q', '$$AnimateRunner', function($$rAF, $q, $$AnimateRunner) {
	
	    return function(element, initialOptions) {
	      // all of the animation functions should create
	      // a copy of the options data, however, if a
	      // parent service has already created a copy then
	      // we should stick to using that
	      var options = initialOptions || {};
	      if (!options.$$prepared) {
	        options = copy(options);
	      }
	
	      // there is no point in applying the styles since
	      // there is no animation that goes on at all in
	      // this version of $animateCss.
	      if (options.cleanupStyles) {
	        options.from = options.to = null;
	      }
	
	      if (options.from) {
	        element.css(options.from);
	        options.from = null;
	      }
	
	      var closed, runner = new $$AnimateRunner();
	      return {
	        start: run,
	        end: run
	      };
	
	      function run() {
	        $$rAF(function() {
	          applyAnimationContents();
	          if (!closed) {
	            runner.complete();
	          }
	          closed = true;
	        });
	        return runner;
	      }
	
	      function applyAnimationContents() {
	        if (options.addClass) {
	          element.addClass(options.addClass);
	          options.addClass = null;
	        }
	        if (options.removeClass) {
	          element.removeClass(options.removeClass);
	          options.removeClass = null;
	        }
	        if (options.to) {
	          element.css(options.to);
	          options.to = null;
	        }
	      }
	    };
	  }];
	};
	
	/* global stripHash: true */
	
	/**
	 * ! This is a private undocumented service !
	 *
	 * @name $browser
	 * @requires $log
	 * @description
	 * This object has two goals:
	 *
	 * - hide all the global state in the browser caused by the window object
	 * - abstract away all the browser specific features and inconsistencies
	 *
	 * For tests we provide {@link ngMock.$browser mock implementation} of the `$browser`
	 * service, which can be used for convenient testing of the application without the interaction with
	 * the real browser apis.
	 */
	/**
	 * @param {object} window The global window object.
	 * @param {object} document jQuery wrapped document.
	 * @param {object} $log window.console or an object with the same interface.
	 * @param {object} $sniffer $sniffer service
	 */
	function Browser(window, document, $log, $sniffer) {
	  var self = this,
	      location = window.location,
	      history = window.history,
	      setTimeout = window.setTimeout,
	      clearTimeout = window.clearTimeout,
	      pendingDeferIds = {};
	
	  self.isMock = false;
	
	  var outstandingRequestCount = 0;
	  var outstandingRequestCallbacks = [];
	
	  // TODO(vojta): remove this temporary api
	  self.$$completeOutstandingRequest = completeOutstandingRequest;
	  self.$$incOutstandingRequestCount = function() { outstandingRequestCount++; };
	
	  /**
	   * Executes the `fn` function(supports currying) and decrements the `outstandingRequestCallbacks`
	   * counter. If the counter reaches 0, all the `outstandingRequestCallbacks` are executed.
	   */
	  function completeOutstandingRequest(fn) {
	    try {
	      fn.apply(null, sliceArgs(arguments, 1));
	    } finally {
	      outstandingRequestCount--;
	      if (outstandingRequestCount === 0) {
	        while (outstandingRequestCallbacks.length) {
	          try {
	            outstandingRequestCallbacks.pop()();
	          } catch (e) {
	            $log.error(e);
	          }
	        }
	      }
	    }
	  }
	
	  function getHash(url) {
	    var index = url.indexOf('#');
	    return index === -1 ? '' : url.substr(index);
	  }
	
	  /**
	   * @private
	   * Note: this method is used only by scenario runner
	   * TODO(vojta): prefix this method with $$ ?
	   * @param {function()} callback Function that will be called when no outstanding request
	   */
	  self.notifyWhenNoOutstandingRequests = function(callback) {
	    if (outstandingRequestCount === 0) {
	      callback();
	    } else {
	      outstandingRequestCallbacks.push(callback);
	    }
	  };
	
	  //////////////////////////////////////////////////////////////
	  // URL API
	  //////////////////////////////////////////////////////////////
	
	  var cachedState, lastHistoryState,
	      lastBrowserUrl = location.href,
	      baseElement = document.find('base'),
	      pendingLocation = null,
	      getCurrentState = !$sniffer.history ? noop : function getCurrentState() {
	        try {
	          return history.state;
	        } catch (e) {
	          // MSIE can reportedly throw when there is no state (UNCONFIRMED).
	        }
	      };
	
	  cacheState();
	  lastHistoryState = cachedState;
	
	  /**
	   * @name $browser#url
	   *
	   * @description
	   * GETTER:
	   * Without any argument, this method just returns current value of location.href.
	   *
	   * SETTER:
	   * With at least one argument, this method sets url to new value.
	   * If html5 history api supported, pushState/replaceState is used, otherwise
	   * location.href/location.replace is used.
	   * Returns its own instance to allow chaining
	   *
	   * NOTE: this api is intended for use only by the $location service. Please use the
	   * {@link ng.$location $location service} to change url.
	   *
	   * @param {string} url New url (when used as setter)
	   * @param {boolean=} replace Should new url replace current history record?
	   * @param {object=} state object to use with pushState/replaceState
	   */
	  self.url = function(url, replace, state) {
	    // In modern browsers `history.state` is `null` by default; treating it separately
	    // from `undefined` would cause `$browser.url('/foo')` to change `history.state`
	    // to undefined via `pushState`. Instead, let's change `undefined` to `null` here.
	    if (isUndefined(state)) {
	      state = null;
	    }
	
	    // Android Browser BFCache causes location, history reference to become stale.
	    if (location !== window.location) location = window.location;
	    if (history !== window.history) history = window.history;
	
	    // setter
	    if (url) {
	      var sameState = lastHistoryState === state;
	
	      // Don't change anything if previous and current URLs and states match. This also prevents
	      // IE<10 from getting into redirect loop when in LocationHashbangInHtml5Url mode.
	      // See https://github.com/angular/angular.js/commit/ffb2701
	      if (lastBrowserUrl === url && (!$sniffer.history || sameState)) {
	        return self;
	      }
	      var sameBase = lastBrowserUrl && stripHash(lastBrowserUrl) === stripHash(url);
	      lastBrowserUrl = url;
	      lastHistoryState = state;
	      // Don't use history API if only the hash changed
	      // due to a bug in IE10/IE11 which leads
	      // to not firing a `hashchange` nor `popstate` event
	      // in some cases (see #9143).
	      if ($sniffer.history && (!sameBase || !sameState)) {
	        history[replace ? 'replaceState' : 'pushState'](state, '', url);
	        cacheState();
	        // Do the assignment again so that those two variables are referentially identical.
	        lastHistoryState = cachedState;
	      } else {
	        if (!sameBase) {
	          pendingLocation = url;
	        }
	        if (replace) {
	          location.replace(url);
	        } else if (!sameBase) {
	          location.href = url;
	        } else {
	          location.hash = getHash(url);
	        }
	        if (location.href !== url) {
	          pendingLocation = url;
	        }
	      }
	      if (pendingLocation) {
	        pendingLocation = url;
	      }
	      return self;
	    // getter
	    } else {
	      // - pendingLocation is needed as browsers don't allow to read out
	      //   the new location.href if a reload happened or if there is a bug like in iOS 9 (see
	      //   https://openradar.appspot.com/22186109).
	      // - the replacement is a workaround for https://bugzilla.mozilla.org/show_bug.cgi?id=407172
	      return pendingLocation || location.href.replace(/%27/g,'\'');
	    }
	  };
	
	  /**
	   * @name $browser#state
	   *
	   * @description
	   * This method is a getter.
	   *
	   * Return history.state or null if history.state is undefined.
	   *
	   * @returns {object} state
	   */
	  self.state = function() {
	    return cachedState;
	  };
	
	  var urlChangeListeners = [],
	      urlChangeInit = false;
	
	  function cacheStateAndFireUrlChange() {
	    pendingLocation = null;
	    cacheState();
	    fireUrlChange();
	  }
	
	  // This variable should be used *only* inside the cacheState function.
	  var lastCachedState = null;
	  function cacheState() {
	    // This should be the only place in $browser where `history.state` is read.
	    cachedState = getCurrentState();
	    cachedState = isUndefined(cachedState) ? null : cachedState;
	
	    // Prevent callbacks fo fire twice if both hashchange & popstate were fired.
	    if (equals(cachedState, lastCachedState)) {
	      cachedState = lastCachedState;
	    }
	    lastCachedState = cachedState;
	  }
	
	  function fireUrlChange() {
	    if (lastBrowserUrl === self.url() && lastHistoryState === cachedState) {
	      return;
	    }
	
	    lastBrowserUrl = self.url();
	    lastHistoryState = cachedState;
	    forEach(urlChangeListeners, function(listener) {
	      listener(self.url(), cachedState);
	    });
	  }
	
	  /**
	   * @name $browser#onUrlChange
	   *
	   * @description
	   * Register callback function that will be called, when url changes.
	   *
	   * It's only called when the url is changed from outside of angular:
	   * - user types different url into address bar
	   * - user clicks on history (forward/back) button
	   * - user clicks on a link
	   *
	   * It's not called when url is changed by $browser.url() method
	   *
	   * The listener gets called with new url as parameter.
	   *
	   * NOTE: this api is intended for use only by the $location service. Please use the
	   * {@link ng.$location $location service} to monitor url changes in angular apps.
	   *
	   * @param {function(string)} listener Listener function to be called when url changes.
	   * @return {function(string)} Returns the registered listener fn - handy if the fn is anonymous.
	   */
	  self.onUrlChange = function(callback) {
	    // TODO(vojta): refactor to use node's syntax for events
	    if (!urlChangeInit) {
	      // We listen on both (hashchange/popstate) when available, as some browsers (e.g. Opera)
	      // don't fire popstate when user change the address bar and don't fire hashchange when url
	      // changed by push/replaceState
	
	      // html5 history api - popstate event
	      if ($sniffer.history) jqLite(window).on('popstate', cacheStateAndFireUrlChange);
	      // hashchange event
	      jqLite(window).on('hashchange', cacheStateAndFireUrlChange);
	
	      urlChangeInit = true;
	    }
	
	    urlChangeListeners.push(callback);
	    return callback;
	  };
	
	  /**
	   * @private
	   * Remove popstate and hashchange handler from window.
	   *
	   * NOTE: this api is intended for use only by $rootScope.
	   */
	  self.$$applicationDestroyed = function() {
	    jqLite(window).off('hashchange popstate', cacheStateAndFireUrlChange);
	  };
	
	  /**
	   * Checks whether the url has changed outside of Angular.
	   * Needs to be exported to be able to check for changes that have been done in sync,
	   * as hashchange/popstate events fire in async.
	   */
	  self.$$checkUrlChange = fireUrlChange;
	
	  //////////////////////////////////////////////////////////////
	  // Misc API
	  //////////////////////////////////////////////////////////////
	
	  /**
	   * @name $browser#baseHref
	   *
	   * @description
	   * Returns current <base href>
	   * (always relative - without domain)
	   *
	   * @returns {string} The current base href
	   */
	  self.baseHref = function() {
	    var href = baseElement.attr('href');
	    return href ? href.replace(/^(https?:)?\/\/[^/]*/, '') : '';
	  };
	
	  /**
	   * @name $browser#defer
	   * @param {function()} fn A function, who's execution should be deferred.
	   * @param {number=} [delay=0] of milliseconds to defer the function execution.
	   * @returns {*} DeferId that can be used to cancel the task via `$browser.defer.cancel()`.
	   *
	   * @description
	   * Executes a fn asynchronously via `setTimeout(fn, delay)`.
	   *
	   * Unlike when calling `setTimeout` directly, in test this function is mocked and instead of using
	   * `setTimeout` in tests, the fns are queued in an array, which can be programmatically flushed
	   * via `$browser.defer.flush()`.
	   *
	   */
	  self.defer = function(fn, delay) {
	    var timeoutId;
	    outstandingRequestCount++;
	    timeoutId = setTimeout(function() {
	      delete pendingDeferIds[timeoutId];
	      completeOutstandingRequest(fn);
	    }, delay || 0);
	    pendingDeferIds[timeoutId] = true;
	    return timeoutId;
	  };
	
	
	  /**
	   * @name $browser#defer.cancel
	   *
	   * @description
	   * Cancels a deferred task identified with `deferId`.
	   *
	   * @param {*} deferId Token returned by the `$browser.defer` function.
	   * @returns {boolean} Returns `true` if the task hasn't executed yet and was successfully
	   *                    canceled.
	   */
	  self.defer.cancel = function(deferId) {
	    if (pendingDeferIds[deferId]) {
	      delete pendingDeferIds[deferId];
	      clearTimeout(deferId);
	      completeOutstandingRequest(noop);
	      return true;
	    }
	    return false;
	  };
	
	}
	
	/** @this */
	function $BrowserProvider() {
	  this.$get = ['$window', '$log', '$sniffer', '$document',
	      function($window, $log, $sniffer, $document) {
	        return new Browser($window, $document, $log, $sniffer);
	      }];
	}
	
	/**
	 * @ngdoc service
	 * @name $cacheFactory
	 * @this
	 *
	 * @description
	 * Factory that constructs {@link $cacheFactory.Cache Cache} objects and gives access to
	 * them.
	 *
	 * ```js
	 *
	 *  var cache = $cacheFactory('cacheId');
	 *  expect($cacheFactory.get('cacheId')).toBe(cache);
	 *  expect($cacheFactory.get('noSuchCacheId')).not.toBeDefined();
	 *
	 *  cache.put("key", "value");
	 *  cache.put("another key", "another value");
	 *
	 *  // We've specified no options on creation
	 *  expect(cache.info()).toEqual({id: 'cacheId', size: 2});
	 *
	 * ```
	 *
	 *
	 * @param {string} cacheId Name or id of the newly created cache.
	 * @param {object=} options Options object that specifies the cache behavior. Properties:
	 *
	 *   - `{number=}` `capacity` — turns the cache into LRU cache.
	 *
	 * @returns {object} Newly created cache object with the following set of methods:
	 *
	 * - `{object}` `info()` — Returns id, size, and options of cache.
	 * - `{{*}}` `put({string} key, {*} value)` — Puts a new key-value pair into the cache and returns
	 *   it.
	 * - `{{*}}` `get({string} key)` — Returns cached value for `key` or undefined for cache miss.
	 * - `{void}` `remove({string} key)` — Removes a key-value pair from the cache.
	 * - `{void}` `removeAll()` — Removes all cached values.
	 * - `{void}` `destroy()` — Removes references to this cache from $cacheFactory.
	 *
	 * @example
	   <example module="cacheExampleApp" name="cache-factory">
	     <file name="index.html">
	       <div ng-controller="CacheController">
	         <input ng-model="newCacheKey" placeholder="Key">
	         <input ng-model="newCacheValue" placeholder="Value">
	         <button ng-click="put(newCacheKey, newCacheValue)">Cache</button>
	
	         <p ng-if="keys.length">Cached Values</p>
	         <div ng-repeat="key in keys">
	           <span ng-bind="key"></span>
	           <span>: </span>
	           <b ng-bind="cache.get(key)"></b>
	         </div>
	
	         <p>Cache Info</p>
	         <div ng-repeat="(key, value) in cache.info()">
	           <span ng-bind="key"></span>
	           <span>: </span>
	           <b ng-bind="value"></b>
	         </div>
	       </div>
	     </file>
	     <file name="script.js">
	       angular.module('cacheExampleApp', []).
	         controller('CacheController', ['$scope', '$cacheFactory', function($scope, $cacheFactory) {
	           $scope.keys = [];
	           $scope.cache = $cacheFactory('cacheId');
	           $scope.put = function(key, value) {
	             if (angular.isUndefined($scope.cache.get(key))) {
	               $scope.keys.push(key);
	             }
	             $scope.cache.put(key, angular.isUndefined(value) ? null : value);
	           };
	         }]);
	     </file>
	     <file name="style.css">
	       p {
	         margin: 10px 0 3px;
	       }
	     </file>
	   </example>
	 */
	function $CacheFactoryProvider() {
	
	  this.$get = function() {
	    var caches = {};
	
	    function cacheFactory(cacheId, options) {
	      if (cacheId in caches) {
	        throw minErr('$cacheFactory')('iid', 'CacheId \'{0}\' is already taken!', cacheId);
	      }
	
	      var size = 0,
	          stats = extend({}, options, {id: cacheId}),
	          data = createMap(),
	          capacity = (options && options.capacity) || Number.MAX_VALUE,
	          lruHash = createMap(),
	          freshEnd = null,
	          staleEnd = null;
	
	      /**
	       * @ngdoc type
	       * @name $cacheFactory.Cache
	       *
	       * @description
	       * A cache object used to store and retrieve data, primarily used by
	       * {@link $http $http} and the {@link ng.directive:script script} directive to cache
	       * templates and other data.
	       *
	       * ```js
	       *  angular.module('superCache')
	       *    .factory('superCache', ['$cacheFactory', function($cacheFactory) {
	       *      return $cacheFactory('super-cache');
	       *    }]);
	       * ```
	       *
	       * Example test:
	       *
	       * ```js
	       *  it('should behave like a cache', inject(function(superCache) {
	       *    superCache.put('key', 'value');
	       *    superCache.put('another key', 'another value');
	       *
	       *    expect(superCache.info()).toEqual({
	       *      id: 'super-cache',
	       *      size: 2
	       *    });
	       *
	       *    superCache.remove('another key');
	       *    expect(superCache.get('another key')).toBeUndefined();
	       *
	       *    superCache.removeAll();
	       *    expect(superCache.info()).toEqual({
	       *      id: 'super-cache',
	       *      size: 0
	       *    });
	       *  }));
	       * ```
	       */
	      return (caches[cacheId] = {
	
	        /**
	         * @ngdoc method
	         * @name $cacheFactory.Cache#put
	         * @kind function
	         *
	         * @description
	         * Inserts a named entry into the {@link $cacheFactory.Cache Cache} object to be
	         * retrieved later, and incrementing the size of the cache if the key was not already
	         * present in the cache. If behaving like an LRU cache, it will also remove stale
	         * entries from the set.
	         *
	         * It will not insert undefined values into the cache.
	         *
	         * @param {string} key the key under which the cached data is stored.
	         * @param {*} value the value to store alongside the key. If it is undefined, the key
	         *    will not be stored.
	         * @returns {*} the value stored.
	         */
	        put: function(key, value) {
	          if (isUndefined(value)) return;
	          if (capacity < Number.MAX_VALUE) {
	            var lruEntry = lruHash[key] || (lruHash[key] = {key: key});
	
	            refresh(lruEntry);
	          }
	
	          if (!(key in data)) size++;
	          data[key] = value;
	
	          if (size > capacity) {
	            this.remove(staleEnd.key);
	          }
	
	          return value;
	        },
	
	        /**
	         * @ngdoc method
	         * @name $cacheFactory.Cache#get
	         * @kind function
	         *
	         * @description
	         * Retrieves named data stored in the {@link $cacheFactory.Cache Cache} object.
	         *
	         * @param {string} key the key of the data to be retrieved
	         * @returns {*} the value stored.
	         */
	        get: function(key) {
	          if (capacity < Number.MAX_VALUE) {
	            var lruEntry = lruHash[key];
	
	            if (!lruEntry) return;
	
	            refresh(lruEntry);
	          }
	
	          return data[key];
	        },
	
	
	        /**
	         * @ngdoc method
	         * @name $cacheFactory.Cache#remove
	         * @kind function
	         *
	         * @description
	         * Removes an entry from the {@link $cacheFactory.Cache Cache} object.
	         *
	         * @param {string} key the key of the entry to be removed
	         */
	        remove: function(key) {
	          if (capacity < Number.MAX_VALUE) {
	            var lruEntry = lruHash[key];
	
	            if (!lruEntry) return;
	
	            if (lruEntry === freshEnd) freshEnd = lruEntry.p;
	            if (lruEntry === staleEnd) staleEnd = lruEntry.n;
	            link(lruEntry.n,lruEntry.p);
	
	            delete lruHash[key];
	          }
	
	          if (!(key in data)) return;
	
	          delete data[key];
	          size--;
	        },
	
	
	        /**
	         * @ngdoc method
	         * @name $cacheFactory.Cache#removeAll
	         * @kind function
	         *
	         * @description
	         * Clears the cache object of any entries.
	         */
	        removeAll: function() {
	          data = createMap();
	          size = 0;
	          lruHash = createMap();
	          freshEnd = staleEnd = null;
	        },
	
	
	        /**
	         * @ngdoc method
	         * @name $cacheFactory.Cache#destroy
	         * @kind function
	         *
	         * @description
	         * Destroys the {@link $cacheFactory.Cache Cache} object entirely,
	         * removing it from the {@link $cacheFactory $cacheFactory} set.
	         */
	        destroy: function() {
	          data = null;
	          stats = null;
	          lruHash = null;
	          delete caches[cacheId];
	        },
	
	
	        /**
	         * @ngdoc method
	         * @name $cacheFactory.Cache#info
	         * @kind function
	         *
	         * @description
	         * Retrieve information regarding a particular {@link $cacheFactory.Cache Cache}.
	         *
	         * @returns {object} an object with the following properties:
	         *   <ul>
	         *     <li>**id**: the id of the cache instance</li>
	         *     <li>**size**: the number of entries kept in the cache instance</li>
	         *     <li>**...**: any additional properties from the options object when creating the
	         *       cache.</li>
	         *   </ul>
	         */
	        info: function() {
	          return extend({}, stats, {size: size});
	        }
	      });
	
	
	      /**
	       * makes the `entry` the freshEnd of the LRU linked list
	       */
	      function refresh(entry) {
	        if (entry !== freshEnd) {
	          if (!staleEnd) {
	            staleEnd = entry;
	          } else if (staleEnd === entry) {
	            staleEnd = entry.n;
	          }
	
	          link(entry.n, entry.p);
	          link(entry, freshEnd);
	          freshEnd = entry;
	          freshEnd.n = null;
	        }
	      }
	
	
	      /**
	       * bidirectionally links two entries of the LRU linked list
	       */
	      function link(nextEntry, prevEntry) {
	        if (nextEntry !== prevEntry) {
	          if (nextEntry) nextEntry.p = prevEntry; //p stands for previous, 'prev' didn't minify
	          if (prevEntry) prevEntry.n = nextEntry; //n stands for next, 'next' didn't minify
	        }
	      }
	    }
	
	
	  /**
	   * @ngdoc method
	   * @name $cacheFactory#info
	   *
	   * @description
	   * Get information about all the caches that have been created
	   *
	   * @returns {Object} - key-value map of `cacheId` to the result of calling `cache#info`
	   */
	    cacheFactory.info = function() {
	      var info = {};
	      forEach(caches, function(cache, cacheId) {
	        info[cacheId] = cache.info();
	      });
	      return info;
	    };
	
	
	  /**
	   * @ngdoc method
	   * @name $cacheFactory#get
	   *
	   * @description
	   * Get access to a cache object by the `cacheId` used when it was created.
	   *
	   * @param {string} cacheId Name or id of a cache to access.
	   * @returns {object} Cache object identified by the cacheId or undefined if no such cache.
	   */
	    cacheFactory.get = function(cacheId) {
	      return caches[cacheId];
	    };
	
	
	    return cacheFactory;
	  };
	}
	
	/**
	 * @ngdoc service
	 * @name $templateCache
	 * @this
	 *
	 * @description
	 * The first time a template is used, it is loaded in the template cache for quick retrieval. You
	 * can load templates directly into the cache in a `script` tag, or by consuming the
	 * `$templateCache` service directly.
	 *
	 * Adding via the `script` tag:
	 *
	 * ```html
	 *   <script type="text/ng-template" id="templateId.html">
	 *     <p>This is the content of the template</p>
	 *   </script>
	 * ```
	 *
	 * **Note:** the `script` tag containing the template does not need to be included in the `head` of
	 * the document, but it must be a descendent of the {@link ng.$rootElement $rootElement} (IE,
	 * element with ng-app attribute), otherwise the template will be ignored.
	 *
	 * Adding via the `$templateCache` service:
	 *
	 * ```js
	 * var myApp = angular.module('myApp', []);
	 * myApp.run(function($templateCache) {
	 *   $templateCache.put('templateId.html', 'This is the content of the template');
	 * });
	 * ```
	 *
	 * To retrieve the template later, simply use it in your component:
	 * ```js
	 * myApp.component('myComponent', {
	 *    templateUrl: 'templateId.html'
	 * });
	 * ```
	 *
	 * or get it via the `$templateCache` service:
	 * ```js
	 * $templateCache.get('templateId.html')
	 * ```
	 *
	 * See {@link ng.$cacheFactory $cacheFactory}.
	 *
	 */
	function $TemplateCacheProvider() {
	  this.$get = ['$cacheFactory', function($cacheFactory) {
	    return $cacheFactory('templates');
	  }];
	}
	
	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 *     Any commits to this file should be reviewed with security in mind.  *
	 *   Changes to this file can potentially create security vulnerabilities. *
	 *          An approval from 2 Core members with history of modifying      *
	 *                         this file is required.                          *
	 *                                                                         *
	 *  Does the change somehow allow for arbitrary javascript to be executed? *
	 *    Or allows for someone to change the prototype of built-in objects?   *
	 *     Or gives undesired access to variables like document or window?    *
	 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
	
	/* ! VARIABLE/FUNCTION NAMING CONVENTIONS THAT APPLY TO THIS FILE!
	 *
	 * DOM-related variables:
	 *
	 * - "node" - DOM Node
	 * - "element" - DOM Element or Node
	 * - "$node" or "$element" - jqLite-wrapped node or element
	 *
	 *
	 * Compiler related stuff:
	 *
	 * - "linkFn" - linking fn of a single directive
	 * - "nodeLinkFn" - function that aggregates all linking fns for a particular node
	 * - "childLinkFn" -  function that aggregates all linking fns for child nodes of a particular node
	 * - "compositeLinkFn" - function that aggregates all linking fns for a compilation root (nodeList)
	 */
	
	
	/**
	 * @ngdoc service
	 * @name $compile
	 * @kind function
	 *
	 * @description
	 * Compiles an HTML string or DOM into a template and produces a template function, which
	 * can then be used to link {@link ng.$rootScope.Scope `scope`} and the template together.
	 *
	 * The compilation is a process of walking the DOM tree and matching DOM elements to
	 * {@link ng.$compileProvider#directive directives}.
	 *
	 * <div class="alert alert-warning">
	 * **Note:** This document is an in-depth reference of all directive options.
	 * For a gentle introduction to directives with examples of common use cases,
	 * see the {@link guide/directive directive guide}.
	 * </div>
	 *
	 * ## Comprehensive Directive API
	 *
	 * There are many different options for a directive.
	 *
	 * The difference resides in the return value of the factory function.
	 * You can either return a {@link $compile#directive-definition-object Directive Definition Object (see below)}
	 * that defines the directive properties, or just the `postLink` function (all other properties will have
	 * the default values).
	 *
	 * <div class="alert alert-success">
	 * **Best Practice:** It's recommended to use the "directive definition object" form.
	 * </div>
	 *
	 * Here's an example directive declared with a Directive Definition Object:
	 *
	 * ```js
	 *   var myModule = angular.module(...);
	 *
	 *   myModule.directive('directiveName', function factory(injectables) {
	 *     var directiveDefinitionObject = {
	 *       {@link $compile#-priority- priority}: 0,
	 *       {@link $compile#-template- template}: '<div></div>', // or // function(tElement, tAttrs) { ... },
	 *       // or
	 *       // {@link $compile#-templateurl- templateUrl}: 'directive.html', // or // function(tElement, tAttrs) { ... },
	 *       {@link $compile#-transclude- transclude}: false,
	 *       {@link $compile#-restrict- restrict}: 'A',
	 *       {@link $compile#-templatenamespace- templateNamespace}: 'html',
	 *       {@link $compile#-scope- scope}: false,
	 *       {@link $compile#-controller- controller}: function($scope, $element, $attrs, $transclude, otherInjectables) { ... },
	 *       {@link $compile#-controlleras- controllerAs}: 'stringIdentifier',
	 *       {@link $compile#-bindtocontroller- bindToController}: false,
	 *       {@link $compile#-require- require}: 'siblingDirectiveName', // or // ['^parentDirectiveName', '?optionalDirectiveName', '?^optionalParent'],
	 *       {@link $compile#-multielement- multiElement}: false,
	 *       {@link $compile#-compile- compile}: function compile(tElement, tAttrs, transclude) {
	 *         return {
	 *            {@link $compile#pre-linking-function pre}: function preLink(scope, iElement, iAttrs, controller) { ... },
	 *            {@link $compile#post-linking-function post}: function postLink(scope, iElement, iAttrs, controller) { ... }
	 *         }
	 *         // or
	 *         // return function postLink( ... ) { ... }
	 *       },
	 *       // or
	 *       // {@link $compile#-link- link}: {
	 *       //  {@link $compile#pre-linking-function pre}: function preLink(scope, iElement, iAttrs, controller) { ... },
	 *       //  {@link $compile#post-linking-function post}: function postLink(scope, iElement, iAttrs, controller) { ... }
	 *       // }
	 *       // or
	 *       // {@link $compile#-link- link}: function postLink( ... ) { ... }
	 *     };
	 *     return directiveDefinitionObject;
	 *   });
	 * ```
	 *
	 * <div class="alert alert-warning">
	 * **Note:** Any unspecified options will use the default value. You can see the default values below.
	 * </div>
	 *
	 * Therefore the above can be simplified as:
	 *
	 * ```js
	 *   var myModule = angular.module(...);
	 *
	 *   myModule.directive('directiveName', function factory(injectables) {
	 *     var directiveDefinitionObject = {
	 *       link: function postLink(scope, iElement, iAttrs) { ... }
	 *     };
	 *     return directiveDefinitionObject;
	 *     // or
	 *     // return function postLink(scope, iElement, iAttrs) { ... }
	 *   });
	 * ```
	 *
	 * ### Life-cycle hooks
	 * Directive controllers can provide the following methods that are called by Angular at points in the life-cycle of the
	 * directive:
	 * * `$onInit()` - Called on each controller after all the controllers on an element have been constructed and
	 *   had their bindings initialized (and before the pre &amp; post linking functions for the directives on
	 *   this element). This is a good place to put initialization code for your controller.
	 * * `$onChanges(changesObj)` - Called whenever one-way (`<`) or interpolation (`@`) bindings are updated. The
	 *   `changesObj` is a hash whose keys are the names of the bound properties that have changed, and the values are an
	 *   object of the form `{ currentValue, previousValue, isFirstChange() }`. Use this hook to trigger updates within a
	 *   component such as cloning the bound value to prevent accidental mutation of the outer value.
	 * * `$doCheck()` - Called on each turn of the digest cycle. Provides an opportunity to detect and act on
	 *   changes. Any actions that you wish to take in response to the changes that you detect must be
	 *   invoked from this hook; implementing this has no effect on when `$onChanges` is called. For example, this hook
	 *   could be useful if you wish to perform a deep equality check, or to check a Date object, changes to which would not
	 *   be detected by Angular's change detector and thus not trigger `$onChanges`. This hook is invoked with no arguments;
	 *   if detecting changes, you must store the previous value(s) for comparison to the current values.
	 * * `$onDestroy()` - Called on a controller when its containing scope is destroyed. Use this hook for releasing
	 *   external resources, watches and event handlers. Note that components have their `$onDestroy()` hooks called in
	 *   the same order as the `$scope.$broadcast` events are triggered, which is top down. This means that parent
	 *   components will have their `$onDestroy()` hook called before child components.
	 * * `$postLink()` - Called after this controller's element and its children have been linked. Similar to the post-link
	 *   function this hook can be used to set up DOM event handlers and do direct DOM manipulation.
	 *   Note that child elements that contain `templateUrl` directives will not have been compiled and linked since
	 *   they are waiting for their template to load asynchronously and their own compilation and linking has been
	 *   suspended until that occurs.
	 *
	 * #### Comparison with Angular 2 life-cycle hooks
	 * Angular 2 also uses life-cycle hooks for its components. While the Angular 1 life-cycle hooks are similar there are
	 * some differences that you should be aware of, especially when it comes to moving your code from Angular 1 to Angular 2:
	 *
	 * * Angular 1 hooks are prefixed with `$`, such as `$onInit`. Angular 2 hooks are prefixed with `ng`, such as `ngOnInit`.
	 * * Angular 1 hooks can be defined on the controller prototype or added to the controller inside its constructor.
	 *   In Angular 2 you can only define hooks on the prototype of the Component class.
	 * * Due to the differences in change-detection, you may get many more calls to `$doCheck` in Angular 1 than you would to
	 *   `ngDoCheck` in Angular 2
	 * * Changes to the model inside `$doCheck` will trigger new turns of the digest loop, which will cause the changes to be
	 *   propagated throughout the application.
	 *   Angular 2 does not allow the `ngDoCheck` hook to trigger a change outside of the component. It will either throw an
	 *   error or do nothing depending upon the state of `enableProdMode()`.
	 *
	 * #### Life-cycle hook examples
	 *
	 * This example shows how you can check for mutations to a Date object even though the identity of the object
	 * has not changed.
	 *
	 * <example name="doCheckDateExample" module="do-check-module">
	 *   <file name="app.js">
	 *     angular.module('do-check-module', [])
	 *       .component('app', {
	 *         template:
	 *           'Month: <input ng-model="$ctrl.month" ng-change="$ctrl.updateDate()">' +
	 *           'Date: {{ $ctrl.date }}' +
	 *           '<test date="$ctrl.date"></test>',
	 *         controller: function() {
	 *           this.date = new Date();
	 *           this.month = this.date.getMonth();
	 *           this.updateDate = function() {
	 *             this.date.setMonth(this.month);
	 *           };
	 *         }
	 *       })
	 *       .component('test', {
	 *         bindings: { date: '<' },
	 *         template:
	 *           '<pre>{{ $ctrl.log | json }}</pre>',
	 *         controller: function() {
	 *           var previousValue;
	 *           this.log = [];
	 *           this.$doCheck = function() {
	 *             var currentValue = this.date && this.date.valueOf();
	 *             if (previousValue !== currentValue) {
	 *               this.log.push('doCheck: date mutated: ' + this.date);
	 *               previousValue = currentValue;
	 *             }
	 *           };
	 *         }
	 *       });
	 *   </file>
	 *   <file name="index.html">
	 *     <app></app>
	 *   </file>
	 * </example>
	 *
	 * This example show how you might use `$doCheck` to trigger changes in your component's inputs even if the
	 * actual identity of the component doesn't change. (Be aware that cloning and deep equality checks on large
	 * arrays or objects can have a negative impact on your application performance)
	 *
	 * <example name="doCheckArrayExample" module="do-check-module">
	 *   <file name="index.html">
	 *     <div ng-init="items = []">
	 *       <button ng-click="items.push(items.length)">Add Item</button>
	 *       <button ng-click="items = []">Reset Items</button>
	 *       <pre>{{ items }}</pre>
	 *       <test items="items"></test>
	 *     </div>
	 *   </file>
	 *   <file name="app.js">
	 *      angular.module('do-check-module', [])
	 *        .component('test', {
	 *          bindings: { items: '<' },
	 *          template:
	 *            '<pre>{{ $ctrl.log | json }}</pre>',
	 *          controller: function() {
	 *            this.log = [];
	 *
	 *            this.$doCheck = function() {
	 *              if (this.items_ref !== this.items) {
	 *                this.log.push('doCheck: items changed');
	 *                this.items_ref = this.items;
	 *              }
	 *              if (!angular.equals(this.items_clone, this.items)) {
	 *                this.log.push('doCheck: items mutated');
	 *                this.items_clone = angular.copy(this.items);
	 *              }
	 *            };
	 *          }
	 *        });
	 *   </file>
	 * </example>
	 *
	 *
	 * ### Directive Definition Object
	 *
	 * The directive definition object provides instructions to the {@link ng.$compile
	 * compiler}. The attributes are:
	 *
	 * #### `multiElement`
	 * When this property is set to true (default is `false`), the HTML compiler will collect DOM nodes between
	 * nodes with the attributes `directive-name-start` and `directive-name-end`, and group them
	 * together as the directive elements. It is recommended that this feature be used on directives
	 * which are not strictly behavioral (such as {@link ngClick}), and which
	 * do not manipulate or replace child nodes (such as {@link ngInclude}).
	 *
	 * #### `priority`
	 * When there are multiple directives defined on a single DOM element, sometimes it
	 * is necessary to specify the order in which the directives are applied. The `priority` is used
	 * to sort the directives before their `compile` functions get called. Priority is defined as a
	 * number. Directives with greater numerical `priority` are compiled first. Pre-link functions
	 * are also run in priority order, but post-link functions are run in reverse order. The order
	 * of directives with the same priority is undefined. The default priority is `0`.
	 *
	 * #### `terminal`
	 * If set to true then the current `priority` will be the last set of directives
	 * which will execute (any directives at the current priority will still execute
	 * as the order of execution on same `priority` is undefined). Note that expressions
	 * and other directives used in the directive's template will also be excluded from execution.
	 *
	 * #### `scope`
	 * The scope property can be `false`, `true`, or an object:
	 *
	 * * **`false` (default):** No scope will be created for the directive. The directive will use its
	 * parent's scope.
	 *
	 * * **`true`:** A new child scope that prototypically inherits from its parent will be created for
	 * the directive's element. If multiple directives on the same element request a new scope,
	 * only one new scope is created.
	 *
	 * * **`{...}` (an object hash):** A new "isolate" scope is created for the directive's element. The
	 * 'isolate' scope differs from normal scope in that it does not prototypically inherit from its parent
	 * scope. This is useful when creating reusable components, which should not accidentally read or modify
	 * data in the parent scope.
	 *
	 * The 'isolate' scope object hash defines a set of local scope properties derived from attributes on the
	 * directive's element. These local properties are useful for aliasing values for templates. The keys in
	 * the object hash map to the name of the property on the isolate scope; the values define how the property
	 * is bound to the parent scope, via matching attributes on the directive's element:
	 *
	 * * `@` or `@attr` - bind a local scope property to the value of DOM attribute. The result is
	 *   always a string since DOM attributes are strings. If no `attr` name is specified then the
	 *   attribute name is assumed to be the same as the local name. Given `<my-component
	 *   my-attr="hello {{name}}">` and the isolate scope definition `scope: { localName:'@myAttr' }`,
	 *   the directive's scope property `localName` will reflect the interpolated value of `hello
	 *   {{name}}`. As the `name` attribute changes so will the `localName` property on the directive's
	 *   scope. The `name` is read from the parent scope (not the directive's scope).
	 *
	 * * `=` or `=attr` - set up a bidirectional binding between a local scope property and an expression
	 *   passed via the attribute `attr`. The expression is evaluated in the context of the parent scope.
	 *   If no `attr` name is specified then the attribute name is assumed to be the same as the local
	 *   name. Given `<my-component my-attr="parentModel">` and the isolate scope definition `scope: {
	 *   localModel: '=myAttr' }`, the property `localModel` on the directive's scope will reflect the
	 *   value of `parentModel` on the parent scope. Changes to `parentModel` will be reflected in
	 *   `localModel` and vice versa. Optional attributes should be marked as such with a question mark:
	 *   `=?` or `=?attr`. If the binding expression is non-assignable, or if the attribute isn't
	 *   optional and doesn't exist, an exception ({@link error/$compile/nonassign `$compile:nonassign`})
	 *   will be thrown upon discovering changes to the local value, since it will be impossible to sync
	 *   them back to the parent scope. By default, the {@link ng.$rootScope.Scope#$watch `$watch`}
	 *   method is used for tracking changes, and the equality check is based on object identity.
	 *   However, if an object literal or an array literal is passed as the binding expression, the
	 *   equality check is done by value (using the {@link angular.equals} function). It's also possible
	 *   to watch the evaluated value shallowly with {@link ng.$rootScope.Scope#$watchCollection
	 *   `$watchCollection`}: use `=*` or `=*attr` (`=*?` or `=*?attr` if the attribute is optional).
	 *
	  * * `<` or `<attr` - set up a one-way (one-directional) binding between a local scope property and an
	 *   expression passed via the attribute `attr`. The expression is evaluated in the context of the
	 *   parent scope. If no `attr` name is specified then the attribute name is assumed to be the same as the
	 *   local name. You can also make the binding optional by adding `?`: `<?` or `<?attr`.
	 *
	 *   For example, given `<my-component my-attr="parentModel">` and directive definition of
	 *   `scope: { localModel:'<myAttr' }`, then the isolated scope property `localModel` will reflect the
	 *   value of `parentModel` on the parent scope. Any changes to `parentModel` will be reflected
	 *   in `localModel`, but changes in `localModel` will not reflect in `parentModel`. There are however
	 *   two caveats:
	 *     1. one-way binding does not copy the value from the parent to the isolate scope, it simply
	 *     sets the same value. That means if your bound value is an object, changes to its properties
	 *     in the isolated scope will be reflected in the parent scope (because both reference the same object).
	 *     2. one-way binding watches changes to the **identity** of the parent value. That means the
	 *     {@link ng.$rootScope.Scope#$watch `$watch`} on the parent value only fires if the reference
	 *     to the value has changed. In most cases, this should not be of concern, but can be important
	 *     to know if you one-way bind to an object, and then replace that object in the isolated scope.
	 *     If you now change a property of the object in your parent scope, the change will not be
	 *     propagated to the isolated scope, because the identity of the object on the parent scope
	 *     has not changed. Instead you must assign a new object.
	 *
	 *   One-way binding is useful if you do not plan to propagate changes to your isolated scope bindings
	 *   back to the parent. However, it does not make this completely impossible.
	 *
	 * * `&` or `&attr` - provides a way to execute an expression in the context of the parent scope. If
	 *   no `attr` name is specified then the attribute name is assumed to be the same as the local name.
	 *   Given `<my-component my-attr="count = count + value">` and the isolate scope definition `scope: {
	 *   localFn:'&myAttr' }`, the isolate scope property `localFn` will point to a function wrapper for
	 *   the `count = count + value` expression. Often it's desirable to pass data from the isolated scope
	 *   via an expression to the parent scope. This can be done by passing a map of local variable names
	 *   and values into the expression wrapper fn. For example, if the expression is `increment(amount)`
	 *   then we can specify the amount value by calling the `localFn` as `localFn({amount: 22})`.
	 *
	 * In general it's possible to apply more than one directive to one element, but there might be limitations
	 * depending on the type of scope required by the directives. The following points will help explain these limitations.
	 * For simplicity only two directives are taken into account, but it is also applicable for several directives:
	 *
	 * * **no scope** + **no scope** => Two directives which don't require their own scope will use their parent's scope
	 * * **child scope** + **no scope** =>  Both directives will share one single child scope
	 * * **child scope** + **child scope** =>  Both directives will share one single child scope
	 * * **isolated scope** + **no scope** =>  The isolated directive will use it's own created isolated scope. The other directive will use
	 * its parent's scope
	 * * **isolated scope** + **child scope** =>  **Won't work!** Only one scope can be related to one element. Therefore these directives cannot
	 * be applied to the same element.
	 * * **isolated scope** + **isolated scope**  =>  **Won't work!** Only one scope can be related to one element. Therefore these directives
	 * cannot be applied to the same element.
	 *
	 *
	 * #### `bindToController`
	 * This property is used to bind scope properties directly to the controller. It can be either
	 * `true` or an object hash with the same format as the `scope` property.
	 *
	 * When an isolate scope is used for a directive (see above), `bindToController: true` will
	 * allow a component to have its properties bound to the controller, rather than to scope.
	 *
	 * After the controller is instantiated, the initial values of the isolate scope bindings will be bound to the controller
	 * properties. You can access these bindings once they have been initialized by providing a controller method called
	 * `$onInit`, which is called after all the controllers on an element have been constructed and had their bindings
	 * initialized.
	 *
	 * <div class="alert alert-warning">
	 * **Deprecation warning:** although bindings for non-ES6 class controllers are currently
	 * bound to `this` before the controller constructor is called, this use is now deprecated. Please place initialization
	 * code that relies upon bindings inside a `$onInit` method on the controller, instead.
	 * </div>
	 *
	 * It is also possible to set `bindToController` to an object hash with the same format as the `scope` property.
	 * This will set up the scope bindings to the controller directly. Note that `scope` can still be used
	 * to define which kind of scope is created. By default, no scope is created. Use `scope: {}` to create an isolate
	 * scope (useful for component directives).
	 *
	 * If both `bindToController` and `scope` are defined and have object hashes, `bindToController` overrides `scope`.
	 *
	 *
	 * #### `controller`
	 * Controller constructor function. The controller is instantiated before the
	 * pre-linking phase and can be accessed by other directives (see
	 * `require` attribute). This allows the directives to communicate with each other and augment
	 * each other's behavior. The controller is injectable (and supports bracket notation) with the following locals:
	 *
	 * * `$scope` - Current scope associated with the element
	 * * `$element` - Current element
	 * * `$attrs` - Current attributes object for the element
	 * * `$transclude` - A transclude linking function pre-bound to the correct transclusion scope:
	 *   `function([scope], cloneLinkingFn, futureParentElement, slotName)`:
	 *    * `scope`: (optional) override the scope.
	 *    * `cloneLinkingFn`: (optional) argument to create clones of the original transcluded content.
	 *    * `futureParentElement` (optional):
	 *        * defines the parent to which the `cloneLinkingFn` will add the cloned elements.
	 *        * default: `$element.parent()` resp. `$element` for `transclude:'element'` resp. `transclude:true`.
	 *        * only needed for transcludes that are allowed to contain non html elements (e.g. SVG elements)
	 *          and when the `cloneLinkingFn` is passed,
	 *          as those elements need to created and cloned in a special way when they are defined outside their
	 *          usual containers (e.g. like `<svg>`).
	 *        * See also the `directive.templateNamespace` property.
	 *    * `slotName`: (optional) the name of the slot to transclude. If falsy (e.g. `null`, `undefined` or `''`)
	 *      then the default transclusion is provided.
	 *    The `$transclude` function also has a method on it, `$transclude.isSlotFilled(slotName)`, which returns
	 *    `true` if the specified slot contains content (i.e. one or more DOM nodes).
	 *
	 * #### `require`
	 * Require another directive and inject its controller as the fourth argument to the linking function. The
	 * `require` property can be a string, an array or an object:
	 * * a **string** containing the name of the directive to pass to the linking function
	 * * an **array** containing the names of directives to pass to the linking function. The argument passed to the
	 * linking function will be an array of controllers in the same order as the names in the `require` property
	 * * an **object** whose property values are the names of the directives to pass to the linking function. The argument
	 * passed to the linking function will also be an object with matching keys, whose values will hold the corresponding
	 * controllers.
	 *
	 * If the `require` property is an object and `bindToController` is truthy, then the required controllers are
	 * bound to the controller using the keys of the `require` property. This binding occurs after all the controllers
	 * have been constructed but before `$onInit` is called.
	 * If the name of the required controller is the same as the local name (the key), the name can be
	 * omitted. For example, `{parentDir: '^^'}` is equivalent to `{parentDir: '^^parentDir'}`.
	 * See the {@link $compileProvider#component} helper for an example of how this can be used.
	 * If no such required directive(s) can be found, or if the directive does not have a controller, then an error is
	 * raised (unless no link function is specified and the required controllers are not being bound to the directive
	 * controller, in which case error checking is skipped). The name can be prefixed with:
	 *
	 * * (no prefix) - Locate the required controller on the current element. Throw an error if not found.
	 * * `?` - Attempt to locate the required controller or pass `null` to the `link` fn if not found.
	 * * `^` - Locate the required controller by searching the element and its parents. Throw an error if not found.
	 * * `^^` - Locate the required controller by searching the element's parents. Throw an error if not found.
	 * * `?^` - Attempt to locate the required controller by searching the element and its parents or pass
	 *   `null` to the `link` fn if not found.
	 * * `?^^` - Attempt to locate the required controller by searching the element's parents, or pass
	 *   `null` to the `link` fn if not found.
	 *
	 *
	 * #### `controllerAs`
	 * Identifier name for a reference to the controller in the directive's scope.
	 * This allows the controller to be referenced from the directive template. This is especially
	 * useful when a directive is used as component, i.e. with an `isolate` scope. It's also possible
	 * to use it in a directive without an `isolate` / `new` scope, but you need to be aware that the
	 * `controllerAs` reference might overwrite a property that already exists on the parent scope.
	 *
	 *
	 * #### `restrict`
	 * String of subset of `EACM` which restricts the directive to a specific directive
	 * declaration style. If omitted, the defaults (elements and attributes) are used.
	 *
	 * * `E` - Element name (default): `<my-directive></my-directive>`
	 * * `A` - Attribute (default): `<div my-directive="exp"></div>`
	 * * `C` - Class: `<div class="my-directive: exp;"></div>`
	 * * `M` - Comment: `<!-- directive: my-directive exp -->`
	 *
	 *
	 * #### `templateNamespace`
	 * String representing the document type used by the markup in the template.
	 * AngularJS needs this information as those elements need to be created and cloned
	 * in a special way when they are defined outside their usual containers like `<svg>` and `<math>`.
	 *
	 * * `html` - All root nodes in the template are HTML. Root nodes may also be
	 *   top-level elements such as `<svg>` or `<math>`.
	 * * `svg` - The root nodes in the template are SVG elements (excluding `<math>`).
	 * * `math` - The root nodes in the template are MathML elements (excluding `<svg>`).
	 *
	 * If no `templateNamespace` is specified, then the namespace is considered to be `html`.
	 *
	 * #### `template`
	 * HTML markup that may:
	 * * Replace the contents of the directive's element (default).
	 * * Replace the directive's element itself (if `replace` is true - DEPRECATED).
	 * * Wrap the contents of the directive's element (if `transclude` is true).
	 *
	 * Value may be:
	 *
	 * * A string. For example `<div red-on-hover>{{delete_str}}</div>`.
	 * * A function which takes two arguments `tElement` and `tAttrs` (described in the `compile`
	 *   function api below) and returns a string value.
	 *
	 *
	 * #### `templateUrl`
	 * This is similar to `template` but the template is loaded from the specified URL, asynchronously.
	 *
	 * Because template loading is asynchronous the compiler will suspend compilation of directives on that element
	 * for later when the template has been resolved.  In the meantime it will continue to compile and link
	 * sibling and parent elements as though this element had not contained any directives.
	 *
	 * The compiler does not suspend the entire compilation to wait for templates to be loaded because this
	 * would result in the whole app "stalling" until all templates are loaded asynchronously - even in the
	 * case when only one deeply nested directive has `templateUrl`.
	 *
	 * Template loading is asynchronous even if the template has been preloaded into the {@link $templateCache}
	 *
	 * You can specify `templateUrl` as a string representing the URL or as a function which takes two
	 * arguments `tElement` and `tAttrs` (described in the `compile` function api below) and returns
	 * a string value representing the url.  In either case, the template URL is passed through {@link
	 * $sce#getTrustedResourceUrl $sce.getTrustedResourceUrl}.
	 *
	 *
	 * #### `replace` ([*DEPRECATED*!], will be removed in next major release - i.e. v2.0)
	 * specify what the template should replace. Defaults to `false`.
	 *
	 * * `true` - the template will replace the directive's element.
	 * * `false` - the template will replace the contents of the directive's element.
	 *
	 * The replacement process migrates all of the attributes / classes from the old element to the new
	 * one. See the {@link guide/directive#template-expanding-directive
	 * Directives Guide} for an example.
	 *
	 * There are very few scenarios where element replacement is required for the application function,
	 * the main one being reusable custom components that are used within SVG contexts
	 * (because SVG doesn't work with custom elements in the DOM tree).
	 *
	 * #### `transclude`
	 * Extract the contents of the element where the directive appears and make it available to the directive.
	 * The contents are compiled and provided to the directive as a **transclusion function**. See the
	 * {@link $compile#transclusion Transclusion} section below.
	 *
	 *
	 * #### `compile`
	 *
	 * ```js
	 *   function compile(tElement, tAttrs, transclude) { ... }
	 * ```
	 *
	 * The compile function deals with transforming the template DOM. Since most directives do not do
	 * template transformation, it is not used often. The compile function takes the following arguments:
	 *
	 *   * `tElement` - template element - The element where the directive has been declared. It is
	 *     safe to do template transformation on the element and child elements only.
	 *
	 *   * `tAttrs` - template attributes - Normalized list of attributes declared on this element shared
	 *     between all directive compile functions.
	 *
	 *   * `transclude` -  [*DEPRECATED*!] A transclude linking function: `function(scope, cloneLinkingFn)`
	 *
	 * <div class="alert alert-warning">
	 * **Note:** The template instance and the link instance may be different objects if the template has
	 * been cloned. For this reason it is **not** safe to do anything other than DOM transformations that
	 * apply to all cloned DOM nodes within the compile function. Specifically, DOM listener registration
	 * should be done in a linking function rather than in a compile function.
	 * </div>
	
	 * <div class="alert alert-warning">
	 * **Note:** The compile function cannot handle directives that recursively use themselves in their
	 * own templates or compile functions. Compiling these directives results in an infinite loop and
	 * stack overflow errors.
	 *
	 * This can be avoided by manually using $compile in the postLink function to imperatively compile
	 * a directive's template instead of relying on automatic template compilation via `template` or
	 * `templateUrl` declaration or manual compilation inside the compile function.
	 * </div>
	 *
	 * <div class="alert alert-danger">
	 * **Note:** The `transclude` function that is passed to the compile function is deprecated, as it
	 *   e.g. does not know about the right outer scope. Please use the transclude function that is passed
	 *   to the link function instead.
	 * </div>
	
	 * A compile function can have a return value which can be either a function or an object.
	 *
	 * * returning a (post-link) function - is equivalent to registering the linking function via the
	 *   `link` property of the config object when the compile function is empty.
	 *
	 * * returning an object with function(s) registered via `pre` and `post` properties - allows you to
	 *   control when a linking function should be called during the linking phase. See info about
	 *   pre-linking and post-linking functions below.
	 *
	 *
	 * #### `link`
	 * This property is used only if the `compile` property is not defined.
	 *
	 * ```js
	 *   function link(scope, iElement, iAttrs, controller, transcludeFn) { ... }
	 * ```
	 *
	 * The link function is responsible for registering DOM listeners as well as updating the DOM. It is
	 * executed after the template has been cloned. This is where most of the directive logic will be
	 * put.
	 *
	 *   * `scope` - {@link ng.$rootScope.Scope Scope} - The scope to be used by the
	 *     directive for registering {@link ng.$rootScope.Scope#$watch watches}.
	 *
	 *   * `iElement` - instance element - The element where the directive is to be used. It is safe to
	 *     manipulate the children of the element only in `postLink` function since the children have
	 *     already been linked.
	 *
	 *   * `iAttrs` - instance attributes - Normalized list of attributes declared on this element shared
	 *     between all directive linking functions.
	 *
	 *   * `controller` - the directive's required controller instance(s) - Instances are shared
	 *     among all directives, which allows the directives to use the controllers as a communication
	 *     channel. The exact value depends on the directive's `require` property:
	 *       * no controller(s) required: the directive's own controller, or `undefined` if it doesn't have one
	 *       * `string`: the controller instance
	 *       * `array`: array of controller instances
	 *
	 *     If a required controller cannot be found, and it is optional, the instance is `null`,
	 *     otherwise the {@link error:$compile:ctreq Missing Required Controller} error is thrown.
	 *
	 *     Note that you can also require the directive's own controller - it will be made available like
	 *     any other controller.
	 *
	 *   * `transcludeFn` - A transclude linking function pre-bound to the correct transclusion scope.
	 *     This is the same as the `$transclude` parameter of directive controllers,
	 *     see {@link ng.$compile#-controller- the controller section for details}.
	 *     `function([scope], cloneLinkingFn, futureParentElement)`.
	 *
	 * #### Pre-linking function
	 *
	 * Executed before the child elements are linked. Not safe to do DOM transformation since the
	 * compiler linking function will fail to locate the correct elements for linking.
	 *
	 * #### Post-linking function
	 *
	 * Executed after the child elements are linked.
	 *
	 * Note that child elements that contain `templateUrl` directives will not have been compiled
	 * and linked since they are waiting for their template to load asynchronously and their own
	 * compilation and linking has been suspended until that occurs.
	 *
	 * It is safe to do DOM transformation in the post-linking function on elements that are not waiting
	 * for their async templates to be resolved.
	 *
	 *
	 * ### Transclusion
	 *
	 * Transclusion is the process of extracting a collection of DOM elements from one part of the DOM and
	 * copying them to another part of the DOM, while maintaining their connection to the original AngularJS
	 * scope from where they were taken.
	 *
	 * Transclusion is used (often with {@link ngTransclude}) to insert the
	 * original contents of a directive's element into a specified place in the template of the directive.
	 * The benefit of transclusion, over simply moving the DOM elements manually, is that the transcluded
	 * content has access to the properties on the scope from which it was taken, even if the directive
	 * has isolated scope.
	 * See the {@link guide/directive#creating-a-directive-that-wraps-other-elements Directives Guide}.
	 *
	 * This makes it possible for the widget to have private state for its template, while the transcluded
	 * content has access to its originating scope.
	 *
	 * <div class="alert alert-warning">
	 * **Note:** When testing an element transclude directive you must not place the directive at the root of the
	 * DOM fragment that is being compiled. See {@link guide/unit-testing#testing-transclusion-directives
	 * Testing Transclusion Directives}.
	 * </div>
	 *
	 * There are three kinds of transclusion depending upon whether you want to transclude just the contents of the
	 * directive's element, the entire element or multiple parts of the element contents:
	 *
	 * * `true` - transclude the content (i.e. the child nodes) of the directive's element.
	 * * `'element'` - transclude the whole of the directive's element including any directives on this
	 *   element that defined at a lower priority than this directive. When used, the `template`
	 *   property is ignored.
	 * * **`{...}` (an object hash):** - map elements of the content onto transclusion "slots" in the template.
	 *
	 * **Mult-slot transclusion** is declared by providing an object for the `transclude` property.
	 *
	 * This object is a map where the keys are the name of the slot to fill and the value is an element selector
	 * used to match the HTML to the slot. The element selector should be in normalized form (e.g. `myElement`)
	 * and will match the standard element variants (e.g. `my-element`, `my:element`, `data-my-element`, etc).
	 *
	 * For further information check out the guide on {@link guide/directive#matching-directives Matching Directives}
	 *
	 * If the element selector is prefixed with a `?` then that slot is optional.
	 *
	 * For example, the transclude object `{ slotA: '?myCustomElement' }` maps `<my-custom-element>` elements to
	 * the `slotA` slot, which can be accessed via the `$transclude` function or via the {@link ngTransclude} directive.
	 *
	 * Slots that are not marked as optional (`?`) will trigger a compile time error if there are no matching elements
	 * in the transclude content. If you wish to know if an optional slot was filled with content, then you can call
	 * `$transclude.isSlotFilled(slotName)` on the transclude function passed to the directive's link function and
	 * injectable into the directive's controller.
	 *
	 *
	 * #### Transclusion Functions
	 *
	 * When a directive requests transclusion, the compiler extracts its contents and provides a **transclusion
	 * function** to the directive's `link` function and `controller`. This transclusion function is a special
	 * **linking function** that will return the compiled contents linked to a new transclusion scope.
	 *
	 * <div class="alert alert-info">
	 * If you are just using {@link ngTransclude} then you don't need to worry about this function, since
	 * ngTransclude will deal with it for us.
	 * </div>
	 *
	 * If you want to manually control the insertion and removal of the transcluded content in your directive
	 * then you must use this transclude function. When you call a transclude function it returns a a jqLite/JQuery
	 * object that contains the compiled DOM, which is linked to the correct transclusion scope.
	 *
	 * When you call a transclusion function you can pass in a **clone attach function**. This function accepts
	 * two parameters, `function(clone, scope) { ... }`, where the `clone` is a fresh compiled copy of your transcluded
	 * content and the `scope` is the newly created transclusion scope, which the clone will be linked to.
	 *
	 * <div class="alert alert-info">
	 * **Best Practice**: Always provide a `cloneFn` (clone attach function) when you call a transclude function
	 * since you then get a fresh clone of the original DOM and also have access to the new transclusion scope.
	 * </div>
	 *
	 * It is normal practice to attach your transcluded content (`clone`) to the DOM inside your **clone
	 * attach function**:
	 *
	 * ```js
	 * var transcludedContent, transclusionScope;
	 *
	 * $transclude(function(clone, scope) {
	 *   element.append(clone);
	 *   transcludedContent = clone;
	 *   transclusionScope = scope;
	 * });
	 * ```
	 *
	 * Later, if you want to remove the transcluded content from your DOM then you should also destroy the
	 * associated transclusion scope:
	 *
	 * ```js
	 * transcludedContent.remove();
	 * transclusionScope.$destroy();
	 * ```
	 *
	 * <div class="alert alert-info">
	 * **Best Practice**: if you intend to add and remove transcluded content manually in your directive
	 * (by calling the transclude function to get the DOM and calling `element.remove()` to remove it),
	 * then you are also responsible for calling `$destroy` on the transclusion scope.
	 * </div>
	 *
	 * The built-in DOM manipulation directives, such as {@link ngIf}, {@link ngSwitch} and {@link ngRepeat}
	 * automatically destroy their transcluded clones as necessary so you do not need to worry about this if
	 * you are simply using {@link ngTransclude} to inject the transclusion into your directive.
	 *
	 *
	 * #### Transclusion Scopes
	 *
	 * When you call a transclude function it returns a DOM fragment that is pre-bound to a **transclusion
	 * scope**. This scope is special, in that it is a child of the directive's scope (and so gets destroyed
	 * when the directive's scope gets destroyed) but it inherits the properties of the scope from which it
	 * was taken.
	 *
	 * For example consider a directive that uses transclusion and isolated scope. The DOM hierarchy might look
	 * like this:
	 *
	 * ```html
	 * <div ng-app>
	 *   <div isolate>
	 *     <div transclusion>
	 *     </div>
	 *   </div>
	 * </div>
	 * ```
	 *
	 * The `$parent` scope hierarchy will look like this:
	 *
	   ```
	   - $rootScope
	     - isolate
	       - transclusion
	   ```
	 *
	 * but the scopes will inherit prototypically from different scopes to their `$parent`.
	 *
	   ```
	   - $rootScope
	     - transclusion
	   - isolate
	   ```
	 *
	 *
	 * ### Attributes
	 *
	 * The {@link ng.$compile.directive.Attributes Attributes} object - passed as a parameter in the
	 * `link()` or `compile()` functions. It has a variety of uses.
	 *
	 * * *Accessing normalized attribute names:* Directives like 'ngBind' can be expressed in many ways:
	 *   'ng:bind', `data-ng-bind`, or 'x-ng-bind'. The attributes object allows for normalized access
	 *   to the attributes.
	 *
	 * * *Directive inter-communication:* All directives share the same instance of the attributes
	 *   object which allows the directives to use the attributes object as inter directive
	 *   communication.
	 *
	 * * *Supports interpolation:* Interpolation attributes are assigned to the attribute object
	 *   allowing other directives to read the interpolated value.
	 *
	 * * *Observing interpolated attributes:* Use `$observe` to observe the value changes of attributes
	 *   that contain interpolation (e.g. `src="{{bar}}"`). Not only is this very efficient but it's also
	 *   the only way to easily get the actual value because during the linking phase the interpolation
	 *   hasn't been evaluated yet and so the value is at this time set to `undefined`.
	 *
	 * ```js
	 * function linkingFn(scope, elm, attrs, ctrl) {
	 *   // get the attribute value
	 *   console.log(attrs.ngModel);
	 *
	 *   // change the attribute
	 *   attrs.$set('ngModel', 'new value');
	 *
	 *   // observe changes to interpolated attribute
	 *   attrs.$observe('ngModel', function(value) {
	 *     console.log('ngModel has changed value to ' + value);
	 *   });
	 * }
	 * ```
	 *
	 * ## Example
	 *
	 * <div class="alert alert-warning">
	 * **Note**: Typically directives are registered with `module.directive`. The example below is
	 * to illustrate how `$compile` works.
	 * </div>
	 *
	 <example module="compileExample" name="compile">
	   <file name="index.html">
	    <script>
	      angular.module('compileExample', [], function($compileProvider) {
	        // configure new 'compile' directive by passing a directive
	        // factory function. The factory function injects the '$compile'
	        $compileProvider.directive('compile', function($compile) {
	          // directive factory creates a link function
	          return function(scope, element, attrs) {
	            scope.$watch(
	              function(scope) {
	                 // watch the 'compile' expression for changes
	                return scope.$eval(attrs.compile);
	              },
	              function(value) {
	                // when the 'compile' expression changes
	                // assign it into the current DOM
	                element.html(value);
	
	                // compile the new DOM and link it to the current
	                // scope.
	                // NOTE: we only compile .childNodes so that
	                // we don't get into infinite loop compiling ourselves
	                $compile(element.contents())(scope);
	              }
	            );
	          };
	        });
	      })
	      .controller('GreeterController', ['$scope', function($scope) {
	        $scope.name = 'Angular';
	        $scope.html = 'Hello {{name}}';
	      }]);
	    </script>
	    <div ng-controller="GreeterController">
	      <input ng-model="name"> <br/>
	      <textarea ng-model="html"></textarea> <br/>
	      <div compile="html"></div>
	    </div>
	   </file>
	   <file name="protractor.js" type="protractor">
	     it('should auto compile', function() {
	       var textarea = $('textarea');
	       var output = $('div[compile]');
	       // The initial state reads 'Hello Angular'.
	       expect(output.getText()).toBe('Hello Angular');
	       textarea.clear();
	       textarea.sendKeys('{{name}}!');
	       expect(output.getText()).toBe('Angular!');
	     });
	   </file>
	 </example>
	
	 *
	 *
	 * @param {string|DOMElement} element Element or HTML string to compile into a template function.
	 * @param {function(angular.Scope, cloneAttachFn=)} transclude function available to directives - DEPRECATED.
	 *
	 * <div class="alert alert-danger">
	 * **Note:** Passing a `transclude` function to the $compile function is deprecated, as it
	 *   e.g. will not use the right outer scope. Please pass the transclude function as a
	 *   `parentBoundTranscludeFn` to the link function instead.
	 * </div>
	 *
	 * @param {number} maxPriority only apply directives lower than given priority (Only effects the
	 *                 root element(s), not their children)
	 * @returns {function(scope, cloneAttachFn=, options=)} a link function which is used to bind template
	 * (a DOM element/tree) to a scope. Where:
	 *
	 *  * `scope` - A {@link ng.$rootScope.Scope Scope} to bind to.
	 *  * `cloneAttachFn` - If `cloneAttachFn` is provided, then the link function will clone the
	 *  `template` and call the `cloneAttachFn` function allowing the caller to attach the
	 *  cloned elements to the DOM document at the appropriate place. The `cloneAttachFn` is
	 *  called as: <br/> `cloneAttachFn(clonedElement, scope)` where:
	 *
	 *      * `clonedElement` - is a clone of the original `element` passed into the compiler.
	 *      * `scope` - is the current scope with which the linking function is working with.
	 *
	 *  * `options` - An optional object hash with linking options. If `options` is provided, then the following
	 *  keys may be used to control linking behavior:
	 *
	 *      * `parentBoundTranscludeFn` - the transclude function made available to
	 *        directives; if given, it will be passed through to the link functions of
	 *        directives found in `element` during compilation.
	 *      * `transcludeControllers` - an object hash with keys that map controller names
	 *        to a hash with the key `instance`, which maps to the controller instance;
	 *        if given, it will make the controllers available to directives on the compileNode:
	 *        ```
	 *        {
	 *          parent: {
	 *            instance: parentControllerInstance
	 *          }
	 *        }
	 *        ```
	 *      * `futureParentElement` - defines the parent to which the `cloneAttachFn` will add
	 *        the cloned elements; only needed for transcludes that are allowed to contain non html
	 *        elements (e.g. SVG elements). See also the directive.controller property.
	 *
	 * Calling the linking function returns the element of the template. It is either the original
	 * element passed in, or the clone of the element if the `cloneAttachFn` is provided.
	 *
	 * After linking the view is not updated until after a call to $digest which typically is done by
	 * Angular automatically.
	 *
	 * If you need access to the bound view, there are two ways to do it:
	 *
	 * - If you are not asking the linking function to clone the template, create the DOM element(s)
	 *   before you send them to the compiler and keep this reference around.
	 *   ```js
	 *     var element = $compile('<p>{{total}}</p>')(scope);
	 *   ```
	 *
	 * - if on the other hand, you need the element to be cloned, the view reference from the original
	 *   example would not point to the clone, but rather to the original template that was cloned. In
	 *   this case, you can access the clone via the cloneAttachFn:
	 *   ```js
	 *     var templateElement = angular.element('<p>{{total}}</p>'),
	 *         scope = ....;
	 *
	 *     var clonedElement = $compile(templateElement)(scope, function(clonedElement, scope) {
	 *       //attach the clone to DOM document at the right place
	 *     });
	 *
	 *     //now we have reference to the cloned DOM via `clonedElement`
	 *   ```
	 *
	 *
	 * For information on how the compiler works, see the
	 * {@link guide/compiler Angular HTML Compiler} section of the Developer Guide.
	 *
	 * @knownIssue
	 *
	 * ### Double Compilation
	 *
	   Double compilation occurs when an already compiled part of the DOM gets
	   compiled again. This is an undesired effect and can lead to misbehaving directives, performance issues,
	   and memory leaks. Refer to the Compiler Guide {@link guide/compiler#double-compilation-and-how-to-avoid-it
	   section on double compilation} for an in-depth explanation and ways to avoid it.
	 *
	 */
	
	var $compileMinErr = minErr('$compile');
	
	function UNINITIALIZED_VALUE() {}
	var _UNINITIALIZED_VALUE = new UNINITIALIZED_VALUE();
	
	/**
	 * @ngdoc provider
	 * @name $compileProvider
	 *
	 * @description
	 */
	$CompileProvider.$inject = ['$provide', '$$sanitizeUriProvider'];
	/** @this */
	function $CompileProvider($provide, $$sanitizeUriProvider) {
	  var hasDirectives = {},
	      Suffix = 'Directive',
	      COMMENT_DIRECTIVE_REGEXP = /^\s*directive:\s*([\w-]+)\s+(.*)$/,
	      CLASS_DIRECTIVE_REGEXP = /(([\w-]+)(?::([^;]+))?;?)/,
	      ALL_OR_NOTHING_ATTRS = makeMap('ngSrc,ngSrcset,src,srcset'),
	      REQUIRE_PREFIX_REGEXP = /^(?:(\^\^?)?(\?)?(\^\^?)?)?/;
	
	  // Ref: http://developers.whatwg.org/webappapis.html#event-handler-idl-attributes
	  // The assumption is that future DOM event attribute names will begin with
	  // 'on' and be composed of only English letters.
	  var EVENT_HANDLER_ATTR_REGEXP = /^(on[a-z]+|formaction)$/;
	  var bindingCache = createMap();
	
	  function parseIsolateBindings(scope, directiveName, isController) {
	    var LOCAL_REGEXP = /^\s*([@&<]|=(\*?))(\??)\s*(\w*)\s*$/;
	
	    var bindings = createMap();
	
	    forEach(scope, function(definition, scopeName) {
	      if (definition in bindingCache) {
	        bindings[scopeName] = bindingCache[definition];
	        return;
	      }
	      var match = definition.match(LOCAL_REGEXP);
	
	      if (!match) {
	        throw $compileMinErr('iscp',
	            'Invalid {3} for directive \'{0}\'.' +
	            ' Definition: {... {1}: \'{2}\' ...}',
	            directiveName, scopeName, definition,
	            (isController ? 'controller bindings definition' :
	            'isolate scope definition'));
	      }
	
	      bindings[scopeName] = {
	        mode: match[1][0],
	        collection: match[2] === '*',
	        optional: match[3] === '?',
	        attrName: match[4] || scopeName
	      };
	      if (match[4]) {
	        bindingCache[definition] = bindings[scopeName];
	      }
	    });
	
	    return bindings;
	  }
	
	  function parseDirectiveBindings(directive, directiveName) {
	    var bindings = {
	      isolateScope: null,
	      bindToController: null
	    };
	    if (isObject(directive.scope)) {
	      if (directive.bindToController === true) {
	        bindings.bindToController = parseIsolateBindings(directive.scope,
	                                                         directiveName, true);
	        bindings.isolateScope = {};
	      } else {
	        bindings.isolateScope = parseIsolateBindings(directive.scope,
	                                                     directiveName, false);
	      }
	    }
	    if (isObject(directive.bindToController)) {
	      bindings.bindToController =
	          parseIsolateBindings(directive.bindToController, directiveName, true);
	    }
	    if (bindings.bindToController && !directive.controller) {
	      // There is no controller
	      throw $compileMinErr('noctrl',
	            'Cannot bind to controller without directive \'{0}\'s controller.',
	            directiveName);
	    }
	    return bindings;
	  }
	
	  function assertValidDirectiveName(name) {
	    var letter = name.charAt(0);
	    if (!letter || letter !== lowercase(letter)) {
	      throw $compileMinErr('baddir', 'Directive/Component name \'{0}\' is invalid. The first character must be a lowercase letter', name);
	    }
	    if (name !== name.trim()) {
	      throw $compileMinErr('baddir',
	            'Directive/Component name \'{0}\' is invalid. The name should not contain leading or trailing whitespaces',
	            name);
	    }
	  }
	
	  function getDirectiveRequire(directive) {
	    var require = directive.require || (directive.controller && directive.name);
	
	    if (!isArray(require) && isObject(require)) {
	      forEach(require, function(value, key) {
	        var match = value.match(REQUIRE_PREFIX_REGEXP);
	        var name = value.substring(match[0].length);
	        if (!name) require[key] = match[0] + key;
	      });
	    }
	
	    return require;
	  }
	
	  function getDirectiveRestrict(restrict, name) {
	    if (restrict && !(isString(restrict) && /[EACM]/.test(restrict))) {
	      throw $compileMinErr('badrestrict',
	          'Restrict property \'{0}\' of directive \'{1}\' is invalid',
	          restrict,
	          name);
	    }
	
	    return restrict || 'EA';
	  }
	
	  /**
	   * @ngdoc method
	   * @name $compileProvider#directive
	   * @kind function
	   *
	   * @description
	   * Register a new directive with the compiler.
	   *
	   * @param {string|Object} name Name of the directive in camel-case (i.e. <code>ngBind</code> which
	   *    will match as <code>ng-bind</code>), or an object map of directives where the keys are the
	   *    names and the values are the factories.
	   * @param {Function|Array} directiveFactory An injectable directive factory function. See the
	   *    {@link guide/directive directive guide} and the {@link $compile compile API} for more info.
	   * @returns {ng.$compileProvider} Self for chaining.
	   */
	  this.directive = function registerDirective(name, directiveFactory) {
	    assertArg(name, 'name');
	    assertNotHasOwnProperty(name, 'directive');
	    if (isString(name)) {
	      assertValidDirectiveName(name);
	      assertArg(directiveFactory, 'directiveFactory');
	      if (!hasDirectives.hasOwnProperty(name)) {
	        hasDirectives[name] = [];
	        $provide.factory(name + Suffix, ['$injector', '$exceptionHandler',
	          function($injector, $exceptionHandler) {
	            var directives = [];
	            forEach(hasDirectives[name], function(directiveFactory, index) {
	              try {
	                var directive = $injector.invoke(directiveFactory);
	                if (isFunction(directive)) {
	                  directive = { compile: valueFn(directive) };
	                } else if (!directive.compile && directive.link) {
	                  directive.compile = valueFn(directive.link);
	                }
	                directive.priority = directive.priority || 0;
	                directive.index = index;
	                directive.name = directive.name || name;
	                directive.require = getDirectiveRequire(directive);
	                directive.restrict = getDirectiveRestrict(directive.restrict, name);
	                directive.$$moduleName = directiveFactory.$$moduleName;
	                directives.push(directive);
	              } catch (e) {
	                $exceptionHandler(e);
	              }
	            });
	            return directives;
	          }]);
	      }
	      hasDirectives[name].push(directiveFactory);
	    } else {
	      forEach(name, reverseParams(registerDirective));
	    }
	    return this;
	  };
	
	  /**
	   * @ngdoc method
	   * @name $compileProvider#component
	   * @module ng
	   * @param {string} name Name of the component in camelCase (i.e. `myComp` which will match `<my-comp>`)
	   * @param {Object} options Component definition object (a simplified
	   *    {@link ng.$compile#directive-definition-object directive definition object}),
	   *    with the following properties (all optional):
	   *
	   *    - `controller` – `{(string|function()=}` – controller constructor function that should be
	   *      associated with newly created scope or the name of a {@link ng.$compile#-controller-
	   *      registered controller} if passed as a string. An empty `noop` function by default.
	   *    - `controllerAs` – `{string=}` – identifier name for to reference the controller in the component's scope.
	   *      If present, the controller will be published to scope under the `controllerAs` name.
	   *      If not present, this will default to be `$ctrl`.
	   *    - `template` – `{string=|function()=}` – html template as a string or a function that
	   *      returns an html template as a string which should be used as the contents of this component.
	   *      Empty string by default.
	   *
	   *      If `template` is a function, then it is {@link auto.$injector#invoke injected} with
	   *      the following locals:
	   *
	   *      - `$element` - Current element
	   *      - `$attrs` - Current attributes object for the element
	   *
	   *    - `templateUrl` – `{string=|function()=}` – path or function that returns a path to an html
	   *      template that should be used  as the contents of this component.
	   *
	   *      If `templateUrl` is a function, then it is {@link auto.$injector#invoke injected} with
	   *      the following locals:
	   *
	   *      - `$element` - Current element
	   *      - `$attrs` - Current attributes object for the element
	   *
	   *    - `bindings` – `{object=}` – defines bindings between DOM attributes and component properties.
	   *      Component properties are always bound to the component controller and not to the scope.
	   *      See {@link ng.$compile#-bindtocontroller- `bindToController`}.
	   *    - `transclude` – `{boolean=}` – whether {@link $compile#transclusion content transclusion} is enabled.
	   *      Disabled by default.
	   *    - `require` - `{Object<string, string>=}` - requires the controllers of other directives and binds them to
	   *      this component's controller. The object keys specify the property names under which the required
	   *      controllers (object values) will be bound. See {@link ng.$compile#-require- `require`}.
	   *    - `$...` – additional properties to attach to the directive factory function and the controller
	   *      constructor function. (This is used by the component router to annotate)
	   *
	   * @returns {ng.$compileProvider} the compile provider itself, for chaining of function calls.
	   * @description
	   * Register a **component definition** with the compiler. This is a shorthand for registering a special
	   * type of directive, which represents a self-contained UI component in your application. Such components
	   * are always isolated (i.e. `scope: {}`) and are always restricted to elements (i.e. `restrict: 'E'`).
	   *
	   * Component definitions are very simple and do not require as much configuration as defining general
	   * directives. Component definitions usually consist only of a template and a controller backing it.
	   *
	   * In order to make the definition easier, components enforce best practices like use of `controllerAs`,
	   * `bindToController`. They always have **isolate scope** and are restricted to elements.
	   *
	   * Here are a few examples of how you would usually define components:
	   *
	   * ```js
	   *   var myMod = angular.module(...);
	   *   myMod.component('myComp', {
	   *     template: '<div>My name is {{$ctrl.name}}</div>',
	   *     controller: function() {
	   *       this.name = 'shahar';
	   *     }
	   *   });
	   *
	   *   myMod.component('myComp', {
	   *     template: '<div>My name is {{$ctrl.name}}</div>',
	   *     bindings: {name: '@'}
	   *   });
	   *
	   *   myMod.component('myComp', {
	   *     templateUrl: 'views/my-comp.html',
	   *     controller: 'MyCtrl',
	   *     controllerAs: 'ctrl',
	   *     bindings: {name: '@'}
	   *   });
	   *
	   * ```
	   * For more examples, and an in-depth guide, see the {@link guide/component component guide}.
	   *
	   * <br />
	   * See also {@link ng.$compileProvider#directive $compileProvider.directive()}.
	   */
	  this.component = function registerComponent(name, options) {
	    var controller = options.controller || function() {};
	
	    function factory($injector) {
	      function makeInjectable(fn) {
	        if (isFunction(fn) || isArray(fn)) {
	          return /** @this */ function(tElement, tAttrs) {
	            return $injector.invoke(fn, this, {$element: tElement, $attrs: tAttrs});
	          };
	        } else {
	          return fn;
	        }
	      }
	
	      var template = (!options.template && !options.templateUrl ? '' : options.template);
	      var ddo = {
	        controller: controller,
	        controllerAs: identifierForController(options.controller) || options.controllerAs || '$ctrl',
	        template: makeInjectable(template),
	        templateUrl: makeInjectable(options.templateUrl),
	        transclude: options.transclude,
	        scope: {},
	        bindToController: options.bindings || {},
	        restrict: 'E',
	        require: options.require
	      };
	
	      // Copy annotations (starting with $) over to the DDO
	      forEach(options, function(val, key) {
	        if (key.charAt(0) === '$') ddo[key] = val;
	      });
	
	      return ddo;
	    }
	
	    // TODO(pete) remove the following `forEach` before we release 1.6.0
	    // The component-router@0.2.0 looks for the annotations on the controller constructor
	    // Nothing in Angular looks for annotations on the factory function but we can't remove
	    // it from 1.5.x yet.
	
	    // Copy any annotation properties (starting with $) over to the factory and controller constructor functions
	    // These could be used by libraries such as the new component router
	    forEach(options, function(val, key) {
	      if (key.charAt(0) === '$') {
	        factory[key] = val;
	        // Don't try to copy over annotations to named controller
	        if (isFunction(controller)) controller[key] = val;
	      }
	    });
	
	    factory.$inject = ['$injector'];
	
	    return this.directive(name, factory);
	  };
	
	
	  /**
	   * @ngdoc method
	   * @name $compileProvider#aHrefSanitizationWhitelist
	   * @kind function
	   *
	   * @description
	   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
	   * urls during a[href] sanitization.
	   *
	   * The sanitization is a security measure aimed at preventing XSS attacks via html links.
	   *
	   * Any url about to be assigned to a[href] via data-binding is first normalized and turned into
	   * an absolute url. Afterwards, the url is matched against the `aHrefSanitizationWhitelist`
	   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
	   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
	   *
	   * @param {RegExp=} regexp New regexp to whitelist urls with.
	   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
	   *    chaining otherwise.
	   */
	  this.aHrefSanitizationWhitelist = function(regexp) {
	    if (isDefined(regexp)) {
	      $$sanitizeUriProvider.aHrefSanitizationWhitelist(regexp);
	      return this;
	    } else {
	      return $$sanitizeUriProvider.aHrefSanitizationWhitelist();
	    }
	  };
	
	
	  /**
	   * @ngdoc method
	   * @name $compileProvider#imgSrcSanitizationWhitelist
	   * @kind function
	   *
	   * @description
	   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
	   * urls during img[src] sanitization.
	   *
	   * The sanitization is a security measure aimed at prevent XSS attacks via html links.
	   *
	   * Any url about to be assigned to img[src] via data-binding is first normalized and turned into
	   * an absolute url. Afterwards, the url is matched against the `imgSrcSanitizationWhitelist`
	   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
	   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
	   *
	   * @param {RegExp=} regexp New regexp to whitelist urls with.
	   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
	   *    chaining otherwise.
	   */
	  this.imgSrcSanitizationWhitelist = function(regexp) {
	    if (isDefined(regexp)) {
	      $$sanitizeUriProvider.imgSrcSanitizationWhitelist(regexp);
	      return this;
	    } else {
	      return $$sanitizeUriProvider.imgSrcSanitizationWhitelist();
	    }
	  };
	
	  /**
	   * @ngdoc method
	   * @name  $compileProvider#debugInfoEnabled
	   *
	   * @param {boolean=} enabled update the debugInfoEnabled state if provided, otherwise just return the
	   * current debugInfoEnabled state
	   * @returns {*} current value if used as getter or itself (chaining) if used as setter
	   *
	   * @kind function
	   *
	   * @description
	   * Call this method to enable/disable various debug runtime information in the compiler such as adding
	   * binding information and a reference to the current scope on to DOM elements.
	   * If enabled, the compiler will add the following to DOM elements that have been bound to the scope
	   * * `ng-binding` CSS class
	   * * `$binding` data property containing an array of the binding expressions
	   *
	   * You may want to disable this in production for a significant performance boost. See
	   * {@link guide/production#disabling-debug-data Disabling Debug Data} for more.
	   *
	   * The default value is true.
	   */
	  var debugInfoEnabled = true;
	  this.debugInfoEnabled = function(enabled) {
	    if (isDefined(enabled)) {
	      debugInfoEnabled = enabled;
	      return this;
	    }
	    return debugInfoEnabled;
	  };
	
	  /**
	   * @ngdoc method
	   * @name  $compileProvider#preAssignBindingsEnabled
	   *
	   * @param {boolean=} enabled update the preAssignBindingsEnabled state if provided, otherwise just return the
	   * current preAssignBindingsEnabled state
	   * @returns {*} current value if used as getter or itself (chaining) if used as setter
	   *
	   * @kind function
	   *
	   * @description
	   * Call this method to enable/disable whether directive controllers are assigned bindings before
	   * calling the controller's constructor.
	   * If enabled (true), the compiler assigns the value of each of the bindings to the
	   * properties of the controller object before the constructor of this object is called.
	   *
	   * If disabled (false), the compiler calls the constructor first before assigning bindings.
	   *
	   * The default value is true in Angular 1.5.x but will switch to false in Angular 1.6.x.
	   */
	  var preAssignBindingsEnabled = false;
	  this.preAssignBindingsEnabled = function(enabled) {
	    if (isDefined(enabled)) {
	      preAssignBindingsEnabled = enabled;
	      return this;
	    }
	    return preAssignBindingsEnabled;
	  };
	
	
	  var TTL = 10;
	  /**
	   * @ngdoc method
	   * @name $compileProvider#onChangesTtl
	   * @description
	   *
	   * Sets the number of times `$onChanges` hooks can trigger new changes before giving up and
	   * assuming that the model is unstable.
	   *
	   * The current default is 10 iterations.
	   *
	   * In complex applications it's possible that dependencies between `$onChanges` hooks and bindings will result
	   * in several iterations of calls to these hooks. However if an application needs more than the default 10
	   * iterations to stabilize then you should investigate what is causing the model to continuously change during
	   * the `$onChanges` hook execution.
	   *
	   * Increasing the TTL could have performance implications, so you should not change it without proper justification.
	   *
	   * @param {number} limit The number of `$onChanges` hook iterations.
	   * @returns {number|object} the current limit (or `this` if called as a setter for chaining)
	   */
	  this.onChangesTtl = function(value) {
	    if (arguments.length) {
	      TTL = value;
	      return this;
	    }
	    return TTL;
	  };
	
	  var commentDirectivesEnabledConfig = true;
	  /**
	   * @ngdoc method
	   * @name $compileProvider#commentDirectivesEnabled
	   * @description
	   *
	   * It indicates to the compiler
	   * whether or not directives on comments should be compiled.
	   * Defaults to `true`.
	   *
	   * Calling this function with false disables the compilation of directives
	   * on comments for the whole application.
	   * This results in a compilation performance gain,
	   * as the compiler doesn't have to check comments when looking for directives.
	   * This should however only be used if you are sure that no comment directives are used in
	   * the application (including any 3rd party directives).
	   *
	   * @param {boolean} enabled `false` if the compiler may ignore directives on comments
	   * @returns {boolean|object} the current value (or `this` if called as a setter for chaining)
	   */
	  this.commentDirectivesEnabled = function(value) {
	    if (arguments.length) {
	      commentDirectivesEnabledConfig = value;
	      return this;
	    }
	    return commentDirectivesEnabledConfig;
	  };
	
	
	  var cssClassDirectivesEnabledConfig = true;
	  /**
	   * @ngdoc method
	   * @name $compileProvider#cssClassDirectivesEnabled
	   * @description
	   *
	   * It indicates to the compiler
	   * whether or not directives on element classes should be compiled.
	   * Defaults to `true`.
	   *
	   * Calling this function with false disables the compilation of directives
	   * on element classes for the whole application.
	   * This results in a compilation performance gain,
	   * as the compiler doesn't have to check element classes when looking for directives.
	   * This should however only be used if you are sure that no class directives are used in
	   * the application (including any 3rd party directives).
	   *
	   * @param {boolean} enabled `false` if the compiler may ignore directives on element classes
	   * @returns {boolean|object} the current value (or `this` if called as a setter for chaining)
	   */
	  this.cssClassDirectivesEnabled = function(value) {
	    if (arguments.length) {
	      cssClassDirectivesEnabledConfig = value;
	      return this;
	    }
	    return cssClassDirectivesEnabledConfig;
	  };
	
	  this.$get = [
	            '$injector', '$interpolate', '$exceptionHandler', '$templateRequest', '$parse',
	            '$controller', '$rootScope', '$sce', '$animate', '$$sanitizeUri',
	    function($injector,   $interpolate,   $exceptionHandler,   $templateRequest,   $parse,
	             $controller,   $rootScope,   $sce,   $animate,   $$sanitizeUri) {
	
	    var SIMPLE_ATTR_NAME = /^\w/;
	    var specialAttrHolder = window.document.createElement('div');
	
	
	    var commentDirectivesEnabled = commentDirectivesEnabledConfig;
	    var cssClassDirectivesEnabled = cssClassDirectivesEnabledConfig;
	
	
	    var onChangesTtl = TTL;
	    // The onChanges hooks should all be run together in a single digest
	    // When changes occur, the call to trigger their hooks will be added to this queue
	    var onChangesQueue;
	
	    // This function is called in a $$postDigest to trigger all the onChanges hooks in a single digest
	    function flushOnChangesQueue() {
	      try {
	        if (!(--onChangesTtl)) {
	          // We have hit the TTL limit so reset everything
	          onChangesQueue = undefined;
	          throw $compileMinErr('infchng', '{0} $onChanges() iterations reached. Aborting!\n', TTL);
	        }
	        // We must run this hook in an apply since the $$postDigest runs outside apply
	        $rootScope.$apply(function() {
	          var errors = [];
	          for (var i = 0, ii = onChangesQueue.length; i < ii; ++i) {
	            try {
	              onChangesQueue[i]();
	            } catch (e) {
	              errors.push(e);
	            }
	          }
	          // Reset the queue to trigger a new schedule next time there is a change
	          onChangesQueue = undefined;
	          if (errors.length) {
	            throw errors;
	          }
	        });
	      } finally {
	        onChangesTtl++;
	      }
	    }
	
	
	    function Attributes(element, attributesToCopy) {
	      if (attributesToCopy) {
	        var keys = Object.keys(attributesToCopy);
	        var i, l, key;
	
	        for (i = 0, l = keys.length; i < l; i++) {
	          key = keys[i];
	          this[key] = attributesToCopy[key];
	        }
	      } else {
	        this.$attr = {};
	      }
	
	      this.$$element = element;
	    }
	
	    Attributes.prototype = {
	      /**
	       * @ngdoc method
	       * @name $compile.directive.Attributes#$normalize
	       * @kind function
	       *
	       * @description
	       * Converts an attribute name (e.g. dash/colon/underscore-delimited string, optionally prefixed with `x-` or
	       * `data-`) to its normalized, camelCase form.
	       *
	       * Also there is special case for Moz prefix starting with upper case letter.
	       *
	       * For further information check out the guide on {@link guide/directive#matching-directives Matching Directives}
	       *
	       * @param {string} name Name to normalize
	       */
	      $normalize: directiveNormalize,
	
	
	      /**
	       * @ngdoc method
	       * @name $compile.directive.Attributes#$addClass
	       * @kind function
	       *
	       * @description
	       * Adds the CSS class value specified by the classVal parameter to the element. If animations
	       * are enabled then an animation will be triggered for the class addition.
	       *
	       * @param {string} classVal The className value that will be added to the element
	       */
	      $addClass: function(classVal) {
	        if (classVal && classVal.length > 0) {
	          $animate.addClass(this.$$element, classVal);
	        }
	      },
	
	      /**
	       * @ngdoc method
	       * @name $compile.directive.Attributes#$removeClass
	       * @kind function
	       *
	       * @description
	       * Removes the CSS class value specified by the classVal parameter from the element. If
	       * animations are enabled then an animation will be triggered for the class removal.
	       *
	       * @param {string} classVal The className value that will be removed from the element
	       */
	      $removeClass: function(classVal) {
	        if (classVal && classVal.length > 0) {
	          $animate.removeClass(this.$$element, classVal);
	        }
	      },
	
	      /**
	       * @ngdoc method
	       * @name $compile.directive.Attributes#$updateClass
	       * @kind function
	       *
	       * @description
	       * Adds and removes the appropriate CSS class values to the element based on the difference
	       * between the new and old CSS class values (specified as newClasses and oldClasses).
	       *
	       * @param {string} newClasses The current CSS className value
	       * @param {string} oldClasses The former CSS className value
	       */
	      $updateClass: function(newClasses, oldClasses) {
	        var toAdd = tokenDifference(newClasses, oldClasses);
	        if (toAdd && toAdd.length) {
	          $animate.addClass(this.$$element, toAdd);
	        }
	
	        var toRemove = tokenDifference(oldClasses, newClasses);
	        if (toRemove && toRemove.length) {
	          $animate.removeClass(this.$$element, toRemove);
	        }
	      },
	
	      /**
	       * Set a normalized attribute on the element in a way such that all directives
	       * can share the attribute. This function properly handles boolean attributes.
	       * @param {string} key Normalized key. (ie ngAttribute)
	       * @param {string|boolean} value The value to set. If `null` attribute will be deleted.
	       * @param {boolean=} writeAttr If false, does not write the value to DOM element attribute.
	       *     Defaults to true.
	       * @param {string=} attrName Optional none normalized name. Defaults to key.
	       */
	      $set: function(key, value, writeAttr, attrName) {
	        // TODO: decide whether or not to throw an error if "class"
	        //is set through this function since it may cause $updateClass to
	        //become unstable.
	
	        var node = this.$$element[0],
	            booleanKey = getBooleanAttrName(node, key),
	            aliasedKey = getAliasedAttrName(key),
	            observer = key,
	            nodeName;
	
	        if (booleanKey) {
	          this.$$element.prop(key, value);
	          attrName = booleanKey;
	        } else if (aliasedKey) {
	          this[aliasedKey] = value;
	          observer = aliasedKey;
	        }
	
	        this[key] = value;
	
	        // translate normalized key to actual key
	        if (attrName) {
	          this.$attr[key] = attrName;
	        } else {
	          attrName = this.$attr[key];
	          if (!attrName) {
	            this.$attr[key] = attrName = snake_case(key, '-');
	          }
	        }
	
	        nodeName = nodeName_(this.$$element);
	
	        if ((nodeName === 'a' && (key === 'href' || key === 'xlinkHref')) ||
	            (nodeName === 'img' && key === 'src')) {
	          // sanitize a[href] and img[src] values
	          this[key] = value = $$sanitizeUri(value, key === 'src');
	        } else if (nodeName === 'img' && key === 'srcset' && isDefined(value)) {
	          // sanitize img[srcset] values
	          var result = '';
	
	          // first check if there are spaces because it's not the same pattern
	          var trimmedSrcset = trim(value);
	          //                (   999x   ,|   999w   ,|   ,|,   )
	          var srcPattern = /(\s+\d+x\s*,|\s+\d+w\s*,|\s+,|,\s+)/;
	          var pattern = /\s/.test(trimmedSrcset) ? srcPattern : /(,)/;
	
	          // split srcset into tuple of uri and descriptor except for the last item
	          var rawUris = trimmedSrcset.split(pattern);
	
	          // for each tuples
	          var nbrUrisWith2parts = Math.floor(rawUris.length / 2);
	          for (var i = 0; i < nbrUrisWith2parts; i++) {
	            var innerIdx = i * 2;
	            // sanitize the uri
	            result += $$sanitizeUri(trim(rawUris[innerIdx]), true);
	            // add the descriptor
	            result += (' ' + trim(rawUris[innerIdx + 1]));
	          }
	
	          // split the last item into uri and descriptor
	          var lastTuple = trim(rawUris[i * 2]).split(/\s/);
	
	          // sanitize the last uri
	          result += $$sanitizeUri(trim(lastTuple[0]), true);
	
	          // and add the last descriptor if any
	          if (lastTuple.length === 2) {
	            result += (' ' + trim(lastTuple[1]));
	          }
	          this[key] = value = result;
	        }
	
	        if (writeAttr !== false) {
	          if (value === null || isUndefined(value)) {
	            this.$$element.removeAttr(attrName);
	          } else {
	            if (SIMPLE_ATTR_NAME.test(attrName)) {
	              this.$$element.attr(attrName, value);
	            } else {
	              setSpecialAttr(this.$$element[0], attrName, value);
	            }
	          }
	        }
	
	        // fire observers
	        var $$observers = this.$$observers;
	        if ($$observers) {
	          forEach($$observers[observer], function(fn) {
	            try {
	              fn(value);
	            } catch (e) {
	              $exceptionHandler(e);
	            }
	          });
	        }
	      },
	
	
	      /**
	       * @ngdoc method
	       * @name $compile.directive.Attributes#$observe
	       * @kind function
	       *
	       * @description
	       * Observes an interpolated attribute.
	       *
	       * The observer function will be invoked once during the next `$digest` following
	       * compilation. The observer is then invoked whenever the interpolated value
	       * changes.
	       *
	       * @param {string} key Normalized key. (ie ngAttribute) .
	       * @param {function(interpolatedValue)} fn Function that will be called whenever
	                the interpolated value of the attribute changes.
	       *        See the {@link guide/interpolation#how-text-and-attribute-bindings-work Interpolation
	       *        guide} for more info.
	       * @returns {function()} Returns a deregistration function for this observer.
	       */
	      $observe: function(key, fn) {
	        var attrs = this,
	            $$observers = (attrs.$$observers || (attrs.$$observers = createMap())),
	            listeners = ($$observers[key] || ($$observers[key] = []));
	
	        listeners.push(fn);
	        $rootScope.$evalAsync(function() {
	          if (!listeners.$$inter && attrs.hasOwnProperty(key) && !isUndefined(attrs[key])) {
	            // no one registered attribute interpolation function, so lets call it manually
	            fn(attrs[key]);
	          }
	        });
	
	        return function() {
	          arrayRemove(listeners, fn);
	        };
	      }
	    };
	
	    function setSpecialAttr(element, attrName, value) {
	      // Attributes names that do not start with letters (such as `(click)`) cannot be set using `setAttribute`
	      // so we have to jump through some hoops to get such an attribute
	      // https://github.com/angular/angular.js/pull/13318
	      specialAttrHolder.innerHTML = '<span ' + attrName + '>';
	      var attributes = specialAttrHolder.firstChild.attributes;
	      var attribute = attributes[0];
	      // We have to remove the attribute from its container element before we can add it to the destination element
	      attributes.removeNamedItem(attribute.name);
	      attribute.value = value;
	      element.attributes.setNamedItem(attribute);
	    }
	
	    function safeAddClass($element, className) {
	      try {
	        $element.addClass(className);
	      } catch (e) {
	        // ignore, since it means that we are trying to set class on
	        // SVG element, where class name is read-only.
	      }
	    }
	
	
	    var startSymbol = $interpolate.startSymbol(),
	        endSymbol = $interpolate.endSymbol(),
	        denormalizeTemplate = (startSymbol === '{{' && endSymbol  === '}}')
	            ? identity
	            : function denormalizeTemplate(template) {
	              return template.replace(/\{\{/g, startSymbol).replace(/}}/g, endSymbol);
	        },
	        NG_ATTR_BINDING = /^ngAttr[A-Z]/;
	    var MULTI_ELEMENT_DIR_RE = /^(.+)Start$/;
	
	    compile.$$addBindingInfo = debugInfoEnabled ? function $$addBindingInfo($element, binding) {
	      var bindings = $element.data('$binding') || [];
	
	      if (isArray(binding)) {
	        bindings = bindings.concat(binding);
	      } else {
	        bindings.push(binding);
	      }
	
	      $element.data('$binding', bindings);
	    } : noop;
	
	    compile.$$addBindingClass = debugInfoEnabled ? function $$addBindingClass($element) {
	      safeAddClass($element, 'ng-binding');
	    } : noop;
	
	    compile.$$addScopeInfo = debugInfoEnabled ? function $$addScopeInfo($element, scope, isolated, noTemplate) {
	      var dataName = isolated ? (noTemplate ? '$isolateScopeNoTemplate' : '$isolateScope') : '$scope';
	      $element.data(dataName, scope);
	    } : noop;
	
	    compile.$$addScopeClass = debugInfoEnabled ? function $$addScopeClass($element, isolated) {
	      safeAddClass($element, isolated ? 'ng-isolate-scope' : 'ng-scope');
	    } : noop;
	
	    compile.$$createComment = function(directiveName, comment) {
	      var content = '';
	      if (debugInfoEnabled) {
	        content = ' ' + (directiveName || '') + ': ';
	        if (comment) content += comment + ' ';
	      }
	      return window.document.createComment(content);
	    };
	
	    return compile;
	
	    //================================
	
	    function compile($compileNodes, transcludeFn, maxPriority, ignoreDirective,
	                        previousCompileContext) {
	      if (!($compileNodes instanceof jqLite)) {
	        // jquery always rewraps, whereas we need to preserve the original selector so that we can
	        // modify it.
	        $compileNodes = jqLite($compileNodes);
	      }
	      var compositeLinkFn =
	              compileNodes($compileNodes, transcludeFn, $compileNodes,
	                           maxPriority, ignoreDirective, previousCompileContext);
	      compile.$$addScopeClass($compileNodes);
	      var namespace = null;
	      return function publicLinkFn(scope, cloneConnectFn, options) {
	        if (!$compileNodes) {
	          throw $compileMinErr('multilink', 'This element has already been linked.');
	        }
	        assertArg(scope, 'scope');
	
	        if (previousCompileContext && previousCompileContext.needsNewScope) {
	          // A parent directive did a replace and a directive on this element asked
	          // for transclusion, which caused us to lose a layer of element on which
	          // we could hold the new transclusion scope, so we will create it manually
	          // here.
	          scope = scope.$parent.$new();
	        }
	
	        options = options || {};
	        var parentBoundTranscludeFn = options.parentBoundTranscludeFn,
	          transcludeControllers = options.transcludeControllers,
	          futureParentElement = options.futureParentElement;
	
	        // When `parentBoundTranscludeFn` is passed, it is a
	        // `controllersBoundTransclude` function (it was previously passed
	        // as `transclude` to directive.link) so we must unwrap it to get
	        // its `boundTranscludeFn`
	        if (parentBoundTranscludeFn && parentBoundTranscludeFn.$$boundTransclude) {
	          parentBoundTranscludeFn = parentBoundTranscludeFn.$$boundTransclude;
	        }
	
	        if (!namespace) {
	          namespace = detectNamespaceForChildElements(futureParentElement);
	        }
	        var $linkNode;
	        if (namespace !== 'html') {
	          // When using a directive with replace:true and templateUrl the $compileNodes
	          // (or a child element inside of them)
	          // might change, so we need to recreate the namespace adapted compileNodes
	          // for call to the link function.
	          // Note: This will already clone the nodes...
	          $linkNode = jqLite(
	            wrapTemplate(namespace, jqLite('<div>').append($compileNodes).html())
	          );
	        } else if (cloneConnectFn) {
	          // important!!: we must call our jqLite.clone() since the jQuery one is trying to be smart
	          // and sometimes changes the structure of the DOM.
	          $linkNode = JQLitePrototype.clone.call($compileNodes);
	        } else {
	          $linkNode = $compileNodes;
	        }
	
	        if (transcludeControllers) {
	          for (var controllerName in transcludeControllers) {
	            $linkNode.data('$' + controllerName + 'Controller', transcludeControllers[controllerName].instance);
	          }
	        }
	
	        compile.$$addScopeInfo($linkNode, scope);
	
	        if (cloneConnectFn) cloneConnectFn($linkNode, scope);
	        if (compositeLinkFn) compositeLinkFn(scope, $linkNode, $linkNode, parentBoundTranscludeFn);
	
	        if (!cloneConnectFn) {
	          $compileNodes = compositeLinkFn = null;
	        }
	        return $linkNode;
	      };
	    }
	
	    function detectNamespaceForChildElements(parentElement) {
	      // TODO: Make this detect MathML as well...
	      var node = parentElement && parentElement[0];
	      if (!node) {
	        return 'html';
	      } else {
	        return nodeName_(node) !== 'foreignobject' && toString.call(node).match(/SVG/) ? 'svg' : 'html';
	      }
	    }
	
	    /**
	     * Compile function matches each node in nodeList against the directives. Once all directives
	     * for a particular node are collected their compile functions are executed. The compile
	     * functions return values - the linking functions - are combined into a composite linking
	     * function, which is the a linking function for the node.
	     *
	     * @param {NodeList} nodeList an array of nodes or NodeList to compile
	     * @param {function(angular.Scope, cloneAttachFn=)} transcludeFn A linking function, where the
	     *        scope argument is auto-generated to the new child of the transcluded parent scope.
	     * @param {DOMElement=} $rootElement If the nodeList is the root of the compilation tree then
	     *        the rootElement must be set the jqLite collection of the compile root. This is
	     *        needed so that the jqLite collection items can be replaced with widgets.
	     * @param {number=} maxPriority Max directive priority.
	     * @returns {Function} A composite linking function of all of the matched directives or null.
	     */
	    function compileNodes(nodeList, transcludeFn, $rootElement, maxPriority, ignoreDirective,
	                            previousCompileContext) {
	      var linkFns = [],
	          // `nodeList` can be either an element's `.childNodes` (live NodeList)
	          // or a jqLite/jQuery collection or an array
	          notLiveList = isArray(nodeList) || (nodeList instanceof jqLite),
	          attrs, directives, nodeLinkFn, childNodes, childLinkFn, linkFnFound, nodeLinkFnFound;
	
	
	      for (var i = 0; i < nodeList.length; i++) {
	        attrs = new Attributes();
	
	        // Support: IE 11 only
	        // Workaround for #11781 and #14924
	        if (msie === 11) {
	          mergeConsecutiveTextNodes(nodeList, i, notLiveList);
	        }
	
	        // We must always refer to `nodeList[i]` hereafter,
	        // since the nodes can be replaced underneath us.
	        directives = collectDirectives(nodeList[i], [], attrs, i === 0 ? maxPriority : undefined,
	                                        ignoreDirective);
	
	        nodeLinkFn = (directives.length)
	            ? applyDirectivesToNode(directives, nodeList[i], attrs, transcludeFn, $rootElement,
	                                      null, [], [], previousCompileContext)
	            : null;
	
	        if (nodeLinkFn && nodeLinkFn.scope) {
	          compile.$$addScopeClass(attrs.$$element);
	        }
	
	        childLinkFn = (nodeLinkFn && nodeLinkFn.terminal ||
	                      !(childNodes = nodeList[i].childNodes) ||
	                      !childNodes.length)
	            ? null
	            : compileNodes(childNodes,
	                 nodeLinkFn ? (
	                  (nodeLinkFn.transcludeOnThisElement || !nodeLinkFn.templateOnThisElement)
	                     && nodeLinkFn.transclude) : transcludeFn);
	
	        if (nodeLinkFn || childLinkFn) {
	          linkFns.push(i, nodeLinkFn, childLinkFn);
	          linkFnFound = true;
	          nodeLinkFnFound = nodeLinkFnFound || nodeLinkFn;
	        }
	
	        //use the previous context only for the first element in the virtual group
	        previousCompileContext = null;
	      }
	
	      // return a linking function if we have found anything, null otherwise
	      return linkFnFound ? compositeLinkFn : null;
	
	      function compositeLinkFn(scope, nodeList, $rootElement, parentBoundTranscludeFn) {
	        var nodeLinkFn, childLinkFn, node, childScope, i, ii, idx, childBoundTranscludeFn;
	        var stableNodeList;
	
	
	        if (nodeLinkFnFound) {
	          // copy nodeList so that if a nodeLinkFn removes or adds an element at this DOM level our
	          // offsets don't get screwed up
	          var nodeListLength = nodeList.length;
	          stableNodeList = new Array(nodeListLength);
	
	          // create a sparse array by only copying the elements which have a linkFn
	          for (i = 0; i < linkFns.length; i += 3) {
	            idx = linkFns[i];
	            stableNodeList[idx] = nodeList[idx];
	          }
	        } else {
	          stableNodeList = nodeList;
	        }
	
	        for (i = 0, ii = linkFns.length; i < ii;) {
	          node = stableNodeList[linkFns[i++]];
	          nodeLinkFn = linkFns[i++];
	          childLinkFn = linkFns[i++];
	
	          if (nodeLinkFn) {
	            if (nodeLinkFn.scope) {
	              childScope = scope.$new();
	              compile.$$addScopeInfo(jqLite(node), childScope);
	            } else {
	              childScope = scope;
	            }
	
	            if (nodeLinkFn.transcludeOnThisElement) {
	              childBoundTranscludeFn = createBoundTranscludeFn(
	                  scope, nodeLinkFn.transclude, parentBoundTranscludeFn);
	
	            } else if (!nodeLinkFn.templateOnThisElement && parentBoundTranscludeFn) {
	              childBoundTranscludeFn = parentBoundTranscludeFn;
	
	            } else if (!parentBoundTranscludeFn && transcludeFn) {
	              childBoundTranscludeFn = createBoundTranscludeFn(scope, transcludeFn);
	
	            } else {
	              childBoundTranscludeFn = null;
	            }
	
	            nodeLinkFn(childLinkFn, childScope, node, $rootElement, childBoundTranscludeFn);
	
	          } else if (childLinkFn) {
	            childLinkFn(scope, node.childNodes, undefined, parentBoundTranscludeFn);
	          }
	        }
	      }
	    }
	
	    function mergeConsecutiveTextNodes(nodeList, idx, notLiveList) {
	      var node = nodeList[idx];
	      var parent = node.parentNode;
	      var sibling;
	
	      if (node.nodeType !== NODE_TYPE_TEXT) {
	        return;
	      }
	
	      while (true) {
	        sibling = parent ? node.nextSibling : nodeList[idx + 1];
	        if (!sibling || sibling.nodeType !== NODE_TYPE_TEXT) {
	          break;
	        }
	
	        node.nodeValue = node.nodeValue + sibling.nodeValue;
	
	        if (sibling.parentNode) {
	          sibling.parentNode.removeChild(sibling);
	        }
	        if (notLiveList && sibling === nodeList[idx + 1]) {
	          nodeList.splice(idx + 1, 1);
	        }
	      }
	    }
	
	    function createBoundTranscludeFn(scope, transcludeFn, previousBoundTranscludeFn) {
	      function boundTranscludeFn(transcludedScope, cloneFn, controllers, futureParentElement, containingScope) {
	
	        if (!transcludedScope) {
	          transcludedScope = scope.$new(false, containingScope);
	          transcludedScope.$$transcluded = true;
	        }
	
	        return transcludeFn(transcludedScope, cloneFn, {
	          parentBoundTranscludeFn: previousBoundTranscludeFn,
	          transcludeControllers: controllers,
	          futureParentElement: futureParentElement
	        });
	      }
	
	      // We need  to attach the transclusion slots onto the `boundTranscludeFn`
	      // so that they are available inside the `controllersBoundTransclude` function
	      var boundSlots = boundTranscludeFn.$$slots = createMap();
	      for (var slotName in transcludeFn.$$slots) {
	        if (transcludeFn.$$slots[slotName]) {
	          boundSlots[slotName] = createBoundTranscludeFn(scope, transcludeFn.$$slots[slotName], previousBoundTranscludeFn);
	        } else {
	          boundSlots[slotName] = null;
	        }
	      }
	
	      return boundTranscludeFn;
	    }
	
	    /**
	     * Looks for directives on the given node and adds them to the directive collection which is
	     * sorted.
	     *
	     * @param node Node to search.
	     * @param directives An array to which the directives are added to. This array is sorted before
	     *        the function returns.
	     * @param attrs The shared attrs object which is used to populate the normalized attributes.
	     * @param {number=} maxPriority Max directive priority.
	     */
	    function collectDirectives(node, directives, attrs, maxPriority, ignoreDirective) {
	      var nodeType = node.nodeType,
	          attrsMap = attrs.$attr,
	          match,
	          nodeName,
	          className;
	
	      switch (nodeType) {
	        case NODE_TYPE_ELEMENT: /* Element */
	
	          nodeName = nodeName_(node);
	
	          // use the node name: <directive>
	          addDirective(directives,
	              directiveNormalize(nodeName), 'E', maxPriority, ignoreDirective);
	
	          // iterate over the attributes
	          for (var attr, name, nName, ngAttrName, value, isNgAttr, nAttrs = node.attributes,
	                   j = 0, jj = nAttrs && nAttrs.length; j < jj; j++) {
	            var attrStartName = false;
	            var attrEndName = false;
	
	            attr = nAttrs[j];
	            name = attr.name;
	            value = attr.value;
	
	            // support ngAttr attribute binding
	            ngAttrName = directiveNormalize(name);
	            isNgAttr = NG_ATTR_BINDING.test(ngAttrName);
	            if (isNgAttr) {
	              name = name.replace(PREFIX_REGEXP, '')
	                .substr(8).replace(/_(.)/g, function(match, letter) {
	                  return letter.toUpperCase();
	                });
	            }
	
	            var multiElementMatch = ngAttrName.match(MULTI_ELEMENT_DIR_RE);
	            if (multiElementMatch && directiveIsMultiElement(multiElementMatch[1])) {
	              attrStartName = name;
	              attrEndName = name.substr(0, name.length - 5) + 'end';
	              name = name.substr(0, name.length - 6);
	            }
	
	            nName = directiveNormalize(name.toLowerCase());
	            attrsMap[nName] = name;
	            if (isNgAttr || !attrs.hasOwnProperty(nName)) {
	                attrs[nName] = value;
	                if (getBooleanAttrName(node, nName)) {
	                  attrs[nName] = true; // presence means true
	                }
	            }
	            addAttrInterpolateDirective(node, directives, value, nName, isNgAttr);
	            addDirective(directives, nName, 'A', maxPriority, ignoreDirective, attrStartName,
	                          attrEndName);
	          }
	
	          if (nodeName === 'input' && node.getAttribute('type') === 'hidden') {
	            // Hidden input elements can have strange behaviour when navigating back to the page
	            // This tells the browser not to try to cache and reinstate previous values
	            node.setAttribute('autocomplete', 'off');
	          }
	
	          // use class as directive
	          if (!cssClassDirectivesEnabled) break;
	          className = node.className;
	          if (isObject(className)) {
	              // Maybe SVGAnimatedString
	              className = className.animVal;
	          }
	          if (isString(className) && className !== '') {
	            while ((match = CLASS_DIRECTIVE_REGEXP.exec(className))) {
	              nName = directiveNormalize(match[2]);
	              if (addDirective(directives, nName, 'C', maxPriority, ignoreDirective)) {
	                attrs[nName] = trim(match[3]);
	              }
	              className = className.substr(match.index + match[0].length);
	            }
	          }
	          break;
	        case NODE_TYPE_TEXT: /* Text Node */
	          addTextInterpolateDirective(directives, node.nodeValue);
	          break;
	        case NODE_TYPE_COMMENT: /* Comment */
	          if (!commentDirectivesEnabled) break;
	          collectCommentDirectives(node, directives, attrs, maxPriority, ignoreDirective);
	          break;
	      }
	
	      directives.sort(byPriority);
	      return directives;
	    }
	
	    function collectCommentDirectives(node, directives, attrs, maxPriority, ignoreDirective) {
	      // function created because of performance, try/catch disables
	      // the optimization of the whole function #14848
	      try {
	        var match = COMMENT_DIRECTIVE_REGEXP.exec(node.nodeValue);
	        if (match) {
	          var nName = directiveNormalize(match[1]);
	          if (addDirective(directives, nName, 'M', maxPriority, ignoreDirective)) {
	            attrs[nName] = trim(match[2]);
	          }
	        }
	      } catch (e) {
	        // turns out that under some circumstances IE9 throws errors when one attempts to read
	        // comment's node value.
	        // Just ignore it and continue. (Can't seem to reproduce in test case.)
	      }
	    }
	
	    /**
	     * Given a node with a directive-start it collects all of the siblings until it finds
	     * directive-end.
	     * @param node
	     * @param attrStart
	     * @param attrEnd
	     * @returns {*}
	     */
	    function groupScan(node, attrStart, attrEnd) {
	      var nodes = [];
	      var depth = 0;
	      if (attrStart && node.hasAttribute && node.hasAttribute(attrStart)) {
	        do {
	          if (!node) {
	            throw $compileMinErr('uterdir',
	                      'Unterminated attribute, found \'{0}\' but no matching \'{1}\' found.',
	                      attrStart, attrEnd);
	          }
	          if (node.nodeType === NODE_TYPE_ELEMENT) {
	            if (node.hasAttribute(attrStart)) depth++;
	            if (node.hasAttribute(attrEnd)) depth--;
	          }
	          nodes.push(node);
	          node = node.nextSibling;
	        } while (depth > 0);
	      } else {
	        nodes.push(node);
	      }
	
	      return jqLite(nodes);
	    }
	
	    /**
	     * Wrapper for linking function which converts normal linking function into a grouped
	     * linking function.
	     * @param linkFn
	     * @param attrStart
	     * @param attrEnd
	     * @returns {Function}
	     */
	    function groupElementsLinkFnWrapper(linkFn, attrStart, attrEnd) {
	      return function groupedElementsLink(scope, element, attrs, controllers, transcludeFn) {
	        element = groupScan(element[0], attrStart, attrEnd);
	        return linkFn(scope, element, attrs, controllers, transcludeFn);
	      };
	    }
	
	    /**
	     * A function generator that is used to support both eager and lazy compilation
	     * linking function.
	     * @param eager
	     * @param $compileNodes
	     * @param transcludeFn
	     * @param maxPriority
	     * @param ignoreDirective
	     * @param previousCompileContext
	     * @returns {Function}
	     */
	    function compilationGenerator(eager, $compileNodes, transcludeFn, maxPriority, ignoreDirective, previousCompileContext) {
	      var compiled;
	
	      if (eager) {
	        return compile($compileNodes, transcludeFn, maxPriority, ignoreDirective, previousCompileContext);
	      }
	      return /** @this */ function lazyCompilation() {
	        if (!compiled) {
	          compiled = compile($compileNodes, transcludeFn, maxPriority, ignoreDirective, previousCompileContext);
	
	          // Null out all of these references in order to make them eligible for garbage collection
	          // since this is a potentially long lived closure
	          $compileNodes = transcludeFn = previousCompileContext = null;
	        }
	        return compiled.apply(this, arguments);
	      };
	    }
	
	    /**
	     * Once the directives have been collected, their compile functions are executed. This method
	     * is responsible for inlining directive templates as well as terminating the application
	     * of the directives if the terminal directive has been reached.
	     *
	     * @param {Array} directives Array of collected directives to execute their compile function.
	     *        this needs to be pre-sorted by priority order.
	     * @param {Node} compileNode The raw DOM node to apply the compile functions to
	     * @param {Object} templateAttrs The shared attribute function
	     * @param {function(angular.Scope, cloneAttachFn=)} transcludeFn A linking function, where the
	     *                                                  scope argument is auto-generated to the new
	     *                                                  child of the transcluded parent scope.
	     * @param {JQLite} jqCollection If we are working on the root of the compile tree then this
	     *                              argument has the root jqLite array so that we can replace nodes
	     *                              on it.
	     * @param {Object=} originalReplaceDirective An optional directive that will be ignored when
	     *                                           compiling the transclusion.
	     * @param {Array.<Function>} preLinkFns
	     * @param {Array.<Function>} postLinkFns
	     * @param {Object} previousCompileContext Context used for previous compilation of the current
	     *                                        node
	     * @returns {Function} linkFn
	     */
	    function applyDirectivesToNode(directives, compileNode, templateAttrs, transcludeFn,
	                                   jqCollection, originalReplaceDirective, preLinkFns, postLinkFns,
	                                   previousCompileContext) {
	      previousCompileContext = previousCompileContext || {};
	
	      var terminalPriority = -Number.MAX_VALUE,
	          newScopeDirective = previousCompileContext.newScopeDirective,
	          controllerDirectives = previousCompileContext.controllerDirectives,
	          newIsolateScopeDirective = previousCompileContext.newIsolateScopeDirective,
	          templateDirective = previousCompileContext.templateDirective,
	          nonTlbTranscludeDirective = previousCompileContext.nonTlbTranscludeDirective,
	          hasTranscludeDirective = false,
	          hasTemplate = false,
	          hasElementTranscludeDirective = previousCompileContext.hasElementTranscludeDirective,
	          $compileNode = templateAttrs.$$element = jqLite(compileNode),
	          directive,
	          directiveName,
	          $template,
	          replaceDirective = originalReplaceDirective,
	          childTranscludeFn = transcludeFn,
	          linkFn,
	          didScanForMultipleTransclusion = false,
	          mightHaveMultipleTransclusionError = false,
	          directiveValue;
	
	      // executes all directives on the current element
	      for (var i = 0, ii = directives.length; i < ii; i++) {
	        directive = directives[i];
	        var attrStart = directive.$$start;
	        var attrEnd = directive.$$end;
	
	        // collect multiblock sections
	        if (attrStart) {
	          $compileNode = groupScan(compileNode, attrStart, attrEnd);
	        }
	        $template = undefined;
	
	        if (terminalPriority > directive.priority) {
	          break; // prevent further processing of directives
	        }
	
	        directiveValue = directive.scope;
	
	        if (directiveValue) {
	
	          // skip the check for directives with async templates, we'll check the derived sync
	          // directive when the template arrives
	          if (!directive.templateUrl) {
	            if (isObject(directiveValue)) {
	              // This directive is trying to add an isolated scope.
	              // Check that there is no scope of any kind already
	              assertNoDuplicate('new/isolated scope', newIsolateScopeDirective || newScopeDirective,
	                                directive, $compileNode);
	              newIsolateScopeDirective = directive;
	            } else {
	              // This directive is trying to add a child scope.
	              // Check that there is no isolated scope already
	              assertNoDuplicate('new/isolated scope', newIsolateScopeDirective, directive,
	                                $compileNode);
	            }
	          }
	
	          newScopeDirective = newScopeDirective || directive;
	        }
	
	        directiveName = directive.name;
	
	        // If we encounter a condition that can result in transclusion on the directive,
	        // then scan ahead in the remaining directives for others that may cause a multiple
	        // transclusion error to be thrown during the compilation process.  If a matching directive
	        // is found, then we know that when we encounter a transcluded directive, we need to eagerly
	        // compile the `transclude` function rather than doing it lazily in order to throw
	        // exceptions at the correct time
	        if (!didScanForMultipleTransclusion && ((directive.replace && (directive.templateUrl || directive.template))
	            || (directive.transclude && !directive.$$tlb))) {
	                var candidateDirective;
	
	                for (var scanningIndex = i + 1; (candidateDirective = directives[scanningIndex++]);) {
	                    if ((candidateDirective.transclude && !candidateDirective.$$tlb)
	                        || (candidateDirective.replace && (candidateDirective.templateUrl || candidateDirective.template))) {
	                        mightHaveMultipleTransclusionError = true;
	                        break;
	                    }
	                }
	
	                didScanForMultipleTransclusion = true;
	        }
	
	        if (!directive.templateUrl && directive.controller) {
	          controllerDirectives = controllerDirectives || createMap();
	          assertNoDuplicate('\'' + directiveName + '\' controller',
	              controllerDirectives[directiveName], directive, $compileNode);
	          controllerDirectives[directiveName] = directive;
	        }
	
	        directiveValue = directive.transclude;
	
	        if (directiveValue) {
	          hasTranscludeDirective = true;
	
	          // Special case ngIf and ngRepeat so that we don't complain about duplicate transclusion.
	          // This option should only be used by directives that know how to safely handle element transclusion,
	          // where the transcluded nodes are added or replaced after linking.
	          if (!directive.$$tlb) {
	            assertNoDuplicate('transclusion', nonTlbTranscludeDirective, directive, $compileNode);
	            nonTlbTranscludeDirective = directive;
	          }
	
	          if (directiveValue === 'element') {
	            hasElementTranscludeDirective = true;
	            terminalPriority = directive.priority;
	            $template = $compileNode;
	            $compileNode = templateAttrs.$$element =
	                jqLite(compile.$$createComment(directiveName, templateAttrs[directiveName]));
	            compileNode = $compileNode[0];
	            replaceWith(jqCollection, sliceArgs($template), compileNode);
	
	            // Support: Chrome < 50
	            // https://github.com/angular/angular.js/issues/14041
	
	            // In the versions of V8 prior to Chrome 50, the document fragment that is created
	            // in the `replaceWith` function is improperly garbage collected despite still
	            // being referenced by the `parentNode` property of all of the child nodes.  By adding
	            // a reference to the fragment via a different property, we can avoid that incorrect
	            // behavior.
	            // TODO: remove this line after Chrome 50 has been released
	            $template[0].$$parentNode = $template[0].parentNode;
	
	            childTranscludeFn = compilationGenerator(mightHaveMultipleTransclusionError, $template, transcludeFn, terminalPriority,
	                                        replaceDirective && replaceDirective.name, {
	                                          // Don't pass in:
	                                          // - controllerDirectives - otherwise we'll create duplicates controllers
	                                          // - newIsolateScopeDirective or templateDirective - combining templates with
	                                          //   element transclusion doesn't make sense.
	                                          //
	                                          // We need only nonTlbTranscludeDirective so that we prevent putting transclusion
	                                          // on the same element more than once.
	                                          nonTlbTranscludeDirective: nonTlbTranscludeDirective
	                                        });
	          } else {
	
	            var slots = createMap();
	
	            if (!isObject(directiveValue)) {
	              $template = jqLite(jqLiteClone(compileNode)).contents();
	            } else {
	
	              // We have transclusion slots,
	              // collect them up, compile them and store their transclusion functions
	              $template = [];
	
	              var slotMap = createMap();
	              var filledSlots = createMap();
	
	              // Parse the element selectors
	              forEach(directiveValue, function(elementSelector, slotName) {
	                // If an element selector starts with a ? then it is optional
	                var optional = (elementSelector.charAt(0) === '?');
	                elementSelector = optional ? elementSelector.substring(1) : elementSelector;
	
	                slotMap[elementSelector] = slotName;
	
	                // We explicitly assign `null` since this implies that a slot was defined but not filled.
	                // Later when calling boundTransclusion functions with a slot name we only error if the
	                // slot is `undefined`
	                slots[slotName] = null;
	
	                // filledSlots contains `true` for all slots that are either optional or have been
	                // filled. This is used to check that we have not missed any required slots
	                filledSlots[slotName] = optional;
	              });
	
	              // Add the matching elements into their slot
	              forEach($compileNode.contents(), function(node) {
	                var slotName = slotMap[directiveNormalize(nodeName_(node))];
	                if (slotName) {
	                  filledSlots[slotName] = true;
	                  slots[slotName] = slots[slotName] || [];
	                  slots[slotName].push(node);
	                } else {
	                  $template.push(node);
	                }
	              });
	
	              // Check for required slots that were not filled
	              forEach(filledSlots, function(filled, slotName) {
	                if (!filled) {
	                  throw $compileMinErr('reqslot', 'Required transclusion slot `{0}` was not filled.', slotName);
	                }
	              });
	
	              for (var slotName in slots) {
	                if (slots[slotName]) {
	                  // Only define a transclusion function if the slot was filled
	                  slots[slotName] = compilationGenerator(mightHaveMultipleTransclusionError, slots[slotName], transcludeFn);
	                }
	              }
	            }
	
	            $compileNode.empty(); // clear contents
	            childTranscludeFn = compilationGenerator(mightHaveMultipleTransclusionError, $template, transcludeFn, undefined,
	                undefined, { needsNewScope: directive.$$isolateScope || directive.$$newScope});
	            childTranscludeFn.$$slots = slots;
	          }
	        }
	
	        if (directive.template) {
	          hasTemplate = true;
	          assertNoDuplicate('template', templateDirective, directive, $compileNode);
	          templateDirective = directive;
	
	          directiveValue = (isFunction(directive.template))
	              ? directive.template($compileNode, templateAttrs)
	              : directive.template;
	
	          directiveValue = denormalizeTemplate(directiveValue);
	
	          if (directive.replace) {
	            replaceDirective = directive;
	            if (jqLiteIsTextNode(directiveValue)) {
	              $template = [];
	            } else {
	              $template = removeComments(wrapTemplate(directive.templateNamespace, trim(directiveValue)));
	            }
	            compileNode = $template[0];
	
	            if ($template.length !== 1 || compileNode.nodeType !== NODE_TYPE_ELEMENT) {
	              throw $compileMinErr('tplrt',
	                  'Template for directive \'{0}\' must have exactly one root element. {1}',
	                  directiveName, '');
	            }
	
	            replaceWith(jqCollection, $compileNode, compileNode);
	
	            var newTemplateAttrs = {$attr: {}};
	
	            // combine directives from the original node and from the template:
	            // - take the array of directives for this element
	            // - split it into two parts, those that already applied (processed) and those that weren't (unprocessed)
	            // - collect directives from the template and sort them by priority
	            // - combine directives as: processed + template + unprocessed
	            var templateDirectives = collectDirectives(compileNode, [], newTemplateAttrs);
	            var unprocessedDirectives = directives.splice(i + 1, directives.length - (i + 1));
	
	            if (newIsolateScopeDirective || newScopeDirective) {
	              // The original directive caused the current element to be replaced but this element
	              // also needs to have a new scope, so we need to tell the template directives
	              // that they would need to get their scope from further up, if they require transclusion
	              markDirectiveScope(templateDirectives, newIsolateScopeDirective, newScopeDirective);
	            }
	            directives = directives.concat(templateDirectives).concat(unprocessedDirectives);
	            mergeTemplateAttributes(templateAttrs, newTemplateAttrs);
	
	            ii = directives.length;
	          } else {
	            $compileNode.html(directiveValue);
	          }
	        }
	
	        if (directive.templateUrl) {
	          hasTemplate = true;
	          assertNoDuplicate('template', templateDirective, directive, $compileNode);
	          templateDirective = directive;
	
	          if (directive.replace) {
	            replaceDirective = directive;
	          }
	
	          // eslint-disable-next-line no-func-assign
	          nodeLinkFn = compileTemplateUrl(directives.splice(i, directives.length - i), $compileNode,
	              templateAttrs, jqCollection, hasTranscludeDirective && childTranscludeFn, preLinkFns, postLinkFns, {
	                controllerDirectives: controllerDirectives,
	                newScopeDirective: (newScopeDirective !== directive) && newScopeDirective,
	                newIsolateScopeDirective: newIsolateScopeDirective,
	                templateDirective: templateDirective,
	                nonTlbTranscludeDirective: nonTlbTranscludeDirective
	              });
	          ii = directives.length;
	        } else if (directive.compile) {
	          try {
	            linkFn = directive.compile($compileNode, templateAttrs, childTranscludeFn);
	            var context = directive.$$originalDirective || directive;
	            if (isFunction(linkFn)) {
	              addLinkFns(null, bind(context, linkFn), attrStart, attrEnd);
	            } else if (linkFn) {
	              addLinkFns(bind(context, linkFn.pre), bind(context, linkFn.post), attrStart, attrEnd);
	            }
	          } catch (e) {
	            $exceptionHandler(e, startingTag($compileNode));
	          }
	        }
	
	        if (directive.terminal) {
	          nodeLinkFn.terminal = true;
	          terminalPriority = Math.max(terminalPriority, directive.priority);
	        }
	
	      }
	
	      nodeLinkFn.scope = newScopeDirective && newScopeDirective.scope === true;
	      nodeLinkFn.transcludeOnThisElement = hasTranscludeDirective;
	      nodeLinkFn.templateOnThisElement = hasTemplate;
	      nodeLinkFn.transclude = childTranscludeFn;
	
	      previousCompileContext.hasElementTranscludeDirective = hasElementTranscludeDirective;
	
	      // might be normal or delayed nodeLinkFn depending on if templateUrl is present
	      return nodeLinkFn;
	
	      ////////////////////
	
	      function addLinkFns(pre, post, attrStart, attrEnd) {
	        if (pre) {
	          if (attrStart) pre = groupElementsLinkFnWrapper(pre, attrStart, attrEnd);
	          pre.require = directive.require;
	          pre.directiveName = directiveName;
	          if (newIsolateScopeDirective === directive || directive.$$isolateScope) {
	            pre = cloneAndAnnotateFn(pre, {isolateScope: true});
	          }
	          preLinkFns.push(pre);
	        }
	        if (post) {
	          if (attrStart) post = groupElementsLinkFnWrapper(post, attrStart, attrEnd);
	          post.require = directive.require;
	          post.directiveName = directiveName;
	          if (newIsolateScopeDirective === directive || directive.$$isolateScope) {
	            post = cloneAndAnnotateFn(post, {isolateScope: true});
	          }
	          postLinkFns.push(post);
	        }
	      }
	
	      function nodeLinkFn(childLinkFn, scope, linkNode, $rootElement, boundTranscludeFn) {
	        var i, ii, linkFn, isolateScope, controllerScope, elementControllers, transcludeFn, $element,
	            attrs, scopeBindingInfo;
	
	        if (compileNode === linkNode) {
	          attrs = templateAttrs;
	          $element = templateAttrs.$$element;
	        } else {
	          $element = jqLite(linkNode);
	          attrs = new Attributes($element, templateAttrs);
	        }
	
	        controllerScope = scope;
	        if (newIsolateScopeDirective) {
	          isolateScope = scope.$new(true);
	        } else if (newScopeDirective) {
	          controllerScope = scope.$parent;
	        }
	
	        if (boundTranscludeFn) {
	          // track `boundTranscludeFn` so it can be unwrapped if `transcludeFn`
	          // is later passed as `parentBoundTranscludeFn` to `publicLinkFn`
	          transcludeFn = controllersBoundTransclude;
	          transcludeFn.$$boundTransclude = boundTranscludeFn;
	          // expose the slots on the `$transclude` function
	          transcludeFn.isSlotFilled = function(slotName) {
	            return !!boundTranscludeFn.$$slots[slotName];
	          };
	        }
	
	        if (controllerDirectives) {
	          elementControllers = setupControllers($element, attrs, transcludeFn, controllerDirectives, isolateScope, scope, newIsolateScopeDirective);
	        }
	
	        if (newIsolateScopeDirective) {
	          // Initialize isolate scope bindings for new isolate scope directive.
	          compile.$$addScopeInfo($element, isolateScope, true, !(templateDirective && (templateDirective === newIsolateScopeDirective ||
	              templateDirective === newIsolateScopeDirective.$$originalDirective)));
	          compile.$$addScopeClass($element, true);
	          isolateScope.$$isolateBindings =
	              newIsolateScopeDirective.$$isolateBindings;
	          scopeBindingInfo = initializeDirectiveBindings(scope, attrs, isolateScope,
	                                        isolateScope.$$isolateBindings,
	                                        newIsolateScopeDirective);
	          if (scopeBindingInfo.removeWatches) {
	            isolateScope.$on('$destroy', scopeBindingInfo.removeWatches);
	          }
	        }
	
	        // Initialize bindToController bindings
	        for (var name in elementControllers) {
	          var controllerDirective = controllerDirectives[name];
	          var controller = elementControllers[name];
	          var bindings = controllerDirective.$$bindings.bindToController;
	
	          if (preAssignBindingsEnabled) {
	            if (bindings) {
	              controller.bindingInfo =
	                initializeDirectiveBindings(controllerScope, attrs, controller.instance, bindings, controllerDirective);
	            } else {
	              controller.bindingInfo = {};
	            }
	
	            var controllerResult = controller();
	            if (controllerResult !== controller.instance) {
	              // If the controller constructor has a return value, overwrite the instance
	              // from setupControllers
	              controller.instance = controllerResult;
	              $element.data('$' + controllerDirective.name + 'Controller', controllerResult);
	              if (controller.bindingInfo.removeWatches) {
	                controller.bindingInfo.removeWatches();
	              }
	              controller.bindingInfo =
	                initializeDirectiveBindings(controllerScope, attrs, controller.instance, bindings, controllerDirective);
	            }
	          } else {
	            controller.instance = controller();
	            $element.data('$' + controllerDirective.name + 'Controller', controller.instance);
	            controller.bindingInfo =
	              initializeDirectiveBindings(controllerScope, attrs, controller.instance, bindings, controllerDirective);
	          }
	        }
	
	        // Bind the required controllers to the controller, if `require` is an object and `bindToController` is truthy
	        forEach(controllerDirectives, function(controllerDirective, name) {
	          var require = controllerDirective.require;
	          if (controllerDirective.bindToController && !isArray(require) && isObject(require)) {
	            extend(elementControllers[name].instance, getControllers(name, require, $element, elementControllers));
	          }
	        });
	
	        // Handle the init and destroy lifecycle hooks on all controllers that have them
	        forEach(elementControllers, function(controller) {
	          var controllerInstance = controller.instance;
	          if (isFunction(controllerInstance.$onChanges)) {
	            try {
	              controllerInstance.$onChanges(controller.bindingInfo.initialChanges);
	            } catch (e) {
	              $exceptionHandler(e);
	            }
	          }
	          if (isFunction(controllerInstance.$onInit)) {
	            try {
	              controllerInstance.$onInit();
	            } catch (e) {
	              $exceptionHandler(e);
	            }
	          }
	          if (isFunction(controllerInstance.$doCheck)) {
	            controllerScope.$watch(function() { controllerInstance.$doCheck(); });
	            controllerInstance.$doCheck();
	          }
	          if (isFunction(controllerInstance.$onDestroy)) {
	            controllerScope.$on('$destroy', function callOnDestroyHook() {
	              controllerInstance.$onDestroy();
	            });
	          }
	        });
	
	        // PRELINKING
	        for (i = 0, ii = preLinkFns.length; i < ii; i++) {
	          linkFn = preLinkFns[i];
	          invokeLinkFn(linkFn,
	              linkFn.isolateScope ? isolateScope : scope,
	              $element,
	              attrs,
	              linkFn.require && getControllers(linkFn.directiveName, linkFn.require, $element, elementControllers),
	              transcludeFn
	          );
	        }
	
	        // RECURSION
	        // We only pass the isolate scope, if the isolate directive has a template,
	        // otherwise the child elements do not belong to the isolate directive.
	        var scopeToChild = scope;
	        if (newIsolateScopeDirective && (newIsolateScopeDirective.template || newIsolateScopeDirective.templateUrl === null)) {
	          scopeToChild = isolateScope;
	        }
	        if (childLinkFn) {
	          childLinkFn(scopeToChild, linkNode.childNodes, undefined, boundTranscludeFn);
	        }
	
	        // POSTLINKING
	        for (i = postLinkFns.length - 1; i >= 0; i--) {
	          linkFn = postLinkFns[i];
	          invokeLinkFn(linkFn,
	              linkFn.isolateScope ? isolateScope : scope,
	              $element,
	              attrs,
	              linkFn.require && getControllers(linkFn.directiveName, linkFn.require, $element, elementControllers),
	              transcludeFn
	          );
	        }
	
	        // Trigger $postLink lifecycle hooks
	        forEach(elementControllers, function(controller) {
	          var controllerInstance = controller.instance;
	          if (isFunction(controllerInstance.$postLink)) {
	            controllerInstance.$postLink();
	          }
	        });
	
	        // This is the function that is injected as `$transclude`.
	        // Note: all arguments are optional!
	        function controllersBoundTransclude(scope, cloneAttachFn, futureParentElement, slotName) {
	          var transcludeControllers;
	          // No scope passed in:
	          if (!isScope(scope)) {
	            slotName = futureParentElement;
	            futureParentElement = cloneAttachFn;
	            cloneAttachFn = scope;
	            scope = undefined;
	          }
	
	          if (hasElementTranscludeDirective) {
	            transcludeControllers = elementControllers;
	          }
	          if (!futureParentElement) {
	            futureParentElement = hasElementTranscludeDirective ? $element.parent() : $element;
	          }
	          if (slotName) {
	            // slotTranscludeFn can be one of three things:
	            //  * a transclude function - a filled slot
	            //  * `null` - an optional slot that was not filled
	            //  * `undefined` - a slot that was not declared (i.e. invalid)
	            var slotTranscludeFn = boundTranscludeFn.$$slots[slotName];
	            if (slotTranscludeFn) {
	              return slotTranscludeFn(scope, cloneAttachFn, transcludeControllers, futureParentElement, scopeToChild);
	            } else if (isUndefined(slotTranscludeFn)) {
	              throw $compileMinErr('noslot',
	               'No parent directive that requires a transclusion with slot name "{0}". ' +
	               'Element: {1}',
	               slotName, startingTag($element));
	            }
	          } else {
	            return boundTranscludeFn(scope, cloneAttachFn, transcludeControllers, futureParentElement, scopeToChild);
	          }
	        }
	      }
	    }
	
	    function getControllers(directiveName, require, $element, elementControllers) {
	      var value;
	
	      if (isString(require)) {
	        var match = require.match(REQUIRE_PREFIX_REGEXP);
	        var name = require.substring(match[0].length);
	        var inheritType = match[1] || match[3];
	        var optional = match[2] === '?';
	
	        //If only parents then start at the parent element
	        if (inheritType === '^^') {
	          $element = $element.parent();
	        //Otherwise attempt getting the controller from elementControllers in case
	        //the element is transcluded (and has no data) and to avoid .data if possible
	        } else {
	          value = elementControllers && elementControllers[name];
	          value = value && value.instance;
	        }
	
	        if (!value) {
	          var dataName = '$' + name + 'Controller';
	          value = inheritType ? $element.inheritedData(dataName) : $element.data(dataName);
	        }
	
	        if (!value && !optional) {
	          throw $compileMinErr('ctreq',
	              'Controller \'{0}\', required by directive \'{1}\', can\'t be found!',
	              name, directiveName);
	        }
	      } else if (isArray(require)) {
	        value = [];
	        for (var i = 0, ii = require.length; i < ii; i++) {
	          value[i] = getControllers(directiveName, require[i], $element, elementControllers);
	        }
	      } else if (isObject(require)) {
	        value = {};
	        forEach(require, function(controller, property) {
	          value[property] = getControllers(directiveName, controller, $element, elementControllers);
	        });
	      }
	
	      return value || null;
	    }
	
	    function setupControllers($element, attrs, transcludeFn, controllerDirectives, isolateScope, scope, newIsolateScopeDirective) {
	      var elementControllers = createMap();
	      for (var controllerKey in controllerDirectives) {
	        var directive = controllerDirectives[controllerKey];
	        var locals = {
	          $scope: directive === newIsolateScopeDirective || directive.$$isolateScope ? isolateScope : scope,
	          $element: $element,
	          $attrs: attrs,
	          $transclude: transcludeFn
	        };
	
	        var controller = directive.controller;
	        if (controller === '@') {
	          controller = attrs[directive.name];
	        }
	
	        var controllerInstance = $controller(controller, locals, true, directive.controllerAs);
	
	        // For directives with element transclusion the element is a comment.
	        // In this case .data will not attach any data.
	        // Instead, we save the controllers for the element in a local hash and attach to .data
	        // later, once we have the actual element.
	        elementControllers[directive.name] = controllerInstance;
	        $element.data('$' + directive.name + 'Controller', controllerInstance.instance);
	      }
	      return elementControllers;
	    }
	
	    // Depending upon the context in which a directive finds itself it might need to have a new isolated
	    // or child scope created. For instance:
	    // * if the directive has been pulled into a template because another directive with a higher priority
	    // asked for element transclusion
	    // * if the directive itself asks for transclusion but it is at the root of a template and the original
	    // element was replaced. See https://github.com/angular/angular.js/issues/12936
	    function markDirectiveScope(directives, isolateScope, newScope) {
	      for (var j = 0, jj = directives.length; j < jj; j++) {
	        directives[j] = inherit(directives[j], {$$isolateScope: isolateScope, $$newScope: newScope});
	      }
	    }
	
	    /**
	     * looks up the directive and decorates it with exception handling and proper parameters. We
	     * call this the boundDirective.
	     *
	     * @param {string} name name of the directive to look up.
	     * @param {string} location The directive must be found in specific format.
	     *   String containing any of theses characters:
	     *
	     *   * `E`: element name
	     *   * `A': attribute
	     *   * `C`: class
	     *   * `M`: comment
	     * @returns {boolean} true if directive was added.
	     */
	    function addDirective(tDirectives, name, location, maxPriority, ignoreDirective, startAttrName,
	                          endAttrName) {
	      if (name === ignoreDirective) return null;
	      var match = null;
	      if (hasDirectives.hasOwnProperty(name)) {
	        for (var directive, directives = $injector.get(name + Suffix),
	            i = 0, ii = directives.length; i < ii; i++) {
	          directive = directives[i];
	          if ((isUndefined(maxPriority) || maxPriority > directive.priority) &&
	               directive.restrict.indexOf(location) !== -1) {
	            if (startAttrName) {
	              directive = inherit(directive, {$$start: startAttrName, $$end: endAttrName});
	            }
	            if (!directive.$$bindings) {
	              var bindings = directive.$$bindings =
	                  parseDirectiveBindings(directive, directive.name);
	              if (isObject(bindings.isolateScope)) {
	                directive.$$isolateBindings = bindings.isolateScope;
	              }
	            }
	            tDirectives.push(directive);
	            match = directive;
	          }
	        }
	      }
	      return match;
	    }
	
	
	    /**
	     * looks up the directive and returns true if it is a multi-element directive,
	     * and therefore requires DOM nodes between -start and -end markers to be grouped
	     * together.
	     *
	     * @param {string} name name of the directive to look up.
	     * @returns true if directive was registered as multi-element.
	     */
	    function directiveIsMultiElement(name) {
	      if (hasDirectives.hasOwnProperty(name)) {
	        for (var directive, directives = $injector.get(name + Suffix),
	            i = 0, ii = directives.length; i < ii; i++) {
	          directive = directives[i];
	          if (directive.multiElement) {
	            return true;
	          }
	        }
	      }
	      return false;
	    }
	
	    /**
	     * When the element is replaced with HTML template then the new attributes
	     * on the template need to be merged with the existing attributes in the DOM.
	     * The desired effect is to have both of the attributes present.
	     *
	     * @param {object} dst destination attributes (original DOM)
	     * @param {object} src source attributes (from the directive template)
	     */
	    function mergeTemplateAttributes(dst, src) {
	      var srcAttr = src.$attr,
	          dstAttr = dst.$attr;
	
	      // reapply the old attributes to the new element
	      forEach(dst, function(value, key) {
	        if (key.charAt(0) !== '$') {
	          if (src[key] && src[key] !== value) {
	            if (value.length) {
	              value += (key === 'style' ? ';' : ' ') + src[key];
	            } else {
	              value = src[key];
	            }
	          }
	          dst.$set(key, value, true, srcAttr[key]);
	        }
	      });
	
	      // copy the new attributes on the old attrs object
	      forEach(src, function(value, key) {
	        // Check if we already set this attribute in the loop above.
	        // `dst` will never contain hasOwnProperty as DOM parser won't let it.
	        // You will get an "InvalidCharacterError: DOM Exception 5" error if you
	        // have an attribute like "has-own-property" or "data-has-own-property", etc.
	        if (!dst.hasOwnProperty(key) && key.charAt(0) !== '$') {
	          dst[key] = value;
	
	          if (key !== 'class' && key !== 'style') {
	            dstAttr[key] = srcAttr[key];
	          }
	        }
	      });
	    }
	
	
	    function compileTemplateUrl(directives, $compileNode, tAttrs,
	        $rootElement, childTranscludeFn, preLinkFns, postLinkFns, previousCompileContext) {
	      var linkQueue = [],
	          afterTemplateNodeLinkFn,
	          afterTemplateChildLinkFn,
	          beforeTemplateCompileNode = $compileNode[0],
	          origAsyncDirective = directives.shift(),
	          derivedSyncDirective = inherit(origAsyncDirective, {
	            templateUrl: null, transclude: null, replace: null, $$originalDirective: origAsyncDirective
	          }),
	          templateUrl = (isFunction(origAsyncDirective.templateUrl))
	              ? origAsyncDirective.templateUrl($compileNode, tAttrs)
	              : origAsyncDirective.templateUrl,
	          templateNamespace = origAsyncDirective.templateNamespace;
	
	      $compileNode.empty();
	
	      $templateRequest(templateUrl)
	        .then(function(content) {
	          var compileNode, tempTemplateAttrs, $template, childBoundTranscludeFn;
	
	          content = denormalizeTemplate(content);
	
	          if (origAsyncDirective.replace) {
	            if (jqLiteIsTextNode(content)) {
	              $template = [];
	            } else {
	              $template = removeComments(wrapTemplate(templateNamespace, trim(content)));
	            }
	            compileNode = $template[0];
	
	            if ($template.length !== 1 || compileNode.nodeType !== NODE_TYPE_ELEMENT) {
	              throw $compileMinErr('tplrt',
	                  'Template for directive \'{0}\' must have exactly one root element. {1}',
	                  origAsyncDirective.name, templateUrl);
	            }
	
	            tempTemplateAttrs = {$attr: {}};
	            replaceWith($rootElement, $compileNode, compileNode);
	            var templateDirectives = collectDirectives(compileNode, [], tempTemplateAttrs);
	
	            if (isObject(origAsyncDirective.scope)) {
	              // the original directive that caused the template to be loaded async required
	              // an isolate scope
	              markDirectiveScope(templateDirectives, true);
	            }
	            directives = templateDirectives.concat(directives);
	            mergeTemplateAttributes(tAttrs, tempTemplateAttrs);
	          } else {
	            compileNode = beforeTemplateCompileNode;
	            $compileNode.html(content);
	          }
	
	          directives.unshift(derivedSyncDirective);
	
	          afterTemplateNodeLinkFn = applyDirectivesToNode(directives, compileNode, tAttrs,
	              childTranscludeFn, $compileNode, origAsyncDirective, preLinkFns, postLinkFns,
	              previousCompileContext);
	          forEach($rootElement, function(node, i) {
	            if (node === compileNode) {
	              $rootElement[i] = $compileNode[0];
	            }
	          });
	          afterTemplateChildLinkFn = compileNodes($compileNode[0].childNodes, childTranscludeFn);
	
	          while (linkQueue.length) {
	            var scope = linkQueue.shift(),
	                beforeTemplateLinkNode = linkQueue.shift(),
	                linkRootElement = linkQueue.shift(),
	                boundTranscludeFn = linkQueue.shift(),
	                linkNode = $compileNode[0];
	
	            if (scope.$$destroyed) continue;
	
	            if (beforeTemplateLinkNode !== beforeTemplateCompileNode) {
	              var oldClasses = beforeTemplateLinkNode.className;
	
	              if (!(previousCompileContext.hasElementTranscludeDirective &&
	                  origAsyncDirective.replace)) {
	                // it was cloned therefore we have to clone as well.
	                linkNode = jqLiteClone(compileNode);
	              }
	              replaceWith(linkRootElement, jqLite(beforeTemplateLinkNode), linkNode);
	
	              // Copy in CSS classes from original node
	              safeAddClass(jqLite(linkNode), oldClasses);
	            }
	            if (afterTemplateNodeLinkFn.transcludeOnThisElement) {
	              childBoundTranscludeFn = createBoundTranscludeFn(scope, afterTemplateNodeLinkFn.transclude, boundTranscludeFn);
	            } else {
	              childBoundTranscludeFn = boundTranscludeFn;
	            }
	            afterTemplateNodeLinkFn(afterTemplateChildLinkFn, scope, linkNode, $rootElement,
	              childBoundTranscludeFn);
	          }
	          linkQueue = null;
	        }).catch(function(error) {
	          if (error instanceof Error) {
	            $exceptionHandler(error);
	          }
	        }).catch(noop);
	
	      return function delayedNodeLinkFn(ignoreChildLinkFn, scope, node, rootElement, boundTranscludeFn) {
	        var childBoundTranscludeFn = boundTranscludeFn;
	        if (scope.$$destroyed) return;
	        if (linkQueue) {
	          linkQueue.push(scope,
	                         node,
	                         rootElement,
	                         childBoundTranscludeFn);
	        } else {
	          if (afterTemplateNodeLinkFn.transcludeOnThisElement) {
	            childBoundTranscludeFn = createBoundTranscludeFn(scope, afterTemplateNodeLinkFn.transclude, boundTranscludeFn);
	          }
	          afterTemplateNodeLinkFn(afterTemplateChildLinkFn, scope, node, rootElement, childBoundTranscludeFn);
	        }
	      };
	    }
	
	
	    /**
	     * Sorting function for bound directives.
	     */
	    function byPriority(a, b) {
	      var diff = b.priority - a.priority;
	      if (diff !== 0) return diff;
	      if (a.name !== b.name) return (a.name < b.name) ? -1 : 1;
	      return a.index - b.index;
	    }
	
	    function assertNoDuplicate(what, previousDirective, directive, element) {
	
	      function wrapModuleNameIfDefined(moduleName) {
	        return moduleName ?
	          (' (module: ' + moduleName + ')') :
	          '';
	      }
	
	      if (previousDirective) {
	        throw $compileMinErr('multidir', 'Multiple directives [{0}{1}, {2}{3}] asking for {4} on: {5}',
	            previousDirective.name, wrapModuleNameIfDefined(previousDirective.$$moduleName),
	            directive.name, wrapModuleNameIfDefined(directive.$$moduleName), what, startingTag(element));
	      }
	    }
	
	
	    function addTextInterpolateDirective(directives, text) {
	      var interpolateFn = $interpolate(text, true);
	      if (interpolateFn) {
	        directives.push({
	          priority: 0,
	          compile: function textInterpolateCompileFn(templateNode) {
	            var templateNodeParent = templateNode.parent(),
	                hasCompileParent = !!templateNodeParent.length;
	
	            // When transcluding a template that has bindings in the root
	            // we don't have a parent and thus need to add the class during linking fn.
	            if (hasCompileParent) compile.$$addBindingClass(templateNodeParent);
	
	            return function textInterpolateLinkFn(scope, node) {
	              var parent = node.parent();
	              if (!hasCompileParent) compile.$$addBindingClass(parent);
	              compile.$$addBindingInfo(parent, interpolateFn.expressions);
	              scope.$watch(interpolateFn, function interpolateFnWatchAction(value) {
	                node[0].nodeValue = value;
	              });
	            };
	          }
	        });
	      }
	    }
	
	
	    function wrapTemplate(type, template) {
	      type = lowercase(type || 'html');
	      switch (type) {
	      case 'svg':
	      case 'math':
	        var wrapper = window.document.createElement('div');
	        wrapper.innerHTML = '<' + type + '>' + template + '</' + type + '>';
	        return wrapper.childNodes[0].childNodes;
	      default:
	        return template;
	      }
	    }
	
	
	    function getTrustedContext(node, attrNormalizedName) {
	      if (attrNormalizedName === 'srcdoc') {
	        return $sce.HTML;
	      }
	      var tag = nodeName_(node);
	      // All tags with src attributes require a RESOURCE_URL value, except for
	      // img and various html5 media tags.
	      if (attrNormalizedName === 'src' || attrNormalizedName === 'ngSrc') {
	        if (['img', 'video', 'audio', 'source', 'track'].indexOf(tag) === -1) {
	          return $sce.RESOURCE_URL;
	        }
	      // maction[xlink:href] can source SVG.  It's not limited to <maction>.
	      } else if (attrNormalizedName === 'xlinkHref' ||
	          (tag === 'form' && attrNormalizedName === 'action') ||
	          // links can be stylesheets or imports, which can run script in the current origin
	          (tag === 'link' && attrNormalizedName === 'href')
	      ) {
	        return $sce.RESOURCE_URL;
	      }
	    }
	
	
	    function addAttrInterpolateDirective(node, directives, value, name, isNgAttr) {
	      var trustedContext = getTrustedContext(node, name);
	      var mustHaveExpression = !isNgAttr;
	      var allOrNothing = ALL_OR_NOTHING_ATTRS[name] || isNgAttr;
	
	      var interpolateFn = $interpolate(value, mustHaveExpression, trustedContext, allOrNothing);
	
	      // no interpolation found -> ignore
	      if (!interpolateFn) return;
	
	      if (name === 'multiple' && nodeName_(node) === 'select') {
	        throw $compileMinErr('selmulti',
	            'Binding to the \'multiple\' attribute is not supported. Element: {0}',
	            startingTag(node));
	      }
	
	      if (EVENT_HANDLER_ATTR_REGEXP.test(name)) {
	        throw $compileMinErr('nodomevents',
	            'Interpolations for HTML DOM event attributes are disallowed.  Please use the ' +
	                'ng- versions (such as ng-click instead of onclick) instead.');
	      }
	
	      directives.push({
	        priority: 100,
	        compile: function() {
	            return {
	              pre: function attrInterpolatePreLinkFn(scope, element, attr) {
	                var $$observers = (attr.$$observers || (attr.$$observers = createMap()));
	
	                // If the attribute has changed since last $interpolate()ed
	                var newValue = attr[name];
	                if (newValue !== value) {
	                  // we need to interpolate again since the attribute value has been updated
	                  // (e.g. by another directive's compile function)
	                  // ensure unset/empty values make interpolateFn falsy
	                  interpolateFn = newValue && $interpolate(newValue, true, trustedContext, allOrNothing);
	                  value = newValue;
	                }
	
	                // if attribute was updated so that there is no interpolation going on we don't want to
	                // register any observers
	                if (!interpolateFn) return;
	
	                // initialize attr object so that it's ready in case we need the value for isolate
	                // scope initialization, otherwise the value would not be available from isolate
	                // directive's linking fn during linking phase
	                attr[name] = interpolateFn(scope);
	
	                ($$observers[name] || ($$observers[name] = [])).$$inter = true;
	                (attr.$$observers && attr.$$observers[name].$$scope || scope).
	                  $watch(interpolateFn, function interpolateFnWatchAction(newValue, oldValue) {
	                    //special case for class attribute addition + removal
	                    //so that class changes can tap into the animation
	                    //hooks provided by the $animate service. Be sure to
	                    //skip animations when the first digest occurs (when
	                    //both the new and the old values are the same) since
	                    //the CSS classes are the non-interpolated values
	                    if (name === 'class' && newValue !== oldValue) {
	                      attr.$updateClass(newValue, oldValue);
	                    } else {
	                      attr.$set(name, newValue);
	                    }
	                  });
	              }
	            };
	          }
	      });
	    }
	
	
	    /**
	     * This is a special jqLite.replaceWith, which can replace items which
	     * have no parents, provided that the containing jqLite collection is provided.
	     *
	     * @param {JqLite=} $rootElement The root of the compile tree. Used so that we can replace nodes
	     *                               in the root of the tree.
	     * @param {JqLite} elementsToRemove The jqLite element which we are going to replace. We keep
	     *                                  the shell, but replace its DOM node reference.
	     * @param {Node} newNode The new DOM node.
	     */
	    function replaceWith($rootElement, elementsToRemove, newNode) {
	      var firstElementToRemove = elementsToRemove[0],
	          removeCount = elementsToRemove.length,
	          parent = firstElementToRemove.parentNode,
	          i, ii;
	
	      if ($rootElement) {
	        for (i = 0, ii = $rootElement.length; i < ii; i++) {
	          if ($rootElement[i] === firstElementToRemove) {
	            $rootElement[i++] = newNode;
	            for (var j = i, j2 = j + removeCount - 1,
	                     jj = $rootElement.length;
	                 j < jj; j++, j2++) {
	              if (j2 < jj) {
	                $rootElement[j] = $rootElement[j2];
	              } else {
	                delete $rootElement[j];
	              }
	            }
	            $rootElement.length -= removeCount - 1;
	
	            // If the replaced element is also the jQuery .context then replace it
	            // .context is a deprecated jQuery api, so we should set it only when jQuery set it
	            // http://api.jquery.com/context/
	            if ($rootElement.context === firstElementToRemove) {
	              $rootElement.context = newNode;
	            }
	            break;
	          }
	        }
	      }
	
	      if (parent) {
	        parent.replaceChild(newNode, firstElementToRemove);
	      }
	
	      // Append all the `elementsToRemove` to a fragment. This will...
	      // - remove them from the DOM
	      // - allow them to still be traversed with .nextSibling
	      // - allow a single fragment.qSA to fetch all elements being removed
	      var fragment = window.document.createDocumentFragment();
	      for (i = 0; i < removeCount; i++) {
	        fragment.appendChild(elementsToRemove[i]);
	      }
	
	      if (jqLite.hasData(firstElementToRemove)) {
	        // Copy over user data (that includes Angular's $scope etc.). Don't copy private
	        // data here because there's no public interface in jQuery to do that and copying over
	        // event listeners (which is the main use of private data) wouldn't work anyway.
	        jqLite.data(newNode, jqLite.data(firstElementToRemove));
	
	        // Remove $destroy event listeners from `firstElementToRemove`
	        jqLite(firstElementToRemove).off('$destroy');
	      }
	
	      // Cleanup any data/listeners on the elements and children.
	      // This includes invoking the $destroy event on any elements with listeners.
	      jqLite.cleanData(fragment.querySelectorAll('*'));
	
	      // Update the jqLite collection to only contain the `newNode`
	      for (i = 1; i < removeCount; i++) {
	        delete elementsToRemove[i];
	      }
	      elementsToRemove[0] = newNode;
	      elementsToRemove.length = 1;
	    }
	
	
	    function cloneAndAnnotateFn(fn, annotation) {
	      return extend(function() { return fn.apply(null, arguments); }, fn, annotation);
	    }
	
	
	    function invokeLinkFn(linkFn, scope, $element, attrs, controllers, transcludeFn) {
	      try {
	        linkFn(scope, $element, attrs, controllers, transcludeFn);
	      } catch (e) {
	        $exceptionHandler(e, startingTag($element));
	      }
	    }
	
	
	    // Set up $watches for isolate scope and controller bindings.
	    function initializeDirectiveBindings(scope, attrs, destination, bindings, directive) {
	      var removeWatchCollection = [];
	      var initialChanges = {};
	      var changes;
	      forEach(bindings, function initializeBinding(definition, scopeName) {
	        var attrName = definition.attrName,
	        optional = definition.optional,
	        mode = definition.mode, // @, =, <, or &
	        lastValue,
	        parentGet, parentSet, compare, removeWatch;
	
	        switch (mode) {
	
	          case '@':
	            if (!optional && !hasOwnProperty.call(attrs, attrName)) {
	              destination[scopeName] = attrs[attrName] = undefined;
	            }
	            removeWatch = attrs.$observe(attrName, function(value) {
	              if (isString(value) || isBoolean(value)) {
	                var oldValue = destination[scopeName];
	                recordChanges(scopeName, value, oldValue);
	                destination[scopeName] = value;
	              }
	            });
	            attrs.$$observers[attrName].$$scope = scope;
	            lastValue = attrs[attrName];
	            if (isString(lastValue)) {
	              // If the attribute has been provided then we trigger an interpolation to ensure
	              // the value is there for use in the link fn
	              destination[scopeName] = $interpolate(lastValue)(scope);
	            } else if (isBoolean(lastValue)) {
	              // If the attributes is one of the BOOLEAN_ATTR then Angular will have converted
	              // the value to boolean rather than a string, so we special case this situation
	              destination[scopeName] = lastValue;
	            }
	            initialChanges[scopeName] = new SimpleChange(_UNINITIALIZED_VALUE, destination[scopeName]);
	            removeWatchCollection.push(removeWatch);
	            break;
	
	          case '=':
	            if (!hasOwnProperty.call(attrs, attrName)) {
	              if (optional) break;
	              attrs[attrName] = undefined;
	            }
	            if (optional && !attrs[attrName]) break;
	
	            parentGet = $parse(attrs[attrName]);
	            if (parentGet.literal) {
	              compare = equals;
	            } else {
	              // eslint-disable-next-line no-self-compare
	              compare = function simpleCompare(a, b) { return a === b || (a !== a && b !== b); };
	            }
	            parentSet = parentGet.assign || function() {
	              // reset the change, or we will throw this exception on every $digest
	              lastValue = destination[scopeName] = parentGet(scope);
	              throw $compileMinErr('nonassign',
	                  'Expression \'{0}\' in attribute \'{1}\' used with directive \'{2}\' is non-assignable!',
	                  attrs[attrName], attrName, directive.name);
	            };
	            lastValue = destination[scopeName] = parentGet(scope);
	            var parentValueWatch = function parentValueWatch(parentValue) {
	              if (!compare(parentValue, destination[scopeName])) {
	                // we are out of sync and need to copy
	                if (!compare(parentValue, lastValue)) {
	                  // parent changed and it has precedence
	                  destination[scopeName] = parentValue;
	                } else {
	                  // if the parent can be assigned then do so
	                  parentSet(scope, parentValue = destination[scopeName]);
	                }
	              }
	              lastValue = parentValue;
	              return lastValue;
	            };
	            parentValueWatch.$stateful = true;
	            if (definition.collection) {
	              removeWatch = scope.$watchCollection(attrs[attrName], parentValueWatch);
	            } else {
	              removeWatch = scope.$watch($parse(attrs[attrName], parentValueWatch), null, parentGet.literal);
	            }
	            removeWatchCollection.push(removeWatch);
	            break;
	
	          case '<':
	            if (!hasOwnProperty.call(attrs, attrName)) {
	              if (optional) break;
	              attrs[attrName] = undefined;
	            }
	            if (optional && !attrs[attrName]) break;
	
	            parentGet = $parse(attrs[attrName]);
	            var deepWatch = parentGet.literal;
	
	            var initialValue = destination[scopeName] = parentGet(scope);
	            initialChanges[scopeName] = new SimpleChange(_UNINITIALIZED_VALUE, destination[scopeName]);
	
	            removeWatch = scope.$watch(parentGet, function parentValueWatchAction(newValue, oldValue) {
	              if (oldValue === newValue) {
	                if (oldValue === initialValue || (deepWatch && equals(oldValue, initialValue))) {
	                  return;
	                }
	                oldValue = initialValue;
	              }
	              recordChanges(scopeName, newValue, oldValue);
	              destination[scopeName] = newValue;
	            }, deepWatch);
	
	            removeWatchCollection.push(removeWatch);
	            break;
	
	          case '&':
	            // Don't assign Object.prototype method to scope
	            parentGet = attrs.hasOwnProperty(attrName) ? $parse(attrs[attrName]) : noop;
	
	            // Don't assign noop to destination if expression is not valid
	            if (parentGet === noop && optional) break;
	
	            destination[scopeName] = function(locals) {
	              return parentGet(scope, locals);
	            };
	            break;
	        }
	      });
	
	      function recordChanges(key, currentValue, previousValue) {
	        if (isFunction(destination.$onChanges) && currentValue !== previousValue &&
	            // eslint-disable-next-line no-self-compare
	            (currentValue === currentValue || previousValue === previousValue)) {
	          // If we have not already scheduled the top level onChangesQueue handler then do so now
	          if (!onChangesQueue) {
	            scope.$$postDigest(flushOnChangesQueue);
	            onChangesQueue = [];
	          }
	          // If we have not already queued a trigger of onChanges for this controller then do so now
	          if (!changes) {
	            changes = {};
	            onChangesQueue.push(triggerOnChangesHook);
	          }
	          // If the has been a change on this property already then we need to reuse the previous value
	          if (changes[key]) {
	            previousValue = changes[key].previousValue;
	          }
	          // Store this change
	          changes[key] = new SimpleChange(previousValue, currentValue);
	        }
	      }
	
	      function triggerOnChangesHook() {
	        destination.$onChanges(changes);
	        // Now clear the changes so that we schedule onChanges when more changes arrive
	        changes = undefined;
	      }
	
	      return {
	        initialChanges: initialChanges,
	        removeWatches: removeWatchCollection.length && function removeWatches() {
	          for (var i = 0, ii = removeWatchCollection.length; i < ii; ++i) {
	            removeWatchCollection[i]();
	          }
	        }
	      };
	    }
	  }];
	}
	
	function SimpleChange(previous, current) {
	  this.previousValue = previous;
	  this.currentValue = current;
	}
	SimpleChange.prototype.isFirstChange = function() { return this.previousValue === _UNINITIALIZED_VALUE; };
	
	
	var PREFIX_REGEXP = /^((?:x|data)[:\-_])/i;
	var SPECIAL_CHARS_REGEXP = /[:\-_]+(.)/g;
	
	/**
	 * Converts all accepted directives format into proper directive name.
	 * @param name Name to normalize
	 */
	function directiveNormalize(name) {
	  return name
	    .replace(PREFIX_REGEXP, '')
	    .replace(SPECIAL_CHARS_REGEXP, fnCamelCaseReplace);
	}
	
	/**
	 * @ngdoc type
	 * @name $compile.directive.Attributes
	 *
	 * @description
	 * A shared object between directive compile / linking functions which contains normalized DOM
	 * element attributes. The values reflect current binding state `{{ }}`. The normalization is
	 * needed since all of these are treated as equivalent in Angular:
	 *
	 * ```
	 *    <span ng:bind="a" ng-bind="a" data-ng-bind="a" x-ng-bind="a">
	 * ```
	 */
	
	/**
	 * @ngdoc property
	 * @name $compile.directive.Attributes#$attr
	 *
	 * @description
	 * A map of DOM element attribute names to the normalized name. This is
	 * needed to do reverse lookup from normalized name back to actual name.
	 */
	
	
	/**
	 * @ngdoc method
	 * @name $compile.directive.Attributes#$set
	 * @kind function
	 *
	 * @description
	 * Set DOM element attribute value.
	 *
	 *
	 * @param {string} name Normalized element attribute name of the property to modify. The name is
	 *          reverse-translated using the {@link ng.$compile.directive.Attributes#$attr $attr}
	 *          property to the original name.
	 * @param {string} value Value to set the attribute to. The value can be an interpolated string.
	 */
	
	
	
	/**
	 * Closure compiler type information
	 */
	
	function nodesetLinkingFn(
	  /* angular.Scope */ scope,
	  /* NodeList */ nodeList,
	  /* Element */ rootElement,
	  /* function(Function) */ boundTranscludeFn
	) {}
	
	function directiveLinkingFn(
	  /* nodesetLinkingFn */ nodesetLinkingFn,
	  /* angular.Scope */ scope,
	  /* Node */ node,
	  /* Element */ rootElement,
	  /* function(Function) */ boundTranscludeFn
	) {}
	
	function tokenDifference(str1, str2) {
	  var values = '',
	      tokens1 = str1.split(/\s+/),
	      tokens2 = str2.split(/\s+/);
	
	  outer:
	  for (var i = 0; i < tokens1.length; i++) {
	    var token = tokens1[i];
	    for (var j = 0; j < tokens2.length; j++) {
	      if (token === tokens2[j]) continue outer;
	    }
	    values += (values.length > 0 ? ' ' : '') + token;
	  }
	  return values;
	}
	
	function removeComments(jqNodes) {
	  jqNodes = jqLite(jqNodes);
	  var i = jqNodes.length;
	
	  if (i <= 1) {
	    return jqNodes;
	  }
	
	  while (i--) {
	    var node = jqNodes[i];
	    if (node.nodeType === NODE_TYPE_COMMENT ||
	       (node.nodeType === NODE_TYPE_TEXT && node.nodeValue.trim() === '')) {
	         splice.call(jqNodes, i, 1);
	    }
	  }
	  return jqNodes;
	}
	
	var $controllerMinErr = minErr('$controller');
	
	
	var CNTRL_REG = /^(\S+)(\s+as\s+([\w$]+))?$/;
	function identifierForController(controller, ident) {
	  if (ident && isString(ident)) return ident;
	  if (isString(controller)) {
	    var match = CNTRL_REG.exec(controller);
	    if (match) return match[3];
	  }
	}
	
	
	/**
	 * @ngdoc provider
	 * @name $controllerProvider
	 * @this
	 *
	 * @description
	 * The {@link ng.$controller $controller service} is used by Angular to create new
	 * controllers.
	 *
	 * This provider allows controller registration via the
	 * {@link ng.$controllerProvider#register register} method.
	 */
	function $ControllerProvider() {
	  var controllers = {},
	      globals = false;
	
	  /**
	   * @ngdoc method
	   * @name $controllerProvider#has
	   * @param {string} name Controller name to check.
	   */
	  this.has = function(name) {
	    return controllers.hasOwnProperty(name);
	  };
	
	  /**
	   * @ngdoc method
	   * @name $controllerProvider#register
	   * @param {string|Object} name Controller name, or an object map of controllers where the keys are
	   *    the names and the values are the constructors.
	   * @param {Function|Array} constructor Controller constructor fn (optionally decorated with DI
	   *    annotations in the array notation).
	   */
	  this.register = function(name, constructor) {
	    assertNotHasOwnProperty(name, 'controller');
	    if (isObject(name)) {
	      extend(controllers, name);
	    } else {
	      controllers[name] = constructor;
	    }
	  };
	
	  /**
	   * @ngdoc method
	   * @name $controllerProvider#allowGlobals
	   * @description If called, allows `$controller` to find controller constructors on `window`
	   *
	   * @deprecated
	   * sinceVersion="v1.3.0"
	   * removeVersion="v1.7.0"
	   * This method of finding controllers has been deprecated.
	   */
	  this.allowGlobals = function() {
	    globals = true;
	  };
	
	
	  this.$get = ['$injector', '$window', function($injector, $window) {
	
	    /**
	     * @ngdoc service
	     * @name $controller
	     * @requires $injector
	     *
	     * @param {Function|string} constructor If called with a function then it's considered to be the
	     *    controller constructor function. Otherwise it's considered to be a string which is used
	     *    to retrieve the controller constructor using the following steps:
	     *
	     *    * check if a controller with given name is registered via `$controllerProvider`
	     *    * check if evaluating the string on the current scope returns a constructor
	     *    * if $controllerProvider#allowGlobals, check `window[constructor]` on the global
	     *      `window` object (deprecated, not recommended)
	     *
	     *    The string can use the `controller as property` syntax, where the controller instance is published
	     *    as the specified property on the `scope`; the `scope` must be injected into `locals` param for this
	     *    to work correctly.
	     *
	     * @param {Object} locals Injection locals for Controller.
	     * @return {Object} Instance of given controller.
	     *
	     * @description
	     * `$controller` service is responsible for instantiating controllers.
	     *
	     * It's just a simple call to {@link auto.$injector $injector}, but extracted into
	     * a service, so that one can override this service with [BC version](https://gist.github.com/1649788).
	     */
	    return function $controller(expression, locals, later, ident) {
	      // PRIVATE API:
	      //   param `later` --- indicates that the controller's constructor is invoked at a later time.
	      //                     If true, $controller will allocate the object with the correct
	      //                     prototype chain, but will not invoke the controller until a returned
	      //                     callback is invoked.
	      //   param `ident` --- An optional label which overrides the label parsed from the controller
	      //                     expression, if any.
	      var instance, match, constructor, identifier;
	      later = later === true;
	      if (ident && isString(ident)) {
	        identifier = ident;
	      }
	
	      if (isString(expression)) {
	        match = expression.match(CNTRL_REG);
	        if (!match) {
	          throw $controllerMinErr('ctrlfmt',
	            'Badly formed controller string \'{0}\'. ' +
	            'Must match `__name__ as __id__` or `__name__`.', expression);
	        }
	        constructor = match[1];
	        identifier = identifier || match[3];
	        expression = controllers.hasOwnProperty(constructor)
	            ? controllers[constructor]
	            : getter(locals.$scope, constructor, true) ||
	                (globals ? getter($window, constructor, true) : undefined);
	
	        if (!expression) {
	          throw $controllerMinErr('ctrlreg',
	            'The controller with the name \'{0}\' is not registered.', constructor);
	        }
	
	        assertArgFn(expression, constructor, true);
	      }
	
	      if (later) {
	        // Instantiate controller later:
	        // This machinery is used to create an instance of the object before calling the
	        // controller's constructor itself.
	        //
	        // This allows properties to be added to the controller before the constructor is
	        // invoked. Primarily, this is used for isolate scope bindings in $compile.
	        //
	        // This feature is not intended for use by applications, and is thus not documented
	        // publicly.
	        // Object creation: http://jsperf.com/create-constructor/2
	        var controllerPrototype = (isArray(expression) ?
	          expression[expression.length - 1] : expression).prototype;
	        instance = Object.create(controllerPrototype || null);
	
	        if (identifier) {
	          addIdentifier(locals, identifier, instance, constructor || expression.name);
	        }
	
	        return extend(function $controllerInit() {
	          var result = $injector.invoke(expression, instance, locals, constructor);
	          if (result !== instance && (isObject(result) || isFunction(result))) {
	            instance = result;
	            if (identifier) {
	              // If result changed, re-assign controllerAs value to scope.
	              addIdentifier(locals, identifier, instance, constructor || expression.name);
	            }
	          }
	          return instance;
	        }, {
	          instance: instance,
	          identifier: identifier
	        });
	      }
	
	      instance = $injector.instantiate(expression, locals, constructor);
	
	      if (identifier) {
	        addIdentifier(locals, identifier, instance, constructor || expression.name);
	      }
	
	      return instance;
	    };
	
	    function addIdentifier(locals, identifier, instance, name) {
	      if (!(locals && isObject(locals.$scope))) {
	        throw minErr('$controller')('noscp',
	          'Cannot export controller \'{0}\' as \'{1}\'! No $scope object provided via `locals`.',
	          name, identifier);
	      }
	
	      locals.$scope[identifier] = instance;
	    }
	  }];
	}
	
	/**
	 * @ngdoc service
	 * @name $document
	 * @requires $window
	 * @this
	 *
	 * @description
	 * A {@link angular.element jQuery or jqLite} wrapper for the browser's `window.document` object.
	 *
	 * @example
	   <example module="documentExample" name="document">
	     <file name="index.html">
	       <div ng-controller="ExampleController">
	         <p>$document title: <b ng-bind="title"></b></p>
	         <p>window.document title: <b ng-bind="windowTitle"></b></p>
	       </div>
	     </file>
	     <file name="script.js">
	       angular.module('documentExample', [])
	         .controller('ExampleController', ['$scope', '$document', function($scope, $document) {
	           $scope.title = $document[0].title;
	           $scope.windowTitle = angular.element(window.document)[0].title;
	         }]);
	     </file>
	   </example>
	 */
	function $DocumentProvider() {
	  this.$get = ['$window', function(window) {
	    return jqLite(window.document);
	  }];
	}
	
	
	/**
	 * @private
	 * @this
	 * Listens for document visibility change and makes the current status accessible.
	 */
	function $$IsDocumentHiddenProvider() {
	  this.$get = ['$document', '$rootScope', function($document, $rootScope) {
	    var doc = $document[0];
	    var hidden = doc && doc.hidden;
	
	    $document.on('visibilitychange', changeListener);
	
	    $rootScope.$on('$destroy', function() {
	      $document.off('visibilitychange', changeListener);
	    });
	
	    function changeListener() {
	      hidden = doc.hidden;
	    }
	
	    return function() {
	      return hidden;
	    };
	  }];
	}
	
	/**
	 * @ngdoc service
	 * @name $exceptionHandler
	 * @requires ng.$log
	 * @this
	 *
	 * @description
	 * Any uncaught exception in angular expressions is delegated to this service.
	 * The default implementation simply delegates to `$log.error` which logs it into
	 * the browser console.
	 *
	 * In unit tests, if `angular-mocks.js` is loaded, this service is overridden by
	 * {@link ngMock.$exceptionHandler mock $exceptionHandler} which aids in testing.
	 *
	 * ## Example:
	 *
	 * The example below will overwrite the default `$exceptionHandler` in order to (a) log uncaught
	 * errors to the backend for later inspection by the developers and (b) to use `$log.warn()` instead
	 * of `$log.error()`.
	 *
	 * ```js
	 *   angular.
	 *     module('exceptionOverwrite', []).
	 *     factory('$exceptionHandler', ['$log', 'logErrorsToBackend', function($log, logErrorsToBackend) {
	 *       return function myExceptionHandler(exception, cause) {
	 *         logErrorsToBackend(exception, cause);
	 *         $log.warn(exception, cause);
	 *       };
	 *     }]);
	 * ```
	 *
	 * <hr />
	 * Note, that code executed in event-listeners (even those registered using jqLite's `on`/`bind`
	 * methods) does not delegate exceptions to the {@link ng.$exceptionHandler $exceptionHandler}
	 * (unless executed during a digest).
	 *
	 * If you wish, you can manually delegate exceptions, e.g.
	 * `try { ... } catch(e) { $exceptionHandler(e); }`
	 *
	 * @param {Error} exception Exception associated with the error.
	 * @param {string=} cause Optional information about the context in which
	 *       the error was thrown.
	 *
	 */
	function $ExceptionHandlerProvider() {
	  this.$get = ['$log', function($log) {
	    return function(exception, cause) {
	      $log.error.apply($log, arguments);
	    };
	  }];
	}
	
	var $$ForceReflowProvider = /** @this */ function() {
	  this.$get = ['$document', function($document) {
	    return function(domNode) {
	      //the line below will force the browser to perform a repaint so
	      //that all the animated elements within the animation frame will
	      //be properly updated and drawn on screen. This is required to
	      //ensure that the preparation animation is properly flushed so that
	      //the active state picks up from there. DO NOT REMOVE THIS LINE.
	      //DO NOT OPTIMIZE THIS LINE. THE MINIFIER WILL REMOVE IT OTHERWISE WHICH
	      //WILL RESULT IN AN UNPREDICTABLE BUG THAT IS VERY HARD TO TRACK DOWN AND
	      //WILL TAKE YEARS AWAY FROM YOUR LIFE.
	      if (domNode) {
	        if (!domNode.nodeType && domNode instanceof jqLite) {
	          domNode = domNode[0];
	        }
	      } else {
	        domNode = $document[0].body;
	      }
	      return domNode.offsetWidth + 1;
	    };
	  }];
	};
	
	var APPLICATION_JSON = 'application/json';
	var CONTENT_TYPE_APPLICATION_JSON = {'Content-Type': APPLICATION_JSON + ';charset=utf-8'};
	var JSON_START = /^\[|^\{(?!\{)/;
	var JSON_ENDS = {
	  '[': /]$/,
	  '{': /}$/
	};
	var JSON_PROTECTION_PREFIX = /^\)]\}',?\n/;
	var $httpMinErr = minErr('$http');
	
	function serializeValue(v) {
	  if (isObject(v)) {
	    return isDate(v) ? v.toISOString() : toJson(v);
	  }
	  return v;
	}
	
	
	/** @this */
	function $HttpParamSerializerProvider() {
	  /**
	   * @ngdoc service
	   * @name $httpParamSerializer
	   * @description
	   *
	   * Default {@link $http `$http`} params serializer that converts objects to strings
	   * according to the following rules:
	   *
	   * * `{'foo': 'bar'}` results in `foo=bar`
	   * * `{'foo': Date.now()}` results in `foo=2015-04-01T09%3A50%3A49.262Z` (`toISOString()` and encoded representation of a Date object)
	   * * `{'foo': ['bar', 'baz']}` results in `foo=bar&foo=baz` (repeated key for each array element)
	   * * `{'foo': {'bar':'baz'}}` results in `foo=%7B%22bar%22%3A%22baz%22%7D` (stringified and encoded representation of an object)
	   *
	   * Note that serializer will sort the request parameters alphabetically.
	   * */
	
	  this.$get = function() {
	    return function ngParamSerializer(params) {
	      if (!params) return '';
	      var parts = [];
	      forEachSorted(params, function(value, key) {
	        if (value === null || isUndefined(value)) return;
	        if (isArray(value)) {
	          forEach(value, function(v) {
	            parts.push(encodeUriQuery(key)  + '=' + encodeUriQuery(serializeValue(v)));
	          });
	        } else {
	          parts.push(encodeUriQuery(key) + '=' + encodeUriQuery(serializeValue(value)));
	        }
	      });
	
	      return parts.join('&');
	    };
	  };
	}
	
	/** @this */
	function $HttpParamSerializerJQLikeProvider() {
	  /**
	   * @ngdoc service
	   * @name $httpParamSerializerJQLike
	   *
	   * @description
	   *
	   * Alternative {@link $http `$http`} params serializer that follows
	   * jQuery's [`param()`](http://api.jquery.com/jquery.param/) method logic.
	   * The serializer will also sort the params alphabetically.
	   *
	   * To use it for serializing `$http` request parameters, set it as the `paramSerializer` property:
	   *
	   * ```js
	   * $http({
	   *   url: myUrl,
	   *   method: 'GET',
	   *   params: myParams,
	   *   paramSerializer: '$httpParamSerializerJQLike'
	   * });
	   * ```
	   *
	   * It is also possible to set it as the default `paramSerializer` in the
	   * {@link $httpProvider#defaults `$httpProvider`}.
	   *
	   * Additionally, you can inject the serializer and use it explicitly, for example to serialize
	   * form data for submission:
	   *
	   * ```js
	   * .controller(function($http, $httpParamSerializerJQLike) {
	   *   //...
	   *
	   *   $http({
	   *     url: myUrl,
	   *     method: 'POST',
	   *     data: $httpParamSerializerJQLike(myData),
	   *     headers: {
	   *       'Content-Type': 'application/x-www-form-urlencoded'
	   *     }
	   *   });
	   *
	   * });
	   * ```
	   *
	   * */
	  this.$get = function() {
	    return function jQueryLikeParamSerializer(params) {
	      if (!params) return '';
	      var parts = [];
	      serialize(params, '', true);
	      return parts.join('&');
	
	      function serialize(toSerialize, prefix, topLevel) {
	        if (toSerialize === null || isUndefined(toSerialize)) return;
	        if (isArray(toSerialize)) {
	          forEach(toSerialize, function(value, index) {
	            serialize(value, prefix + '[' + (isObject(value) ? index : '') + ']');
	          });
	        } else if (isObject(toSerialize) && !isDate(toSerialize)) {
	          forEachSorted(toSerialize, function(value, key) {
	            serialize(value, prefix +
	                (topLevel ? '' : '[') +
	                key +
	                (topLevel ? '' : ']'));
	          });
	        } else {
	          parts.push(encodeUriQuery(prefix) + '=' + encodeUriQuery(serializeValue(toSerialize)));
	        }
	      }
	    };
	  };
	}
	
	function defaultHttpResponseTransform(data, headers) {
	  if (isString(data)) {
	    // Strip json vulnerability protection prefix and trim whitespace
	    var tempData = data.replace(JSON_PROTECTION_PREFIX, '').trim();
	
	    if (tempData) {
	      var contentType = headers('Content-Type');
	      if ((contentType && (contentType.indexOf(APPLICATION_JSON) === 0)) || isJsonLike(tempData)) {
	        data = fromJson(tempData);
	      }
	    }
	  }
	
	  return data;
	}
	
	function isJsonLike(str) {
	    var jsonStart = str.match(JSON_START);
	    return jsonStart && JSON_ENDS[jsonStart[0]].test(str);
	}
	
	/**
	 * Parse headers into key value object
	 *
	 * @param {string} headers Raw headers as a string
	 * @returns {Object} Parsed headers as key value object
	 */
	function parseHeaders(headers) {
	  var parsed = createMap(), i;
	
	  function fillInParsed(key, val) {
	    if (key) {
	      parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
	    }
	  }
	
	  if (isString(headers)) {
	    forEach(headers.split('\n'), function(line) {
	      i = line.indexOf(':');
	      fillInParsed(lowercase(trim(line.substr(0, i))), trim(line.substr(i + 1)));
	    });
	  } else if (isObject(headers)) {
	    forEach(headers, function(headerVal, headerKey) {
	      fillInParsed(lowercase(headerKey), trim(headerVal));
	    });
	  }
	
	  return parsed;
	}
	
	
	/**
	 * Returns a function that provides access to parsed headers.
	 *
	 * Headers are lazy parsed when first requested.
	 * @see parseHeaders
	 *
	 * @param {(string|Object)} headers Headers to provide access to.
	 * @returns {function(string=)} Returns a getter function which if called with:
	 *
	 *   - if called with an argument returns a single header value or null
	 *   - if called with no arguments returns an object containing all headers.
	 */
	function headersGetter(headers) {
	  var headersObj;
	
	  return function(name) {
	    if (!headersObj) headersObj =  parseHeaders(headers);
	
	    if (name) {
	      var value = headersObj[lowercase(name)];
	      if (value === undefined) {
	        value = null;
	      }
	      return value;
	    }
	
	    return headersObj;
	  };
	}
	
	
	/**
	 * Chain all given functions
	 *
	 * This function is used for both request and response transforming
	 *
	 * @param {*} data Data to transform.
	 * @param {function(string=)} headers HTTP headers getter fn.
	 * @param {number} status HTTP status code of the response.
	 * @param {(Function|Array.<Function>)} fns Function or an array of functions.
	 * @returns {*} Transformed data.
	 */
	function transformData(data, headers, status, fns) {
	  if (isFunction(fns)) {
	    return fns(data, headers, status);
	  }
	
	  forEach(fns, function(fn) {
	    data = fn(data, headers, status);
	  });
	
	  return data;
	}
	
	
	function isSuccess(status) {
	  return 200 <= status && status < 300;
	}
	
	
	/**
	 * @ngdoc provider
	 * @name $httpProvider
	 * @this
	 *
	 * @description
	 * Use `$httpProvider` to change the default behavior of the {@link ng.$http $http} service.
	 * */
	function $HttpProvider() {
	  /**
	   * @ngdoc property
	   * @name $httpProvider#defaults
	   * @description
	   *
	   * Object containing default values for all {@link ng.$http $http} requests.
	   *
	   * - **`defaults.cache`** - {boolean|Object} - A boolean value or object created with
	   * {@link ng.$cacheFactory `$cacheFactory`} to enable or disable caching of HTTP responses
	   * by default. See {@link $http#caching $http Caching} for more information.
	   *
	   * - **`defaults.xsrfCookieName`** - {string} - Name of cookie containing the XSRF token.
	   * Defaults value is `'XSRF-TOKEN'`.
	   *
	   * - **`defaults.xsrfHeaderName`** - {string} - Name of HTTP header to populate with the
	   * XSRF token. Defaults value is `'X-XSRF-TOKEN'`.
	   *
	   * - **`defaults.headers`** - {Object} - Default headers for all $http requests.
	   * Refer to {@link ng.$http#setting-http-headers $http} for documentation on
	   * setting default headers.
	   *     - **`defaults.headers.common`**
	   *     - **`defaults.headers.post`**
	   *     - **`defaults.headers.put`**
	   *     - **`defaults.headers.patch`**
	   *
	   *
	   * - **`defaults.paramSerializer`** - `{string|function(Object<string,string>):string}` - A function
	   *  used to the prepare string representation of request parameters (specified as an object).
	   *  If specified as string, it is interpreted as a function registered with the {@link auto.$injector $injector}.
	   *  Defaults to {@link ng.$httpParamSerializer $httpParamSerializer}.
	   *
	   * - **`defaults.jsonpCallbackParam`** - `{string}` - the name of the query parameter that passes the name of the
	   * callback in a JSONP request. The value of this parameter will be replaced with the expression generated by the
	   * {@link $jsonpCallbacks} service. Defaults to `'callback'`.
	   *
	   **/
	  var defaults = this.defaults = {
	    // transform incoming response data
	    transformResponse: [defaultHttpResponseTransform],
	
	    // transform outgoing request data
	    transformRequest: [function(d) {
	      return isObject(d) && !isFile(d) && !isBlob(d) && !isFormData(d) ? toJson(d) : d;
	    }],
	
	    // default headers
	    headers: {
	      common: {
	        'Accept': 'application/json, text/plain, */*'
	      },
	      post:   shallowCopy(CONTENT_TYPE_APPLICATION_JSON),
	      put:    shallowCopy(CONTENT_TYPE_APPLICATION_JSON),
	      patch:  shallowCopy(CONTENT_TYPE_APPLICATION_JSON)
	    },
	
	    xsrfCookieName: 'XSRF-TOKEN',
	    xsrfHeaderName: 'X-XSRF-TOKEN',
	
	    paramSerializer: '$httpParamSerializer',
	
	    jsonpCallbackParam: 'callback'
	  };
	
	  var useApplyAsync = false;
	  /**
	   * @ngdoc method
	   * @name $httpProvider#useApplyAsync
	   * @description
	   *
	   * Configure $http service to combine processing of multiple http responses received at around
	   * the same time via {@link ng.$rootScope.Scope#$applyAsync $rootScope.$applyAsync}. This can result in
	   * significant performance improvement for bigger applications that make many HTTP requests
	   * concurrently (common during application bootstrap).
	   *
	   * Defaults to false. If no value is specified, returns the current configured value.
	   *
	   * @param {boolean=} value If true, when requests are loaded, they will schedule a deferred
	   *    "apply" on the next tick, giving time for subsequent requests in a roughly ~10ms window
	   *    to load and share the same digest cycle.
	   *
	   * @returns {boolean|Object} If a value is specified, returns the $httpProvider for chaining.
	   *    otherwise, returns the current configured value.
	   **/
	  this.useApplyAsync = function(value) {
	    if (isDefined(value)) {
	      useApplyAsync = !!value;
	      return this;
	    }
	    return useApplyAsync;
	  };
	
	  /**
	   * @ngdoc property
	   * @name $httpProvider#interceptors
	   * @description
	   *
	   * Array containing service factories for all synchronous or asynchronous {@link ng.$http $http}
	   * pre-processing of request or postprocessing of responses.
	   *
	   * These service factories are ordered by request, i.e. they are applied in the same order as the
	   * array, on request, but reverse order, on response.
	   *
	   * {@link ng.$http#interceptors Interceptors detailed info}
	   **/
	  var interceptorFactories = this.interceptors = [];
	
	  this.$get = ['$browser', '$httpBackend', '$$cookieReader', '$cacheFactory', '$rootScope', '$q', '$injector', '$sce',
	      function($browser, $httpBackend, $$cookieReader, $cacheFactory, $rootScope, $q, $injector, $sce) {
	
	    var defaultCache = $cacheFactory('$http');
	
	    /**
	     * Make sure that default param serializer is exposed as a function
	     */
	    defaults.paramSerializer = isString(defaults.paramSerializer) ?
	      $injector.get(defaults.paramSerializer) : defaults.paramSerializer;
	
	    /**
	     * Interceptors stored in reverse order. Inner interceptors before outer interceptors.
	     * The reversal is needed so that we can build up the interception chain around the
	     * server request.
	     */
	    var reversedInterceptors = [];
	
	    forEach(interceptorFactories, function(interceptorFactory) {
	      reversedInterceptors.unshift(isString(interceptorFactory)
	          ? $injector.get(interceptorFactory) : $injector.invoke(interceptorFactory));
	    });
	
	    /**
	     * @ngdoc service
	     * @kind function
	     * @name $http
	     * @requires ng.$httpBackend
	     * @requires $cacheFactory
	     * @requires $rootScope
	     * @requires $q
	     * @requires $injector
	     *
	     * @description
	     * The `$http` service is a core Angular service that facilitates communication with the remote
	     * HTTP servers via the browser's [XMLHttpRequest](https://developer.mozilla.org/en/xmlhttprequest)
	     * object or via [JSONP](http://en.wikipedia.org/wiki/JSONP).
	     *
	     * For unit testing applications that use `$http` service, see
	     * {@link ngMock.$httpBackend $httpBackend mock}.
	     *
	     * For a higher level of abstraction, please check out the {@link ngResource.$resource
	     * $resource} service.
	     *
	     * The $http API is based on the {@link ng.$q deferred/promise APIs} exposed by
	     * the $q service. While for simple usage patterns this doesn't matter much, for advanced usage
	     * it is important to familiarize yourself with these APIs and the guarantees they provide.
	     *
	     *
	     * ## General usage
	     * The `$http` service is a function which takes a single argument — a {@link $http#usage configuration object} —
	     * that is used to generate an HTTP request and returns  a {@link ng.$q promise}.
	     *
	     * ```js
	     *   // Simple GET request example:
	     *   $http({
	     *     method: 'GET',
	     *     url: '/someUrl'
	     *   }).then(function successCallback(response) {
	     *       // this callback will be called asynchronously
	     *       // when the response is available
	     *     }, function errorCallback(response) {
	     *       // called asynchronously if an error occurs
	     *       // or server returns response with an error status.
	     *     });
	     * ```
	     *
	     * The response object has these properties:
	     *
	     *   - **data** – `{string|Object}` – The response body transformed with the transform
	     *     functions.
	     *   - **status** – `{number}` – HTTP status code of the response.
	     *   - **headers** – `{function([headerName])}` – Header getter function.
	     *   - **config** – `{Object}` – The configuration object that was used to generate the request.
	     *   - **statusText** – `{string}` – HTTP status text of the response.
	     *
	     * A response status code between 200 and 299 is considered a success status and will result in
	     * the success callback being called. Any response status code outside of that range is
	     * considered an error status and will result in the error callback being called.
	     * Also, status codes less than -1 are normalized to zero. -1 usually means the request was
	     * aborted, e.g. using a `config.timeout`.
	     * Note that if the response is a redirect, XMLHttpRequest will transparently follow it, meaning
	     * that the outcome (success or error) will be determined by the final response status code.
	     *
	     *
	     * ## Shortcut methods
	     *
	     * Shortcut methods are also available. All shortcut methods require passing in the URL, and
	     * request data must be passed in for POST/PUT requests. An optional config can be passed as the
	     * last argument.
	     *
	     * ```js
	     *   $http.get('/someUrl', config).then(successCallback, errorCallback);
	     *   $http.post('/someUrl', data, config).then(successCallback, errorCallback);
	     * ```
	     *
	     * Complete list of shortcut methods:
	     *
	     * - {@link ng.$http#get $http.get}
	     * - {@link ng.$http#head $http.head}
	     * - {@link ng.$http#post $http.post}
	     * - {@link ng.$http#put $http.put}
	     * - {@link ng.$http#delete $http.delete}
	     * - {@link ng.$http#jsonp $http.jsonp}
	     * - {@link ng.$http#patch $http.patch}
	     *
	     *
	     * ## Writing Unit Tests that use $http
	     * When unit testing (using {@link ngMock ngMock}), it is necessary to call
	     * {@link ngMock.$httpBackend#flush $httpBackend.flush()} to flush each pending
	     * request using trained responses.
	     *
	     * ```
	     * $httpBackend.expectGET(...);
	     * $http.get(...);
	     * $httpBackend.flush();
	     * ```
	     *
	     * ## Setting HTTP Headers
	     *
	     * The $http service will automatically add certain HTTP headers to all requests. These defaults
	     * can be fully configured by accessing the `$httpProvider.defaults.headers` configuration
	     * object, which currently contains this default configuration:
	     *
	     * - `$httpProvider.defaults.headers.common` (headers that are common for all requests):
	     *   - <code>Accept: application/json, text/plain, \*&#65279;/&#65279;\*</code>
	     * - `$httpProvider.defaults.headers.post`: (header defaults for POST requests)
	     *   - `Content-Type: application/json`
	     * - `$httpProvider.defaults.headers.put` (header defaults for PUT requests)
	     *   - `Content-Type: application/json`
	     *
	     * To add or overwrite these defaults, simply add or remove a property from these configuration
	     * objects. To add headers for an HTTP method other than POST or PUT, simply add a new object
	     * with the lowercased HTTP method name as the key, e.g.
	     * `$httpProvider.defaults.headers.get = { 'My-Header' : 'value' }`.
	     *
	     * The defaults can also be set at runtime via the `$http.defaults` object in the same
	     * fashion. For example:
	     *
	     * ```
	     * module.run(function($http) {
	     *   $http.defaults.headers.common.Authorization = 'Basic YmVlcDpib29w';
	     * });
	     * ```
	     *
	     * In addition, you can supply a `headers` property in the config object passed when
	     * calling `$http(config)`, which overrides the defaults without changing them globally.
	     *
	     * To explicitly remove a header automatically added via $httpProvider.defaults.headers on a per request basis,
	     * Use the `headers` property, setting the desired header to `undefined`. For example:
	     *
	     * ```js
	     * var req = {
	     *  method: 'POST',
	     *  url: 'http://example.com',
	     *  headers: {
	     *    'Content-Type': undefined
	     *  },
	     *  data: { test: 'test' }
	     * }
	     *
	     * $http(req).then(function(){...}, function(){...});
	     * ```
	     *
	     * ## Transforming Requests and Responses
	     *
	     * Both requests and responses can be transformed using transformation functions: `transformRequest`
	     * and `transformResponse`. These properties can be a single function that returns
	     * the transformed value (`function(data, headersGetter, status)`) or an array of such transformation functions,
	     * which allows you to `push` or `unshift` a new transformation function into the transformation chain.
	     *
	     * <div class="alert alert-warning">
	     * **Note:** Angular does not make a copy of the `data` parameter before it is passed into the `transformRequest` pipeline.
	     * That means changes to the properties of `data` are not local to the transform function (since Javascript passes objects by reference).
	     * For example, when calling `$http.get(url, $scope.myObject)`, modifications to the object's properties in a transformRequest
	     * function will be reflected on the scope and in any templates where the object is data-bound.
	     * To prevent this, transform functions should have no side-effects.
	     * If you need to modify properties, it is recommended to make a copy of the data, or create new object to return.
	     * </div>
	     *
	     * ### Default Transformations
	     *
	     * The `$httpProvider` provider and `$http` service expose `defaults.transformRequest` and
	     * `defaults.transformResponse` properties. If a request does not provide its own transformations
	     * then these will be applied.
	     *
	     * You can augment or replace the default transformations by modifying these properties by adding to or
	     * replacing the array.
	     *
	     * Angular provides the following default transformations:
	     *
	     * Request transformations (`$httpProvider.defaults.transformRequest` and `$http.defaults.transformRequest`):
	     *
	     * - If the `data` property of the request configuration object contains an object, serialize it
	     *   into JSON format.
	     *
	     * Response transformations (`$httpProvider.defaults.transformResponse` and `$http.defaults.transformResponse`):
	     *
	     *  - If XSRF prefix is detected, strip it (see Security Considerations section below).
	     *  - If JSON response is detected, deserialize it using a JSON parser.
	     *
	     *
	     * ### Overriding the Default Transformations Per Request
	     *
	     * If you wish to override the request/response transformations only for a single request then provide
	     * `transformRequest` and/or `transformResponse` properties on the configuration object passed
	     * into `$http`.
	     *
	     * Note that if you provide these properties on the config object the default transformations will be
	     * overwritten. If you wish to augment the default transformations then you must include them in your
	     * local transformation array.
	     *
	     * The following code demonstrates adding a new response transformation to be run after the default response
	     * transformations have been run.
	     *
	     * ```js
	     * function appendTransform(defaults, transform) {
	     *
	     *   // We can't guarantee that the default transformation is an array
	     *   defaults = angular.isArray(defaults) ? defaults : [defaults];
	     *
	     *   // Append the new transformation to the defaults
	     *   return defaults.concat(transform);
	     * }
	     *
	     * $http({
	     *   url: '...',
	     *   method: 'GET',
	     *   transformResponse: appendTransform($http.defaults.transformResponse, function(value) {
	     *     return doTransform(value);
	     *   })
	     * });
	     * ```
	     *
	     *
	     * ## Caching
	     *
	     * {@link ng.$http `$http`} responses are not cached by default. To enable caching, you must
	     * set the config.cache value or the default cache value to TRUE or to a cache object (created
	     * with {@link ng.$cacheFactory `$cacheFactory`}). If defined, the value of config.cache takes
	     * precedence over the default cache value.
	     *
	     * In order to:
	     *   * cache all responses - set the default cache value to TRUE or to a cache object
	     *   * cache a specific response - set config.cache value to TRUE or to a cache object
	     *
	     * If caching is enabled, but neither the default cache nor config.cache are set to a cache object,
	     * then the default `$cacheFactory("$http")` object is used.
	     *
	     * The default cache value can be set by updating the
	     * {@link ng.$http#defaults `$http.defaults.cache`} property or the
	     * {@link $httpProvider#defaults `$httpProvider.defaults.cache`} property.
	     *
	     * When caching is enabled, {@link ng.$http `$http`} stores the response from the server using
	     * the relevant cache object. The next time the same request is made, the response is returned
	     * from the cache without sending a request to the server.
	     *
	     * Take note that:
	     *
	     *   * Only GET and JSONP requests are cached.
	     *   * The cache key is the request URL including search parameters; headers are not considered.
	     *   * Cached responses are returned asynchronously, in the same way as responses from the server.
	     *   * If multiple identical requests are made using the same cache, which is not yet populated,
	     *     one request will be made to the server and remaining requests will return the same response.
	     *   * A cache-control header on the response does not affect if or how responses are cached.
	     *
	     *
	     * ## Interceptors
	     *
	     * Before you start creating interceptors, be sure to understand the
	     * {@link ng.$q $q and deferred/promise APIs}.
	     *
	     * For purposes of global error handling, authentication, or any kind of synchronous or
	     * asynchronous pre-processing of request or postprocessing of responses, it is desirable to be
	     * able to intercept requests before they are handed to the server and
	     * responses before they are handed over to the application code that
	     * initiated these requests. The interceptors leverage the {@link ng.$q
	     * promise APIs} to fulfill this need for both synchronous and asynchronous pre-processing.
	     *
	     * The interceptors are service factories that are registered with the `$httpProvider` by
	     * adding them to the `$httpProvider.interceptors` array. The factory is called and
	     * injected with dependencies (if specified) and returns the interceptor.
	     *
	     * There are two kinds of interceptors (and two kinds of rejection interceptors):
	     *
	     *   * `request`: interceptors get called with a http {@link $http#usage config} object. The function is free to
	     *     modify the `config` object or create a new one. The function needs to return the `config`
	     *     object directly, or a promise containing the `config` or a new `config` object.
	     *   * `requestError`: interceptor gets called when a previous interceptor threw an error or
	     *     resolved with a rejection.
	     *   * `response`: interceptors get called with http `response` object. The function is free to
	     *     modify the `response` object or create a new one. The function needs to return the `response`
	     *     object directly, or as a promise containing the `response` or a new `response` object.
	     *   * `responseError`: interceptor gets called when a previous interceptor threw an error or
	     *     resolved with a rejection.
	     *
	     *
	     * ```js
	     *   // register the interceptor as a service
	     *   $provide.factory('myHttpInterceptor', function($q, dependency1, dependency2) {
	     *     return {
	     *       // optional method
	     *       'request': function(config) {
	     *         // do something on success
	     *         return config;
	     *       },
	     *
	     *       // optional method
	     *      'requestError': function(rejection) {
	     *         // do something on error
	     *         if (canRecover(rejection)) {
	     *           return responseOrNewPromise
	     *         }
	     *         return $q.reject(rejection);
	     *       },
	     *
	     *
	     *
	     *       // optional method
	     *       'response': function(response) {
	     *         // do something on success
	     *         return response;
	     *       },
	     *
	     *       // optional method
	     *      'responseError': function(rejection) {
	     *         // do something on error
	     *         if (canRecover(rejection)) {
	     *           return responseOrNewPromise
	     *         }
	     *         return $q.reject(rejection);
	     *       }
	     *     };
	     *   });
	     *
	     *   $httpProvider.interceptors.push('myHttpInterceptor');
	     *
	     *
	     *   // alternatively, register the interceptor via an anonymous factory
	     *   $httpProvider.interceptors.push(function($q, dependency1, dependency2) {
	     *     return {
	     *      'request': function(config) {
	     *          // same as above
	     *       },
	     *
	     *       'response': function(response) {
	     *          // same as above
	     *       }
	     *     };
	     *   });
	     * ```
	     *
	     * ## Security Considerations
	     *
	     * When designing web applications, consider security threats from:
	     *
	     * - [JSON vulnerability](http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx)
	     * - [XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery)
	     *
	     * Both server and the client must cooperate in order to eliminate these threats. Angular comes
	     * pre-configured with strategies that address these issues, but for this to work backend server
	     * cooperation is required.
	     *
	     * ### JSON Vulnerability Protection
	     *
	     * A [JSON vulnerability](http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx)
	     * allows third party website to turn your JSON resource URL into
	     * [JSONP](http://en.wikipedia.org/wiki/JSONP) request under some conditions. To
	     * counter this your server can prefix all JSON requests with following string `")]}',\n"`.
	     * Angular will automatically strip the prefix before processing it as JSON.
	     *
	     * For example if your server needs to return:
	     * ```js
	     * ['one','two']
	     * ```
	     *
	     * which is vulnerable to attack, your server can return:
	     * ```js
	     * )]}',
	     * ['one','two']
	     * ```
	     *
	     * Angular will strip the prefix, before processing the JSON.
	     *
	     *
	     * ### Cross Site Request Forgery (XSRF) Protection
	     *
	     * [XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery) is an attack technique by
	     * which the attacker can trick an authenticated user into unknowingly executing actions on your
	     * website. Angular provides a mechanism to counter XSRF. When performing XHR requests, the
	     * $http service reads a token from a cookie (by default, `XSRF-TOKEN`) and sets it as an HTTP
	     * header (`X-XSRF-TOKEN`). Since only JavaScript that runs on your domain could read the
	     * cookie, your server can be assured that the XHR came from JavaScript running on your domain.
	     * The header will not be set for cross-domain requests.
	     *
	     * To take advantage of this, your server needs to set a token in a JavaScript readable session
	     * cookie called `XSRF-TOKEN` on the first HTTP GET request. On subsequent XHR requests the
	     * server can verify that the cookie matches `X-XSRF-TOKEN` HTTP header, and therefore be sure
	     * that only JavaScript running on your domain could have sent the request. The token must be
	     * unique for each user and must be verifiable by the server (to prevent the JavaScript from
	     * making up its own tokens). We recommend that the token is a digest of your site's
	     * authentication cookie with a [salt](https://en.wikipedia.org/wiki/Salt_(cryptography&#41;)
	     * for added security.
	     *
	     * The name of the headers can be specified using the xsrfHeaderName and xsrfCookieName
	     * properties of either $httpProvider.defaults at config-time, $http.defaults at run-time,
	     * or the per-request config object.
	     *
	     * In order to prevent collisions in environments where multiple Angular apps share the
	     * same domain or subdomain, we recommend that each application uses unique cookie name.
	     *
	     * @param {object} config Object describing the request to be made and how it should be
	     *    processed. The object has following properties:
	     *
	     *    - **method** – `{string}` – HTTP method (e.g. 'GET', 'POST', etc)
	     *    - **url** – `{string|TrustedObject}` – Absolute or relative URL of the resource that is being requested;
	     *      or an object created by a call to `$sce.trustAsResourceUrl(url)`.
	     *    - **params** – `{Object.<string|Object>}` – Map of strings or objects which will be serialized
	     *      with the `paramSerializer` and appended as GET parameters.
	     *    - **data** – `{string|Object}` – Data to be sent as the request message data.
	     *    - **headers** – `{Object}` – Map of strings or functions which return strings representing
	     *      HTTP headers to send to the server. If the return value of a function is null, the
	     *      header will not be sent. Functions accept a config object as an argument.
	     *    - **eventHandlers** - `{Object}` - Event listeners to be bound to the XMLHttpRequest object.
	     *      To bind events to the XMLHttpRequest upload object, use `uploadEventHandlers`.
	     *      The handler will be called in the context of a `$apply` block.
	     *    - **uploadEventHandlers** - `{Object}` - Event listeners to be bound to the XMLHttpRequest upload
	     *      object. To bind events to the XMLHttpRequest object, use `eventHandlers`.
	     *      The handler will be called in the context of a `$apply` block.
	     *    - **xsrfHeaderName** – `{string}` – Name of HTTP header to populate with the XSRF token.
	     *    - **xsrfCookieName** – `{string}` – Name of cookie containing the XSRF token.
	     *    - **transformRequest** –
	     *      `{function(data, headersGetter)|Array.<function(data, headersGetter)>}` –
	     *      transform function or an array of such functions. The transform function takes the http
	     *      request body and headers and returns its transformed (typically serialized) version.
	     *      See {@link ng.$http#overriding-the-default-transformations-per-request
	     *      Overriding the Default Transformations}
	     *    - **transformResponse** –
	     *      `{function(data, headersGetter, status)|Array.<function(data, headersGetter, status)>}` –
	     *      transform function or an array of such functions. The transform function takes the http
	     *      response body, headers and status and returns its transformed (typically deserialized) version.
	     *      See {@link ng.$http#overriding-the-default-transformations-per-request
	     *      Overriding the Default Transformations}
	     *    - **paramSerializer** - `{string|function(Object<string,string>):string}` - A function used to
	     *      prepare the string representation of request parameters (specified as an object).
	     *      If specified as string, it is interpreted as function registered with the
	     *      {@link $injector $injector}, which means you can create your own serializer
	     *      by registering it as a {@link auto.$provide#service service}.
	     *      The default serializer is the {@link $httpParamSerializer $httpParamSerializer};
	     *      alternatively, you can use the {@link $httpParamSerializerJQLike $httpParamSerializerJQLike}
	     *    - **cache** – `{boolean|Object}` – A boolean value or object created with
	     *      {@link ng.$cacheFactory `$cacheFactory`} to enable or disable caching of the HTTP response.
	     *      See {@link $http#caching $http Caching} for more information.
	     *    - **timeout** – `{number|Promise}` – timeout in milliseconds, or {@link ng.$q promise}
	     *      that should abort the request when resolved.
	     *    - **withCredentials** - `{boolean}` - whether to set the `withCredentials` flag on the
	     *      XHR object. See [requests with credentials](https://developer.mozilla.org/docs/Web/HTTP/Access_control_CORS#Requests_with_credentials)
	     *      for more information.
	     *    - **responseType** - `{string}` - see
	     *      [XMLHttpRequest.responseType](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest#xmlhttprequest-responsetype).
	     *
	     * @returns {HttpPromise} Returns a {@link ng.$q `Promise}` that will be resolved to a response object
	     *                        when the request succeeds or fails.
	     *
	     *
	     * @property {Array.<Object>} pendingRequests Array of config objects for currently pending
	     *   requests. This is primarily meant to be used for debugging purposes.
	     *
	     *
	     * @example
	<example module="httpExample" name="http-service">
	<file name="index.html">
	  <div ng-controller="FetchController">
	    <select ng-model="method" aria-label="Request method">
	      <option>GET</option>
	      <option>JSONP</option>
	    </select>
	    <input type="text" ng-model="url" size="80" aria-label="URL" />
	    <button id="fetchbtn" ng-click="fetch()">fetch</button><br>
	    <button id="samplegetbtn" ng-click="updateModel('GET', 'http-hello.html')">Sample GET</button>
	    <button id="samplejsonpbtn"
	      ng-click="updateModel('JSONP',
	                    'https://angularjs.org/greet.php?name=Super%20Hero')">
	      Sample JSONP
	    </button>
	    <button id="invalidjsonpbtn"
	      ng-click="updateModel('JSONP', 'https://angularjs.org/doesntexist')">
	        Invalid JSONP
	      </button>
	    <pre>http status code: {{status}}</pre>
	    <pre>http response data: {{data}}</pre>
	  </div>
	</file>
	<file name="script.js">
	  angular.module('httpExample', [])
	    .config(['$sceDelegateProvider', function($sceDelegateProvider) {
	      // We must whitelist the JSONP endpoint that we are using to show that we trust it
	      $sceDelegateProvider.resourceUrlWhitelist([
	        'self',
	        'https://angularjs.org/**'
	      ]);
	    }])
	    .controller('FetchController', ['$scope', '$http', '$templateCache',
	      function($scope, $http, $templateCache) {
	        $scope.method = 'GET';
	        $scope.url = 'http-hello.html';
	
	        $scope.fetch = function() {
	          $scope.code = null;
	          $scope.response = null;
	
	          $http({method: $scope.method, url: $scope.url, cache: $templateCache}).
	            then(function(response) {
	              $scope.status = response.status;
	              $scope.data = response.data;
	            }, function(response) {
	              $scope.data = response.data || 'Request failed';
	              $scope.status = response.status;
	          });
	        };
	
	        $scope.updateModel = function(method, url) {
	          $scope.method = method;
	          $scope.url = url;
	        };
	      }]);
	</file>
	<file name="http-hello.html">
	  Hello, $http!
	</file>
	<file name="protractor.js" type="protractor">
	  var status = element(by.binding('status'));
	  var data = element(by.binding('data'));
	  var fetchBtn = element(by.id('fetchbtn'));
	  var sampleGetBtn = element(by.id('samplegetbtn'));
	  var invalidJsonpBtn = element(by.id('invalidjsonpbtn'));
	
	  it('should make an xhr GET request', function() {
	    sampleGetBtn.click();
	    fetchBtn.click();
	    expect(status.getText()).toMatch('200');
	    expect(data.getText()).toMatch(/Hello, \$http!/);
	  });
	
	// Commented out due to flakes. See https://github.com/angular/angular.js/issues/9185
	// it('should make a JSONP request to angularjs.org', function() {
	//   var sampleJsonpBtn = element(by.id('samplejsonpbtn'));
	//   sampleJsonpBtn.click();
	//   fetchBtn.click();
	//   expect(status.getText()).toMatch('200');
	//   expect(data.getText()).toMatch(/Super Hero!/);
	// });
	
	  it('should make JSONP request to invalid URL and invoke the error handler',
	      function() {
	    invalidJsonpBtn.click();
	    fetchBtn.click();
	    expect(status.getText()).toMatch('0');
	    expect(data.getText()).toMatch('Request failed');
	  });
	</file>
	</example>
	     */
	    function $http(requestConfig) {
	
	      if (!isObject(requestConfig)) {
	        throw minErr('$http')('badreq', 'Http request configuration must be an object.  Received: {0}', requestConfig);
	      }
	
	      if (!isString($sce.valueOf(requestConfig.url))) {
	        throw minErr('$http')('badreq', 'Http request configuration url must be a string or a $sce trusted object.  Received: {0}', requestConfig.url);
	      }
	
	      var config = extend({
	        method: 'get',
	        transformRequest: defaults.transformRequest,
	        transformResponse: defaults.transformResponse,
	        paramSerializer: defaults.paramSerializer,
	        jsonpCallbackParam: defaults.jsonpCallbackParam
	      }, requestConfig);
	
	      config.headers = mergeHeaders(requestConfig);
	      config.method = uppercase(config.method);
	      config.paramSerializer = isString(config.paramSerializer) ?
	          $injector.get(config.paramSerializer) : config.paramSerializer;
	
	      $browser.$$incOutstandingRequestCount();
	
	      var requestInterceptors = [];
	      var responseInterceptors = [];
	      var promise = $q.resolve(config);
	
	      // apply interceptors
	      forEach(reversedInterceptors, function(interceptor) {
	        if (interceptor.request || interceptor.requestError) {
	          requestInterceptors.unshift(interceptor.request, interceptor.requestError);
	        }
	        if (interceptor.response || interceptor.responseError) {
	          responseInterceptors.push(interceptor.response, interceptor.responseError);
	        }
	      });
	
	      promise = chainInterceptors(promise, requestInterceptors);
	      promise = promise.then(serverRequest);
	      promise = chainInterceptors(promise, responseInterceptors);
	      promise = promise.finally(completeOutstandingRequest);
	
	      return promise;
	
	
	      function chainInterceptors(promise, interceptors) {
	        for (var i = 0, ii = interceptors.length; i < ii;) {
	          var thenFn = interceptors[i++];
	          var rejectFn = interceptors[i++];
	
	          promise = promise.then(thenFn, rejectFn);
	        }
	
	        interceptors.length = 0;
	
	        return promise;
	      }
	
	      function completeOutstandingRequest() {
	        $browser.$$completeOutstandingRequest(noop);
	      }
	
	      function executeHeaderFns(headers, config) {
	        var headerContent, processedHeaders = {};
	
	        forEach(headers, function(headerFn, header) {
	          if (isFunction(headerFn)) {
	            headerContent = headerFn(config);
	            if (headerContent != null) {
	              processedHeaders[header] = headerContent;
	            }
	          } else {
	            processedHeaders[header] = headerFn;
	          }
	        });
	
	        return processedHeaders;
	      }
	
	      function mergeHeaders(config) {
	        var defHeaders = defaults.headers,
	            reqHeaders = extend({}, config.headers),
	            defHeaderName, lowercaseDefHeaderName, reqHeaderName;
	
	        defHeaders = extend({}, defHeaders.common, defHeaders[lowercase(config.method)]);
	
	        // using for-in instead of forEach to avoid unnecessary iteration after header has been found
	        defaultHeadersIteration:
	        for (defHeaderName in defHeaders) {
	          lowercaseDefHeaderName = lowercase(defHeaderName);
	
	          for (reqHeaderName in reqHeaders) {
	            if (lowercase(reqHeaderName) === lowercaseDefHeaderName) {
	              continue defaultHeadersIteration;
	            }
	          }
	
	          reqHeaders[defHeaderName] = defHeaders[defHeaderName];
	        }
	
	        // execute if header value is a function for merged headers
	        return executeHeaderFns(reqHeaders, shallowCopy(config));
	      }
	
	      function serverRequest(config) {
	        var headers = config.headers;
	        var reqData = transformData(config.data, headersGetter(headers), undefined, config.transformRequest);
	
	        // strip content-type if data is undefined
	        if (isUndefined(reqData)) {
	          forEach(headers, function(value, header) {
	            if (lowercase(header) === 'content-type') {
	              delete headers[header];
	            }
	          });
	        }
	
	        if (isUndefined(config.withCredentials) && !isUndefined(defaults.withCredentials)) {
	          config.withCredentials = defaults.withCredentials;
	        }
	
	        // send request
	        return sendReq(config, reqData).then(transformResponse, transformResponse);
	      }
	
	      function transformResponse(response) {
	        // make a copy since the response must be cacheable
	        var resp = extend({}, response);
	        resp.data = transformData(response.data, response.headers, response.status,
	                                  config.transformResponse);
	        return (isSuccess(response.status))
	          ? resp
	          : $q.reject(resp);
	      }
	    }
	
	    $http.pendingRequests = [];
	
	    /**
	     * @ngdoc method
	     * @name $http#get
	     *
	     * @description
	     * Shortcut method to perform `GET` request.
	     *
	     * @param {string|TrustedObject} url Absolute or relative URL of the resource that is being requested;
	     *                                   or an object created by a call to `$sce.trustAsResourceUrl(url)`.
	     * @param {Object=} config Optional configuration object
	     * @returns {HttpPromise} Future object
	     */
	
	    /**
	     * @ngdoc method
	     * @name $http#delete
	     *
	     * @description
	     * Shortcut method to perform `DELETE` request.
	     *
	     * @param {string|TrustedObject} url Absolute or relative URL of the resource that is being requested;
	     *                                   or an object created by a call to `$sce.trustAsResourceUrl(url)`.
	     * @param {Object=} config Optional configuration object
	     * @returns {HttpPromise} Future object
	     */
	
	    /**
	     * @ngdoc method
	     * @name $http#head
	     *
	     * @description
	     * Shortcut method to perform `HEAD` request.
	     *
	     * @param {string|TrustedObject} url Absolute or relative URL of the resource that is being requested;
	     *                                   or an object created by a call to `$sce.trustAsResourceUrl(url)`.
	     * @param {Object=} config Optional configuration object
	     * @returns {HttpPromise} Future object
	     */
	
	    /**
	     * @ngdoc method
	     * @name $http#jsonp
	     *
	     * @description
	     * Shortcut method to perform `JSONP` request.
	     *
	     * Note that, since JSONP requests are sensitive because the response is given full access to the browser,
	     * the url must be declared, via {@link $sce} as a trusted resource URL.
	     * You can trust a URL by adding it to the whitelist via
	     * {@link $sceDelegateProvider#resourceUrlWhitelist  `$sceDelegateProvider.resourceUrlWhitelist`} or
	     * by explicitly trusting the URL via {@link $sce#trustAsResourceUrl `$sce.trustAsResourceUrl(url)`}.
	     *
	     * JSONP requests must specify a callback to be used in the response from the server. This callback
	     * is passed as a query parameter in the request. You must specify the name of this parameter by
	     * setting the `jsonpCallbackParam` property on the request config object.
	     *
	     * ```
	     * $http.jsonp('some/trusted/url', {jsonpCallbackParam: 'callback'})
	     * ```
	     *
	     * You can also specify a default callback parameter name in `$http.defaults.jsonpCallbackParam`.
	     * Initially this is set to `'callback'`.
	     *
	     * <div class="alert alert-danger">
	     * You can no longer use the `JSON_CALLBACK` string as a placeholder for specifying where the callback
	     * parameter value should go.
	     * </div>
	     *
	     * If you would like to customise where and how the callbacks are stored then try overriding
	     * or decorating the {@link $jsonpCallbacks} service.
	     *
	     * @param {string|TrustedObject} url Absolute or relative URL of the resource that is being requested;
	     *                                   or an object created by a call to `$sce.trustAsResourceUrl(url)`.
	     * @param {Object=} config Optional configuration object
	     * @returns {HttpPromise} Future object
	     */
	    createShortMethods('get', 'delete', 'head', 'jsonp');
	
	    /**
	     * @ngdoc method
	     * @name $http#post
	     *
	     * @description
	     * Shortcut method to perform `POST` request.
	     *
	     * @param {string} url Relative or absolute URL specifying the destination of the request
	     * @param {*} data Request content
	     * @param {Object=} config Optional configuration object
	     * @returns {HttpPromise} Future object
	     */
	
	    /**
	     * @ngdoc method
	     * @name $http#put
	     *
	     * @description
	     * Shortcut method to perform `PUT` request.
	     *
	     * @param {string} url Relative or absolute URL specifying the destination of the request
	     * @param {*} data Request content
	     * @param {Object=} config Optional configuration object
	     * @returns {HttpPromise} Future object
	     */
	
	     /**
	      * @ngdoc method
	      * @name $http#patch
	      *
	      * @description
	      * Shortcut method to perform `PATCH` request.
	      *
	      * @param {string} url Relative or absolute URL specifying the destination of the request
	      * @param {*} data Request content
	      * @param {Object=} config Optional configuration object
	      * @returns {HttpPromise} Future object
	      */
	    createShortMethodsWithData('post', 'put', 'patch');
	
	        /**
	         * @ngdoc property
	         * @name $http#defaults
	         *
	         * @description
	         * Runtime equivalent of the `$httpProvider.defaults` property. Allows configuration of
	         * default headers, withCredentials as well as request and response transformations.
	         *
	         * See "Setting HTTP Headers" and "Transforming Requests and Responses" sections above.
	         */
	    $http.defaults = defaults;
	
	
	    return $http;
	
	
	    function createShortMethods(names) {
	      forEach(arguments, function(name) {
	        $http[name] = function(url, config) {
	          return $http(extend({}, config || {}, {
	            method: name,
	            url: url
	          }));
	        };
	      });
	    }
	
	
	    function createShortMethodsWithData(name) {
	      forEach(arguments, function(name) {
	        $http[name] = function(url, data, config) {
	          return $http(extend({}, config || {}, {
	            method: name,
	            url: url,
	            data: data
	          }));
	        };
	      });
	    }
	
	
	    /**
	     * Makes the request.
	     *
	     * !!! ACCESSES CLOSURE VARS:
	     * $httpBackend, defaults, $log, $rootScope, defaultCache, $http.pendingRequests
	     */
	    function sendReq(config, reqData) {
	      var deferred = $q.defer(),
	          promise = deferred.promise,
	          cache,
	          cachedResp,
	          reqHeaders = config.headers,
	          isJsonp = lowercase(config.method) === 'jsonp',
	          url = config.url;
	
	      if (isJsonp) {
	        // JSONP is a pretty sensitive operation where we're allowing a script to have full access to
	        // our DOM and JS space.  So we require that the URL satisfies SCE.RESOURCE_URL.
	        url = $sce.getTrustedResourceUrl(url);
	      } else if (!isString(url)) {
	        // If it is not a string then the URL must be a $sce trusted object
	        url = $sce.valueOf(url);
	      }
	
	      url = buildUrl(url, config.paramSerializer(config.params));
	
	      if (isJsonp) {
	        // Check the url and add the JSONP callback placeholder
	        url = sanitizeJsonpCallbackParam(url, config.jsonpCallbackParam);
	      }
	
	      $http.pendingRequests.push(config);
	      promise.then(removePendingReq, removePendingReq);
	
	      if ((config.cache || defaults.cache) && config.cache !== false &&
	          (config.method === 'GET' || config.method === 'JSONP')) {
	        cache = isObject(config.cache) ? config.cache
	              : isObject(defaults.cache) ? defaults.cache
	              : defaultCache;
	      }
	
	      if (cache) {
	        cachedResp = cache.get(url);
	        if (isDefined(cachedResp)) {
	          if (isPromiseLike(cachedResp)) {
	            // cached request has already been sent, but there is no response yet
	            cachedResp.then(resolvePromiseWithResult, resolvePromiseWithResult);
	          } else {
	            // serving from cache
	            if (isArray(cachedResp)) {
	              resolvePromise(cachedResp[1], cachedResp[0], shallowCopy(cachedResp[2]), cachedResp[3]);
	            } else {
	              resolvePromise(cachedResp, 200, {}, 'OK');
	            }
	          }
	        } else {
	          // put the promise for the non-transformed response into cache as a placeholder
	          cache.put(url, promise);
	        }
	      }
	
	
	      // if we won't have the response in cache, set the xsrf headers and
	      // send the request to the backend
	      if (isUndefined(cachedResp)) {
	        var xsrfValue = urlIsSameOrigin(config.url)
	            ? $$cookieReader()[config.xsrfCookieName || defaults.xsrfCookieName]
	            : undefined;
	        if (xsrfValue) {
	          reqHeaders[(config.xsrfHeaderName || defaults.xsrfHeaderName)] = xsrfValue;
	        }
	
	        $httpBackend(config.method, url, reqData, done, reqHeaders, config.timeout,
	            config.withCredentials, config.responseType,
	            createApplyHandlers(config.eventHandlers),
	            createApplyHandlers(config.uploadEventHandlers));
	      }
	
	      return promise;
	
	      function createApplyHandlers(eventHandlers) {
	        if (eventHandlers) {
	          var applyHandlers = {};
	          forEach(eventHandlers, function(eventHandler, key) {
	            applyHandlers[key] = function(event) {
	              if (useApplyAsync) {
	                $rootScope.$applyAsync(callEventHandler);
	              } else if ($rootScope.$$phase) {
	                callEventHandler();
	              } else {
	                $rootScope.$apply(callEventHandler);
	              }
	
	              function callEventHandler() {
	                eventHandler(event);
	              }
	            };
	          });
	          return applyHandlers;
	        }
	      }
	
	
	      /**
	       * Callback registered to $httpBackend():
	       *  - caches the response if desired
	       *  - resolves the raw $http promise
	       *  - calls $apply
	       */
	      function done(status, response, headersString, statusText) {
	        if (cache) {
	          if (isSuccess(status)) {
	            cache.put(url, [status, response, parseHeaders(headersString), statusText]);
	          } else {
	            // remove promise from the cache
	            cache.remove(url);
	          }
	        }
	
	        function resolveHttpPromise() {
	          resolvePromise(response, status, headersString, statusText);
	        }
	
	        if (useApplyAsync) {
	          $rootScope.$applyAsync(resolveHttpPromise);
	        } else {
	          resolveHttpPromise();
	          if (!$rootScope.$$phase) $rootScope.$apply();
	        }
	      }
	
	
	      /**
	       * Resolves the raw $http promise.
	       */
	      function resolvePromise(response, status, headers, statusText) {
	        //status: HTTP response status code, 0, -1 (aborted by timeout / promise)
	        status = status >= -1 ? status : 0;
	
	        (isSuccess(status) ? deferred.resolve : deferred.reject)({
	          data: response,
	          status: status,
	          headers: headersGetter(headers),
	          config: config,
	          statusText: statusText
	        });
	      }
	
	      function resolvePromiseWithResult(result) {
	        resolvePromise(result.data, result.status, shallowCopy(result.headers()), result.statusText);
	      }
	
	      function removePendingReq() {
	        var idx = $http.pendingRequests.indexOf(config);
	        if (idx !== -1) $http.pendingRequests.splice(idx, 1);
	      }
	    }
	
	
	    function buildUrl(url, serializedParams) {
	      if (serializedParams.length > 0) {
	        url += ((url.indexOf('?') === -1) ? '?' : '&') + serializedParams;
	      }
	      return url;
	    }
	
	    function sanitizeJsonpCallbackParam(url, key) {
	      if (/[&?][^=]+=JSON_CALLBACK/.test(url)) {
	        // Throw if the url already contains a reference to JSON_CALLBACK
	        throw $httpMinErr('badjsonp', 'Illegal use of JSON_CALLBACK in url, "{0}"', url);
	      }
	
	      var callbackParamRegex = new RegExp('[&?]' + key + '=');
	      if (callbackParamRegex.test(url)) {
	        // Throw if the callback param was already provided
	        throw $httpMinErr('badjsonp', 'Illegal use of callback param, "{0}", in url, "{1}"', key, url);
	      }
	
	      // Add in the JSON_CALLBACK callback param value
	      url += ((url.indexOf('?') === -1) ? '?' : '&') + key + '=JSON_CALLBACK';
	
	      return url;
	    }
	  }];
	}
	
	/**
	 * @ngdoc service
	 * @name $xhrFactory
	 * @this
	 *
	 * @description
	 * Factory function used to create XMLHttpRequest objects.
	 *
	 * Replace or decorate this service to create your own custom XMLHttpRequest objects.
	 *
	 * ```
	 * angular.module('myApp', [])
	 * .factory('$xhrFactory', function() {
	 *   return function createXhr(method, url) {
	 *     return new window.XMLHttpRequest({mozSystem: true});
	 *   };
	 * });
	 * ```
	 *
	 * @param {string} method HTTP method of the request (GET, POST, PUT, ..)
	 * @param {string} url URL of the request.
	 */
	function $xhrFactoryProvider() {
	  this.$get = function() {
	    return function createXhr() {
	      return new window.XMLHttpRequest();
	    };
	  };
	}
	
	/**
	 * @ngdoc service
	 * @name $httpBackend
	 * @requires $jsonpCallbacks
	 * @requires $document
	 * @requires $xhrFactory
	 * @this
	 *
	 * @description
	 * HTTP backend used by the {@link ng.$http service} that delegates to
	 * XMLHttpRequest object or JSONP and deals with browser incompatibilities.
	 *
	 * You should never need to use this service directly, instead use the higher-level abstractions:
	 * {@link ng.$http $http} or {@link ngResource.$resource $resource}.
	 *
	 * During testing this implementation is swapped with {@link ngMock.$httpBackend mock
	 * $httpBackend} which can be trained with responses.
	 */
	function $HttpBackendProvider() {
	  this.$get = ['$browser', '$jsonpCallbacks', '$document', '$xhrFactory', function($browser, $jsonpCallbacks, $document, $xhrFactory) {
	    return createHttpBackend($browser, $xhrFactory, $browser.defer, $jsonpCallbacks, $document[0]);
	  }];
	}
	
	function createHttpBackend($browser, createXhr, $browserDefer, callbacks, rawDocument) {
	  // TODO(vojta): fix the signature
	  return function(method, url, post, callback, headers, timeout, withCredentials, responseType, eventHandlers, uploadEventHandlers) {
	    url = url || $browser.url();
	
	    if (lowercase(method) === 'jsonp') {
	      var callbackPath = callbacks.createCallback(url);
	      var jsonpDone = jsonpReq(url, callbackPath, function(status, text) {
	        // jsonpReq only ever sets status to 200 (OK), 404 (ERROR) or -1 (WAITING)
	        var response = (status === 200) && callbacks.getResponse(callbackPath);
	        completeRequest(callback, status, response, '', text);
	        callbacks.removeCallback(callbackPath);
	      });
	    } else {
	
	      var xhr = createXhr(method, url);
	
	      xhr.open(method, url, true);
	      forEach(headers, function(value, key) {
	        if (isDefined(value)) {
	            xhr.setRequestHeader(key, value);
	        }
	      });
	
	      xhr.onload = function requestLoaded() {
	        var statusText = xhr.statusText || '';
	
	        // responseText is the old-school way of retrieving response (supported by IE9)
	        // response/responseType properties were introduced in XHR Level2 spec (supported by IE10)
	        var response = ('response' in xhr) ? xhr.response : xhr.responseText;
	
	        // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)
	        var status = xhr.status === 1223 ? 204 : xhr.status;
	
	        // fix status code when it is 0 (0 status is undocumented).
	        // Occurs when accessing file resources or on Android 4.1 stock browser
	        // while retrieving files from application cache.
	        if (status === 0) {
	          status = response ? 200 : urlResolve(url).protocol === 'file' ? 404 : 0;
	        }
	
	        completeRequest(callback,
	            status,
	            response,
	            xhr.getAllResponseHeaders(),
	            statusText);
	      };
	
	      var requestError = function() {
	        // The response is always empty
	        // See https://xhr.spec.whatwg.org/#request-error-steps and https://fetch.spec.whatwg.org/#concept-network-error
	        completeRequest(callback, -1, null, null, '');
	      };
	
	      xhr.onerror = requestError;
	      xhr.onabort = requestError;
	      xhr.ontimeout = requestError;
	
	      forEach(eventHandlers, function(value, key) {
	          xhr.addEventListener(key, value);
	      });
	
	      forEach(uploadEventHandlers, function(value, key) {
	        xhr.upload.addEventListener(key, value);
	      });
	
	      if (withCredentials) {
	        xhr.withCredentials = true;
	      }
	
	      if (responseType) {
	        try {
	          xhr.responseType = responseType;
	        } catch (e) {
	          // WebKit added support for the json responseType value on 09/03/2013
	          // https://bugs.webkit.org/show_bug.cgi?id=73648. Versions of Safari prior to 7 are
	          // known to throw when setting the value "json" as the response type. Other older
	          // browsers implementing the responseType
	          //
	          // The json response type can be ignored if not supported, because JSON payloads are
	          // parsed on the client-side regardless.
	          if (responseType !== 'json') {
	            throw e;
	          }
	        }
	      }
	
	      xhr.send(isUndefined(post) ? null : post);
	    }
	
	    if (timeout > 0) {
	      var timeoutId = $browserDefer(timeoutRequest, timeout);
	    } else if (isPromiseLike(timeout)) {
	      timeout.then(timeoutRequest);
	    }
	
	
	    function timeoutRequest() {
	      if (jsonpDone) {
	        jsonpDone();
	      }
	      if (xhr) {
	        xhr.abort();
	      }
	    }
	
	    function completeRequest(callback, status, response, headersString, statusText) {
	      // cancel timeout and subsequent timeout promise resolution
	      if (isDefined(timeoutId)) {
	        $browserDefer.cancel(timeoutId);
	      }
	      jsonpDone = xhr = null;
	
	      callback(status, response, headersString, statusText);
	    }
	  };
	
	  function jsonpReq(url, callbackPath, done) {
	    url = url.replace('JSON_CALLBACK', callbackPath);
	    // we can't use jQuery/jqLite here because jQuery does crazy stuff with script elements, e.g.:
	    // - fetches local scripts via XHR and evals them
	    // - adds and immediately removes script elements from the document
	    var script = rawDocument.createElement('script'), callback = null;
	    script.type = 'text/javascript';
	    script.src = url;
	    script.async = true;
	
	    callback = function(event) {
	      script.removeEventListener('load', callback);
	      script.removeEventListener('error', callback);
	      rawDocument.body.removeChild(script);
	      script = null;
	      var status = -1;
	      var text = 'unknown';
	
	      if (event) {
	        if (event.type === 'load' && !callbacks.wasCalled(callbackPath)) {
	          event = { type: 'error' };
	        }
	        text = event.type;
	        status = event.type === 'error' ? 404 : 200;
	      }
	
	      if (done) {
	        done(status, text);
	      }
	    };
	
	    script.addEventListener('load', callback);
	    script.addEventListener('error', callback);
	    rawDocument.body.appendChild(script);
	    return callback;
	  }
	}
	
	var $interpolateMinErr = angular.$interpolateMinErr = minErr('$interpolate');
	$interpolateMinErr.throwNoconcat = function(text) {
	  throw $interpolateMinErr('noconcat',
	      'Error while interpolating: {0}\nStrict Contextual Escaping disallows ' +
	      'interpolations that concatenate multiple expressions when a trusted value is ' +
	      'required.  See http://docs.angularjs.org/api/ng.$sce', text);
	};
	
	$interpolateMinErr.interr = function(text, err) {
	  return $interpolateMinErr('interr', 'Can\'t interpolate: {0}\n{1}', text, err.toString());
	};
	
	/**
	 * @ngdoc provider
	 * @name $interpolateProvider
	 * @this
	 *
	 * @description
	 *
	 * Used for configuring the interpolation markup. Defaults to `{{` and `}}`.
	 *
	 * <div class="alert alert-danger">
	 * This feature is sometimes used to mix different markup languages, e.g. to wrap an Angular
	 * template within a Python Jinja template (or any other template language). Mixing templating
	 * languages is **very dangerous**. The embedding template language will not safely escape Angular
	 * expressions, so any user-controlled values in the template will cause Cross Site Scripting (XSS)
	 * security bugs!
	 * </div>
	 *
	 * @example
	<example name="custom-interpolation-markup" module="customInterpolationApp">
	<file name="index.html">
	<script>
	  var customInterpolationApp = angular.module('customInterpolationApp', []);
	
	  customInterpolationApp.config(function($interpolateProvider) {
	    $interpolateProvider.startSymbol('//');
	    $interpolateProvider.endSymbol('//');
	  });
	
	
	  customInterpolationApp.controller('DemoController', function() {
	      this.label = "This binding is brought you by // interpolation symbols.";
	  });
	</script>
	<div ng-controller="DemoController as demo">
	    //demo.label//
	</div>
	</file>
	<file name="protractor.js" type="protractor">
	  it('should interpolate binding with custom symbols', function() {
	    expect(element(by.binding('demo.label')).getText()).toBe('This binding is brought you by // interpolation symbols.');
	  });
	</file>
	</example>
	 */
	function $InterpolateProvider() {
	  var startSymbol = '{{';
	  var endSymbol = '}}';
	
	  /**
	   * @ngdoc method
	   * @name $interpolateProvider#startSymbol
	   * @description
	   * Symbol to denote start of expression in the interpolated string. Defaults to `{{`.
	   *
	   * @param {string=} value new value to set the starting symbol to.
	   * @returns {string|self} Returns the symbol when used as getter and self if used as setter.
	   */
	  this.startSymbol = function(value) {
	    if (value) {
	      startSymbol = value;
	      return this;
	    } else {
	      return startSymbol;
	    }
	  };
	
	  /**
	   * @ngdoc method
	   * @name $interpolateProvider#endSymbol
	   * @description
	   * Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.
	   *
	   * @param {string=} value new value to set the ending symbol to.
	   * @returns {string|self} Returns the symbol when used as getter and self if used as setter.
	   */
	  this.endSymbol = function(value) {
	    if (value) {
	      endSymbol = value;
	      return this;
	    } else {
	      return endSymbol;
	    }
	  };
	
	
	  this.$get = ['$parse', '$exceptionHandler', '$sce', function($parse, $exceptionHandler, $sce) {
	    var startSymbolLength = startSymbol.length,
	        endSymbolLength = endSymbol.length,
	        escapedStartRegexp = new RegExp(startSymbol.replace(/./g, escape), 'g'),
	        escapedEndRegexp = new RegExp(endSymbol.replace(/./g, escape), 'g');
	
	    function escape(ch) {
	      return '\\\\\\' + ch;
	    }
	
	    function unescapeText(text) {
	      return text.replace(escapedStartRegexp, startSymbol).
	        replace(escapedEndRegexp, endSymbol);
	    }
	
	    // TODO: this is the same as the constantWatchDelegate in parse.js
	    function constantWatchDelegate(scope, listener, objectEquality, constantInterp) {
	      var unwatch = scope.$watch(function constantInterpolateWatch(scope) {
	        unwatch();
	        return constantInterp(scope);
	      }, listener, objectEquality);
	      return unwatch;
	    }
	
	    /**
	     * @ngdoc service
	     * @name $interpolate
	     * @kind function
	     *
	     * @requires $parse
	     * @requires $sce
	     *
	     * @description
	     *
	     * Compiles a string with markup into an interpolation function. This service is used by the
	     * HTML {@link ng.$compile $compile} service for data binding. See
	     * {@link ng.$interpolateProvider $interpolateProvider} for configuring the
	     * interpolation markup.
	     *
	     *
	     * ```js
	     *   var $interpolate = ...; // injected
	     *   var exp = $interpolate('Hello {{name | uppercase}}!');
	     *   expect(exp({name:'Angular'})).toEqual('Hello ANGULAR!');
	     * ```
	     *
	     * `$interpolate` takes an optional fourth argument, `allOrNothing`. If `allOrNothing` is
	     * `true`, the interpolation function will return `undefined` unless all embedded expressions
	     * evaluate to a value other than `undefined`.
	     *
	     * ```js
	     *   var $interpolate = ...; // injected
	     *   var context = {greeting: 'Hello', name: undefined };
	     *
	     *   // default "forgiving" mode
	     *   var exp = $interpolate('{{greeting}} {{name}}!');
	     *   expect(exp(context)).toEqual('Hello !');
	     *
	     *   // "allOrNothing" mode
	     *   exp = $interpolate('{{greeting}} {{name}}!', false, null, true);
	     *   expect(exp(context)).toBeUndefined();
	     *   context.name = 'Angular';
	     *   expect(exp(context)).toEqual('Hello Angular!');
	     * ```
	     *
	     * `allOrNothing` is useful for interpolating URLs. `ngSrc` and `ngSrcset` use this behavior.
	     *
	     * #### Escaped Interpolation
	     * $interpolate provides a mechanism for escaping interpolation markers. Start and end markers
	     * can be escaped by preceding each of their characters with a REVERSE SOLIDUS U+005C (backslash).
	     * It will be rendered as a regular start/end marker, and will not be interpreted as an expression
	     * or binding.
	     *
	     * This enables web-servers to prevent script injection attacks and defacing attacks, to some
	     * degree, while also enabling code examples to work without relying on the
	     * {@link ng.directive:ngNonBindable ngNonBindable} directive.
	     *
	     * **For security purposes, it is strongly encouraged that web servers escape user-supplied data,
	     * replacing angle brackets (&lt;, &gt;) with &amp;lt; and &amp;gt; respectively, and replacing all
	     * interpolation start/end markers with their escaped counterparts.**
	     *
	     * Escaped interpolation markers are only replaced with the actual interpolation markers in rendered
	     * output when the $interpolate service processes the text. So, for HTML elements interpolated
	     * by {@link ng.$compile $compile}, or otherwise interpolated with the `mustHaveExpression` parameter
	     * set to `true`, the interpolated text must contain an unescaped interpolation expression. As such,
	     * this is typically useful only when user-data is used in rendering a template from the server, or
	     * when otherwise untrusted data is used by a directive.
	     *
	     * <example name="interpolation">
	     *  <file name="index.html">
	     *    <div ng-init="username='A user'">
	     *      <p ng-init="apptitle='Escaping demo'">{{apptitle}}: \{\{ username = "defaced value"; \}\}
	     *        </p>
	     *      <p><strong>{{username}}</strong> attempts to inject code which will deface the
	     *        application, but fails to accomplish their task, because the server has correctly
	     *        escaped the interpolation start/end markers with REVERSE SOLIDUS U+005C (backslash)
	     *        characters.</p>
	     *      <p>Instead, the result of the attempted script injection is visible, and can be removed
	     *        from the database by an administrator.</p>
	     *    </div>
	     *  </file>
	     * </example>
	     *
	     * @knownIssue
	     * It is currently not possible for an interpolated expression to contain the interpolation end
	     * symbol. For example, `{{ '}}' }}` will be incorrectly interpreted as `{{ ' }}` + `' }}`, i.e.
	     * an interpolated expression consisting of a single-quote (`'`) and the `' }}` string.
	     *
	     * @knownIssue
	     * All directives and components must use the standard `{{` `}}` interpolation symbols
	     * in their templates. If you change the application interpolation symbols the {@link $compile}
	     * service will attempt to denormalize the standard symbols to the custom symbols.
	     * The denormalization process is not clever enough to know not to replace instances of the standard
	     * symbols where they would not normally be treated as interpolation symbols. For example in the following
	     * code snippet the closing braces of the literal object will get incorrectly denormalized:
	     *
	     * ```
	     * <div data-context='{"context":{"id":3,"type":"page"}}">
	     * ```
	     *
	     * The workaround is to ensure that such instances are separated by whitespace:
	     * ```
	     * <div data-context='{"context":{"id":3,"type":"page"} }">
	     * ```
	     *
	     * See https://github.com/angular/angular.js/pull/14610#issuecomment-219401099 for more information.
	     *
	     * @param {string} text The text with markup to interpolate.
	     * @param {boolean=} mustHaveExpression if set to true then the interpolation string must have
	     *    embedded expression in order to return an interpolation function. Strings with no
	     *    embedded expression will return null for the interpolation function.
	     * @param {string=} trustedContext when provided, the returned function passes the interpolated
	     *    result through {@link ng.$sce#getTrusted $sce.getTrusted(interpolatedResult,
	     *    trustedContext)} before returning it.  Refer to the {@link ng.$sce $sce} service that
	     *    provides Strict Contextual Escaping for details.
	     * @param {boolean=} allOrNothing if `true`, then the returned function returns undefined
	     *    unless all embedded expressions evaluate to a value other than `undefined`.
	     * @returns {function(context)} an interpolation function which is used to compute the
	     *    interpolated string. The function has these parameters:
	     *
	     * - `context`: evaluation context for all expressions embedded in the interpolated text
	     */
	    function $interpolate(text, mustHaveExpression, trustedContext, allOrNothing) {
	      // Provide a quick exit and simplified result function for text with no interpolation
	      if (!text.length || text.indexOf(startSymbol) === -1) {
	        var constantInterp;
	        if (!mustHaveExpression) {
	          var unescapedText = unescapeText(text);
	          constantInterp = valueFn(unescapedText);
	          constantInterp.exp = text;
	          constantInterp.expressions = [];
	          constantInterp.$$watchDelegate = constantWatchDelegate;
	        }
	        return constantInterp;
	      }
	
	      allOrNothing = !!allOrNothing;
	      var startIndex,
	          endIndex,
	          index = 0,
	          expressions = [],
	          parseFns = [],
	          textLength = text.length,
	          exp,
	          concat = [],
	          expressionPositions = [];
	
	      while (index < textLength) {
	        if (((startIndex = text.indexOf(startSymbol, index)) !== -1) &&
	             ((endIndex = text.indexOf(endSymbol, startIndex + startSymbolLength)) !== -1)) {
	          if (index !== startIndex) {
	            concat.push(unescapeText(text.substring(index, startIndex)));
	          }
	          exp = text.substring(startIndex + startSymbolLength, endIndex);
	          expressions.push(exp);
	          parseFns.push($parse(exp, parseStringifyInterceptor));
	          index = endIndex + endSymbolLength;
	          expressionPositions.push(concat.length);
	          concat.push('');
	        } else {
	          // we did not find an interpolation, so we have to add the remainder to the separators array
	          if (index !== textLength) {
	            concat.push(unescapeText(text.substring(index)));
	          }
	          break;
	        }
	      }
	
	      // Concatenating expressions makes it hard to reason about whether some combination of
	      // concatenated values are unsafe to use and could easily lead to XSS.  By requiring that a
	      // single expression be used for iframe[src], object[src], etc., we ensure that the value
	      // that's used is assigned or constructed by some JS code somewhere that is more testable or
	      // make it obvious that you bound the value to some user controlled value.  This helps reduce
	      // the load when auditing for XSS issues.
	      if (trustedContext && concat.length > 1) {
	          $interpolateMinErr.throwNoconcat(text);
	      }
	
	      if (!mustHaveExpression || expressions.length) {
	        var compute = function(values) {
	          for (var i = 0, ii = expressions.length; i < ii; i++) {
	            if (allOrNothing && isUndefined(values[i])) return;
	            concat[expressionPositions[i]] = values[i];
	          }
	          return concat.join('');
	        };
	
	        var getValue = function(value) {
	          return trustedContext ?
	            $sce.getTrusted(trustedContext, value) :
	            $sce.valueOf(value);
	        };
	
	        return extend(function interpolationFn(context) {
	            var i = 0;
	            var ii = expressions.length;
	            var values = new Array(ii);
	
	            try {
	              for (; i < ii; i++) {
	                values[i] = parseFns[i](context);
	              }
	
	              return compute(values);
	            } catch (err) {
	              $exceptionHandler($interpolateMinErr.interr(text, err));
	            }
	
	          }, {
	          // all of these properties are undocumented for now
	          exp: text, //just for compatibility with regular watchers created via $watch
	          expressions: expressions,
	          $$watchDelegate: function(scope, listener) {
	            var lastValue;
	            return scope.$watchGroup(parseFns, /** @this */ function interpolateFnWatcher(values, oldValues) {
	              var currValue = compute(values);
	              if (isFunction(listener)) {
	                listener.call(this, currValue, values !== oldValues ? lastValue : currValue, scope);
	              }
	              lastValue = currValue;
	            });
	          }
	        });
	      }
	
	      function parseStringifyInterceptor(value) {
	        try {
	          value = getValue(value);
	          return allOrNothing && !isDefined(value) ? value : stringify(value);
	        } catch (err) {
	          $exceptionHandler($interpolateMinErr.interr(text, err));
	        }
	      }
	    }
	
	
	    /**
	     * @ngdoc method
	     * @name $interpolate#startSymbol
	     * @description
	     * Symbol to denote the start of expression in the interpolated string. Defaults to `{{`.
	     *
	     * Use {@link ng.$interpolateProvider#startSymbol `$interpolateProvider.startSymbol`} to change
	     * the symbol.
	     *
	     * @returns {string} start symbol.
	     */
	    $interpolate.startSymbol = function() {
	      return startSymbol;
	    };
	
	
	    /**
	     * @ngdoc method
	     * @name $interpolate#endSymbol
	     * @description
	     * Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.
	     *
	     * Use {@link ng.$interpolateProvider#endSymbol `$interpolateProvider.endSymbol`} to change
	     * the symbol.
	     *
	     * @returns {string} end symbol.
	     */
	    $interpolate.endSymbol = function() {
	      return endSymbol;
	    };
	
	    return $interpolate;
	  }];
	}
	
	/** @this */
	function $IntervalProvider() {
	  this.$get = ['$rootScope', '$window', '$q', '$$q', '$browser',
	       function($rootScope,   $window,   $q,   $$q,   $browser) {
	    var intervals = {};
	
	
	     /**
	      * @ngdoc service
	      * @name $interval
	      *
	      * @description
	      * Angular's wrapper for `window.setInterval`. The `fn` function is executed every `delay`
	      * milliseconds.
	      *
	      * The return value of registering an interval function is a promise. This promise will be
	      * notified upon each tick of the interval, and will be resolved after `count` iterations, or
	      * run indefinitely if `count` is not defined. The value of the notification will be the
	      * number of iterations that have run.
	      * To cancel an interval, call `$interval.cancel(promise)`.
	      *
	      * In tests you can use {@link ngMock.$interval#flush `$interval.flush(millis)`} to
	      * move forward by `millis` milliseconds and trigger any functions scheduled to run in that
	      * time.
	      *
	      * <div class="alert alert-warning">
	      * **Note**: Intervals created by this service must be explicitly destroyed when you are finished
	      * with them.  In particular they are not automatically destroyed when a controller's scope or a
	      * directive's element are destroyed.
	      * You should take this into consideration and make sure to always cancel the interval at the
	      * appropriate moment.  See the example below for more details on how and when to do this.
	      * </div>
	      *
	      * @param {function()} fn A function that should be called repeatedly. If no additional arguments
	      *   are passed (see below), the function is called with the current iteration count.
	      * @param {number} delay Number of milliseconds between each function call.
	      * @param {number=} [count=0] Number of times to repeat. If not set, or 0, will repeat
	      *   indefinitely.
	      * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise
	      *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.
	      * @param {...*=} Pass additional parameters to the executed function.
	      * @returns {promise} A promise which will be notified on each iteration.
	      *
	      * @example
	      * <example module="intervalExample" name="interval-service">
	      * <file name="index.html">
	      *   <script>
	      *     angular.module('intervalExample', [])
	      *       .controller('ExampleController', ['$scope', '$interval',
	      *         function($scope, $interval) {
	      *           $scope.format = 'M/d/yy h:mm:ss a';
	      *           $scope.blood_1 = 100;
	      *           $scope.blood_2 = 120;
	      *
	      *           var stop;
	      *           $scope.fight = function() {
	      *             // Don't start a new fight if we are already fighting
	      *             if ( angular.isDefined(stop) ) return;
	      *
	      *             stop = $interval(function() {
	      *               if ($scope.blood_1 > 0 && $scope.blood_2 > 0) {
	      *                 $scope.blood_1 = $scope.blood_1 - 3;
	      *                 $scope.blood_2 = $scope.blood_2 - 4;
	      *               } else {
	      *                 $scope.stopFight();
	      *               }
	      *             }, 100);
	      *           };
	      *
	      *           $scope.stopFight = function() {
	      *             if (angular.isDefined(stop)) {
	      *               $interval.cancel(stop);
	      *               stop = undefined;
	      *             }
	      *           };
	      *
	      *           $scope.resetFight = function() {
	      *             $scope.blood_1 = 100;
	      *             $scope.blood_2 = 120;
	      *           };
	      *
	      *           $scope.$on('$destroy', function() {
	      *             // Make sure that the interval is destroyed too
	      *             $scope.stopFight();
	      *           });
	      *         }])
	      *       // Register the 'myCurrentTime' directive factory method.
	      *       // We inject $interval and dateFilter service since the factory method is DI.
	      *       .directive('myCurrentTime', ['$interval', 'dateFilter',
	      *         function($interval, dateFilter) {
	      *           // return the directive link function. (compile function not needed)
	      *           return function(scope, element, attrs) {
	      *             var format,  // date format
	      *                 stopTime; // so that we can cancel the time updates
	      *
	      *             // used to update the UI
	      *             function updateTime() {
	      *               element.text(dateFilter(new Date(), format));
	      *             }
	      *
	      *             // watch the expression, and update the UI on change.
	      *             scope.$watch(attrs.myCurrentTime, function(value) {
	      *               format = value;
	      *               updateTime();
	      *             });
	      *
	      *             stopTime = $interval(updateTime, 1000);
	      *
	      *             // listen on DOM destroy (removal) event, and cancel the next UI update
	      *             // to prevent updating time after the DOM element was removed.
	      *             element.on('$destroy', function() {
	      *               $interval.cancel(stopTime);
	      *             });
	      *           }
	      *         }]);
	      *   </script>
	      *
	      *   <div>
	      *     <div ng-controller="ExampleController">
	      *       <label>Date format: <input ng-model="format"></label> <hr/>
	      *       Current time is: <span my-current-time="format"></span>
	      *       <hr/>
	      *       Blood 1 : <font color='red'>{{blood_1}}</font>
	      *       Blood 2 : <font color='red'>{{blood_2}}</font>
	      *       <button type="button" data-ng-click="fight()">Fight</button>
	      *       <button type="button" data-ng-click="stopFight()">StopFight</button>
	      *       <button type="button" data-ng-click="resetFight()">resetFight</button>
	      *     </div>
	      *   </div>
	      *
	      * </file>
	      * </example>
	      */
	    function interval(fn, delay, count, invokeApply) {
	      var hasParams = arguments.length > 4,
	          args = hasParams ? sliceArgs(arguments, 4) : [],
	          setInterval = $window.setInterval,
	          clearInterval = $window.clearInterval,
	          iteration = 0,
	          skipApply = (isDefined(invokeApply) && !invokeApply),
	          deferred = (skipApply ? $$q : $q).defer(),
	          promise = deferred.promise;
	
	      count = isDefined(count) ? count : 0;
	
	      promise.$$intervalId = setInterval(function tick() {
	        if (skipApply) {
	          $browser.defer(callback);
	        } else {
	          $rootScope.$evalAsync(callback);
	        }
	        deferred.notify(iteration++);
	
	        if (count > 0 && iteration >= count) {
	          deferred.resolve(iteration);
	          clearInterval(promise.$$intervalId);
	          delete intervals[promise.$$intervalId];
	        }
	
	        if (!skipApply) $rootScope.$apply();
	
	      }, delay);
	
	      intervals[promise.$$intervalId] = deferred;
	
	      return promise;
	
	      function callback() {
	        if (!hasParams) {
	          fn(iteration);
	        } else {
	          fn.apply(null, args);
	        }
	      }
	    }
	
	
	     /**
	      * @ngdoc method
	      * @name $interval#cancel
	      *
	      * @description
	      * Cancels a task associated with the `promise`.
	      *
	      * @param {Promise=} promise returned by the `$interval` function.
	      * @returns {boolean} Returns `true` if the task was successfully canceled.
	      */
	    interval.cancel = function(promise) {
	      if (promise && promise.$$intervalId in intervals) {
	        // Interval cancels should not report as unhandled promise.
	        intervals[promise.$$intervalId].promise.catch(noop);
	        intervals[promise.$$intervalId].reject('canceled');
	        $window.clearInterval(promise.$$intervalId);
	        delete intervals[promise.$$intervalId];
	        return true;
	      }
	      return false;
	    };
	
	    return interval;
	  }];
	}
	
	/**
	 * @ngdoc service
	 * @name $jsonpCallbacks
	 * @requires $window
	 * @description
	 * This service handles the lifecycle of callbacks to handle JSONP requests.
	 * Override this service if you wish to customise where the callbacks are stored and
	 * how they vary compared to the requested url.
	 */
	var $jsonpCallbacksProvider = /** @this */ function() {
	  this.$get = ['$window', function($window) {
	    var callbacks = $window.angular.callbacks;
	    var callbackMap = {};
	
	    function createCallback(callbackId) {
	      var callback = function(data) {
	        callback.data = data;
	        callback.called = true;
	      };
	      callback.id = callbackId;
	      return callback;
	    }
	
	    return {
	      /**
	       * @ngdoc method
	       * @name $jsonpCallbacks#createCallback
	       * @param {string} url the url of the JSONP request
	       * @returns {string} the callback path to send to the server as part of the JSONP request
	       * @description
	       * {@link $httpBackend} calls this method to create a callback and get hold of the path to the callback
	       * to pass to the server, which will be used to call the callback with its payload in the JSONP response.
	       */
	      createCallback: function(url) {
	        var callbackId = '_' + (callbacks.$$counter++).toString(36);
	        var callbackPath = 'angular.callbacks.' + callbackId;
	        var callback = createCallback(callbackId);
	        callbackMap[callbackPath] = callbacks[callbackId] = callback;
	        return callbackPath;
	      },
	      /**
	       * @ngdoc method
	       * @name $jsonpCallbacks#wasCalled
	       * @param {string} callbackPath the path to the callback that was sent in the JSONP request
	       * @returns {boolean} whether the callback has been called, as a result of the JSONP response
	       * @description
	       * {@link $httpBackend} calls this method to find out whether the JSONP response actually called the
	       * callback that was passed in the request.
	       */
	      wasCalled: function(callbackPath) {
	        return callbackMap[callbackPath].called;
	      },
	      /**
	       * @ngdoc method
	       * @name $jsonpCallbacks#getResponse
	       * @param {string} callbackPath the path to the callback that was sent in the JSONP request
	       * @returns {*} the data received from the response via the registered callback
	       * @description
	       * {@link $httpBackend} calls this method to get hold of the data that was provided to the callback
	       * in the JSONP response.
	       */
	      getResponse: function(callbackPath) {
	        return callbackMap[callbackPath].data;
	      },
	      /**
	       * @ngdoc method
	       * @name $jsonpCallbacks#removeCallback
	       * @param {string} callbackPath the path to the callback that was sent in the JSONP request
	       * @description
	       * {@link $httpBackend} calls this method to remove the callback after the JSONP request has
	       * completed or timed-out.
	       */
	      removeCallback: function(callbackPath) {
	        var callback = callbackMap[callbackPath];
	        delete callbacks[callback.id];
	        delete callbackMap[callbackPath];
	      }
	    };
	  }];
	};
	
	/**
	 * @ngdoc service
	 * @name $locale
	 *
	 * @description
	 * $locale service provides localization rules for various Angular components. As of right now the
	 * only public api is:
	 *
	 * * `id` – `{string}` – locale id formatted as `languageId-countryId` (e.g. `en-us`)
	 */
	
	var PATH_MATCH = /^([^?#]*)(\?([^#]*))?(#(.*))?$/,
	    DEFAULT_PORTS = {'http': 80, 'https': 443, 'ftp': 21};
	var $locationMinErr = minErr('$location');
	
	
	/**
	 * Encode path using encodeUriSegment, ignoring forward slashes
	 *
	 * @param {string} path Path to encode
	 * @returns {string}
	 */
	function encodePath(path) {
	  var segments = path.split('/'),
	      i = segments.length;
	
	  while (i--) {
	    segments[i] = encodeUriSegment(segments[i]);
	  }
	
	  return segments.join('/');
	}
	
	function parseAbsoluteUrl(absoluteUrl, locationObj) {
	  var parsedUrl = urlResolve(absoluteUrl);
	
	  locationObj.$$protocol = parsedUrl.protocol;
	  locationObj.$$host = parsedUrl.hostname;
	  locationObj.$$port = toInt(parsedUrl.port) || DEFAULT_PORTS[parsedUrl.protocol] || null;
	}
	
	var DOUBLE_SLASH_REGEX = /^\s*[\\/]{2,}/;
	function parseAppUrl(url, locationObj) {
	
	  if (DOUBLE_SLASH_REGEX.test(url)) {
	    throw $locationMinErr('badpath', 'Invalid url "{0}".', url);
	  }
	
	  var prefixed = (url.charAt(0) !== '/');
	  if (prefixed) {
	    url = '/' + url;
	  }
	  var match = urlResolve(url);
	  locationObj.$$path = decodeURIComponent(prefixed && match.pathname.charAt(0) === '/' ?
	      match.pathname.substring(1) : match.pathname);
	  locationObj.$$search = parseKeyValue(match.search);
	  locationObj.$$hash = decodeURIComponent(match.hash);
	
	  // make sure path starts with '/';
	  if (locationObj.$$path && locationObj.$$path.charAt(0) !== '/') {
	    locationObj.$$path = '/' + locationObj.$$path;
	  }
	}
	
	function startsWith(str, search) {
	  return str.slice(0, search.length) === search;
	}
	
	/**
	 *
	 * @param {string} base
	 * @param {string} url
	 * @returns {string} returns text from `url` after `base` or `undefined` if it does not begin with
	 *                   the expected string.
	 */
	function stripBaseUrl(base, url) {
	  if (startsWith(url, base)) {
	    return url.substr(base.length);
	  }
	}
	
	
	function stripHash(url) {
	  var index = url.indexOf('#');
	  return index === -1 ? url : url.substr(0, index);
	}
	
	function trimEmptyHash(url) {
	  return url.replace(/(#.+)|#$/, '$1');
	}
	
	
	function stripFile(url) {
	  return url.substr(0, stripHash(url).lastIndexOf('/') + 1);
	}
	
	/* return the server only (scheme://host:port) */
	function serverBase(url) {
	  return url.substring(0, url.indexOf('/', url.indexOf('//') + 2));
	}
	
	
	/**
	 * LocationHtml5Url represents a URL
	 * This object is exposed as $location service when HTML5 mode is enabled and supported
	 *
	 * @constructor
	 * @param {string} appBase application base URL
	 * @param {string} appBaseNoFile application base URL stripped of any filename
	 * @param {string} basePrefix URL path prefix
	 */
	function LocationHtml5Url(appBase, appBaseNoFile, basePrefix) {
	  this.$$html5 = true;
	  basePrefix = basePrefix || '';
	  parseAbsoluteUrl(appBase, this);
	
	
	  /**
	   * Parse given HTML5 (regular) URL string into properties
	   * @param {string} url HTML5 URL
	   * @private
	   */
	  this.$$parse = function(url) {
	    var pathUrl = stripBaseUrl(appBaseNoFile, url);
	    if (!isString(pathUrl)) {
	      throw $locationMinErr('ipthprfx', 'Invalid url "{0}", missing path prefix "{1}".', url,
	          appBaseNoFile);
	    }
	
	    parseAppUrl(pathUrl, this);
	
	    if (!this.$$path) {
	      this.$$path = '/';
	    }
	
	    this.$$compose();
	  };
	
	  /**
	   * Compose url and update `absUrl` property
	   * @private
	   */
	  this.$$compose = function() {
	    var search = toKeyValue(this.$$search),
	        hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';
	
	    this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;
	    this.$$absUrl = appBaseNoFile + this.$$url.substr(1); // first char is always '/'
	  };
	
	  this.$$parseLinkUrl = function(url, relHref) {
	    if (relHref && relHref[0] === '#') {
	      // special case for links to hash fragments:
	      // keep the old url and only replace the hash fragment
	      this.hash(relHref.slice(1));
	      return true;
	    }
	    var appUrl, prevAppUrl;
	    var rewrittenUrl;
	
	
	    if (isDefined(appUrl = stripBaseUrl(appBase, url))) {
	      prevAppUrl = appUrl;
	      if (basePrefix && isDefined(appUrl = stripBaseUrl(basePrefix, appUrl))) {
	        rewrittenUrl = appBaseNoFile + (stripBaseUrl('/', appUrl) || appUrl);
	      } else {
	        rewrittenUrl = appBase + prevAppUrl;
	      }
	    } else if (isDefined(appUrl = stripBaseUrl(appBaseNoFile, url))) {
	      rewrittenUrl = appBaseNoFile + appUrl;
	    } else if (appBaseNoFile === url + '/') {
	      rewrittenUrl = appBaseNoFile;
	    }
	    if (rewrittenUrl) {
	      this.$$parse(rewrittenUrl);
	    }
	    return !!rewrittenUrl;
	  };
	}
	
	
	/**
	 * LocationHashbangUrl represents URL
	 * This object is exposed as $location service when developer doesn't opt into html5 mode.
	 * It also serves as the base class for html5 mode fallback on legacy browsers.
	 *
	 * @constructor
	 * @param {string} appBase application base URL
	 * @param {string} appBaseNoFile application base URL stripped of any filename
	 * @param {string} hashPrefix hashbang prefix
	 */
	function LocationHashbangUrl(appBase, appBaseNoFile, hashPrefix) {
	
	  parseAbsoluteUrl(appBase, this);
	
	
	  /**
	   * Parse given hashbang URL into properties
	   * @param {string} url Hashbang URL
	   * @private
	   */
	  this.$$parse = function(url) {
	    var withoutBaseUrl = stripBaseUrl(appBase, url) || stripBaseUrl(appBaseNoFile, url);
	    var withoutHashUrl;
	
	    if (!isUndefined(withoutBaseUrl) && withoutBaseUrl.charAt(0) === '#') {
	
	      // The rest of the URL starts with a hash so we have
	      // got either a hashbang path or a plain hash fragment
	      withoutHashUrl = stripBaseUrl(hashPrefix, withoutBaseUrl);
	      if (isUndefined(withoutHashUrl)) {
	        // There was no hashbang prefix so we just have a hash fragment
	        withoutHashUrl = withoutBaseUrl;
	      }
	
	    } else {
	      // There was no hashbang path nor hash fragment:
	      // If we are in HTML5 mode we use what is left as the path;
	      // Otherwise we ignore what is left
	      if (this.$$html5) {
	        withoutHashUrl = withoutBaseUrl;
	      } else {
	        withoutHashUrl = '';
	        if (isUndefined(withoutBaseUrl)) {
	          appBase = url;
	          this.replace();
	        }
	      }
	    }
	
	    parseAppUrl(withoutHashUrl, this);
	
	    this.$$path = removeWindowsDriveName(this.$$path, withoutHashUrl, appBase);
	
	    this.$$compose();
	
	    /*
	     * In Windows, on an anchor node on documents loaded from
	     * the filesystem, the browser will return a pathname
	     * prefixed with the drive name ('/C:/path') when a
	     * pathname without a drive is set:
	     *  * a.setAttribute('href', '/foo')
	     *   * a.pathname === '/C:/foo' //true
	     *
	     * Inside of Angular, we're always using pathnames that
	     * do not include drive names for routing.
	     */
	    function removeWindowsDriveName(path, url, base) {
	      /*
	      Matches paths for file protocol on windows,
	      such as /C:/foo/bar, and captures only /foo/bar.
	      */
	      var windowsFilePathExp = /^\/[A-Z]:(\/.*)/;
	
	      var firstPathSegmentMatch;
	
	      //Get the relative path from the input URL.
	      if (startsWith(url, base)) {
	        url = url.replace(base, '');
	      }
	
	      // The input URL intentionally contains a first path segment that ends with a colon.
	      if (windowsFilePathExp.exec(url)) {
	        return path;
	      }
	
	      firstPathSegmentMatch = windowsFilePathExp.exec(path);
	      return firstPathSegmentMatch ? firstPathSegmentMatch[1] : path;
	    }
	  };
	
	  /**
	   * Compose hashbang URL and update `absUrl` property
	   * @private
	   */
	  this.$$compose = function() {
	    var search = toKeyValue(this.$$search),
	        hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';
	
	    this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;
	    this.$$absUrl = appBase + (this.$$url ? hashPrefix + this.$$url : '');
	  };
	
	  this.$$parseLinkUrl = function(url, relHref) {
	    if (stripHash(appBase) === stripHash(url)) {
	      this.$$parse(url);
	      return true;
	    }
	    return false;
	  };
	}
	
	
	/**
	 * LocationHashbangUrl represents URL
	 * This object is exposed as $location service when html5 history api is enabled but the browser
	 * does not support it.
	 *
	 * @constructor
	 * @param {string} appBase application base URL
	 * @param {string} appBaseNoFile application base URL stripped of any filename
	 * @param {string} hashPrefix hashbang prefix
	 */
	function LocationHashbangInHtml5Url(appBase, appBaseNoFile, hashPrefix) {
	  this.$$html5 = true;
	  LocationHashbangUrl.apply(this, arguments);
	
	  this.$$parseLinkUrl = function(url, relHref) {
	    if (relHref && relHref[0] === '#') {
	      // special case for links to hash fragments:
	      // keep the old url and only replace the hash fragment
	      this.hash(relHref.slice(1));
	      return true;
	    }
	
	    var rewrittenUrl;
	    var appUrl;
	
	    if (appBase === stripHash(url)) {
	      rewrittenUrl = url;
	    } else if ((appUrl = stripBaseUrl(appBaseNoFile, url))) {
	      rewrittenUrl = appBase + hashPrefix + appUrl;
	    } else if (appBaseNoFile === url + '/') {
	      rewrittenUrl = appBaseNoFile;
	    }
	    if (rewrittenUrl) {
	      this.$$parse(rewrittenUrl);
	    }
	    return !!rewrittenUrl;
	  };
	
	  this.$$compose = function() {
	    var search = toKeyValue(this.$$search),
	        hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';
	
	    this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;
	    // include hashPrefix in $$absUrl when $$url is empty so IE9 does not reload page because of removal of '#'
	    this.$$absUrl = appBase + hashPrefix + this.$$url;
	  };
	
	}
	
	
	var locationPrototype = {
	
	  /**
	   * Ensure absolute URL is initialized.
	   * @private
	   */
	  $$absUrl:'',
	
	  /**
	   * Are we in html5 mode?
	   * @private
	   */
	  $$html5: false,
	
	  /**
	   * Has any change been replacing?
	   * @private
	   */
	  $$replace: false,
	
	  /**
	   * @ngdoc method
	   * @name $location#absUrl
	   *
	   * @description
	   * This method is getter only.
	   *
	   * Return full URL representation with all segments encoded according to rules specified in
	   * [RFC 3986](http://www.ietf.org/rfc/rfc3986.txt).
	   *
	   *
	   * ```js
	   * // given URL http://example.com/#/some/path?foo=bar&baz=xoxo
	   * var absUrl = $location.absUrl();
	   * // => "http://example.com/#/some/path?foo=bar&baz=xoxo"
	   * ```
	   *
	   * @return {string} full URL
	   */
	  absUrl: locationGetter('$$absUrl'),
	
	  /**
	   * @ngdoc method
	   * @name $location#url
	   *
	   * @description
	   * This method is getter / setter.
	   *
	   * Return URL (e.g. `/path?a=b#hash`) when called without any parameter.
	   *
	   * Change path, search and hash, when called with parameter and return `$location`.
	   *
	   *
	   * ```js
	   * // given URL http://example.com/#/some/path?foo=bar&baz=xoxo
	   * var url = $location.url();
	   * // => "/some/path?foo=bar&baz=xoxo"
	   * ```
	   *
	   * @param {string=} url New URL without base prefix (e.g. `/path?a=b#hash`)
	   * @return {string} url
	   */
	  url: function(url) {
	    if (isUndefined(url)) {
	      return this.$$url;
	    }
	
	    var match = PATH_MATCH.exec(url);
	    if (match[1] || url === '') this.path(decodeURIComponent(match[1]));
	    if (match[2] || match[1] || url === '') this.search(match[3] || '');
	    this.hash(match[5] || '');
	
	    return this;
	  },
	
	  /**
	   * @ngdoc method
	   * @name $location#protocol
	   *
	   * @description
	   * This method is getter only.
	   *
	   * Return protocol of current URL.
	   *
	   *
	   * ```js
	   * // given URL http://example.com/#/some/path?foo=bar&baz=xoxo
	   * var protocol = $location.protocol();
	   * // => "http"
	   * ```
	   *
	   * @return {string} protocol of current URL
	   */
	  protocol: locationGetter('$$protocol'),
	
	  /**
	   * @ngdoc method
	   * @name $location#host
	   *
	   * @description
	   * This method is getter only.
	   *
	   * Return host of current URL.
	   *
	   * Note: compared to the non-angular version `location.host` which returns `hostname:port`, this returns the `hostname` portion only.
	   *
	   *
	   * ```js
	   * // given URL http://example.com/#/some/path?foo=bar&baz=xoxo
	   * var host = $location.host();
	   * // => "example.com"
	   *
	   * // given URL http://user:password@example.com:8080/#/some/path?foo=bar&baz=xoxo
	   * host = $location.host();
	   * // => "example.com"
	   * host = location.host;
	   * // => "example.com:8080"
	   * ```
	   *
	   * @return {string} host of current URL.
	   */
	  host: locationGetter('$$host'),
	
	  /**
	   * @ngdoc method
	   * @name $location#port
	   *
	   * @description
	   * This method is getter only.
	   *
	   * Return port of current URL.
	   *
	   *
	   * ```js
	   * // given URL http://example.com/#/some/path?foo=bar&baz=xoxo
	   * var port = $location.port();
	   * // => 80
	   * ```
	   *
	   * @return {Number} port
	   */
	  port: locationGetter('$$port'),
	
	  /**
	   * @ngdoc method
	   * @name $location#path
	   *
	   * @description
	   * This method is getter / setter.
	   *
	   * Return path of current URL when called without any parameter.
	   *
	   * Change path when called with parameter and return `$location`.
	   *
	   * Note: Path should always begin with forward slash (/), this method will add the forward slash
	   * if it is missing.
	   *
	   *
	   * ```js
	   * // given URL http://example.com/#/some/path?foo=bar&baz=xoxo
	   * var path = $location.path();
	   * // => "/some/path"
	   * ```
	   *
	   * @param {(string|number)=} path New path
	   * @return {(string|object)} path if called with no parameters, or `$location` if called with a parameter
	   */
	  path: locationGetterSetter('$$path', function(path) {
	    path = path !== null ? path.toString() : '';
	    return path.charAt(0) === '/' ? path : '/' + path;
	  }),
	
	  /**
	   * @ngdoc method
	   * @name $location#search
	   *
	   * @description
	   * This method is getter / setter.
	   *
	   * Return search part (as object) of current URL when called without any parameter.
	   *
	   * Change search part when called with parameter and return `$location`.
	   *
	   *
	   * ```js
	   * // given URL http://example.com/#/some/path?foo=bar&baz=xoxo
	   * var searchObject = $location.search();
	   * // => {foo: 'bar', baz: 'xoxo'}
	   *
	   * // set foo to 'yipee'
	   * $location.search('foo', 'yipee');
	   * // $location.search() => {foo: 'yipee', baz: 'xoxo'}
	   * ```
	   *
	   * @param {string|Object.<string>|Object.<Array.<string>>} search New search params - string or
	   * hash object.
	   *
	   * When called with a single argument the method acts as a setter, setting the `search` component
	   * of `$location` to the specified value.
	   *
	   * If the argument is a hash object containing an array of values, these values will be encoded
	   * as duplicate search parameters in the URL.
	   *
	   * @param {(string|Number|Array<string>|boolean)=} paramValue If `search` is a string or number, then `paramValue`
	   * will override only a single search property.
	   *
	   * If `paramValue` is an array, it will override the property of the `search` component of
	   * `$location` specified via the first argument.
	   *
	   * If `paramValue` is `null`, the property specified via the first argument will be deleted.
	   *
	   * If `paramValue` is `true`, the property specified via the first argument will be added with no
	   * value nor trailing equal sign.
	   *
	   * @return {Object} If called with no arguments returns the parsed `search` object. If called with
	   * one or more arguments returns `$location` object itself.
	   */
	  search: function(search, paramValue) {
	    switch (arguments.length) {
	      case 0:
	        return this.$$search;
	      case 1:
	        if (isString(search) || isNumber(search)) {
	          search = search.toString();
	          this.$$search = parseKeyValue(search);
	        } else if (isObject(search)) {
	          search = copy(search, {});
	          // remove object undefined or null properties
	          forEach(search, function(value, key) {
	            if (value == null) delete search[key];
	          });
	
	          this.$$search = search;
	        } else {
	          throw $locationMinErr('isrcharg',
	              'The first argument of the `$location#search()` call must be a string or an object.');
	        }
	        break;
	      default:
	        if (isUndefined(paramValue) || paramValue === null) {
	          delete this.$$search[search];
	        } else {
	          this.$$search[search] = paramValue;
	        }
	    }
	
	    this.$$compose();
	    return this;
	  },
	
	  /**
	   * @ngdoc method
	   * @name $location#hash
	   *
	   * @description
	   * This method is getter / setter.
	   *
	   * Returns the hash fragment when called without any parameters.
	   *
	   * Changes the hash fragment when called with a parameter and returns `$location`.
	   *
	   *
	   * ```js
	   * // given URL http://example.com/#/some/path?foo=bar&baz=xoxo#hashValue
	   * var hash = $location.hash();
	   * // => "hashValue"
	   * ```
	   *
	   * @param {(string|number)=} hash New hash fragment
	   * @return {string} hash
	   */
	  hash: locationGetterSetter('$$hash', function(hash) {
	    return hash !== null ? hash.toString() : '';
	  }),
	
	  /**
	   * @ngdoc method
	   * @name $location#replace
	   *
	   * @description
	   * If called, all changes to $location during the current `$digest` will replace the current history
	   * record, instead of adding a new one.
	   */
	  replace: function() {
	    this.$$replace = true;
	    return this;
	  }
	};
	
	forEach([LocationHashbangInHtml5Url, LocationHashbangUrl, LocationHtml5Url], function(Location) {
	  Location.prototype = Object.create(locationPrototype);
	
	  /**
	   * @ngdoc method
	   * @name $location#state
	   *
	   * @description
	   * This method is getter / setter.
	   *
	   * Return the history state object when called without any parameter.
	   *
	   * Change the history state object when called with one parameter and return `$location`.
	   * The state object is later passed to `pushState` or `replaceState`.
	   *
	   * NOTE: This method is supported only in HTML5 mode and only in browsers supporting
	   * the HTML5 History API (i.e. methods `pushState` and `replaceState`). If you need to support
	   * older browsers (like IE9 or Android < 4.0), don't use this method.
	   *
	   * @param {object=} state State object for pushState or replaceState
	   * @return {object} state
	   */
	  Location.prototype.state = function(state) {
	    if (!arguments.length) {
	      return this.$$state;
	    }
	
	    if (Location !== LocationHtml5Url || !this.$$html5) {
	      throw $locationMinErr('nostate', 'History API state support is available only ' +
	        'in HTML5 mode and only in browsers supporting HTML5 History API');
	    }
	    // The user might modify `stateObject` after invoking `$location.state(stateObject)`
	    // but we're changing the $$state reference to $browser.state() during the $digest
	    // so the modification window is narrow.
	    this.$$state = isUndefined(state) ? null : state;
	
	    return this;
	  };
	});
	
	
	function locationGetter(property) {
	  return /** @this */ function() {
	    return this[property];
	  };
	}
	
	
	function locationGetterSetter(property, preprocess) {
	  return /** @this */ function(value) {
	    if (isUndefined(value)) {
	      return this[property];
	    }
	
	    this[property] = preprocess(value);
	    this.$$compose();
	
	    return this;
	  };
	}
	
	
	/**
	 * @ngdoc service
	 * @name $location
	 *
	 * @requires $rootElement
	 *
	 * @description
	 * The $location service parses the URL in the browser address bar (based on the
	 * [window.location](https://developer.mozilla.org/en/window.location)) and makes the URL
	 * available to your application. Changes to the URL in the address bar are reflected into
	 * $location service and changes to $location are reflected into the browser address bar.
	 *
	 * **The $location service:**
	 *
	 * - Exposes the current URL in the browser address bar, so you can
	 *   - Watch and observe the URL.
	 *   - Change the URL.
	 * - Synchronizes the URL with the browser when the user
	 *   - Changes the address bar.
	 *   - Clicks the back or forward button (or clicks a History link).
	 *   - Clicks on a link.
	 * - Represents the URL object as a set of methods (protocol, host, port, path, search, hash).
	 *
	 * For more information see {@link guide/$location Developer Guide: Using $location}
	 */
	
	/**
	 * @ngdoc provider
	 * @name $locationProvider
	 * @this
	 *
	 * @description
	 * Use the `$locationProvider` to configure how the application deep linking paths are stored.
	 */
	function $LocationProvider() {
	  var hashPrefix = '!',
	      html5Mode = {
	        enabled: false,
	        requireBase: true,
	        rewriteLinks: true
	      };
	
	  /**
	   * @ngdoc method
	   * @name $locationProvider#hashPrefix
	   * @description
	   * The default value for the prefix is `'!'`.
	   * @param {string=} prefix Prefix for hash part (containing path and search)
	   * @returns {*} current value if used as getter or itself (chaining) if used as setter
	   */
	  this.hashPrefix = function(prefix) {
	    if (isDefined(prefix)) {
	      hashPrefix = prefix;
	      return this;
	    } else {
	      return hashPrefix;
	    }
	  };
	
	  /**
	   * @ngdoc method
	   * @name $locationProvider#html5Mode
	   * @description
	   * @param {(boolean|Object)=} mode If boolean, sets `html5Mode.enabled` to value.
	   *   If object, sets `enabled`, `requireBase` and `rewriteLinks` to respective values. Supported
	   *   properties:
	   *   - **enabled** – `{boolean}` – (default: false) If true, will rely on `history.pushState` to
	   *     change urls where supported. Will fall back to hash-prefixed paths in browsers that do not
	   *     support `pushState`.
	   *   - **requireBase** - `{boolean}` - (default: `true`) When html5Mode is enabled, specifies
	   *     whether or not a <base> tag is required to be present. If `enabled` and `requireBase` are
	   *     true, and a base tag is not present, an error will be thrown when `$location` is injected.
	   *     See the {@link guide/$location $location guide for more information}
	   *   - **rewriteLinks** - `{boolean|string}` - (default: `true`) When html5Mode is enabled,
	   *     enables/disables URL rewriting for relative links. If set to a string, URL rewriting will
	   *     only happen on links with an attribute that matches the given string. For example, if set
	   *     to `'internal-link'`, then the URL will only be rewritten for `<a internal-link>` links.
	   *     Note that [attribute name normalization](guide/directive#normalization) does not apply
	   *     here, so `'internalLink'` will **not** match `'internal-link'`.
	   *
	   * @returns {Object} html5Mode object if used as getter or itself (chaining) if used as setter
	   */
	  this.html5Mode = function(mode) {
	    if (isBoolean(mode)) {
	      html5Mode.enabled = mode;
	      return this;
	    } else if (isObject(mode)) {
	
	      if (isBoolean(mode.enabled)) {
	        html5Mode.enabled = mode.enabled;
	      }
	
	      if (isBoolean(mode.requireBase)) {
	        html5Mode.requireBase = mode.requireBase;
	      }
	
	      if (isBoolean(mode.rewriteLinks) || isString(mode.rewriteLinks)) {
	        html5Mode.rewriteLinks = mode.rewriteLinks;
	      }
	
	      return this;
	    } else {
	      return html5Mode;
	    }
	  };
	
	  /**
	   * @ngdoc event
	   * @name $location#$locationChangeStart
	   * @eventType broadcast on root scope
	   * @description
	   * Broadcasted before a URL will change.
	   *
	   * This change can be prevented by calling
	   * `preventDefault` method of the event. See {@link ng.$rootScope.Scope#$on} for more
	   * details about event object. Upon successful change
	   * {@link ng.$location#$locationChangeSuccess $locationChangeSuccess} is fired.
	   *
	   * The `newState` and `oldState` parameters may be defined only in HTML5 mode and when
	   * the browser supports the HTML5 History API.
	   *
	   * @param {Object} angularEvent Synthetic event object.
	   * @param {string} newUrl New URL
	   * @param {string=} oldUrl URL that was before it was changed.
	   * @param {string=} newState New history state object
	   * @param {string=} oldState History state object that was before it was changed.
	   */
	
	  /**
	   * @ngdoc event
	   * @name $location#$locationChangeSuccess
	   * @eventType broadcast on root scope
	   * @description
	   * Broadcasted after a URL was changed.
	   *
	   * The `newState` and `oldState` parameters may be defined only in HTML5 mode and when
	   * the browser supports the HTML5 History API.
	   *
	   * @param {Object} angularEvent Synthetic event object.
	   * @param {string} newUrl New URL
	   * @param {string=} oldUrl URL that was before it was changed.
	   * @param {string=} newState New history state object
	   * @param {string=} oldState History state object that was before it was changed.
	   */
	
	  this.$get = ['$rootScope', '$browser', '$sniffer', '$rootElement', '$window',
	      function($rootScope, $browser, $sniffer, $rootElement, $window) {
	    var $location,
	        LocationMode,
	        baseHref = $browser.baseHref(), // if base[href] is undefined, it defaults to ''
	        initialUrl = $browser.url(),
	        appBase;
	
	    if (html5Mode.enabled) {
	      if (!baseHref && html5Mode.requireBase) {
	        throw $locationMinErr('nobase',
	          '$location in HTML5 mode requires a <base> tag to be present!');
	      }
	      appBase = serverBase(initialUrl) + (baseHref || '/');
	      LocationMode = $sniffer.history ? LocationHtml5Url : LocationHashbangInHtml5Url;
	    } else {
	      appBase = stripHash(initialUrl);
	      LocationMode = LocationHashbangUrl;
	    }
	    var appBaseNoFile = stripFile(appBase);
	
	    $location = new LocationMode(appBase, appBaseNoFile, '#' + hashPrefix);
	    $location.$$parseLinkUrl(initialUrl, initialUrl);
	
	    $location.$$state = $browser.state();
	
	    var IGNORE_URI_REGEXP = /^\s*(javascript|mailto):/i;
	
	    function setBrowserUrlWithFallback(url, replace, state) {
	      var oldUrl = $location.url();
	      var oldState = $location.$$state;
	      try {
	        $browser.url(url, replace, state);
	
	        // Make sure $location.state() returns referentially identical (not just deeply equal)
	        // state object; this makes possible quick checking if the state changed in the digest
	        // loop. Checking deep equality would be too expensive.
	        $location.$$state = $browser.state();
	      } catch (e) {
	        // Restore old values if pushState fails
	        $location.url(oldUrl);
	        $location.$$state = oldState;
	
	        throw e;
	      }
	    }
	
	    $rootElement.on('click', function(event) {
	      var rewriteLinks = html5Mode.rewriteLinks;
	      // TODO(vojta): rewrite link when opening in new tab/window (in legacy browser)
	      // currently we open nice url link and redirect then
	
	      if (!rewriteLinks || event.ctrlKey || event.metaKey || event.shiftKey || event.which === 2 || event.button === 2) return;
	
	      var elm = jqLite(event.target);
	
	      // traverse the DOM up to find first A tag
	      while (nodeName_(elm[0]) !== 'a') {
	        // ignore rewriting if no A tag (reached root element, or no parent - removed from document)
	        if (elm[0] === $rootElement[0] || !(elm = elm.parent())[0]) return;
	      }
	
	      if (isString(rewriteLinks) && isUndefined(elm.attr(rewriteLinks))) return;
	
	      var absHref = elm.prop('href');
	      // get the actual href attribute - see
	      // http://msdn.microsoft.com/en-us/library/ie/dd347148(v=vs.85).aspx
	      var relHref = elm.attr('href') || elm.attr('xlink:href');
	
	      if (isObject(absHref) && absHref.toString() === '[object SVGAnimatedString]') {
	        // SVGAnimatedString.animVal should be identical to SVGAnimatedString.baseVal, unless during
	        // an animation.
	        absHref = urlResolve(absHref.animVal).href;
	      }
	
	      // Ignore when url is started with javascript: or mailto:
	      if (IGNORE_URI_REGEXP.test(absHref)) return;
	
	      if (absHref && !elm.attr('target') && !event.isDefaultPrevented()) {
	        if ($location.$$parseLinkUrl(absHref, relHref)) {
	          // We do a preventDefault for all urls that are part of the angular application,
	          // in html5mode and also without, so that we are able to abort navigation without
	          // getting double entries in the location history.
	          event.preventDefault();
	          // update location manually
	          if ($location.absUrl() !== $browser.url()) {
	            $rootScope.$apply();
	            // hack to work around FF6 bug 684208 when scenario runner clicks on links
	            $window.angular['ff-684208-preventDefault'] = true;
	          }
	        }
	      }
	    });
	
	
	    // rewrite hashbang url <> html5 url
	    if (trimEmptyHash($location.absUrl()) !== trimEmptyHash(initialUrl)) {
	      $browser.url($location.absUrl(), true);
	    }
	
	    var initializing = true;
	
	    // update $location when $browser url changes
	    $browser.onUrlChange(function(newUrl, newState) {
	
	      if (!startsWith(newUrl, appBaseNoFile)) {
	        // If we are navigating outside of the app then force a reload
	        $window.location.href = newUrl;
	        return;
	      }
	
	      $rootScope.$evalAsync(function() {
	        var oldUrl = $location.absUrl();
	        var oldState = $location.$$state;
	        var defaultPrevented;
	        newUrl = trimEmptyHash(newUrl);
	        $location.$$parse(newUrl);
	        $location.$$state = newState;
	
	        defaultPrevented = $rootScope.$broadcast('$locationChangeStart', newUrl, oldUrl,
	            newState, oldState).defaultPrevented;
	
	        // if the location was changed by a `$locationChangeStart` handler then stop
	        // processing this location change
	        if ($location.absUrl() !== newUrl) return;
	
	        if (defaultPrevented) {
	          $location.$$parse(oldUrl);
	          $location.$$state = oldState;
	          setBrowserUrlWithFallback(oldUrl, false, oldState);
	        } else {
	          initializing = false;
	          afterLocationChange(oldUrl, oldState);
	        }
	      });
	      if (!$rootScope.$$phase) $rootScope.$digest();
	    });
	
	    // update browser
	    $rootScope.$watch(function $locationWatch() {
	      var oldUrl = trimEmptyHash($browser.url());
	      var newUrl = trimEmptyHash($location.absUrl());
	      var oldState = $browser.state();
	      var currentReplace = $location.$$replace;
	      var urlOrStateChanged = oldUrl !== newUrl ||
	        ($location.$$html5 && $sniffer.history && oldState !== $location.$$state);
	
	      if (initializing || urlOrStateChanged) {
	        initializing = false;
	
	        $rootScope.$evalAsync(function() {
	          var newUrl = $location.absUrl();
	          var defaultPrevented = $rootScope.$broadcast('$locationChangeStart', newUrl, oldUrl,
	              $location.$$state, oldState).defaultPrevented;
	
	          // if the location was changed by a `$locationChangeStart` handler then stop
	          // processing this location change
	          if ($location.absUrl() !== newUrl) return;
	
	          if (defaultPrevented) {
	            $location.$$parse(oldUrl);
	            $location.$$state = oldState;
	          } else {
	            if (urlOrStateChanged) {
	              setBrowserUrlWithFallback(newUrl, currentReplace,
	                                        oldState === $location.$$state ? null : $location.$$state);
	            }
	            afterLocationChange(oldUrl, oldState);
	          }
	        });
	      }
	
	      $location.$$replace = false;
	
	      // we don't need to return anything because $evalAsync will make the digest loop dirty when
	      // there is a change
	    });
	
	    return $location;
	
	    function afterLocationChange(oldUrl, oldState) {
	      $rootScope.$broadcast('$locationChangeSuccess', $location.absUrl(), oldUrl,
	        $location.$$state, oldState);
	    }
	}];
	}
	
	/**
	 * @ngdoc service
	 * @name $log
	 * @requires $window
	 *
	 * @description
	 * Simple service for logging. Default implementation safely writes the message
	 * into the browser's console (if present).
	 *
	 * The main purpose of this service is to simplify debugging and troubleshooting.
	 *
	 * The default is to log `debug` messages. You can use
	 * {@link ng.$logProvider ng.$logProvider#debugEnabled} to change this.
	 *
	 * @example
	   <example module="logExample" name="log-service">
	     <file name="script.js">
	       angular.module('logExample', [])
	         .controller('LogController', ['$scope', '$log', function($scope, $log) {
	           $scope.$log = $log;
	           $scope.message = 'Hello World!';
	         }]);
	     </file>
	     <file name="index.html">
	       <div ng-controller="LogController">
	         <p>Reload this page with open console, enter text and hit the log button...</p>
	         <label>Message:
	         <input type="text" ng-model="message" /></label>
	         <button ng-click="$log.log(message)">log</button>
	         <button ng-click="$log.warn(message)">warn</button>
	         <button ng-click="$log.info(message)">info</button>
	         <button ng-click="$log.error(message)">error</button>
	         <button ng-click="$log.debug(message)">debug</button>
	       </div>
	     </file>
	   </example>
	 */
	
	/**
	 * @ngdoc provider
	 * @name $logProvider
	 * @this
	 *
	 * @description
	 * Use the `$logProvider` to configure how the application logs messages
	 */
	function $LogProvider() {
	  var debug = true,
	      self = this;
	
	  /**
	   * @ngdoc method
	   * @name $logProvider#debugEnabled
	   * @description
	   * @param {boolean=} flag enable or disable debug level messages
	   * @returns {*} current value if used as getter or itself (chaining) if used as setter
	   */
	  this.debugEnabled = function(flag) {
	    if (isDefined(flag)) {
	      debug = flag;
	    return this;
	    } else {
	      return debug;
	    }
	  };
	
	  this.$get = ['$window', function($window) {
	    return {
	      /**
	       * @ngdoc method
	       * @name $log#log
	       *
	       * @description
	       * Write a log message
	       */
	      log: consoleLog('log'),
	
	      /**
	       * @ngdoc method
	       * @name $log#info
	       *
	       * @description
	       * Write an information message
	       */
	      info: consoleLog('info'),
	
	      /**
	       * @ngdoc method
	       * @name $log#warn
	       *
	       * @description
	       * Write a warning message
	       */
	      warn: consoleLog('warn'),
	
	      /**
	       * @ngdoc method
	       * @name $log#error
	       *
	       * @description
	       * Write an error message
	       */
	      error: consoleLog('error'),
	
	      /**
	       * @ngdoc method
	       * @name $log#debug
	       *
	       * @description
	       * Write a debug message
	       */
	      debug: (function() {
	        var fn = consoleLog('debug');
	
	        return function() {
	          if (debug) {
	            fn.apply(self, arguments);
	          }
	        };
	      })()
	    };
	
	    function formatError(arg) {
	      if (arg instanceof Error) {
	        if (arg.stack) {
	          arg = (arg.message && arg.stack.indexOf(arg.message) === -1)
	              ? 'Error: ' + arg.message + '\n' + arg.stack
	              : arg.stack;
	        } else if (arg.sourceURL) {
	          arg = arg.message + '\n' + arg.sourceURL + ':' + arg.line;
	        }
	      }
	      return arg;
	    }
	
	    function consoleLog(type) {
	      var console = $window.console || {},
	          logFn = console[type] || console.log || noop,
	          hasApply = false;
	
	      // Note: reading logFn.apply throws an error in IE11 in IE8 document mode.
	      // The reason behind this is that console.log has type "object" in IE8...
	      try {
	        hasApply = !!logFn.apply;
	      } catch (e) { /* empty */ }
	
	      if (hasApply) {
	        return function() {
	          var args = [];
	          forEach(arguments, function(arg) {
	            args.push(formatError(arg));
	          });
	          return logFn.apply(console, args);
	        };
	      }
	
	      // we are IE which either doesn't have window.console => this is noop and we do nothing,
	      // or we are IE where console.log doesn't have apply so we log at least first 2 args
	      return function(arg1, arg2) {
	        logFn(arg1, arg2 == null ? '' : arg2);
	      };
	    }
	  }];
	}
	
	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 *     Any commits to this file should be reviewed with security in mind.  *
	 *   Changes to this file can potentially create security vulnerabilities. *
	 *          An approval from 2 Core members with history of modifying      *
	 *                         this file is required.                          *
	 *                                                                         *
	 *  Does the change somehow allow for arbitrary javascript to be executed? *
	 *    Or allows for someone to change the prototype of built-in objects?   *
	 *     Or gives undesired access to variables likes document or window?    *
	 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
	
	var $parseMinErr = minErr('$parse');
	
	var objectValueOf = {}.constructor.prototype.valueOf;
	
	// Sandboxing Angular Expressions
	// ------------------------------
	// Angular expressions are no longer sandboxed. So it is now even easier to access arbitrary JS code by
	// various means such as obtaining a reference to native JS functions like the Function constructor.
	//
	// As an example, consider the following Angular expression:
	//
	//   {}.toString.constructor('alert("evil JS code")')
	//
	// It is important to realize that if you create an expression from a string that contains user provided
	// content then it is possible that your application contains a security vulnerability to an XSS style attack.
	//
	// See https://docs.angularjs.org/guide/security
	
	
	function getStringValue(name) {
	  // Property names must be strings. This means that non-string objects cannot be used
	  // as keys in an object. Any non-string object, including a number, is typecasted
	  // into a string via the toString method.
	  // -- MDN, https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Property_accessors#Property_names
	  //
	  // So, to ensure that we are checking the same `name` that JavaScript would use, we cast it
	  // to a string. It's not always possible. If `name` is an object and its `toString` method is
	  // 'broken' (doesn't return a string, isn't a function, etc.), an error will be thrown:
	  //
	  // TypeError: Cannot convert object to primitive value
	  //
	  // For performance reasons, we don't catch this error here and allow it to propagate up the call
	  // stack. Note that you'll get the same error in JavaScript if you try to access a property using
	  // such a 'broken' object as a key.
	  return name + '';
	}
	
	
	var OPERATORS = createMap();
	forEach('+ - * / % === !== == != < > <= >= && || ! = |'.split(' '), function(operator) { OPERATORS[operator] = true; });
	var ESCAPE = {'n':'\n', 'f':'\f', 'r':'\r', 't':'\t', 'v':'\v', '\'':'\'', '"':'"'};
	
	
	/////////////////////////////////////////
	
	
	/**
	 * @constructor
	 */
	var Lexer = function Lexer(options) {
	  this.options = options;
	};
	
	Lexer.prototype = {
	  constructor: Lexer,
	
	  lex: function(text) {
	    this.text = text;
	    this.index = 0;
	    this.tokens = [];
	
	    while (this.index < this.text.length) {
	      var ch = this.text.charAt(this.index);
	      if (ch === '"' || ch === '\'') {
	        this.readString(ch);
	      } else if (this.isNumber(ch) || ch === '.' && this.isNumber(this.peek())) {
	        this.readNumber();
	      } else if (this.isIdentifierStart(this.peekMultichar())) {
	        this.readIdent();
	      } else if (this.is(ch, '(){}[].,;:?')) {
	        this.tokens.push({index: this.index, text: ch});
	        this.index++;
	      } else if (this.isWhitespace(ch)) {
	        this.index++;
	      } else {
	        var ch2 = ch + this.peek();
	        var ch3 = ch2 + this.peek(2);
	        var op1 = OPERATORS[ch];
	        var op2 = OPERATORS[ch2];
	        var op3 = OPERATORS[ch3];
	        if (op1 || op2 || op3) {
	          var token = op3 ? ch3 : (op2 ? ch2 : ch);
	          this.tokens.push({index: this.index, text: token, operator: true});
	          this.index += token.length;
	        } else {
	          this.throwError('Unexpected next character ', this.index, this.index + 1);
	        }
	      }
	    }
	    return this.tokens;
	  },
	
	  is: function(ch, chars) {
	    return chars.indexOf(ch) !== -1;
	  },
	
	  peek: function(i) {
	    var num = i || 1;
	    return (this.index + num < this.text.length) ? this.text.charAt(this.index + num) : false;
	  },
	
	  isNumber: function(ch) {
	    return ('0' <= ch && ch <= '9') && typeof ch === 'string';
	  },
	
	  isWhitespace: function(ch) {
	    // IE treats non-breaking space as \u00A0
	    return (ch === ' ' || ch === '\r' || ch === '\t' ||
	            ch === '\n' || ch === '\v' || ch === '\u00A0');
	  },
	
	  isIdentifierStart: function(ch) {
	    return this.options.isIdentifierStart ?
	        this.options.isIdentifierStart(ch, this.codePointAt(ch)) :
	        this.isValidIdentifierStart(ch);
	  },
	
	  isValidIdentifierStart: function(ch) {
	    return ('a' <= ch && ch <= 'z' ||
	            'A' <= ch && ch <= 'Z' ||
	            '_' === ch || ch === '$');
	  },
	
	  isIdentifierContinue: function(ch) {
	    return this.options.isIdentifierContinue ?
	        this.options.isIdentifierContinue(ch, this.codePointAt(ch)) :
	        this.isValidIdentifierContinue(ch);
	  },
	
	  isValidIdentifierContinue: function(ch, cp) {
	    return this.isValidIdentifierStart(ch, cp) || this.isNumber(ch);
	  },
	
	  codePointAt: function(ch) {
	    if (ch.length === 1) return ch.charCodeAt(0);
	    // eslint-disable-next-line no-bitwise
	    return (ch.charCodeAt(0) << 10) + ch.charCodeAt(1) - 0x35FDC00;
	  },
	
	  peekMultichar: function() {
	    var ch = this.text.charAt(this.index);
	    var peek = this.peek();
	    if (!peek) {
	      return ch;
	    }
	    var cp1 = ch.charCodeAt(0);
	    var cp2 = peek.charCodeAt(0);
	    if (cp1 >= 0xD800 && cp1 <= 0xDBFF && cp2 >= 0xDC00 && cp2 <= 0xDFFF) {
	      return ch + peek;
	    }
	    return ch;
	  },
	
	  isExpOperator: function(ch) {
	    return (ch === '-' || ch === '+' || this.isNumber(ch));
	  },
	
	  throwError: function(error, start, end) {
	    end = end || this.index;
	    var colStr = (isDefined(start)
	            ? 's ' + start +  '-' + this.index + ' [' + this.text.substring(start, end) + ']'
	            : ' ' + end);
	    throw $parseMinErr('lexerr', 'Lexer Error: {0} at column{1} in expression [{2}].',
	        error, colStr, this.text);
	  },
	
	  readNumber: function() {
	    var number = '';
	    var start = this.index;
	    while (this.index < this.text.length) {
	      var ch = lowercase(this.text.charAt(this.index));
	      if (ch === '.' || this.isNumber(ch)) {
	        number += ch;
	      } else {
	        var peekCh = this.peek();
	        if (ch === 'e' && this.isExpOperator(peekCh)) {
	          number += ch;
	        } else if (this.isExpOperator(ch) &&
	            peekCh && this.isNumber(peekCh) &&
	            number.charAt(number.length - 1) === 'e') {
	          number += ch;
	        } else if (this.isExpOperator(ch) &&
	            (!peekCh || !this.isNumber(peekCh)) &&
	            number.charAt(number.length - 1) === 'e') {
	          this.throwError('Invalid exponent');
	        } else {
	          break;
	        }
	      }
	      this.index++;
	    }
	    this.tokens.push({
	      index: start,
	      text: number,
	      constant: true,
	      value: Number(number)
	    });
	  },
	
	  readIdent: function() {
	    var start = this.index;
	    this.index += this.peekMultichar().length;
	    while (this.index < this.text.length) {
	      var ch = this.peekMultichar();
	      if (!this.isIdentifierContinue(ch)) {
	        break;
	      }
	      this.index += ch.length;
	    }
	    this.tokens.push({
	      index: start,
	      text: this.text.slice(start, this.index),
	      identifier: true
	    });
	  },
	
	  readString: function(quote) {
	    var start = this.index;
	    this.index++;
	    var string = '';
	    var rawString = quote;
	    var escape = false;
	    while (this.index < this.text.length) {
	      var ch = this.text.charAt(this.index);
	      rawString += ch;
	      if (escape) {
	        if (ch === 'u') {
	          var hex = this.text.substring(this.index + 1, this.index + 5);
	          if (!hex.match(/[\da-f]{4}/i)) {
	            this.throwError('Invalid unicode escape [\\u' + hex + ']');
	          }
	          this.index += 4;
	          string += String.fromCharCode(parseInt(hex, 16));
	        } else {
	          var rep = ESCAPE[ch];
	          string = string + (rep || ch);
	        }
	        escape = false;
	      } else if (ch === '\\') {
	        escape = true;
	      } else if (ch === quote) {
	        this.index++;
	        this.tokens.push({
	          index: start,
	          text: rawString,
	          constant: true,
	          value: string
	        });
	        return;
	      } else {
	        string += ch;
	      }
	      this.index++;
	    }
	    this.throwError('Unterminated quote', start);
	  }
	};
	
	var AST = function AST(lexer, options) {
	  this.lexer = lexer;
	  this.options = options;
	};
	
	AST.Program = 'Program';
	AST.ExpressionStatement = 'ExpressionStatement';
	AST.AssignmentExpression = 'AssignmentExpression';
	AST.ConditionalExpression = 'ConditionalExpression';
	AST.LogicalExpression = 'LogicalExpression';
	AST.BinaryExpression = 'BinaryExpression';
	AST.UnaryExpression = 'UnaryExpression';
	AST.CallExpression = 'CallExpression';
	AST.MemberExpression = 'MemberExpression';
	AST.Identifier = 'Identifier';
	AST.Literal = 'Literal';
	AST.ArrayExpression = 'ArrayExpression';
	AST.Property = 'Property';
	AST.ObjectExpression = 'ObjectExpression';
	AST.ThisExpression = 'ThisExpression';
	AST.LocalsExpression = 'LocalsExpression';
	
	// Internal use only
	AST.NGValueParameter = 'NGValueParameter';
	
	AST.prototype = {
	  ast: function(text) {
	    this.text = text;
	    this.tokens = this.lexer.lex(text);
	
	    var value = this.program();
	
	    if (this.tokens.length !== 0) {
	      this.throwError('is an unexpected token', this.tokens[0]);
	    }
	
	    return value;
	  },
	
	  program: function() {
	    var body = [];
	    while (true) {
	      if (this.tokens.length > 0 && !this.peek('}', ')', ';', ']'))
	        body.push(this.expressionStatement());
	      if (!this.expect(';')) {
	        return { type: AST.Program, body: body};
	      }
	    }
	  },
	
	  expressionStatement: function() {
	    return { type: AST.ExpressionStatement, expression: this.filterChain() };
	  },
	
	  filterChain: function() {
	    var left = this.expression();
	    while (this.expect('|')) {
	      left = this.filter(left);
	    }
	    return left;
	  },
	
	  expression: function() {
	    return this.assignment();
	  },
	
	  assignment: function() {
	    var result = this.ternary();
	    if (this.expect('=')) {
	      if (!isAssignable(result)) {
	        throw $parseMinErr('lval', 'Trying to assign a value to a non l-value');
	      }
	
	      result = { type: AST.AssignmentExpression, left: result, right: this.assignment(), operator: '='};
	    }
	    return result;
	  },
	
	  ternary: function() {
	    var test = this.logicalOR();
	    var alternate;
	    var consequent;
	    if (this.expect('?')) {
	      alternate = this.expression();
	      if (this.consume(':')) {
	        consequent = this.expression();
	        return { type: AST.ConditionalExpression, test: test, alternate: alternate, consequent: consequent};
	      }
	    }
	    return test;
	  },
	
	  logicalOR: function() {
	    var left = this.logicalAND();
	    while (this.expect('||')) {
	      left = { type: AST.LogicalExpression, operator: '||', left: left, right: this.logicalAND() };
	    }
	    return left;
	  },
	
	  logicalAND: function() {
	    var left = this.equality();
	    while (this.expect('&&')) {
	      left = { type: AST.LogicalExpression, operator: '&&', left: left, right: this.equality()};
	    }
	    return left;
	  },
	
	  equality: function() {
	    var left = this.relational();
	    var token;
	    while ((token = this.expect('==','!=','===','!=='))) {
	      left = { type: AST.BinaryExpression, operator: token.text, left: left, right: this.relational() };
	    }
	    return left;
	  },
	
	  relational: function() {
	    var left = this.additive();
	    var token;
	    while ((token = this.expect('<', '>', '<=', '>='))) {
	      left = { type: AST.BinaryExpression, operator: token.text, left: left, right: this.additive() };
	    }
	    return left;
	  },
	
	  additive: function() {
	    var left = this.multiplicative();
	    var token;
	    while ((token = this.expect('+','-'))) {
	      left = { type: AST.BinaryExpression, operator: token.text, left: left, right: this.multiplicative() };
	    }
	    return left;
	  },
	
	  multiplicative: function() {
	    var left = this.unary();
	    var token;
	    while ((token = this.expect('*','/','%'))) {
	      left = { type: AST.BinaryExpression, operator: token.text, left: left, right: this.unary() };
	    }
	    return left;
	  },
	
	  unary: function() {
	    var token;
	    if ((token = this.expect('+', '-', '!'))) {
	      return { type: AST.UnaryExpression, operator: token.text, prefix: true, argument: this.unary() };
	    } else {
	      return this.primary();
	    }
	  },
	
	  primary: function() {
	    var primary;
	    if (this.expect('(')) {
	      primary = this.filterChain();
	      this.consume(')');
	    } else if (this.expect('[')) {
	      primary = this.arrayDeclaration();
	    } else if (this.expect('{')) {
	      primary = this.object();
	    } else if (this.selfReferential.hasOwnProperty(this.peek().text)) {
	      primary = copy(this.selfReferential[this.consume().text]);
	    } else if (this.options.literals.hasOwnProperty(this.peek().text)) {
	      primary = { type: AST.Literal, value: this.options.literals[this.consume().text]};
	    } else if (this.peek().identifier) {
	      primary = this.identifier();
	    } else if (this.peek().constant) {
	      primary = this.constant();
	    } else {
	      this.throwError('not a primary expression', this.peek());
	    }
	
	    var next;
	    while ((next = this.expect('(', '[', '.'))) {
	      if (next.text === '(') {
	        primary = {type: AST.CallExpression, callee: primary, arguments: this.parseArguments() };
	        this.consume(')');
	      } else if (next.text === '[') {
	        primary = { type: AST.MemberExpression, object: primary, property: this.expression(), computed: true };
	        this.consume(']');
	      } else if (next.text === '.') {
	        primary = { type: AST.MemberExpression, object: primary, property: this.identifier(), computed: false };
	      } else {
	        this.throwError('IMPOSSIBLE');
	      }
	    }
	    return primary;
	  },
	
	  filter: function(baseExpression) {
	    var args = [baseExpression];
	    var result = {type: AST.CallExpression, callee: this.identifier(), arguments: args, filter: true};
	
	    while (this.expect(':')) {
	      args.push(this.expression());
	    }
	
	    return result;
	  },
	
	  parseArguments: function() {
	    var args = [];
	    if (this.peekToken().text !== ')') {
	      do {
	        args.push(this.filterChain());
	      } while (this.expect(','));
	    }
	    return args;
	  },
	
	  identifier: function() {
	    var token = this.consume();
	    if (!token.identifier) {
	      this.throwError('is not a valid identifier', token);
	    }
	    return { type: AST.Identifier, name: token.text };
	  },
	
	  constant: function() {
	    // TODO check that it is a constant
	    return { type: AST.Literal, value: this.consume().value };
	  },
	
	  arrayDeclaration: function() {
	    var elements = [];
	    if (this.peekToken().text !== ']') {
	      do {
	        if (this.peek(']')) {
	          // Support trailing commas per ES5.1.
	          break;
	        }
	        elements.push(this.expression());
	      } while (this.expect(','));
	    }
	    this.consume(']');
	
	    return { type: AST.ArrayExpression, elements: elements };
	  },
	
	  object: function() {
	    var properties = [], property;
	    if (this.peekToken().text !== '}') {
	      do {
	        if (this.peek('}')) {
	          // Support trailing commas per ES5.1.
	          break;
	        }
	        property = {type: AST.Property, kind: 'init'};
	        if (this.peek().constant) {
	          property.key = this.constant();
	          property.computed = false;
	          this.consume(':');
	          property.value = this.expression();
	        } else if (this.peek().identifier) {
	          property.key = this.identifier();
	          property.computed = false;
	          if (this.peek(':')) {
	            this.consume(':');
	            property.value = this.expression();
	          } else {
	            property.value = property.key;
	          }
	        } else if (this.peek('[')) {
	          this.consume('[');
	          property.key = this.expression();
	          this.consume(']');
	          property.computed = true;
	          this.consume(':');
	          property.value = this.expression();
	        } else {
	          this.throwError('invalid key', this.peek());
	        }
	        properties.push(property);
	      } while (this.expect(','));
	    }
	    this.consume('}');
	
	    return {type: AST.ObjectExpression, properties: properties };
	  },
	
	  throwError: function(msg, token) {
	    throw $parseMinErr('syntax',
	        'Syntax Error: Token \'{0}\' {1} at column {2} of the expression [{3}] starting at [{4}].',
	          token.text, msg, (token.index + 1), this.text, this.text.substring(token.index));
	  },
	
	  consume: function(e1) {
	    if (this.tokens.length === 0) {
	      throw $parseMinErr('ueoe', 'Unexpected end of expression: {0}', this.text);
	    }
	
	    var token = this.expect(e1);
	    if (!token) {
	      this.throwError('is unexpected, expecting [' + e1 + ']', this.peek());
	    }
	    return token;
	  },
	
	  peekToken: function() {
	    if (this.tokens.length === 0) {
	      throw $parseMinErr('ueoe', 'Unexpected end of expression: {0}', this.text);
	    }
	    return this.tokens[0];
	  },
	
	  peek: function(e1, e2, e3, e4) {
	    return this.peekAhead(0, e1, e2, e3, e4);
	  },
	
	  peekAhead: function(i, e1, e2, e3, e4) {
	    if (this.tokens.length > i) {
	      var token = this.tokens[i];
	      var t = token.text;
	      if (t === e1 || t === e2 || t === e3 || t === e4 ||
	          (!e1 && !e2 && !e3 && !e4)) {
	        return token;
	      }
	    }
	    return false;
	  },
	
	  expect: function(e1, e2, e3, e4) {
	    var token = this.peek(e1, e2, e3, e4);
	    if (token) {
	      this.tokens.shift();
	      return token;
	    }
	    return false;
	  },
	
	  selfReferential: {
	    'this': {type: AST.ThisExpression },
	    '$locals': {type: AST.LocalsExpression }
	  }
	};
	
	function ifDefined(v, d) {
	  return typeof v !== 'undefined' ? v : d;
	}
	
	function plusFn(l, r) {
	  if (typeof l === 'undefined') return r;
	  if (typeof r === 'undefined') return l;
	  return l + r;
	}
	
	function isStateless($filter, filterName) {
	  var fn = $filter(filterName);
	  return !fn.$stateful;
	}
	
	function findConstantAndWatchExpressions(ast, $filter) {
	  var allConstants;
	  var argsToWatch;
	  var isStatelessFilter;
	  switch (ast.type) {
	  case AST.Program:
	    allConstants = true;
	    forEach(ast.body, function(expr) {
	      findConstantAndWatchExpressions(expr.expression, $filter);
	      allConstants = allConstants && expr.expression.constant;
	    });
	    ast.constant = allConstants;
	    break;
	  case AST.Literal:
	    ast.constant = true;
	    ast.toWatch = [];
	    break;
	  case AST.UnaryExpression:
	    findConstantAndWatchExpressions(ast.argument, $filter);
	    ast.constant = ast.argument.constant;
	    ast.toWatch = ast.argument.toWatch;
	    break;
	  case AST.BinaryExpression:
	    findConstantAndWatchExpressions(ast.left, $filter);
	    findConstantAndWatchExpressions(ast.right, $filter);
	    ast.constant = ast.left.constant && ast.right.constant;
	    ast.toWatch = ast.left.toWatch.concat(ast.right.toWatch);
	    break;
	  case AST.LogicalExpression:
	    findConstantAndWatchExpressions(ast.left, $filter);
	    findConstantAndWatchExpressions(ast.right, $filter);
	    ast.constant = ast.left.constant && ast.right.constant;
	    ast.toWatch = ast.constant ? [] : [ast];
	    break;
	  case AST.ConditionalExpression:
	    findConstantAndWatchExpressions(ast.test, $filter);
	    findConstantAndWatchExpressions(ast.alternate, $filter);
	    findConstantAndWatchExpressions(ast.consequent, $filter);
	    ast.constant = ast.test.constant && ast.alternate.constant && ast.consequent.constant;
	    ast.toWatch = ast.constant ? [] : [ast];
	    break;
	  case AST.Identifier:
	    ast.constant = false;
	    ast.toWatch = [ast];
	    break;
	  case AST.MemberExpression:
	    findConstantAndWatchExpressions(ast.object, $filter);
	    if (ast.computed) {
	      findConstantAndWatchExpressions(ast.property, $filter);
	    }
	    ast.constant = ast.object.constant && (!ast.computed || ast.property.constant);
	    ast.toWatch = [ast];
	    break;
	  case AST.CallExpression:
	    isStatelessFilter = ast.filter ? isStateless($filter, ast.callee.name) : false;
	    allConstants = isStatelessFilter;
	    argsToWatch = [];
	    forEach(ast.arguments, function(expr) {
	      findConstantAndWatchExpressions(expr, $filter);
	      allConstants = allConstants && expr.constant;
	      if (!expr.constant) {
	        argsToWatch.push.apply(argsToWatch, expr.toWatch);
	      }
	    });
	    ast.constant = allConstants;
	    ast.toWatch = isStatelessFilter ? argsToWatch : [ast];
	    break;
	  case AST.AssignmentExpression:
	    findConstantAndWatchExpressions(ast.left, $filter);
	    findConstantAndWatchExpressions(ast.right, $filter);
	    ast.constant = ast.left.constant && ast.right.constant;
	    ast.toWatch = [ast];
	    break;
	  case AST.ArrayExpression:
	    allConstants = true;
	    argsToWatch = [];
	    forEach(ast.elements, function(expr) {
	      findConstantAndWatchExpressions(expr, $filter);
	      allConstants = allConstants && expr.constant;
	      if (!expr.constant) {
	        argsToWatch.push.apply(argsToWatch, expr.toWatch);
	      }
	    });
	    ast.constant = allConstants;
	    ast.toWatch = argsToWatch;
	    break;
	  case AST.ObjectExpression:
	    allConstants = true;
	    argsToWatch = [];
	    forEach(ast.properties, function(property) {
	      findConstantAndWatchExpressions(property.value, $filter);
	      allConstants = allConstants && property.value.constant && !property.computed;
	      if (!property.value.constant) {
	        argsToWatch.push.apply(argsToWatch, property.value.toWatch);
	      }
	    });
	    ast.constant = allConstants;
	    ast.toWatch = argsToWatch;
	    break;
	  case AST.ThisExpression:
	    ast.constant = false;
	    ast.toWatch = [];
	    break;
	  case AST.LocalsExpression:
	    ast.constant = false;
	    ast.toWatch = [];
	    break;
	  }
	}
	
	function getInputs(body) {
	  if (body.length !== 1) return;
	  var lastExpression = body[0].expression;
	  var candidate = lastExpression.toWatch;
	  if (candidate.length !== 1) return candidate;
	  return candidate[0] !== lastExpression ? candidate : undefined;
	}
	
	function isAssignable(ast) {
	  return ast.type === AST.Identifier || ast.type === AST.MemberExpression;
	}
	
	function assignableAST(ast) {
	  if (ast.body.length === 1 && isAssignable(ast.body[0].expression)) {
	    return {type: AST.AssignmentExpression, left: ast.body[0].expression, right: {type: AST.NGValueParameter}, operator: '='};
	  }
	}
	
	function isLiteral(ast) {
	  return ast.body.length === 0 ||
	      ast.body.length === 1 && (
	      ast.body[0].expression.type === AST.Literal ||
	      ast.body[0].expression.type === AST.ArrayExpression ||
	      ast.body[0].expression.type === AST.ObjectExpression);
	}
	
	function isConstant(ast) {
	  return ast.constant;
	}
	
	function ASTCompiler(astBuilder, $filter) {
	  this.astBuilder = astBuilder;
	  this.$filter = $filter;
	}
	
	ASTCompiler.prototype = {
	  compile: function(expression) {
	    var self = this;
	    var ast = this.astBuilder.ast(expression);
	    this.state = {
	      nextId: 0,
	      filters: {},
	      fn: {vars: [], body: [], own: {}},
	      assign: {vars: [], body: [], own: {}},
	      inputs: []
	    };
	    findConstantAndWatchExpressions(ast, self.$filter);
	    var extra = '';
	    var assignable;
	    this.stage = 'assign';
	    if ((assignable = assignableAST(ast))) {
	      this.state.computing = 'assign';
	      var result = this.nextId();
	      this.recurse(assignable, result);
	      this.return_(result);
	      extra = 'fn.assign=' + this.generateFunction('assign', 's,v,l');
	    }
	    var toWatch = getInputs(ast.body);
	    self.stage = 'inputs';
	    forEach(toWatch, function(watch, key) {
	      var fnKey = 'fn' + key;
	      self.state[fnKey] = {vars: [], body: [], own: {}};
	      self.state.computing = fnKey;
	      var intoId = self.nextId();
	      self.recurse(watch, intoId);
	      self.return_(intoId);
	      self.state.inputs.push(fnKey);
	      watch.watchId = key;
	    });
	    this.state.computing = 'fn';
	    this.stage = 'main';
	    this.recurse(ast);
	    var fnString =
	      // The build and minification steps remove the string "use strict" from the code, but this is done using a regex.
	      // This is a workaround for this until we do a better job at only removing the prefix only when we should.
	      '"' + this.USE + ' ' + this.STRICT + '";\n' +
	      this.filterPrefix() +
	      'var fn=' + this.generateFunction('fn', 's,l,a,i') +
	      extra +
	      this.watchFns() +
	      'return fn;';
	
	    // eslint-disable-next-line no-new-func
	    var fn = (new Function('$filter',
	        'getStringValue',
	        'ifDefined',
	        'plus',
	        fnString))(
	          this.$filter,
	          getStringValue,
	          ifDefined,
	          plusFn);
	    this.state = this.stage = undefined;
	    fn.literal = isLiteral(ast);
	    fn.constant = isConstant(ast);
	    return fn;
	  },
	
	  USE: 'use',
	
	  STRICT: 'strict',
	
	  watchFns: function() {
	    var result = [];
	    var fns = this.state.inputs;
	    var self = this;
	    forEach(fns, function(name) {
	      result.push('var ' + name + '=' + self.generateFunction(name, 's'));
	    });
	    if (fns.length) {
	      result.push('fn.inputs=[' + fns.join(',') + '];');
	    }
	    return result.join('');
	  },
	
	  generateFunction: function(name, params) {
	    return 'function(' + params + '){' +
	        this.varsPrefix(name) +
	        this.body(name) +
	        '};';
	  },
	
	  filterPrefix: function() {
	    var parts = [];
	    var self = this;
	    forEach(this.state.filters, function(id, filter) {
	      parts.push(id + '=$filter(' + self.escape(filter) + ')');
	    });
	    if (parts.length) return 'var ' + parts.join(',') + ';';
	    return '';
	  },
	
	  varsPrefix: function(section) {
	    return this.state[section].vars.length ? 'var ' + this.state[section].vars.join(',') + ';' : '';
	  },
	
	  body: function(section) {
	    return this.state[section].body.join('');
	  },
	
	  recurse: function(ast, intoId, nameId, recursionFn, create, skipWatchIdCheck) {
	    var left, right, self = this, args, expression, computed;
	    recursionFn = recursionFn || noop;
	    if (!skipWatchIdCheck && isDefined(ast.watchId)) {
	      intoId = intoId || this.nextId();
	      this.if_('i',
	        this.lazyAssign(intoId, this.computedMember('i', ast.watchId)),
	        this.lazyRecurse(ast, intoId, nameId, recursionFn, create, true)
	      );
	      return;
	    }
	    switch (ast.type) {
	    case AST.Program:
	      forEach(ast.body, function(expression, pos) {
	        self.recurse(expression.expression, undefined, undefined, function(expr) { right = expr; });
	        if (pos !== ast.body.length - 1) {
	          self.current().body.push(right, ';');
	        } else {
	          self.return_(right);
	        }
	      });
	      break;
	    case AST.Literal:
	      expression = this.escape(ast.value);
	      this.assign(intoId, expression);
	      recursionFn(intoId || expression);
	      break;
	    case AST.UnaryExpression:
	      this.recurse(ast.argument, undefined, undefined, function(expr) { right = expr; });
	      expression = ast.operator + '(' + this.ifDefined(right, 0) + ')';
	      this.assign(intoId, expression);
	      recursionFn(expression);
	      break;
	    case AST.BinaryExpression:
	      this.recurse(ast.left, undefined, undefined, function(expr) { left = expr; });
	      this.recurse(ast.right, undefined, undefined, function(expr) { right = expr; });
	      if (ast.operator === '+') {
	        expression = this.plus(left, right);
	      } else if (ast.operator === '-') {
	        expression = this.ifDefined(left, 0) + ast.operator + this.ifDefined(right, 0);
	      } else {
	        expression = '(' + left + ')' + ast.operator + '(' + right + ')';
	      }
	      this.assign(intoId, expression);
	      recursionFn(expression);
	      break;
	    case AST.LogicalExpression:
	      intoId = intoId || this.nextId();
	      self.recurse(ast.left, intoId);
	      self.if_(ast.operator === '&&' ? intoId : self.not(intoId), self.lazyRecurse(ast.right, intoId));
	      recursionFn(intoId);
	      break;
	    case AST.ConditionalExpression:
	      intoId = intoId || this.nextId();
	      self.recurse(ast.test, intoId);
	      self.if_(intoId, self.lazyRecurse(ast.alternate, intoId), self.lazyRecurse(ast.consequent, intoId));
	      recursionFn(intoId);
	      break;
	    case AST.Identifier:
	      intoId = intoId || this.nextId();
	      if (nameId) {
	        nameId.context = self.stage === 'inputs' ? 's' : this.assign(this.nextId(), this.getHasOwnProperty('l', ast.name) + '?l:s');
	        nameId.computed = false;
	        nameId.name = ast.name;
	      }
	      self.if_(self.stage === 'inputs' || self.not(self.getHasOwnProperty('l', ast.name)),
	        function() {
	          self.if_(self.stage === 'inputs' || 's', function() {
	            if (create && create !== 1) {
	              self.if_(
	                self.isNull(self.nonComputedMember('s', ast.name)),
	                self.lazyAssign(self.nonComputedMember('s', ast.name), '{}'));
	            }
	            self.assign(intoId, self.nonComputedMember('s', ast.name));
	          });
	        }, intoId && self.lazyAssign(intoId, self.nonComputedMember('l', ast.name))
	        );
	      recursionFn(intoId);
	      break;
	    case AST.MemberExpression:
	      left = nameId && (nameId.context = this.nextId()) || this.nextId();
	      intoId = intoId || this.nextId();
	      self.recurse(ast.object, left, undefined, function() {
	        self.if_(self.notNull(left), function() {
	          if (ast.computed) {
	            right = self.nextId();
	            self.recurse(ast.property, right);
	            self.getStringValue(right);
	            if (create && create !== 1) {
	              self.if_(self.not(self.computedMember(left, right)), self.lazyAssign(self.computedMember(left, right), '{}'));
	            }
	            expression = self.computedMember(left, right);
	            self.assign(intoId, expression);
	            if (nameId) {
	              nameId.computed = true;
	              nameId.name = right;
	            }
	          } else {
	            if (create && create !== 1) {
	              self.if_(self.isNull(self.nonComputedMember(left, ast.property.name)), self.lazyAssign(self.nonComputedMember(left, ast.property.name), '{}'));
	            }
	            expression = self.nonComputedMember(left, ast.property.name);
	            self.assign(intoId, expression);
	            if (nameId) {
	              nameId.computed = false;
	              nameId.name = ast.property.name;
	            }
	          }
	        }, function() {
	          self.assign(intoId, 'undefined');
	        });
	        recursionFn(intoId);
	      }, !!create);
	      break;
	    case AST.CallExpression:
	      intoId = intoId || this.nextId();
	      if (ast.filter) {
	        right = self.filter(ast.callee.name);
	        args = [];
	        forEach(ast.arguments, function(expr) {
	          var argument = self.nextId();
	          self.recurse(expr, argument);
	          args.push(argument);
	        });
	        expression = right + '(' + args.join(',') + ')';
	        self.assign(intoId, expression);
	        recursionFn(intoId);
	      } else {
	        right = self.nextId();
	        left = {};
	        args = [];
	        self.recurse(ast.callee, right, left, function() {
	          self.if_(self.notNull(right), function() {
	            forEach(ast.arguments, function(expr) {
	              self.recurse(expr, ast.constant ? undefined : self.nextId(), undefined, function(argument) {
	                args.push(argument);
	              });
	            });
	            if (left.name) {
	              expression = self.member(left.context, left.name, left.computed) + '(' + args.join(',') + ')';
	            } else {
	              expression = right + '(' + args.join(',') + ')';
	            }
	            self.assign(intoId, expression);
	          }, function() {
	            self.assign(intoId, 'undefined');
	          });
	          recursionFn(intoId);
	        });
	      }
	      break;
	    case AST.AssignmentExpression:
	      right = this.nextId();
	      left = {};
	      this.recurse(ast.left, undefined, left, function() {
	        self.if_(self.notNull(left.context), function() {
	          self.recurse(ast.right, right);
	          expression = self.member(left.context, left.name, left.computed) + ast.operator + right;
	          self.assign(intoId, expression);
	          recursionFn(intoId || expression);
	        });
	      }, 1);
	      break;
	    case AST.ArrayExpression:
	      args = [];
	      forEach(ast.elements, function(expr) {
	        self.recurse(expr, ast.constant ? undefined : self.nextId(), undefined, function(argument) {
	          args.push(argument);
	        });
	      });
	      expression = '[' + args.join(',') + ']';
	      this.assign(intoId, expression);
	      recursionFn(intoId || expression);
	      break;
	    case AST.ObjectExpression:
	      args = [];
	      computed = false;
	      forEach(ast.properties, function(property) {
	        if (property.computed) {
	          computed = true;
	        }
	      });
	      if (computed) {
	        intoId = intoId || this.nextId();
	        this.assign(intoId, '{}');
	        forEach(ast.properties, function(property) {
	          if (property.computed) {
	            left = self.nextId();
	            self.recurse(property.key, left);
	          } else {
	            left = property.key.type === AST.Identifier ?
	                       property.key.name :
	                       ('' + property.key.value);
	          }
	          right = self.nextId();
	          self.recurse(property.value, right);
	          self.assign(self.member(intoId, left, property.computed), right);
	        });
	      } else {
	        forEach(ast.properties, function(property) {
	          self.recurse(property.value, ast.constant ? undefined : self.nextId(), undefined, function(expr) {
	            args.push(self.escape(
	                property.key.type === AST.Identifier ? property.key.name :
	                  ('' + property.key.value)) +
	                ':' + expr);
	          });
	        });
	        expression = '{' + args.join(',') + '}';
	        this.assign(intoId, expression);
	      }
	      recursionFn(intoId || expression);
	      break;
	    case AST.ThisExpression:
	      this.assign(intoId, 's');
	      recursionFn(intoId || 's');
	      break;
	    case AST.LocalsExpression:
	      this.assign(intoId, 'l');
	      recursionFn(intoId || 'l');
	      break;
	    case AST.NGValueParameter:
	      this.assign(intoId, 'v');
	      recursionFn(intoId || 'v');
	      break;
	    }
	  },
	
	  getHasOwnProperty: function(element, property) {
	    var key = element + '.' + property;
	    var own = this.current().own;
	    if (!own.hasOwnProperty(key)) {
	      own[key] = this.nextId(false, element + '&&(' + this.escape(property) + ' in ' + element + ')');
	    }
	    return own[key];
	  },
	
	  assign: function(id, value) {
	    if (!id) return;
	    this.current().body.push(id, '=', value, ';');
	    return id;
	  },
	
	  filter: function(filterName) {
	    if (!this.state.filters.hasOwnProperty(filterName)) {
	      this.state.filters[filterName] = this.nextId(true);
	    }
	    return this.state.filters[filterName];
	  },
	
	  ifDefined: function(id, defaultValue) {
	    return 'ifDefined(' + id + ',' + this.escape(defaultValue) + ')';
	  },
	
	  plus: function(left, right) {
	    return 'plus(' + left + ',' + right + ')';
	  },
	
	  return_: function(id) {
	    this.current().body.push('return ', id, ';');
	  },
	
	  if_: function(test, alternate, consequent) {
	    if (test === true) {
	      alternate();
	    } else {
	      var body = this.current().body;
	      body.push('if(', test, '){');
	      alternate();
	      body.push('}');
	      if (consequent) {
	        body.push('else{');
	        consequent();
	        body.push('}');
	      }
	    }
	  },
	
	  not: function(expression) {
	    return '!(' + expression + ')';
	  },
	
	  isNull: function(expression) {
	    return expression + '==null';
	  },
	
	  notNull: function(expression) {
	    return expression + '!=null';
	  },
	
	  nonComputedMember: function(left, right) {
	    var SAFE_IDENTIFIER = /^[$_a-zA-Z][$_a-zA-Z0-9]*$/;
	    var UNSAFE_CHARACTERS = /[^$_a-zA-Z0-9]/g;
	    if (SAFE_IDENTIFIER.test(right)) {
	      return left + '.' + right;
	    } else {
	      return left  + '["' + right.replace(UNSAFE_CHARACTERS, this.stringEscapeFn) + '"]';
	    }
	  },
	
	  computedMember: function(left, right) {
	    return left + '[' + right + ']';
	  },
	
	  member: function(left, right, computed) {
	    if (computed) return this.computedMember(left, right);
	    return this.nonComputedMember(left, right);
	  },
	
	  getStringValue: function(item) {
	    this.assign(item, 'getStringValue(' + item + ')');
	  },
	
	  lazyRecurse: function(ast, intoId, nameId, recursionFn, create, skipWatchIdCheck) {
	    var self = this;
	    return function() {
	      self.recurse(ast, intoId, nameId, recursionFn, create, skipWatchIdCheck);
	    };
	  },
	
	  lazyAssign: function(id, value) {
	    var self = this;
	    return function() {
	      self.assign(id, value);
	    };
	  },
	
	  stringEscapeRegex: /[^ a-zA-Z0-9]/g,
	
	  stringEscapeFn: function(c) {
	    return '\\u' + ('0000' + c.charCodeAt(0).toString(16)).slice(-4);
	  },
	
	  escape: function(value) {
	    if (isString(value)) return '\'' + value.replace(this.stringEscapeRegex, this.stringEscapeFn) + '\'';
	    if (isNumber(value)) return value.toString();
	    if (value === true) return 'true';
	    if (value === false) return 'false';
	    if (value === null) return 'null';
	    if (typeof value === 'undefined') return 'undefined';
	
	    throw $parseMinErr('esc', 'IMPOSSIBLE');
	  },
	
	  nextId: function(skip, init) {
	    var id = 'v' + (this.state.nextId++);
	    if (!skip) {
	      this.current().vars.push(id + (init ? '=' + init : ''));
	    }
	    return id;
	  },
	
	  current: function() {
	    return this.state[this.state.computing];
	  }
	};
	
	
	function ASTInterpreter(astBuilder, $filter) {
	  this.astBuilder = astBuilder;
	  this.$filter = $filter;
	}
	
	ASTInterpreter.prototype = {
	  compile: function(expression) {
	    var self = this;
	    var ast = this.astBuilder.ast(expression);
	    findConstantAndWatchExpressions(ast, self.$filter);
	    var assignable;
	    var assign;
	    if ((assignable = assignableAST(ast))) {
	      assign = this.recurse(assignable);
	    }
	    var toWatch = getInputs(ast.body);
	    var inputs;
	    if (toWatch) {
	      inputs = [];
	      forEach(toWatch, function(watch, key) {
	        var input = self.recurse(watch);
	        watch.input = input;
	        inputs.push(input);
	        watch.watchId = key;
	      });
	    }
	    var expressions = [];
	    forEach(ast.body, function(expression) {
	      expressions.push(self.recurse(expression.expression));
	    });
	    var fn = ast.body.length === 0 ? noop :
	             ast.body.length === 1 ? expressions[0] :
	             function(scope, locals) {
	               var lastValue;
	               forEach(expressions, function(exp) {
	                 lastValue = exp(scope, locals);
	               });
	               return lastValue;
	             };
	    if (assign) {
	      fn.assign = function(scope, value, locals) {
	        return assign(scope, locals, value);
	      };
	    }
	    if (inputs) {
	      fn.inputs = inputs;
	    }
	    fn.literal = isLiteral(ast);
	    fn.constant = isConstant(ast);
	    return fn;
	  },
	
	  recurse: function(ast, context, create) {
	    var left, right, self = this, args;
	    if (ast.input) {
	      return this.inputs(ast.input, ast.watchId);
	    }
	    switch (ast.type) {
	    case AST.Literal:
	      return this.value(ast.value, context);
	    case AST.UnaryExpression:
	      right = this.recurse(ast.argument);
	      return this['unary' + ast.operator](right, context);
	    case AST.BinaryExpression:
	      left = this.recurse(ast.left);
	      right = this.recurse(ast.right);
	      return this['binary' + ast.operator](left, right, context);
	    case AST.LogicalExpression:
	      left = this.recurse(ast.left);
	      right = this.recurse(ast.right);
	      return this['binary' + ast.operator](left, right, context);
	    case AST.ConditionalExpression:
	      return this['ternary?:'](
	        this.recurse(ast.test),
	        this.recurse(ast.alternate),
	        this.recurse(ast.consequent),
	        context
	      );
	    case AST.Identifier:
	      return self.identifier(ast.name, context, create);
	    case AST.MemberExpression:
	      left = this.recurse(ast.object, false, !!create);
	      if (!ast.computed) {
	        right = ast.property.name;
	      }
	      if (ast.computed) right = this.recurse(ast.property);
	      return ast.computed ?
	        this.computedMember(left, right, context, create) :
	        this.nonComputedMember(left, right, context, create);
	    case AST.CallExpression:
	      args = [];
	      forEach(ast.arguments, function(expr) {
	        args.push(self.recurse(expr));
	      });
	      if (ast.filter) right = this.$filter(ast.callee.name);
	      if (!ast.filter) right = this.recurse(ast.callee, true);
	      return ast.filter ?
	        function(scope, locals, assign, inputs) {
	          var values = [];
	          for (var i = 0; i < args.length; ++i) {
	            values.push(args[i](scope, locals, assign, inputs));
	          }
	          var value = right.apply(undefined, values, inputs);
	          return context ? {context: undefined, name: undefined, value: value} : value;
	        } :
	        function(scope, locals, assign, inputs) {
	          var rhs = right(scope, locals, assign, inputs);
	          var value;
	          if (rhs.value != null) {
	            var values = [];
	            for (var i = 0; i < args.length; ++i) {
	              values.push(args[i](scope, locals, assign, inputs));
	            }
	            value = rhs.value.apply(rhs.context, values);
	          }
	          return context ? {value: value} : value;
	        };
	    case AST.AssignmentExpression:
	      left = this.recurse(ast.left, true, 1);
	      right = this.recurse(ast.right);
	      return function(scope, locals, assign, inputs) {
	        var lhs = left(scope, locals, assign, inputs);
	        var rhs = right(scope, locals, assign, inputs);
	        lhs.context[lhs.name] = rhs;
	        return context ? {value: rhs} : rhs;
	      };
	    case AST.ArrayExpression:
	      args = [];
	      forEach(ast.elements, function(expr) {
	        args.push(self.recurse(expr));
	      });
	      return function(scope, locals, assign, inputs) {
	        var value = [];
	        for (var i = 0; i < args.length; ++i) {
	          value.push(args[i](scope, locals, assign, inputs));
	        }
	        return context ? {value: value} : value;
	      };
	    case AST.ObjectExpression:
	      args = [];
	      forEach(ast.properties, function(property) {
	        if (property.computed) {
	          args.push({key: self.recurse(property.key),
	                     computed: true,
	                     value: self.recurse(property.value)
	          });
	        } else {
	          args.push({key: property.key.type === AST.Identifier ?
	                          property.key.name :
	                          ('' + property.key.value),
	                     computed: false,
	                     value: self.recurse(property.value)
	          });
	        }
	      });
	      return function(scope, locals, assign, inputs) {
	        var value = {};
	        for (var i = 0; i < args.length; ++i) {
	          if (args[i].computed) {
	            value[args[i].key(scope, locals, assign, inputs)] = args[i].value(scope, locals, assign, inputs);
	          } else {
	            value[args[i].key] = args[i].value(scope, locals, assign, inputs);
	          }
	        }
	        return context ? {value: value} : value;
	      };
	    case AST.ThisExpression:
	      return function(scope) {
	        return context ? {value: scope} : scope;
	      };
	    case AST.LocalsExpression:
	      return function(scope, locals) {
	        return context ? {value: locals} : locals;
	      };
	    case AST.NGValueParameter:
	      return function(scope, locals, assign) {
	        return context ? {value: assign} : assign;
	      };
	    }
	  },
	
	  'unary+': function(argument, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = argument(scope, locals, assign, inputs);
	      if (isDefined(arg)) {
	        arg = +arg;
	      } else {
	        arg = 0;
	      }
	      return context ? {value: arg} : arg;
	    };
	  },
	  'unary-': function(argument, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = argument(scope, locals, assign, inputs);
	      if (isDefined(arg)) {
	        arg = -arg;
	      } else {
	        arg = -0;
	      }
	      return context ? {value: arg} : arg;
	    };
	  },
	  'unary!': function(argument, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = !argument(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary+': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var lhs = left(scope, locals, assign, inputs);
	      var rhs = right(scope, locals, assign, inputs);
	      var arg = plusFn(lhs, rhs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary-': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var lhs = left(scope, locals, assign, inputs);
	      var rhs = right(scope, locals, assign, inputs);
	      var arg = (isDefined(lhs) ? lhs : 0) - (isDefined(rhs) ? rhs : 0);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary*': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) * right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary/': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) / right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary%': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) % right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary===': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) === right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary!==': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) !== right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary==': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      // eslint-disable-next-line eqeqeq
	      var arg = left(scope, locals, assign, inputs) == right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary!=': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      // eslint-disable-next-line eqeqeq
	      var arg = left(scope, locals, assign, inputs) != right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary<': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) < right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary>': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) > right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary<=': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) <= right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary>=': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) >= right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary&&': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) && right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'binary||': function(left, right, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = left(scope, locals, assign, inputs) || right(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  'ternary?:': function(test, alternate, consequent, context) {
	    return function(scope, locals, assign, inputs) {
	      var arg = test(scope, locals, assign, inputs) ? alternate(scope, locals, assign, inputs) : consequent(scope, locals, assign, inputs);
	      return context ? {value: arg} : arg;
	    };
	  },
	  value: function(value, context) {
	    return function() { return context ? {context: undefined, name: undefined, value: value} : value; };
	  },
	  identifier: function(name, context, create) {
	    return function(scope, locals, assign, inputs) {
	      var base = locals && (name in locals) ? locals : scope;
	      if (create && create !== 1 && base && base[name] == null) {
	        base[name] = {};
	      }
	      var value = base ? base[name] : undefined;
	      if (context) {
	        return {context: base, name: name, value: value};
	      } else {
	        return value;
	      }
	    };
	  },
	  computedMember: function(left, right, context, create) {
	    return function(scope, locals, assign, inputs) {
	      var lhs = left(scope, locals, assign, inputs);
	      var rhs;
	      var value;
	      if (lhs != null) {
	        rhs = right(scope, locals, assign, inputs);
	        rhs = getStringValue(rhs);
	        if (create && create !== 1) {
	          if (lhs && !(lhs[rhs])) {
	            lhs[rhs] = {};
	          }
	        }
	        value = lhs[rhs];
	      }
	      if (context) {
	        return {context: lhs, name: rhs, value: value};
	      } else {
	        return value;
	      }
	    };
	  },
	  nonComputedMember: function(left, right, context, create) {
	    return function(scope, locals, assign, inputs) {
	      var lhs = left(scope, locals, assign, inputs);
	      if (create && create !== 1) {
	        if (lhs && lhs[right] == null) {
	          lhs[right] = {};
	        }
	      }
	      var value = lhs != null ? lhs[right] : undefined;
	      if (context) {
	        return {context: lhs, name: right, value: value};
	      } else {
	        return value;
	      }
	    };
	  },
	  inputs: function(input, watchId) {
	    return function(scope, value, locals, inputs) {
	      if (inputs) return inputs[watchId];
	      return input(scope, value, locals);
	    };
	  }
	};
	
	/**
	 * @constructor
	 */
	var Parser = function Parser(lexer, $filter, options) {
	  this.lexer = lexer;
	  this.$filter = $filter;
	  this.options = options;
	  this.ast = new AST(lexer, options);
	  this.astCompiler = options.csp ? new ASTInterpreter(this.ast, $filter) :
	                                   new ASTCompiler(this.ast, $filter);
	};
	
	Parser.prototype = {
	  constructor: Parser,
	
	  parse: function(text) {
	    return this.astCompiler.compile(text);
	  }
	};
	
	function getValueOf(value) {
	  return isFunction(value.valueOf) ? value.valueOf() : objectValueOf.call(value);
	}
	
	///////////////////////////////////
	
	/**
	 * @ngdoc service
	 * @name $parse
	 * @kind function
	 *
	 * @description
	 *
	 * Converts Angular {@link guide/expression expression} into a function.
	 *
	 * ```js
	 *   var getter = $parse('user.name');
	 *   var setter = getter.assign;
	 *   var context = {user:{name:'angular'}};
	 *   var locals = {user:{name:'local'}};
	 *
	 *   expect(getter(context)).toEqual('angular');
	 *   setter(context, 'newValue');
	 *   expect(context.user.name).toEqual('newValue');
	 *   expect(getter(context, locals)).toEqual('local');
	 * ```
	 *
	 *
	 * @param {string} expression String expression to compile.
	 * @returns {function(context, locals)} a function which represents the compiled expression:
	 *
	 *    * `context` – `{object}` – an object against which any expressions embedded in the strings
	 *      are evaluated against (typically a scope object).
	 *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
	 *      `context`.
	 *
	 *    The returned function also has the following properties:
	 *      * `literal` – `{boolean}` – whether the expression's top-level node is a JavaScript
	 *        literal.
	 *      * `constant` – `{boolean}` – whether the expression is made entirely of JavaScript
	 *        constant literals.
	 *      * `assign` – `{?function(context, value)}` – if the expression is assignable, this will be
	 *        set to a function to change its value on the given context.
	 *
	 */
	
	
	/**
	 * @ngdoc provider
	 * @name $parseProvider
	 * @this
	 *
	 * @description
	 * `$parseProvider` can be used for configuring the default behavior of the {@link ng.$parse $parse}
	 *  service.
	 */
	function $ParseProvider() {
	  var cache = createMap();
	  var literals = {
	    'true': true,
	    'false': false,
	    'null': null,
	    'undefined': undefined
	  };
	  var identStart, identContinue;
	
	  /**
	   * @ngdoc method
	   * @name $parseProvider#addLiteral
	   * @description
	   *
	   * Configure $parse service to add literal values that will be present as literal at expressions.
	   *
	   * @param {string} literalName Token for the literal value. The literal name value must be a valid literal name.
	   * @param {*} literalValue Value for this literal. All literal values must be primitives or `undefined`.
	   *
	   **/
	  this.addLiteral = function(literalName, literalValue) {
	    literals[literalName] = literalValue;
	  };
	
	 /**
	  * @ngdoc method
	  * @name $parseProvider#setIdentifierFns
	  *
	  * @description
	  *
	  * Allows defining the set of characters that are allowed in Angular expressions. The function
	  * `identifierStart` will get called to know if a given character is a valid character to be the
	  * first character for an identifier. The function `identifierContinue` will get called to know if
	  * a given character is a valid character to be a follow-up identifier character. The functions
	  * `identifierStart` and `identifierContinue` will receive as arguments the single character to be
	  * identifier and the character code point. These arguments will be `string` and `numeric`. Keep in
	  * mind that the `string` parameter can be two characters long depending on the character
	  * representation. It is expected for the function to return `true` or `false`, whether that
	  * character is allowed or not.
	  *
	  * Since this function will be called extensively, keep the implementation of these functions fast,
	  * as the performance of these functions have a direct impact on the expressions parsing speed.
	  *
	  * @param {function=} identifierStart The function that will decide whether the given character is
	  *   a valid identifier start character.
	  * @param {function=} identifierContinue The function that will decide whether the given character is
	  *   a valid identifier continue character.
	  */
	  this.setIdentifierFns = function(identifierStart, identifierContinue) {
	    identStart = identifierStart;
	    identContinue = identifierContinue;
	    return this;
	  };
	
	  this.$get = ['$filter', function($filter) {
	    var noUnsafeEval = csp().noUnsafeEval;
	    var $parseOptions = {
	          csp: noUnsafeEval,
	          literals: copy(literals),
	          isIdentifierStart: isFunction(identStart) && identStart,
	          isIdentifierContinue: isFunction(identContinue) && identContinue
	        };
	    return $parse;
	
	    function $parse(exp, interceptorFn) {
	      var parsedExpression, oneTime, cacheKey;
	
	      switch (typeof exp) {
	        case 'string':
	          exp = exp.trim();
	          cacheKey = exp;
	
	          parsedExpression = cache[cacheKey];
	
	          if (!parsedExpression) {
	            if (exp.charAt(0) === ':' && exp.charAt(1) === ':') {
	              oneTime = true;
	              exp = exp.substring(2);
	            }
	            var lexer = new Lexer($parseOptions);
	            var parser = new Parser(lexer, $filter, $parseOptions);
	            parsedExpression = parser.parse(exp);
	            if (parsedExpression.constant) {
	              parsedExpression.$$watchDelegate = constantWatchDelegate;
	            } else if (oneTime) {
	              parsedExpression.$$watchDelegate = parsedExpression.literal ?
	                  oneTimeLiteralWatchDelegate : oneTimeWatchDelegate;
	            } else if (parsedExpression.inputs) {
	              parsedExpression.$$watchDelegate = inputsWatchDelegate;
	            }
	            cache[cacheKey] = parsedExpression;
	          }
	          return addInterceptor(parsedExpression, interceptorFn);
	
	        case 'function':
	          return addInterceptor(exp, interceptorFn);
	
	        default:
	          return addInterceptor(noop, interceptorFn);
	      }
	    }
	
	    function expressionInputDirtyCheck(newValue, oldValueOfValue) {
	
	      if (newValue == null || oldValueOfValue == null) { // null/undefined
	        return newValue === oldValueOfValue;
	      }
	
	      if (typeof newValue === 'object') {
	
	        // attempt to convert the value to a primitive type
	        // TODO(docs): add a note to docs that by implementing valueOf even objects and arrays can
	        //             be cheaply dirty-checked
	        newValue = getValueOf(newValue);
	
	        if (typeof newValue === 'object') {
	          // objects/arrays are not supported - deep-watching them would be too expensive
	          return false;
	        }
	
	        // fall-through to the primitive equality check
	      }
	
	      //Primitive or NaN
	      // eslint-disable-next-line no-self-compare
	      return newValue === oldValueOfValue || (newValue !== newValue && oldValueOfValue !== oldValueOfValue);
	    }
	
	    function inputsWatchDelegate(scope, listener, objectEquality, parsedExpression, prettyPrintExpression) {
	      var inputExpressions = parsedExpression.inputs;
	      var lastResult;
	
	      if (inputExpressions.length === 1) {
	        var oldInputValueOf = expressionInputDirtyCheck; // init to something unique so that equals check fails
	        inputExpressions = inputExpressions[0];
	        return scope.$watch(function expressionInputWatch(scope) {
	          var newInputValue = inputExpressions(scope);
	          if (!expressionInputDirtyCheck(newInputValue, oldInputValueOf)) {
	            lastResult = parsedExpression(scope, undefined, undefined, [newInputValue]);
	            oldInputValueOf = newInputValue && getValueOf(newInputValue);
	          }
	          return lastResult;
	        }, listener, objectEquality, prettyPrintExpression);
	      }
	
	      var oldInputValueOfValues = [];
	      var oldInputValues = [];
	      for (var i = 0, ii = inputExpressions.length; i < ii; i++) {
	        oldInputValueOfValues[i] = expressionInputDirtyCheck; // init to something unique so that equals check fails
	        oldInputValues[i] = null;
	      }
	
	      return scope.$watch(function expressionInputsWatch(scope) {
	        var changed = false;
	
	        for (var i = 0, ii = inputExpressions.length; i < ii; i++) {
	          var newInputValue = inputExpressions[i](scope);
	          if (changed || (changed = !expressionInputDirtyCheck(newInputValue, oldInputValueOfValues[i]))) {
	            oldInputValues[i] = newInputValue;
	            oldInputValueOfValues[i] = newInputValue && getValueOf(newInputValue);
	          }
	        }
	
	        if (changed) {
	          lastResult = parsedExpression(scope, undefined, undefined, oldInputValues);
	        }
	
	        return lastResult;
	      }, listener, objectEquality, prettyPrintExpression);
	    }
	
	    function oneTimeWatchDelegate(scope, listener, objectEquality, parsedExpression, prettyPrintExpression) {
	      var unwatch, lastValue;
	      if (parsedExpression.inputs) {
	        unwatch = inputsWatchDelegate(scope, oneTimeListener, objectEquality, parsedExpression, prettyPrintExpression);
	      } else {
	        unwatch = scope.$watch(oneTimeWatch, oneTimeListener, objectEquality);
	      }
	      return unwatch;
	
	      function oneTimeWatch(scope) {
	        return parsedExpression(scope);
	      }
	      function oneTimeListener(value, old, scope) {
	        lastValue = value;
	        if (isFunction(listener)) {
	          listener(value, old, scope);
	        }
	        if (isDefined(value)) {
	          scope.$$postDigest(function() {
	            if (isDefined(lastValue)) {
	              unwatch();
	            }
	          });
	        }
	      }
	    }
	
	    function oneTimeLiteralWatchDelegate(scope, listener, objectEquality, parsedExpression) {
	      var unwatch, lastValue;
	      unwatch = scope.$watch(function oneTimeWatch(scope) {
	        return parsedExpression(scope);
	      }, function oneTimeListener(value, old, scope) {
	        lastValue = value;
	        if (isFunction(listener)) {
	          listener(value, old, scope);
	        }
	        if (isAllDefined(value)) {
	          scope.$$postDigest(function() {
	            if (isAllDefined(lastValue)) unwatch();
	          });
	        }
	      }, objectEquality);
	
	      return unwatch;
	
	      function isAllDefined(value) {
	        var allDefined = true;
	        forEach(value, function(val) {
	          if (!isDefined(val)) allDefined = false;
	        });
	        return allDefined;
	      }
	    }
	
	    function constantWatchDelegate(scope, listener, objectEquality, parsedExpression) {
	      var unwatch = scope.$watch(function constantWatch(scope) {
	        unwatch();
	        return parsedExpression(scope);
	      }, listener, objectEquality);
	      return unwatch;
	    }
	
	    function addInterceptor(parsedExpression, interceptorFn) {
	      if (!interceptorFn) return parsedExpression;
	      var watchDelegate = parsedExpression.$$watchDelegate;
	      var useInputs = false;
	
	      var regularWatch =
	          watchDelegate !== oneTimeLiteralWatchDelegate &&
	          watchDelegate !== oneTimeWatchDelegate;
	
	      var fn = regularWatch ? function regularInterceptedExpression(scope, locals, assign, inputs) {
	        var value = useInputs && inputs ? inputs[0] : parsedExpression(scope, locals, assign, inputs);
	        return interceptorFn(value, scope, locals);
	      } : function oneTimeInterceptedExpression(scope, locals, assign, inputs) {
	        var value = parsedExpression(scope, locals, assign, inputs);
	        var result = interceptorFn(value, scope, locals);
	        // we only return the interceptor's result if the
	        // initial value is defined (for bind-once)
	        return isDefined(value) ? result : value;
	      };
	
	      // Propagate $$watchDelegates other then inputsWatchDelegate
	      useInputs = !parsedExpression.inputs;
	      if (parsedExpression.$$watchDelegate &&
	          parsedExpression.$$watchDelegate !== inputsWatchDelegate) {
	        fn.$$watchDelegate = parsedExpression.$$watchDelegate;
	        fn.inputs = parsedExpression.inputs;
	      } else if (!interceptorFn.$stateful) {
	        // If there is an interceptor, but no watchDelegate then treat the interceptor like
	        // we treat filters - it is assumed to be a pure function unless flagged with $stateful
	        fn.$$watchDelegate = inputsWatchDelegate;
	        fn.inputs = parsedExpression.inputs ? parsedExpression.inputs : [parsedExpression];
	      }
	
	      return fn;
	    }
	  }];
	}
	
	/**
	 * @ngdoc service
	 * @name $q
	 * @requires $rootScope
	 *
	 * @description
	 * A service that helps you run functions asynchronously, and use their return values (or exceptions)
	 * when they are done processing.
	 *
	 * This is a [Promises/A+](https://promisesaplus.com/)-compliant implementation of promises/deferred
	 * objects inspired by [Kris Kowal's Q](https://github.com/kriskowal/q).
	 *
	 * $q can be used in two fashions --- one which is more similar to Kris Kowal's Q or jQuery's Deferred
	 * implementations, and the other which resembles ES6 (ES2015) promises to some degree.
	 *
	 * # $q constructor
	 *
	 * The streamlined ES6 style promise is essentially just using $q as a constructor which takes a `resolver`
	 * function as the first argument. This is similar to the native Promise implementation from ES6,
	 * see [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise).
	 *
	 * While the constructor-style use is supported, not all of the supporting methods from ES6 promises are
	 * available yet.
	 *
	 * It can be used like so:
	 *
	 * ```js
	 *   // for the purpose of this example let's assume that variables `$q` and `okToGreet`
	 *   // are available in the current lexical scope (they could have been injected or passed in).
	 *
	 *   function asyncGreet(name) {
	 *     // perform some asynchronous operation, resolve or reject the promise when appropriate.
	 *     return $q(function(resolve, reject) {
	 *       setTimeout(function() {
	 *         if (okToGreet(name)) {
	 *           resolve('Hello, ' + name + '!');
	 *         } else {
	 *           reject('Greeting ' + name + ' is not allowed.');
	 *         }
	 *       }, 1000);
	 *     });
	 *   }
	 *
	 *   var promise = asyncGreet('Robin Hood');
	 *   promise.then(function(greeting) {
	 *     alert('Success: ' + greeting);
	 *   }, function(reason) {
	 *     alert('Failed: ' + reason);
	 *   });
	 * ```
	 *
	 * Note: progress/notify callbacks are not currently supported via the ES6-style interface.
	 *
	 * Note: unlike ES6 behavior, an exception thrown in the constructor function will NOT implicitly reject the promise.
	 *
	 * However, the more traditional CommonJS-style usage is still available, and documented below.
	 *
	 * [The CommonJS Promise proposal](http://wiki.commonjs.org/wiki/Promises) describes a promise as an
	 * interface for interacting with an object that represents the result of an action that is
	 * performed asynchronously, and may or may not be finished at any given point in time.
	 *
	 * From the perspective of dealing with error handling, deferred and promise APIs are to
	 * asynchronous programming what `try`, `catch` and `throw` keywords are to synchronous programming.
	 *
	 * ```js
	 *   // for the purpose of this example let's assume that variables `$q` and `okToGreet`
	 *   // are available in the current lexical scope (they could have been injected or passed in).
	 *
	 *   function asyncGreet(name) {
	 *     var deferred = $q.defer();
	 *
	 *     setTimeout(function() {
	 *       deferred.notify('About to greet ' + name + '.');
	 *
	 *       if (okToGreet(name)) {
	 *         deferred.resolve('Hello, ' + name + '!');
	 *       } else {
	 *         deferred.reject('Greeting ' + name + ' is not allowed.');
	 *       }
	 *     }, 1000);
	 *
	 *     return deferred.promise;
	 *   }
	 *
	 *   var promise = asyncGreet('Robin Hood');
	 *   promise.then(function(greeting) {
	 *     alert('Success: ' + greeting);
	 *   }, function(reason) {
	 *     alert('Failed: ' + reason);
	 *   }, function(update) {
	 *     alert('Got notification: ' + update);
	 *   });
	 * ```
	 *
	 * At first it might not be obvious why this extra complexity is worth the trouble. The payoff
	 * comes in the way of guarantees that promise and deferred APIs make, see
	 * https://github.com/kriskowal/uncommonjs/blob/master/promises/specification.md.
	 *
	 * Additionally the promise api allows for composition that is very hard to do with the
	 * traditional callback ([CPS](http://en.wikipedia.org/wiki/Continuation-passing_style)) approach.
	 * For more on this please see the [Q documentation](https://github.com/kriskowal/q) especially the
	 * section on serial or parallel joining of promises.
	 *
	 * # The Deferred API
	 *
	 * A new instance of deferred is constructed by calling `$q.defer()`.
	 *
	 * The purpose of the deferred object is to expose the associated Promise instance as well as APIs
	 * that can be used for signaling the successful or unsuccessful completion, as well as the status
	 * of the task.
	 *
	 * **Methods**
	 *
	 * - `resolve(value)` – resolves the derived promise with the `value`. If the value is a rejection
	 *   constructed via `$q.reject`, the promise will be rejected instead.
	 * - `reject(reason)` – rejects the derived promise with the `reason`. This is equivalent to
	 *   resolving it with a rejection constructed via `$q.reject`.
	 * - `notify(value)` - provides updates on the status of the promise's execution. This may be called
	 *   multiple times before the promise is either resolved or rejected.
	 *
	 * **Properties**
	 *
	 * - promise – `{Promise}` – promise object associated with this deferred.
	 *
	 *
	 * # The Promise API
	 *
	 * A new promise instance is created when a deferred instance is created and can be retrieved by
	 * calling `deferred.promise`.
	 *
	 * The purpose of the promise object is to allow for interested parties to get access to the result
	 * of the deferred task when it completes.
	 *
	 * **Methods**
	 *
	 * - `then(successCallback, [errorCallback], [notifyCallback])` – regardless of when the promise was or
	 *   will be resolved or rejected, `then` calls one of the success or error callbacks asynchronously
	 *   as soon as the result is available. The callbacks are called with a single argument: the result
	 *   or rejection reason. Additionally, the notify callback may be called zero or more times to
	 *   provide a progress indication, before the promise is resolved or rejected.
	 *
	 *   This method *returns a new promise* which is resolved or rejected via the return value of the
	 *   `successCallback`, `errorCallback` (unless that value is a promise, in which case it is resolved
	 *   with the value which is resolved in that promise using
	 *   [promise chaining](http://www.html5rocks.com/en/tutorials/es6/promises/#toc-promises-queues)).
	 *   It also notifies via the return value of the `notifyCallback` method. The promise cannot be
	 *   resolved or rejected from the notifyCallback method. The errorCallback and notifyCallback
	 *   arguments are optional.
	 *
	 * - `catch(errorCallback)` – shorthand for `promise.then(null, errorCallback)`
	 *
	 * - `finally(callback, notifyCallback)` – allows you to observe either the fulfillment or rejection of a promise,
	 *   but to do so without modifying the final value. This is useful to release resources or do some
	 *   clean-up that needs to be done whether the promise was rejected or resolved. See the [full
	 *   specification](https://github.com/kriskowal/q/wiki/API-Reference#promisefinallycallback) for
	 *   more information.
	 *
	 * # Chaining promises
	 *
	 * Because calling the `then` method of a promise returns a new derived promise, it is easily
	 * possible to create a chain of promises:
	 *
	 * ```js
	 *   promiseB = promiseA.then(function(result) {
	 *     return result + 1;
	 *   });
	 *
	 *   // promiseB will be resolved immediately after promiseA is resolved and its value
	 *   // will be the result of promiseA incremented by 1
	 * ```
	 *
	 * It is possible to create chains of any length and since a promise can be resolved with another
	 * promise (which will defer its resolution further), it is possible to pause/defer resolution of
	 * the promises at any point in the chain. This makes it possible to implement powerful APIs like
	 * $http's response interceptors.
	 *
	 *
	 * # Differences between Kris Kowal's Q and $q
	 *
	 *  There are two main differences:
	 *
	 * - $q is integrated with the {@link ng.$rootScope.Scope} Scope model observation
	 *   mechanism in angular, which means faster propagation of resolution or rejection into your
	 *   models and avoiding unnecessary browser repaints, which would result in flickering UI.
	 * - Q has many more features than $q, but that comes at a cost of bytes. $q is tiny, but contains
	 *   all the important functionality needed for common async tasks.
	 *
	 * # Testing
	 *
	 *  ```js
	 *    it('should simulate promise', inject(function($q, $rootScope) {
	 *      var deferred = $q.defer();
	 *      var promise = deferred.promise;
	 *      var resolvedValue;
	 *
	 *      promise.then(function(value) { resolvedValue = value; });
	 *      expect(resolvedValue).toBeUndefined();
	 *
	 *      // Simulate resolving of promise
	 *      deferred.resolve(123);
	 *      // Note that the 'then' function does not get called synchronously.
	 *      // This is because we want the promise API to always be async, whether or not
	 *      // it got called synchronously or asynchronously.
	 *      expect(resolvedValue).toBeUndefined();
	 *
	 *      // Propagate promise resolution to 'then' functions using $apply().
	 *      $rootScope.$apply();
	 *      expect(resolvedValue).toEqual(123);
	 *    }));
	 *  ```
	 *
	 * @param {function(function, function)} resolver Function which is responsible for resolving or
	 *   rejecting the newly created promise. The first parameter is a function which resolves the
	 *   promise, the second parameter is a function which rejects the promise.
	 *
	 * @returns {Promise} The newly created promise.
	 */
	/**
	 * @ngdoc provider
	 * @name $qProvider
	 * @this
	 *
	 * @description
	 */
	function $QProvider() {
	  var errorOnUnhandledRejections = true;
	  this.$get = ['$rootScope', '$exceptionHandler', function($rootScope, $exceptionHandler) {
	    return qFactory(function(callback) {
	      $rootScope.$evalAsync(callback);
	    }, $exceptionHandler, errorOnUnhandledRejections);
	  }];
	
	  /**
	   * @ngdoc method
	   * @name $qProvider#errorOnUnhandledRejections
	   * @kind function
	   *
	   * @description
	   * Retrieves or overrides whether to generate an error when a rejected promise is not handled.
	   * This feature is enabled by default.
	   *
	   * @param {boolean=} value Whether to generate an error when a rejected promise is not handled.
	   * @returns {boolean|ng.$qProvider} Current value when called without a new value or self for
	   *    chaining otherwise.
	   */
	  this.errorOnUnhandledRejections = function(value) {
	    if (isDefined(value)) {
	      errorOnUnhandledRejections = value;
	      return this;
	    } else {
	      return errorOnUnhandledRejections;
	    }
	  };
	}
	
	/** @this */
	function $$QProvider() {
	  var errorOnUnhandledRejections = true;
	  this.$get = ['$browser', '$exceptionHandler', function($browser, $exceptionHandler) {
	    return qFactory(function(callback) {
	      $browser.defer(callback);
	    }, $exceptionHandler, errorOnUnhandledRejections);
	  }];
	
	  this.errorOnUnhandledRejections = function(value) {
	    if (isDefined(value)) {
	      errorOnUnhandledRejections = value;
	      return this;
	    } else {
	      return errorOnUnhandledRejections;
	    }
	  };
	}
	
	/**
	 * Constructs a promise manager.
	 *
	 * @param {function(function)} nextTick Function for executing functions in the next turn.
	 * @param {function(...*)} exceptionHandler Function into which unexpected exceptions are passed for
	 *     debugging purposes.
	 @ param {=boolean} errorOnUnhandledRejections Whether an error should be generated on unhandled
	 *     promises rejections.
	 * @returns {object} Promise manager.
	 */
	function qFactory(nextTick, exceptionHandler, errorOnUnhandledRejections) {
	  var $qMinErr = minErr('$q', TypeError);
	  var queueSize = 0;
	  var checkQueue = [];
	
	  /**
	   * @ngdoc method
	   * @name ng.$q#defer
	   * @kind function
	   *
	   * @description
	   * Creates a `Deferred` object which represents a task which will finish in the future.
	   *
	   * @returns {Deferred} Returns a new instance of deferred.
	   */
	  function defer() {
	    return new Deferred();
	  }
	
	  function Deferred() {
	    var promise = this.promise = new Promise();
	    //Non prototype methods necessary to support unbound execution :/
	    this.resolve = function(val) { resolvePromise(promise, val); };
	    this.reject = function(reason) { rejectPromise(promise, reason); };
	    this.notify = function(progress) { notifyPromise(promise, progress); };
	  }
	
	
	  function Promise() {
	    this.$$state = { status: 0 };
	  }
	
	  extend(Promise.prototype, {
	    then: function(onFulfilled, onRejected, progressBack) {
	      if (isUndefined(onFulfilled) && isUndefined(onRejected) && isUndefined(progressBack)) {
	        return this;
	      }
	      var result = new Promise();
	
	      this.$$state.pending = this.$$state.pending || [];
	      this.$$state.pending.push([result, onFulfilled, onRejected, progressBack]);
	      if (this.$$state.status > 0) scheduleProcessQueue(this.$$state);
	
	      return result;
	    },
	
	    'catch': function(callback) {
	      return this.then(null, callback);
	    },
	
	    'finally': function(callback, progressBack) {
	      return this.then(function(value) {
	        return handleCallback(value, resolve, callback);
	      }, function(error) {
	        return handleCallback(error, reject, callback);
	      }, progressBack);
	    }
	  });
	
	  function processQueue(state) {
	    var fn, promise, pending;
	
	    pending = state.pending;
	    state.processScheduled = false;
	    state.pending = undefined;
	    try {
	      for (var i = 0, ii = pending.length; i < ii; ++i) {
	        state.pur = true;
	        promise = pending[i][0];
	        fn = pending[i][state.status];
	        try {
	          if (isFunction(fn)) {
	            resolvePromise(promise, fn(state.value));
	          } else if (state.status === 1) {
	            resolvePromise(promise, state.value);
	          } else {
	            rejectPromise(promise, state.value);
	          }
	        } catch (e) {
	          rejectPromise(promise, e);
	        }
	      }
	    } finally {
	      --queueSize;
	      if (errorOnUnhandledRejections && queueSize === 0) {
	        nextTick(processChecks);
	      }
	    }
	  }
	
	  function processChecks() {
	    // eslint-disable-next-line no-unmodified-loop-condition
	    while (!queueSize && checkQueue.length) {
	      var toCheck = checkQueue.shift();
	      if (!toCheck.pur) {
	        toCheck.pur = true;
	        var errorMessage = 'Possibly unhandled rejection: ' + toDebugString(toCheck.value);
	        if (toCheck.value instanceof Error) {
	          exceptionHandler(toCheck.value, errorMessage);
	        } else {
	          exceptionHandler(errorMessage);
	        }
	      }
	    }
	  }
	
	  function scheduleProcessQueue(state) {
	    if (errorOnUnhandledRejections && !state.pending && state.status === 2 && !state.pur) {
	      if (queueSize === 0 && checkQueue.length === 0) {
	        nextTick(processChecks);
	      }
	      checkQueue.push(state);
	    }
	    if (state.processScheduled || !state.pending) return;
	    state.processScheduled = true;
	    ++queueSize;
	    nextTick(function() { processQueue(state); });
	  }
	
	  function resolvePromise(promise, val) {
	    if (promise.$$state.status) return;
	    if (val === promise) {
	      $$reject(promise, $qMinErr(
	        'qcycle',
	        'Expected promise to be resolved with value other than itself \'{0}\'',
	        val));
	    } else {
	      $$resolve(promise, val);
	    }
	
	  }
	
	  function $$resolve(promise, val) {
	    var then;
	    var done = false;
	    try {
	      if (isObject(val) || isFunction(val)) then = val.then;
	      if (isFunction(then)) {
	        promise.$$state.status = -1;
	        then.call(val, doResolve, doReject, doNotify);
	      } else {
	        promise.$$state.value = val;
	        promise.$$state.status = 1;
	        scheduleProcessQueue(promise.$$state);
	      }
	    } catch (e) {
	      doReject(e);
	    }
	
	    function doResolve(val) {
	      if (done) return;
	      done = true;
	      $$resolve(promise, val);
	    }
	    function doReject(val) {
	      if (done) return;
	      done = true;
	      $$reject(promise, val);
	    }
	    function doNotify(progress) {
	      notifyPromise(promise, progress);
	    }
	  }
	
	  function rejectPromise(promise, reason) {
	    if (promise.$$state.status) return;
	    $$reject(promise, reason);
	  }
	
	  function $$reject(promise, reason) {
	    promise.$$state.value = reason;
	    promise.$$state.status = 2;
	    scheduleProcessQueue(promise.$$state);
	  }
	
	  function notifyPromise(promise, progress) {
	    var callbacks = promise.$$state.pending;
	
	    if ((promise.$$state.status <= 0) && callbacks && callbacks.length) {
	      nextTick(function() {
	        var callback, result;
	        for (var i = 0, ii = callbacks.length; i < ii; i++) {
	          result = callbacks[i][0];
	          callback = callbacks[i][3];
	          try {
	            notifyPromise(result, isFunction(callback) ? callback(progress) : progress);
	          } catch (e) {
	            exceptionHandler(e);
	          }
	        }
	      });
	    }
	  }
	
	  /**
	   * @ngdoc method
	   * @name $q#reject
	   * @kind function
	   *
	   * @description
	   * Creates a promise that is resolved as rejected with the specified `reason`. This api should be
	   * used to forward rejection in a chain of promises. If you are dealing with the last promise in
	   * a promise chain, you don't need to worry about it.
	   *
	   * When comparing deferreds/promises to the familiar behavior of try/catch/throw, think of
	   * `reject` as the `throw` keyword in JavaScript. This also means that if you "catch" an error via
	   * a promise error callback and you want to forward the error to the promise derived from the
	   * current promise, you have to "rethrow" the error by returning a rejection constructed via
	   * `reject`.
	   *
	   * ```js
	   *   promiseB = promiseA.then(function(result) {
	   *     // success: do something and resolve promiseB
	   *     //          with the old or a new result
	   *     return result;
	   *   }, function(reason) {
	   *     // error: handle the error if possible and
	   *     //        resolve promiseB with newPromiseOrValue,
	   *     //        otherwise forward the rejection to promiseB
	   *     if (canHandle(reason)) {
	   *      // handle the error and recover
	   *      return newPromiseOrValue;
	   *     }
	   *     return $q.reject(reason);
	   *   });
	   * ```
	   *
	   * @param {*} reason Constant, message, exception or an object representing the rejection reason.
	   * @returns {Promise} Returns a promise that was already resolved as rejected with the `reason`.
	   */
	  function reject(reason) {
	    var result = new Promise();
	    rejectPromise(result, reason);
	    return result;
	  }
	
	  function handleCallback(value, resolver, callback) {
	    var callbackOutput = null;
	    try {
	      if (isFunction(callback)) callbackOutput = callback();
	    } catch (e) {
	      return reject(e);
	    }
	    if (isPromiseLike(callbackOutput)) {
	      return callbackOutput.then(function() {
	        return resolver(value);
	      }, reject);
	    } else {
	      return resolver(value);
	    }
	  }
	
	  /**
	   * @ngdoc method
	   * @name $q#when
	   * @kind function
	   *
	   * @description
	   * Wraps an object that might be a value or a (3rd party) then-able promise into a $q promise.
	   * This is useful when you are dealing with an object that might or might not be a promise, or if
	   * the promise comes from a source that can't be trusted.
	   *
	   * @param {*} value Value or a promise
	   * @param {Function=} successCallback
	   * @param {Function=} errorCallback
	   * @param {Function=} progressCallback
	   * @returns {Promise} Returns a promise of the passed value or promise
	   */
	
	
	  function when(value, callback, errback, progressBack) {
	    var result = new Promise();
	    resolvePromise(result, value);
	    return result.then(callback, errback, progressBack);
	  }
	
	  /**
	   * @ngdoc method
	   * @name $q#resolve
	   * @kind function
	   *
	   * @description
	   * Alias of {@link ng.$q#when when} to maintain naming consistency with ES6.
	   *
	   * @param {*} value Value or a promise
	   * @param {Function=} successCallback
	   * @param {Function=} errorCallback
	   * @param {Function=} progressCallback
	   * @returns {Promise} Returns a promise of the passed value or promise
	   */
	  var resolve = when;
	
	  /**
	   * @ngdoc method
	   * @name $q#all
	   * @kind function
	   *
	   * @description
	   * Combines multiple promises into a single promise that is resolved when all of the input
	   * promises are resolved.
	   *
	   * @param {Array.<Promise>|Object.<Promise>} promises An array or hash of promises.
	   * @returns {Promise} Returns a single promise that will be resolved with an array/hash of values,
	   *   each value corresponding to the promise at the same index/key in the `promises` array/hash.
	   *   If any of the promises is resolved with a rejection, this resulting promise will be rejected
	   *   with the same rejection value.
	   */
	
	  function all(promises) {
	    var result = new Promise(),
	        counter = 0,
	        results = isArray(promises) ? [] : {};
	
	    forEach(promises, function(promise, key) {
	      counter++;
	      when(promise).then(function(value) {
	        results[key] = value;
	        if (!(--counter)) resolvePromise(result, results);
	      }, function(reason) {
	        rejectPromise(result, reason);
	      });
	    });
	
	    if (counter === 0) {
	      resolvePromise(result, results);
	    }
	
	    return result;
	  }
	
	  /**
	   * @ngdoc method
	   * @name $q#race
	   * @kind function
	   *
	   * @description
	   * Returns a promise that resolves or rejects as soon as one of those promises
	   * resolves or rejects, with the value or reason from that promise.
	   *
	   * @param {Array.<Promise>|Object.<Promise>} promises An array or hash of promises.
	   * @returns {Promise} a promise that resolves or rejects as soon as one of the `promises`
	   * resolves or rejects, with the value or reason from that promise.
	   */
	
	  function race(promises) {
	    var deferred = defer();
	
	    forEach(promises, function(promise) {
	      when(promise).then(deferred.resolve, deferred.reject);
	    });
	
	    return deferred.promise;
	  }
	
	  function $Q(resolver) {
	    if (!isFunction(resolver)) {
	      throw $qMinErr('norslvr', 'Expected resolverFn, got \'{0}\'', resolver);
	    }
	
	    var promise = new Promise();
	
	    function resolveFn(value) {
	      resolvePromise(promise, value);
	    }
	
	    function rejectFn(reason) {
	      rejectPromise(promise, reason);
	    }
	
	    resolver(resolveFn, rejectFn);
	
	    return promise;
	  }
	
	  // Let's make the instanceof operator work for promises, so that
	  // `new $q(fn) instanceof $q` would evaluate to true.
	  $Q.prototype = Promise.prototype;
	
	  $Q.defer = defer;
	  $Q.reject = reject;
	  $Q.when = when;
	  $Q.resolve = resolve;
	  $Q.all = all;
	  $Q.race = race;
	
	  return $Q;
	}
	
	/** @this */
	function $$RAFProvider() { //rAF
	  this.$get = ['$window', '$timeout', function($window, $timeout) {
	    var requestAnimationFrame = $window.requestAnimationFrame ||
	                                $window.webkitRequestAnimationFrame;
	
	    var cancelAnimationFrame = $window.cancelAnimationFrame ||
	                               $window.webkitCancelAnimationFrame ||
	                               $window.webkitCancelRequestAnimationFrame;
	
	    var rafSupported = !!requestAnimationFrame;
	    var raf = rafSupported
	      ? function(fn) {
	          var id = requestAnimationFrame(fn);
	          return function() {
	            cancelAnimationFrame(id);
	          };
	        }
	      : function(fn) {
	          var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666
	          return function() {
	            $timeout.cancel(timer);
	          };
	        };
	
	    raf.supported = rafSupported;
	
	    return raf;
	  }];
	}
	
	/**
	 * DESIGN NOTES
	 *
	 * The design decisions behind the scope are heavily favored for speed and memory consumption.
	 *
	 * The typical use of scope is to watch the expressions, which most of the time return the same
	 * value as last time so we optimize the operation.
	 *
	 * Closures construction is expensive in terms of speed as well as memory:
	 *   - No closures, instead use prototypical inheritance for API
	 *   - Internal state needs to be stored on scope directly, which means that private state is
	 *     exposed as $$____ properties
	 *
	 * Loop operations are optimized by using while(count--) { ... }
	 *   - This means that in order to keep the same order of execution as addition we have to add
	 *     items to the array at the beginning (unshift) instead of at the end (push)
	 *
	 * Child scopes are created and removed often
	 *   - Using an array would be slow since inserts in the middle are expensive; so we use linked lists
	 *
	 * There are fewer watches than observers. This is why you don't want the observer to be implemented
	 * in the same way as watch. Watch requires return of the initialization function which is expensive
	 * to construct.
	 */
	
	
	/**
	 * @ngdoc provider
	 * @name $rootScopeProvider
	 * @description
	 *
	 * Provider for the $rootScope service.
	 */
	
	/**
	 * @ngdoc method
	 * @name $rootScopeProvider#digestTtl
	 * @description
	 *
	 * Sets the number of `$digest` iterations the scope should attempt to execute before giving up and
	 * assuming that the model is unstable.
	 *
	 * The current default is 10 iterations.
	 *
	 * In complex applications it's possible that the dependencies between `$watch`s will result in
	 * several digest iterations. However if an application needs more than the default 10 digest
	 * iterations for its model to stabilize then you should investigate what is causing the model to
	 * continuously change during the digest.
	 *
	 * Increasing the TTL could have performance implications, so you should not change it without
	 * proper justification.
	 *
	 * @param {number} limit The number of digest iterations.
	 */
	
	
	/**
	 * @ngdoc service
	 * @name $rootScope
	 * @this
	 *
	 * @description
	 *
	 * Every application has a single root {@link ng.$rootScope.Scope scope}.
	 * All other scopes are descendant scopes of the root scope. Scopes provide separation
	 * between the model and the view, via a mechanism for watching the model for changes.
	 * They also provide event emission/broadcast and subscription facility. See the
	 * {@link guide/scope developer guide on scopes}.
	 */
	function $RootScopeProvider() {
	  var TTL = 10;
	  var $rootScopeMinErr = minErr('$rootScope');
	  var lastDirtyWatch = null;
	  var applyAsyncId = null;
	
	  this.digestTtl = function(value) {
	    if (arguments.length) {
	      TTL = value;
	    }
	    return TTL;
	  };
	
	  function createChildScopeClass(parent) {
	    function ChildScope() {
	      this.$$watchers = this.$$nextSibling =
	          this.$$childHead = this.$$childTail = null;
	      this.$$listeners = {};
	      this.$$listenerCount = {};
	      this.$$watchersCount = 0;
	      this.$id = nextUid();
	      this.$$ChildScope = null;
	    }
	    ChildScope.prototype = parent;
	    return ChildScope;
	  }
	
	  this.$get = ['$exceptionHandler', '$parse', '$browser',
	      function($exceptionHandler, $parse, $browser) {
	
	    function destroyChildScope($event) {
	        $event.currentScope.$$destroyed = true;
	    }
	
	    function cleanUpScope($scope) {
	
	      // Support: IE 9 only
	      if (msie === 9) {
	        // There is a memory leak in IE9 if all child scopes are not disconnected
	        // completely when a scope is destroyed. So this code will recurse up through
	        // all this scopes children
	        //
	        // See issue https://github.com/angular/angular.js/issues/10706
	        if ($scope.$$childHead) {
	          cleanUpScope($scope.$$childHead);
	        }
	        if ($scope.$$nextSibling) {
	          cleanUpScope($scope.$$nextSibling);
	        }
	      }
	
	      // The code below works around IE9 and V8's memory leaks
	      //
	      // See:
	      // - https://code.google.com/p/v8/issues/detail?id=2073#c26
	      // - https://github.com/angular/angular.js/issues/6794#issuecomment-38648909
	      // - https://github.com/angular/angular.js/issues/1313#issuecomment-10378451
	
	      $scope.$parent = $scope.$$nextSibling = $scope.$$prevSibling = $scope.$$childHead =
	          $scope.$$childTail = $scope.$root = $scope.$$watchers = null;
	    }
	
	    /**
	     * @ngdoc type
	     * @name $rootScope.Scope
	     *
	     * @description
	     * A root scope can be retrieved using the {@link ng.$rootScope $rootScope} key from the
	     * {@link auto.$injector $injector}. Child scopes are created using the
	     * {@link ng.$rootScope.Scope#$new $new()} method. (Most scopes are created automatically when
	     * compiled HTML template is executed.) See also the {@link guide/scope Scopes guide} for
	     * an in-depth introduction and usage examples.
	     *
	     *
	     * # Inheritance
	     * A scope can inherit from a parent scope, as in this example:
	     * ```js
	         var parent = $rootScope;
	         var child = parent.$new();
	
	         parent.salutation = "Hello";
	         expect(child.salutation).toEqual('Hello');
	
	         child.salutation = "Welcome";
	         expect(child.salutation).toEqual('Welcome');
	         expect(parent.salutation).toEqual('Hello');
	     * ```
	     *
	     * When interacting with `Scope` in tests, additional helper methods are available on the
	     * instances of `Scope` type. See {@link ngMock.$rootScope.Scope ngMock Scope} for additional
	     * details.
	     *
	     *
	     * @param {Object.<string, function()>=} providers Map of service factory which need to be
	     *                                       provided for the current scope. Defaults to {@link ng}.
	     * @param {Object.<string, *>=} instanceCache Provides pre-instantiated services which should
	     *                              append/override services provided by `providers`. This is handy
	     *                              when unit-testing and having the need to override a default
	     *                              service.
	     * @returns {Object} Newly created scope.
	     *
	     */
	    function Scope() {
	      this.$id = nextUid();
	      this.$$phase = this.$parent = this.$$watchers =
	                     this.$$nextSibling = this.$$prevSibling =
	                     this.$$childHead = this.$$childTail = null;
	      this.$root = this;
	      this.$$destroyed = false;
	      this.$$listeners = {};
	      this.$$listenerCount = {};
	      this.$$watchersCount = 0;
	      this.$$isolateBindings = null;
	    }
	
	    /**
	     * @ngdoc property
	     * @name $rootScope.Scope#$id
	     *
	     * @description
	     * Unique scope ID (monotonically increasing) useful for debugging.
	     */
	
	     /**
	      * @ngdoc property
	      * @name $rootScope.Scope#$parent
	      *
	      * @description
	      * Reference to the parent scope.
	      */
	
	      /**
	       * @ngdoc property
	       * @name $rootScope.Scope#$root
	       *
	       * @description
	       * Reference to the root scope.
	       */
	
	    Scope.prototype = {
	      constructor: Scope,
	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$new
	       * @kind function
	       *
	       * @description
	       * Creates a new child {@link ng.$rootScope.Scope scope}.
	       *
	       * The parent scope will propagate the {@link ng.$rootScope.Scope#$digest $digest()} event.
	       * The scope can be removed from the scope hierarchy using {@link ng.$rootScope.Scope#$destroy $destroy()}.
	       *
	       * {@link ng.$rootScope.Scope#$destroy $destroy()} must be called on a scope when it is
	       * desired for the scope and its child scopes to be permanently detached from the parent and
	       * thus stop participating in model change detection and listener notification by invoking.
	       *
	       * @param {boolean} isolate If true, then the scope does not prototypically inherit from the
	       *         parent scope. The scope is isolated, as it can not see parent scope properties.
	       *         When creating widgets, it is useful for the widget to not accidentally read parent
	       *         state.
	       *
	       * @param {Scope} [parent=this] The {@link ng.$rootScope.Scope `Scope`} that will be the `$parent`
	       *                              of the newly created scope. Defaults to `this` scope if not provided.
	       *                              This is used when creating a transclude scope to correctly place it
	       *                              in the scope hierarchy while maintaining the correct prototypical
	       *                              inheritance.
	       *
	       * @returns {Object} The newly created child scope.
	       *
	       */
	      $new: function(isolate, parent) {
	        var child;
	
	        parent = parent || this;
	
	        if (isolate) {
	          child = new Scope();
	          child.$root = this.$root;
	        } else {
	          // Only create a child scope class if somebody asks for one,
	          // but cache it to allow the VM to optimize lookups.
	          if (!this.$$ChildScope) {
	            this.$$ChildScope = createChildScopeClass(this);
	          }
	          child = new this.$$ChildScope();
	        }
	        child.$parent = parent;
	        child.$$prevSibling = parent.$$childTail;
	        if (parent.$$childHead) {
	          parent.$$childTail.$$nextSibling = child;
	          parent.$$childTail = child;
	        } else {
	          parent.$$childHead = parent.$$childTail = child;
	        }
	
	        // When the new scope is not isolated or we inherit from `this`, and
	        // the parent scope is destroyed, the property `$$destroyed` is inherited
	        // prototypically. In all other cases, this property needs to be set
	        // when the parent scope is destroyed.
	        // The listener needs to be added after the parent is set
	        if (isolate || parent !== this) child.$on('$destroy', destroyChildScope);
	
	        return child;
	      },
	
	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$watch
	       * @kind function
	       *
	       * @description
	       * Registers a `listener` callback to be executed whenever the `watchExpression` changes.
	       *
	       * - The `watchExpression` is called on every call to {@link ng.$rootScope.Scope#$digest
	       *   $digest()} and should return the value that will be watched. (`watchExpression` should not change
	       *   its value when executed multiple times with the same input because it may be executed multiple
	       *   times by {@link ng.$rootScope.Scope#$digest $digest()}. That is, `watchExpression` should be
	       *   [idempotent](http://en.wikipedia.org/wiki/Idempotence).)
	       * - The `listener` is called only when the value from the current `watchExpression` and the
	       *   previous call to `watchExpression` are not equal (with the exception of the initial run,
	       *   see below). Inequality is determined according to reference inequality,
	       *   [strict comparison](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators)
	       *    via the `!==` Javascript operator, unless `objectEquality == true`
	       *   (see next point)
	       * - When `objectEquality == true`, inequality of the `watchExpression` is determined
	       *   according to the {@link angular.equals} function. To save the value of the object for
	       *   later comparison, the {@link angular.copy} function is used. This therefore means that
	       *   watching complex objects will have adverse memory and performance implications.
	       * - This should not be used to watch for changes in objects that are
	       *   or contain [File](https://developer.mozilla.org/docs/Web/API/File) objects due to limitations with {@link angular.copy `angular.copy`}.
	       * - The watch `listener` may change the model, which may trigger other `listener`s to fire.
	       *   This is achieved by rerunning the watchers until no changes are detected. The rerun
	       *   iteration limit is 10 to prevent an infinite loop deadlock.
	       *
	       *
	       * If you want to be notified whenever {@link ng.$rootScope.Scope#$digest $digest} is called,
	       * you can register a `watchExpression` function with no `listener`. (Be prepared for
	       * multiple calls to your `watchExpression` because it will execute multiple times in a
	       * single {@link ng.$rootScope.Scope#$digest $digest} cycle if a change is detected.)
	       *
	       * After a watcher is registered with the scope, the `listener` fn is called asynchronously
	       * (via {@link ng.$rootScope.Scope#$evalAsync $evalAsync}) to initialize the
	       * watcher. In rare cases, this is undesirable because the listener is called when the result
	       * of `watchExpression` didn't change. To detect this scenario within the `listener` fn, you
	       * can compare the `newVal` and `oldVal`. If these two values are identical (`===`) then the
	       * listener was called due to initialization.
	       *
	       *
	       *
	       * # Example
	       * ```js
	           // let's assume that scope was dependency injected as the $rootScope
	           var scope = $rootScope;
	           scope.name = 'misko';
	           scope.counter = 0;
	
	           expect(scope.counter).toEqual(0);
	           scope.$watch('name', function(newValue, oldValue) {
	             scope.counter = scope.counter + 1;
	           });
	           expect(scope.counter).toEqual(0);
	
	           scope.$digest();
	           // the listener is always called during the first $digest loop after it was registered
	           expect(scope.counter).toEqual(1);
	
	           scope.$digest();
	           // but now it will not be called unless the value changes
	           expect(scope.counter).toEqual(1);
	
	           scope.name = 'adam';
	           scope.$digest();
	           expect(scope.counter).toEqual(2);
	
	
	
	           // Using a function as a watchExpression
	           var food;
	           scope.foodCounter = 0;
	           expect(scope.foodCounter).toEqual(0);
	           scope.$watch(
	             // This function returns the value being watched. It is called for each turn of the $digest loop
	             function() { return food; },
	             // This is the change listener, called when the value returned from the above function changes
	             function(newValue, oldValue) {
	               if ( newValue !== oldValue ) {
	                 // Only increment the counter if the value changed
	                 scope.foodCounter = scope.foodCounter + 1;
	               }
	             }
	           );
	           // No digest has been run so the counter will be zero
	           expect(scope.foodCounter).toEqual(0);
	
	           // Run the digest but since food has not changed count will still be zero
	           scope.$digest();
	           expect(scope.foodCounter).toEqual(0);
	
	           // Update food and run digest.  Now the counter will increment
	           food = 'cheeseburger';
	           scope.$digest();
	           expect(scope.foodCounter).toEqual(1);
	
	       * ```
	       *
	       *
	       *
	       * @param {(function()|string)} watchExpression Expression that is evaluated on each
	       *    {@link ng.$rootScope.Scope#$digest $digest} cycle. A change in the return value triggers
	       *    a call to the `listener`.
	       *
	       *    - `string`: Evaluated as {@link guide/expression expression}
	       *    - `function(scope)`: called with current `scope` as a parameter.
	       * @param {function(newVal, oldVal, scope)} listener Callback called whenever the value
	       *    of `watchExpression` changes.
	       *
	       *    - `newVal` contains the current value of the `watchExpression`
	       *    - `oldVal` contains the previous value of the `watchExpression`
	       *    - `scope` refers to the current scope
	       * @param {boolean=} [objectEquality=false] Compare for object equality using {@link angular.equals} instead of
	       *     comparing for reference equality.
	       * @returns {function()} Returns a deregistration function for this listener.
	       */
	      $watch: function(watchExp, listener, objectEquality, prettyPrintExpression) {
	        var get = $parse(watchExp);
	
	        if (get.$$watchDelegate) {
	          return get.$$watchDelegate(this, listener, objectEquality, get, watchExp);
	        }
	        var scope = this,
	            array = scope.$$watchers,
	            watcher = {
	              fn: listener,
	              last: initWatchVal,
	              get: get,
	              exp: prettyPrintExpression || watchExp,
	              eq: !!objectEquality
	            };
	
	        lastDirtyWatch = null;
	
	        if (!isFunction(listener)) {
	          watcher.fn = noop;
	        }
	
	        if (!array) {
	          array = scope.$$watchers = [];
	          array.$$digestWatchIndex = -1;
	        }
	        // we use unshift since we use a while loop in $digest for speed.
	        // the while loop reads in reverse order.
	        array.unshift(watcher);
	        array.$$digestWatchIndex++;
	        incrementWatchersCount(this, 1);
	
	        return function deregisterWatch() {
	          var index = arrayRemove(array, watcher);
	          if (index >= 0) {
	            incrementWatchersCount(scope, -1);
	            if (index < array.$$digestWatchIndex) {
	              array.$$digestWatchIndex--;
	            }
	          }
	          lastDirtyWatch = null;
	        };
	      },
	
	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$watchGroup
	       * @kind function
	       *
	       * @description
	       * A variant of {@link ng.$rootScope.Scope#$watch $watch()} where it watches an array of `watchExpressions`.
	       * If any one expression in the collection changes the `listener` is executed.
	       *
	       * - The items in the `watchExpressions` array are observed via the standard `$watch` operation. Their return
	       *   values are examined for changes on every call to `$digest`.
	       * - The `listener` is called whenever any expression in the `watchExpressions` array changes.
	       *
	       * @param {Array.<string|Function(scope)>} watchExpressions Array of expressions that will be individually
	       * watched using {@link ng.$rootScope.Scope#$watch $watch()}
	       *
	       * @param {function(newValues, oldValues, scope)} listener Callback called whenever the return value of any
	       *    expression in `watchExpressions` changes
	       *    The `newValues` array contains the current values of the `watchExpressions`, with the indexes matching
	       *    those of `watchExpression`
	       *    and the `oldValues` array contains the previous values of the `watchExpressions`, with the indexes matching
	       *    those of `watchExpression`
	       *    The `scope` refers to the current scope.
	       * @returns {function()} Returns a de-registration function for all listeners.
	       */
	      $watchGroup: function(watchExpressions, listener) {
	        var oldValues = new Array(watchExpressions.length);
	        var newValues = new Array(watchExpressions.length);
	        var deregisterFns = [];
	        var self = this;
	        var changeReactionScheduled = false;
	        var firstRun = true;
	
	        if (!watchExpressions.length) {
	          // No expressions means we call the listener ASAP
	          var shouldCall = true;
	          self.$evalAsync(function() {
	            if (shouldCall) listener(newValues, newValues, self);
	          });
	          return function deregisterWatchGroup() {
	            shouldCall = false;
	          };
	        }
	
	        if (watchExpressions.length === 1) {
	          // Special case size of one
	          return this.$watch(watchExpressions[0], function watchGroupAction(value, oldValue, scope) {
	            newValues[0] = value;
	            oldValues[0] = oldValue;
	            listener(newValues, (value === oldValue) ? newValues : oldValues, scope);
	          });
	        }
	
	        forEach(watchExpressions, function(expr, i) {
	          var unwatchFn = self.$watch(expr, function watchGroupSubAction(value, oldValue) {
	            newValues[i] = value;
	            oldValues[i] = oldValue;
	            if (!changeReactionScheduled) {
	              changeReactionScheduled = true;
	              self.$evalAsync(watchGroupAction);
	            }
	          });
	          deregisterFns.push(unwatchFn);
	        });
	
	        function watchGroupAction() {
	          changeReactionScheduled = false;
	
	          if (firstRun) {
	            firstRun = false;
	            listener(newValues, newValues, self);
	          } else {
	            listener(newValues, oldValues, self);
	          }
	        }
	
	        return function deregisterWatchGroup() {
	          while (deregisterFns.length) {
	            deregisterFns.shift()();
	          }
	        };
	      },
	
	
	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$watchCollection
	       * @kind function
	       *
	       * @description
	       * Shallow watches the properties of an object and fires whenever any of the properties change
	       * (for arrays, this implies watching the array items; for object maps, this implies watching
	       * the properties). If a change is detected, the `listener` callback is fired.
	       *
	       * - The `obj` collection is observed via standard $watch operation and is examined on every
	       *   call to $digest() to see if any items have been added, removed, or moved.
	       * - The `listener` is called whenever anything within the `obj` has changed. Examples include
	       *   adding, removing, and moving items belonging to an object or array.
	       *
	       *
	       * # Example
	       * ```js
	          $scope.names = ['igor', 'matias', 'misko', 'james'];
	          $scope.dataCount = 4;
	
	          $scope.$watchCollection('names', function(newNames, oldNames) {
	            $scope.dataCount = newNames.length;
	          });
	
	          expect($scope.dataCount).toEqual(4);
	          $scope.$digest();
	
	          //still at 4 ... no changes
	          expect($scope.dataCount).toEqual(4);
	
	          $scope.names.pop();
	          $scope.$digest();
	
	          //now there's been a change
	          expect($scope.dataCount).toEqual(3);
	       * ```
	       *
	       *
	       * @param {string|function(scope)} obj Evaluated as {@link guide/expression expression}. The
	       *    expression value should evaluate to an object or an array which is observed on each
	       *    {@link ng.$rootScope.Scope#$digest $digest} cycle. Any shallow change within the
	       *    collection will trigger a call to the `listener`.
	       *
	       * @param {function(newCollection, oldCollection, scope)} listener a callback function called
	       *    when a change is detected.
	       *    - The `newCollection` object is the newly modified data obtained from the `obj` expression
	       *    - The `oldCollection` object is a copy of the former collection data.
	       *      Due to performance considerations, the`oldCollection` value is computed only if the
	       *      `listener` function declares two or more arguments.
	       *    - The `scope` argument refers to the current scope.
	       *
	       * @returns {function()} Returns a de-registration function for this listener. When the
	       *    de-registration function is executed, the internal watch operation is terminated.
	       */
	      $watchCollection: function(obj, listener) {
	        $watchCollectionInterceptor.$stateful = true;
	
	        var self = this;
	        // the current value, updated on each dirty-check run
	        var newValue;
	        // a shallow copy of the newValue from the last dirty-check run,
	        // updated to match newValue during dirty-check run
	        var oldValue;
	        // a shallow copy of the newValue from when the last change happened
	        var veryOldValue;
	        // only track veryOldValue if the listener is asking for it
	        var trackVeryOldValue = (listener.length > 1);
	        var changeDetected = 0;
	        var changeDetector = $parse(obj, $watchCollectionInterceptor);
	        var internalArray = [];
	        var internalObject = {};
	        var initRun = true;
	        var oldLength = 0;
	
	        function $watchCollectionInterceptor(_value) {
	          newValue = _value;
	          var newLength, key, bothNaN, newItem, oldItem;
	
	          // If the new value is undefined, then return undefined as the watch may be a one-time watch
	          if (isUndefined(newValue)) return;
	
	          if (!isObject(newValue)) { // if primitive
	            if (oldValue !== newValue) {
	              oldValue = newValue;
	              changeDetected++;
	            }
	          } else if (isArrayLike(newValue)) {
	            if (oldValue !== internalArray) {
	              // we are transitioning from something which was not an array into array.
	              oldValue = internalArray;
	              oldLength = oldValue.length = 0;
	              changeDetected++;
	            }
	
	            newLength = newValue.length;
	
	            if (oldLength !== newLength) {
	              // if lengths do not match we need to trigger change notification
	              changeDetected++;
	              oldValue.length = oldLength = newLength;
	            }
	            // copy the items to oldValue and look for changes.
	            for (var i = 0; i < newLength; i++) {
	              oldItem = oldValue[i];
	              newItem = newValue[i];
	
	              // eslint-disable-next-line no-self-compare
	              bothNaN = (oldItem !== oldItem) && (newItem !== newItem);
	              if (!bothNaN && (oldItem !== newItem)) {
	                changeDetected++;
	                oldValue[i] = newItem;
	              }
	            }
	          } else {
	            if (oldValue !== internalObject) {
	              // we are transitioning from something which was not an object into object.
	              oldValue = internalObject = {};
	              oldLength = 0;
	              changeDetected++;
	            }
	            // copy the items to oldValue and look for changes.
	            newLength = 0;
	            for (key in newValue) {
	              if (hasOwnProperty.call(newValue, key)) {
	                newLength++;
	                newItem = newValue[key];
	                oldItem = oldValue[key];
	
	                if (key in oldValue) {
	                  // eslint-disable-next-line no-self-compare
	                  bothNaN = (oldItem !== oldItem) && (newItem !== newItem);
	                  if (!bothNaN && (oldItem !== newItem)) {
	                    changeDetected++;
	                    oldValue[key] = newItem;
	                  }
	                } else {
	                  oldLength++;
	                  oldValue[key] = newItem;
	                  changeDetected++;
	                }
	              }
	            }
	            if (oldLength > newLength) {
	              // we used to have more keys, need to find them and destroy them.
	              changeDetected++;
	              for (key in oldValue) {
	                if (!hasOwnProperty.call(newValue, key)) {
	                  oldLength--;
	                  delete oldValue[key];
	                }
	              }
	            }
	          }
	          return changeDetected;
	        }
	
	        function $watchCollectionAction() {
	          if (initRun) {
	            initRun = false;
	            listener(newValue, newValue, self);
	          } else {
	            listener(newValue, veryOldValue, self);
	          }
	
	          // make a copy for the next time a collection is changed
	          if (trackVeryOldValue) {
	            if (!isObject(newValue)) {
	              //primitive
	              veryOldValue = newValue;
	            } else if (isArrayLike(newValue)) {
	              veryOldValue = new Array(newValue.length);
	              for (var i = 0; i < newValue.length; i++) {
	                veryOldValue[i] = newValue[i];
	              }
	            } else { // if object
	              veryOldValue = {};
	              for (var key in newValue) {
	                if (hasOwnProperty.call(newValue, key)) {
	                  veryOldValue[key] = newValue[key];
	                }
	              }
	            }
	          }
	        }
	
	        return this.$watch(changeDetector, $watchCollectionAction);
	      },
	
	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$digest
	       * @kind function
	       *
	       * @description
	       * Processes all of the {@link ng.$rootScope.Scope#$watch watchers} of the current scope and
	       * its children. Because a {@link ng.$rootScope.Scope#$watch watcher}'s listener can change
	       * the model, the `$digest()` keeps calling the {@link ng.$rootScope.Scope#$watch watchers}
	       * until no more listeners are firing. This means that it is possible to get into an infinite
	       * loop. This function will throw `'Maximum iteration limit exceeded.'` if the number of
	       * iterations exceeds 10.
	       *
	       * Usually, you don't call `$digest()` directly in
	       * {@link ng.directive:ngController controllers} or in
	       * {@link ng.$compileProvider#directive directives}.
	       * Instead, you should call {@link ng.$rootScope.Scope#$apply $apply()} (typically from within
	       * a {@link ng.$compileProvider#directive directive}), which will force a `$digest()`.
	       *
	       * If you want to be notified whenever `$digest()` is called,
	       * you can register a `watchExpression` function with
	       * {@link ng.$rootScope.Scope#$watch $watch()} with no `listener`.
	       *
	       * In unit tests, you may need to call `$digest()` to simulate the scope life cycle.
	       *
	       * # Example
	       * ```js
	           var scope = ...;
	           scope.name = 'misko';
	           scope.counter = 0;
	
	           expect(scope.counter).toEqual(0);
	           scope.$watch('name', function(newValue, oldValue) {
	             scope.counter = scope.counter + 1;
	           });
	           expect(scope.counter).toEqual(0);
	
	           scope.$digest();
	           // the listener is always called during the first $digest loop after it was registered
	           expect(scope.counter).toEqual(1);
	
	           scope.$digest();
	           // but now it will not be called unless the value changes
	           expect(scope.counter).toEqual(1);
	
	           scope.name = 'adam';
	           scope.$digest();
	           expect(scope.counter).toEqual(2);
	       * ```
	       *
	       */
	      $digest: function() {
	        var watch, value, last, fn, get,
	            watchers,
	            dirty, ttl = TTL,
	            next, current, target = this,
	            watchLog = [],
	            logIdx, asyncTask;
	
	        beginPhase('$digest');
	        // Check for changes to browser url that happened in sync before the call to $digest
	        $browser.$$checkUrlChange();
	
	        if (this === $rootScope && applyAsyncId !== null) {
	          // If this is the root scope, and $applyAsync has scheduled a deferred $apply(), then
	          // cancel the scheduled $apply and flush the queue of expressions to be evaluated.
	          $browser.defer.cancel(applyAsyncId);
	          flushApplyAsync();
	        }
	
	        lastDirtyWatch = null;
	
	        do { // "while dirty" loop
	          dirty = false;
	          current = target;
	
	          // It's safe for asyncQueuePosition to be a local variable here because this loop can't
	          // be reentered recursively. Calling $digest from a function passed to $applyAsync would
	          // lead to a '$digest already in progress' error.
	          for (var asyncQueuePosition = 0; asyncQueuePosition < asyncQueue.length; asyncQueuePosition++) {
	            try {
	              asyncTask = asyncQueue[asyncQueuePosition];
	              asyncTask.scope.$eval(asyncTask.expression, asyncTask.locals);
	            } catch (e) {
	              $exceptionHandler(e);
	            }
	            lastDirtyWatch = null;
	          }
	          asyncQueue.length = 0;
	
	          traverseScopesLoop:
	          do { // "traverse the scopes" loop
	            if ((watchers = current.$$watchers)) {
	              // process our watches
	              watchers.$$digestWatchIndex = watchers.length;
	              while (watchers.$$digestWatchIndex--) {
	                try {
	                  watch = watchers[watchers.$$digestWatchIndex];
	                  // Most common watches are on primitives, in which case we can short
	                  // circuit it with === operator, only when === fails do we use .equals
	                  if (watch) {
	                    get = watch.get;
	                    if ((value = get(current)) !== (last = watch.last) &&
	                        !(watch.eq
	                            ? equals(value, last)
	                            : (isNumberNaN(value) && isNumberNaN(last)))) {
	                      dirty = true;
	                      lastDirtyWatch = watch;
	                      watch.last = watch.eq ? copy(value, null) : value;
	                      fn = watch.fn;
	                      fn(value, ((last === initWatchVal) ? value : last), current);
	                      if (ttl < 5) {
	                        logIdx = 4 - ttl;
	                        if (!watchLog[logIdx]) watchLog[logIdx] = [];
	                        watchLog[logIdx].push({
	                          msg: isFunction(watch.exp) ? 'fn: ' + (watch.exp.name || watch.exp.toString()) : watch.exp,
	                          newVal: value,
	                          oldVal: last
	                        });
	                      }
	                    } else if (watch === lastDirtyWatch) {
	                      // If the most recently dirty watcher is now clean, short circuit since the remaining watchers
	                      // have already been tested.
	                      dirty = false;
	                      break traverseScopesLoop;
	                    }
	                  }
	                } catch (e) {
	                  $exceptionHandler(e);
	                }
	              }
	            }
	
	            // Insanity Warning: scope depth-first traversal
	            // yes, this code is a bit crazy, but it works and we have tests to prove it!
	            // this piece should be kept in sync with the traversal in $broadcast
	            if (!(next = ((current.$$watchersCount && current.$$childHead) ||
	                (current !== target && current.$$nextSibling)))) {
	              while (current !== target && !(next = current.$$nextSibling)) {
	                current = current.$parent;
	              }
	            }
	          } while ((current = next));
	
	          // `break traverseScopesLoop;` takes us to here
	
	          if ((dirty || asyncQueue.length) && !(ttl--)) {
	            clearPhase();
	            throw $rootScopeMinErr('infdig',
	                '{0} $digest() iterations reached. Aborting!\n' +
	                'Watchers fired in the last 5 iterations: {1}',
	                TTL, watchLog);
	          }
	
	        } while (dirty || asyncQueue.length);
	
	        clearPhase();
	
	        // postDigestQueuePosition isn't local here because this loop can be reentered recursively.
	        while (postDigestQueuePosition < postDigestQueue.length) {
	          try {
	            postDigestQueue[postDigestQueuePosition++]();
	          } catch (e) {
	            $exceptionHandler(e);
	          }
	        }
	        postDigestQueue.length = postDigestQueuePosition = 0;
	      },
	
	
	      /**
	       * @ngdoc event
	       * @name $rootScope.Scope#$destroy
	       * @eventType broadcast on scope being destroyed
	       *
	       * @description
	       * Broadcasted when a scope and its children are being destroyed.
	       *
	       * Note that, in AngularJS, there is also a `$destroy` jQuery event, which can be used to
	       * clean up DOM bindings before an element is removed from the DOM.
	       */
	
	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$destroy
	       * @kind function
	       *
	       * @description
	       * Removes the current scope (and all of its children) from the parent scope. Removal implies
	       * that calls to {@link ng.$rootScope.Scope#$digest $digest()} will no longer
	       * propagate to the current scope and its children. Removal also implies that the current
	       * scope is eligible for garbage collection.
	       *
	       * The `$destroy()` is usually used by directives such as
	       * {@link ng.directive:ngRepeat ngRepeat} for managing the
	       * unrolling of the loop.
	       *
	       * Just before a scope is destroyed, a `$destroy` event is broadcasted on this scope.
	       * Application code can register a `$destroy` event handler that will give it a chance to
	       * perform any necessary cleanup.
	       *
	       * Note that, in AngularJS, there is also a `$destroy` jQuery event, which can be used to
	       * clean up DOM bindings before an element is removed from the DOM.
	       */
	      $destroy: function() {
	        // We can't destroy a scope that has been already destroyed.
	        if (this.$$destroyed) return;
	        var parent = this.$parent;
	
	        this.$broadcast('$destroy');
	        this.$$destroyed = true;
	
	        if (this === $rootScope) {
	          //Remove handlers attached to window when $rootScope is removed
	          $browser.$$applicationDestroyed();
	        }
	
	        incrementWatchersCount(this, -this.$$watchersCount);
	        for (var eventName in this.$$listenerCount) {
	          decrementListenerCount(this, this.$$listenerCount[eventName], eventName);
	        }
	
	        // sever all the references to parent scopes (after this cleanup, the current scope should
	        // not be retained by any of our references and should be eligible for garbage collection)
	        if (parent && parent.$$childHead === this) parent.$$childHead = this.$$nextSibling;
	        if (parent && parent.$$childTail === this) parent.$$childTail = this.$$prevSibling;
	        if (this.$$prevSibling) this.$$prevSibling.$$nextSibling = this.$$nextSibling;
	        if (this.$$nextSibling) this.$$nextSibling.$$prevSibling = this.$$prevSibling;
	
	        // Disable listeners, watchers and apply/digest methods
	        this.$destroy = this.$digest = this.$apply = this.$evalAsync = this.$applyAsync = noop;
	        this.$on = this.$watch = this.$watchGroup = function() { return noop; };
	        this.$$listeners = {};
	
	        // Disconnect the next sibling to prevent `cleanUpScope` destroying those too
	        this.$$nextSibling = null;
	        cleanUpScope(this);
	      },
	
	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$eval
	       * @kind function
	       *
	       * @description
	       * Executes the `expression` on the current scope and returns the result. Any exceptions in
	       * the expression are propagated (uncaught). This is useful when evaluating Angular
	       * expressions.
	       *
	       * # Example
	       * ```js
	           var scope = ng.$rootScope.Scope();
	           scope.a = 1;
	           scope.b = 2;
	
	           expect(scope.$eval('a+b')).toEqual(3);
	           expect(scope.$eval(function(scope){ return scope.a + scope.b; })).toEqual(3);
	       * ```
	       *
	       * @param {(string|function())=} expression An angular expression to be executed.
	       *
	       *    - `string`: execute using the rules as defined in  {@link guide/expression expression}.
	       *    - `function(scope)`: execute the function with the current `scope` parameter.
	       *
	       * @param {(object)=} locals Local variables object, useful for overriding values in scope.
	       * @returns {*} The result of evaluating the expression.
	       */
	      $eval: function(expr, locals) {
	        return $parse(expr)(this, locals);
	      },
	
	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$evalAsync
	       * @kind function
	       *
	       * @description
	       * Executes the expression on the current scope at a later point in time.
	       *
	       * The `$evalAsync` makes no guarantees as to when the `expression` will be executed, only
	       * that:
	       *
	       *   - it will execute after the function that scheduled the evaluation (preferably before DOM
	       *     rendering).
	       *   - at least one {@link ng.$rootScope.Scope#$digest $digest cycle} will be performed after
	       *     `expression` execution.
	       *
	       * Any exceptions from the execution of the expression are forwarded to the
	       * {@link ng.$exceptionHandler $exceptionHandler} service.
	       *
	       * __Note:__ if this function is called outside of a `$digest` cycle, a new `$digest` cycle
	       * will be scheduled. However, it is encouraged to always call code that changes the model
	       * from within an `$apply` call. That includes code evaluated via `$evalAsync`.
	       *
	       * @param {(string|function())=} expression An angular expression to be executed.
	       *
	       *    - `string`: execute using the rules as defined in {@link guide/expression expression}.
	       *    - `function(scope)`: execute the function with the current `scope` parameter.
	       *
	       * @param {(object)=} locals Local variables object, useful for overriding values in scope.
	       */
	      $evalAsync: function(expr, locals) {
	        // if we are outside of an $digest loop and this is the first time we are scheduling async
	        // task also schedule async auto-flush
	        if (!$rootScope.$$phase && !asyncQueue.length) {
	          $browser.defer(function() {
	            if (asyncQueue.length) {
	              $rootScope.$digest();
	            }
	          });
	        }
	
	        asyncQueue.push({scope: this, expression: $parse(expr), locals: locals});
	      },
	
	      $$postDigest: function(fn) {
	        postDigestQueue.push(fn);
	      },
	
	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$apply
	       * @kind function
	       *
	       * @description
	       * `$apply()` is used to execute an expression in angular from outside of the angular
	       * framework. (For example from browser DOM events, setTimeout, XHR or third party libraries).
	       * Because we are calling into the angular framework we need to perform proper scope life
	       * cycle of {@link ng.$exceptionHandler exception handling},
	       * {@link ng.$rootScope.Scope#$digest executing watches}.
	       *
	       * ## Life cycle
	       *
	       * # Pseudo-Code of `$apply()`
	       * ```js
	           function $apply(expr) {
	             try {
	               return $eval(expr);
	             } catch (e) {
	               $exceptionHandler(e);
	             } finally {
	               $root.$digest();
	             }
	           }
	       * ```
	       *
	       *
	       * Scope's `$apply()` method transitions through the following stages:
	       *
	       * 1. The {@link guide/expression expression} is executed using the
	       *    {@link ng.$rootScope.Scope#$eval $eval()} method.
	       * 2. Any exceptions from the execution of the expression are forwarded to the
	       *    {@link ng.$exceptionHandler $exceptionHandler} service.
	       * 3. The {@link ng.$rootScope.Scope#$watch watch} listeners are fired immediately after the
	       *    expression was executed using the {@link ng.$rootScope.Scope#$digest $digest()} method.
	       *
	       *
	       * @param {(string|function())=} exp An angular expression to be executed.
	       *
	       *    - `string`: execute using the rules as defined in {@link guide/expression expression}.
	       *    - `function(scope)`: execute the function with current `scope` parameter.
	       *
	       * @returns {*} The result of evaluating the expression.
	       */
	      $apply: function(expr) {
	        try {
	          beginPhase('$apply');
	          try {
	            return this.$eval(expr);
	          } finally {
	            clearPhase();
	          }
	        } catch (e) {
	          $exceptionHandler(e);
	        } finally {
	          try {
	            $rootScope.$digest();
	          } catch (e) {
	            $exceptionHandler(e);
	            // eslint-disable-next-line no-unsafe-finally
	            throw e;
	          }
	        }
	      },
	
	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$applyAsync
	       * @kind function
	       *
	       * @description
	       * Schedule the invocation of $apply to occur at a later time. The actual time difference
	       * varies across browsers, but is typically around ~10 milliseconds.
	       *
	       * This can be used to queue up multiple expressions which need to be evaluated in the same
	       * digest.
	       *
	       * @param {(string|function())=} exp An angular expression to be executed.
	       *
	       *    - `string`: execute using the rules as defined in {@link guide/expression expression}.
	       *    - `function(scope)`: execute the function with current `scope` parameter.
	       */
	      $applyAsync: function(expr) {
	        var scope = this;
	        if (expr) {
	          applyAsyncQueue.push($applyAsyncExpression);
	        }
	        expr = $parse(expr);
	        scheduleApplyAsync();
	
	        function $applyAsyncExpression() {
	          scope.$eval(expr);
	        }
	      },
	
	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$on
	       * @kind function
	       *
	       * @description
	       * Listens on events of a given type. See {@link ng.$rootScope.Scope#$emit $emit} for
	       * discussion of event life cycle.
	       *
	       * The event listener function format is: `function(event, args...)`. The `event` object
	       * passed into the listener has the following attributes:
	       *
	       *   - `targetScope` - `{Scope}`: the scope on which the event was `$emit`-ed or
	       *     `$broadcast`-ed.
	       *   - `currentScope` - `{Scope}`: the scope that is currently handling the event. Once the
	       *     event propagates through the scope hierarchy, this property is set to null.
	       *   - `name` - `{string}`: name of the event.
	       *   - `stopPropagation` - `{function=}`: calling `stopPropagation` function will cancel
	       *     further event propagation (available only for events that were `$emit`-ed).
	       *   - `preventDefault` - `{function}`: calling `preventDefault` sets `defaultPrevented` flag
	       *     to true.
	       *   - `defaultPrevented` - `{boolean}`: true if `preventDefault` was called.
	       *
	       * @param {string} name Event name to listen on.
	       * @param {function(event, ...args)} listener Function to call when the event is emitted.
	       * @returns {function()} Returns a deregistration function for this listener.
	       */
	      $on: function(name, listener) {
	        var namedListeners = this.$$listeners[name];
	        if (!namedListeners) {
	          this.$$listeners[name] = namedListeners = [];
	        }
	        namedListeners.push(listener);
	
	        var current = this;
	        do {
	          if (!current.$$listenerCount[name]) {
	            current.$$listenerCount[name] = 0;
	          }
	          current.$$listenerCount[name]++;
	        } while ((current = current.$parent));
	
	        var self = this;
	        return function() {
	          var indexOfListener = namedListeners.indexOf(listener);
	          if (indexOfListener !== -1) {
	            namedListeners[indexOfListener] = null;
	            decrementListenerCount(self, 1, name);
	          }
	        };
	      },
	
	
	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$emit
	       * @kind function
	       *
	       * @description
	       * Dispatches an event `name` upwards through the scope hierarchy notifying the
	       * registered {@link ng.$rootScope.Scope#$on} listeners.
	       *
	       * The event life cycle starts at the scope on which `$emit` was called. All
	       * {@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get
	       * notified. Afterwards, the event traverses upwards toward the root scope and calls all
	       * registered listeners along the way. The event will stop propagating if one of the listeners
	       * cancels it.
	       *
	       * Any exception emitted from the {@link ng.$rootScope.Scope#$on listeners} will be passed
	       * onto the {@link ng.$exceptionHandler $exceptionHandler} service.
	       *
	       * @param {string} name Event name to emit.
	       * @param {...*} args Optional one or more arguments which will be passed onto the event listeners.
	       * @return {Object} Event object (see {@link ng.$rootScope.Scope#$on}).
	       */
	      $emit: function(name, args) {
	        var empty = [],
	            namedListeners,
	            scope = this,
	            stopPropagation = false,
	            event = {
	              name: name,
	              targetScope: scope,
	              stopPropagation: function() {stopPropagation = true;},
	              preventDefault: function() {
	                event.defaultPrevented = true;
	              },
	              defaultPrevented: false
	            },
	            listenerArgs = concat([event], arguments, 1),
	            i, length;
	
	        do {
	          namedListeners = scope.$$listeners[name] || empty;
	          event.currentScope = scope;
	          for (i = 0, length = namedListeners.length; i < length; i++) {
	
	            // if listeners were deregistered, defragment the array
	            if (!namedListeners[i]) {
	              namedListeners.splice(i, 1);
	              i--;
	              length--;
	              continue;
	            }
	            try {
	              //allow all listeners attached to the current scope to run
	              namedListeners[i].apply(null, listenerArgs);
	            } catch (e) {
	              $exceptionHandler(e);
	            }
	          }
	          //if any listener on the current scope stops propagation, prevent bubbling
	          if (stopPropagation) {
	            event.currentScope = null;
	            return event;
	          }
	          //traverse upwards
	          scope = scope.$parent;
	        } while (scope);
	
	        event.currentScope = null;
	
	        return event;
	      },
	
	
	      /**
	       * @ngdoc method
	       * @name $rootScope.Scope#$broadcast
	       * @kind function
	       *
	       * @description
	       * Dispatches an event `name` downwards to all child scopes (and their children) notifying the
	       * registered {@link ng.$rootScope.Scope#$on} listeners.
	       *
	       * The event life cycle starts at the scope on which `$broadcast` was called. All
	       * {@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get
	       * notified. Afterwards, the event propagates to all direct and indirect scopes of the current
	       * scope and calls all registered listeners along the way. The event cannot be canceled.
	       *
	       * Any exception emitted from the {@link ng.$rootScope.Scope#$on listeners} will be passed
	       * onto the {@link ng.$exceptionHandler $exceptionHandler} service.
	       *
	       * @param {string} name Event name to broadcast.
	       * @param {...*} args Optional one or more arguments which will be passed onto the event listeners.
	       * @return {Object} Event object, see {@link ng.$rootScope.Scope#$on}
	       */
	      $broadcast: function(name, args) {
	        var target = this,
	            current = target,
	            next = target,
	            event = {
	              name: name,
	              targetScope: target,
	              preventDefault: function() {
	                event.defaultPrevented = true;
	              },
	              defaultPrevented: false
	            };
	
	        if (!target.$$listenerCount[name]) return event;
	
	        var listenerArgs = concat([event], arguments, 1),
	            listeners, i, length;
	
	        //down while you can, then up and next sibling or up and next sibling until back at root
	        while ((current = next)) {
	          event.currentScope = current;
	          listeners = current.$$listeners[name] || [];
	          for (i = 0, length = listeners.length; i < length; i++) {
	            // if listeners were deregistered, defragment the array
	            if (!listeners[i]) {
	              listeners.splice(i, 1);
	              i--;
	              length--;
	              continue;
	            }
	
	            try {
	              listeners[i].apply(null, listenerArgs);
	            } catch (e) {
	              $exceptionHandler(e);
	            }
	          }
	
	          // Insanity Warning: scope depth-first traversal
	          // yes, this code is a bit crazy, but it works and we have tests to prove it!
	          // this piece should be kept in sync with the traversal in $digest
	          // (though it differs due to having the extra check for $$listenerCount)
	          if (!(next = ((current.$$listenerCount[name] && current.$$childHead) ||
	              (current !== target && current.$$nextSibling)))) {
	            while (current !== target && !(next = current.$$nextSibling)) {
	              current = current.$parent;
	            }
	          }
	        }
	
	        event.currentScope = null;
	        return event;
	      }
	    };
	
	    var $rootScope = new Scope();
	
	    //The internal queues. Expose them on the $rootScope for debugging/testing purposes.
	    var asyncQueue = $rootScope.$$asyncQueue = [];
	    var postDigestQueue = $rootScope.$$postDigestQueue = [];
	    var applyAsyncQueue = $rootScope.$$applyAsyncQueue = [];
	
	    var postDigestQueuePosition = 0;
	
	    return $rootScope;
	
	
	    function beginPhase(phase) {
	      if ($rootScope.$$phase) {
	        throw $rootScopeMinErr('inprog', '{0} already in progress', $rootScope.$$phase);
	      }
	
	      $rootScope.$$phase = phase;
	    }
	
	    function clearPhase() {
	      $rootScope.$$phase = null;
	    }
	
	    function incrementWatchersCount(current, count) {
	      do {
	        current.$$watchersCount += count;
	      } while ((current = current.$parent));
	    }
	
	    function decrementListenerCount(current, count, name) {
	      do {
	        current.$$listenerCount[name] -= count;
	
	        if (current.$$listenerCount[name] === 0) {
	          delete current.$$listenerCount[name];
	        }
	      } while ((current = current.$parent));
	    }
	
	    /**
	     * function used as an initial value for watchers.
	     * because it's unique we can easily tell it apart from other values
	     */
	    function initWatchVal() {}
	
	    function flushApplyAsync() {
	      while (applyAsyncQueue.length) {
	        try {
	          applyAsyncQueue.shift()();
	        } catch (e) {
	          $exceptionHandler(e);
	        }
	      }
	      applyAsyncId = null;
	    }
	
	    function scheduleApplyAsync() {
	      if (applyAsyncId === null) {
	        applyAsyncId = $browser.defer(function() {
	          $rootScope.$apply(flushApplyAsync);
	        });
	      }
	    }
	  }];
	}
	
	/**
	 * @ngdoc service
	 * @name $rootElement
	 *
	 * @description
	 * The root element of Angular application. This is either the element where {@link
	 * ng.directive:ngApp ngApp} was declared or the element passed into
	 * {@link angular.bootstrap}. The element represents the root element of application. It is also the
	 * location where the application's {@link auto.$injector $injector} service gets
	 * published, and can be retrieved using `$rootElement.injector()`.
	 */
	
	
	// the implementation is in angular.bootstrap
	
	/**
	 * @this
	 * @description
	 * Private service to sanitize uris for links and images. Used by $compile and $sanitize.
	 */
	function $$SanitizeUriProvider() {
	  var aHrefSanitizationWhitelist = /^\s*(https?|ftp|mailto|tel|file):/,
	    imgSrcSanitizationWhitelist = /^\s*((https?|ftp|file|blob):|data:image\/)/;
	
	  /**
	   * @description
	   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
	   * urls during a[href] sanitization.
	   *
	   * The sanitization is a security measure aimed at prevent XSS attacks via html links.
	   *
	   * Any url about to be assigned to a[href] via data-binding is first normalized and turned into
	   * an absolute url. Afterwards, the url is matched against the `aHrefSanitizationWhitelist`
	   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
	   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
	   *
	   * @param {RegExp=} regexp New regexp to whitelist urls with.
	   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
	   *    chaining otherwise.
	   */
	  this.aHrefSanitizationWhitelist = function(regexp) {
	    if (isDefined(regexp)) {
	      aHrefSanitizationWhitelist = regexp;
	      return this;
	    }
	    return aHrefSanitizationWhitelist;
	  };
	
	
	  /**
	   * @description
	   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
	   * urls during img[src] sanitization.
	   *
	   * The sanitization is a security measure aimed at prevent XSS attacks via html links.
	   *
	   * Any url about to be assigned to img[src] via data-binding is first normalized and turned into
	   * an absolute url. Afterwards, the url is matched against the `imgSrcSanitizationWhitelist`
	   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
	   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
	   *
	   * @param {RegExp=} regexp New regexp to whitelist urls with.
	   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
	   *    chaining otherwise.
	   */
	  this.imgSrcSanitizationWhitelist = function(regexp) {
	    if (isDefined(regexp)) {
	      imgSrcSanitizationWhitelist = regexp;
	      return this;
	    }
	    return imgSrcSanitizationWhitelist;
	  };
	
	  this.$get = function() {
	    return function sanitizeUri(uri, isImage) {
	      var regex = isImage ? imgSrcSanitizationWhitelist : aHrefSanitizationWhitelist;
	      var normalizedVal;
	      normalizedVal = urlResolve(uri).href;
	      if (normalizedVal !== '' && !normalizedVal.match(regex)) {
	        return 'unsafe:' + normalizedVal;
	      }
	      return uri;
	    };
	  };
	}
	
	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 *     Any commits to this file should be reviewed with security in mind.  *
	 *   Changes to this file can potentially create security vulnerabilities. *
	 *          An approval from 2 Core members with history of modifying      *
	 *                         this file is required.                          *
	 *                                                                         *
	 *  Does the change somehow allow for arbitrary javascript to be executed? *
	 *    Or allows for someone to change the prototype of built-in objects?   *
	 *     Or gives undesired access to variables likes document or window?    *
	 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
	
	/* exported $SceProvider, $SceDelegateProvider */
	
	var $sceMinErr = minErr('$sce');
	
	var SCE_CONTEXTS = {
	  HTML: 'html',
	  CSS: 'css',
	  URL: 'url',
	  // RESOURCE_URL is a subtype of URL used in contexts where a privileged resource is sourced from a
	  // url.  (e.g. ng-include, script src, templateUrl)
	  RESOURCE_URL: 'resourceUrl',
	  JS: 'js'
	};
	
	// Helper functions follow.
	
	var UNDERSCORE_LOWERCASE_REGEXP = /_([a-z])/g;
	
	function snakeToCamel(name) {
	  return name
	    .replace(UNDERSCORE_LOWERCASE_REGEXP, fnCamelCaseReplace);
	}
	
	function adjustMatcher(matcher) {
	  if (matcher === 'self') {
	    return matcher;
	  } else if (isString(matcher)) {
	    // Strings match exactly except for 2 wildcards - '*' and '**'.
	    // '*' matches any character except those from the set ':/.?&'.
	    // '**' matches any character (like .* in a RegExp).
	    // More than 2 *'s raises an error as it's ill defined.
	    if (matcher.indexOf('***') > -1) {
	      throw $sceMinErr('iwcard',
	          'Illegal sequence *** in string matcher.  String: {0}', matcher);
	    }
	    matcher = escapeForRegexp(matcher).
	                  replace(/\\\*\\\*/g, '.*').
	                  replace(/\\\*/g, '[^:/.?&;]*');
	    return new RegExp('^' + matcher + '$');
	  } else if (isRegExp(matcher)) {
	    // The only other type of matcher allowed is a Regexp.
	    // Match entire URL / disallow partial matches.
	    // Flags are reset (i.e. no global, ignoreCase or multiline)
	    return new RegExp('^' + matcher.source + '$');
	  } else {
	    throw $sceMinErr('imatcher',
	        'Matchers may only be "self", string patterns or RegExp objects');
	  }
	}
	
	
	function adjustMatchers(matchers) {
	  var adjustedMatchers = [];
	  if (isDefined(matchers)) {
	    forEach(matchers, function(matcher) {
	      adjustedMatchers.push(adjustMatcher(matcher));
	    });
	  }
	  return adjustedMatchers;
	}
	
	
	/**
	 * @ngdoc service
	 * @name $sceDelegate
	 * @kind function
	 *
	 * @description
	 *
	 * `$sceDelegate` is a service that is used by the `$sce` service to provide {@link ng.$sce Strict
	 * Contextual Escaping (SCE)} services to AngularJS.
	 *
	 * Typically, you would configure or override the {@link ng.$sceDelegate $sceDelegate} instead of
	 * the `$sce` service to customize the way Strict Contextual Escaping works in AngularJS.  This is
	 * because, while the `$sce` provides numerous shorthand methods, etc., you really only need to
	 * override 3 core functions (`trustAs`, `getTrusted` and `valueOf`) to replace the way things
	 * work because `$sce` delegates to `$sceDelegate` for these operations.
	 *
	 * Refer {@link ng.$sceDelegateProvider $sceDelegateProvider} to configure this service.
	 *
	 * The default instance of `$sceDelegate` should work out of the box with little pain.  While you
	 * can override it completely to change the behavior of `$sce`, the common case would
	 * involve configuring the {@link ng.$sceDelegateProvider $sceDelegateProvider} instead by setting
	 * your own whitelists and blacklists for trusting URLs used for loading AngularJS resources such as
	 * templates.  Refer {@link ng.$sceDelegateProvider#resourceUrlWhitelist
	 * $sceDelegateProvider.resourceUrlWhitelist} and {@link
	 * ng.$sceDelegateProvider#resourceUrlBlacklist $sceDelegateProvider.resourceUrlBlacklist}
	 */
	
	/**
	 * @ngdoc provider
	 * @name $sceDelegateProvider
	 * @this
	 *
	 * @description
	 *
	 * The `$sceDelegateProvider` provider allows developers to configure the {@link ng.$sceDelegate
	 * $sceDelegate} service.  This allows one to get/set the whitelists and blacklists used to ensure
	 * that the URLs used for sourcing Angular templates are safe.  Refer {@link
	 * ng.$sceDelegateProvider#resourceUrlWhitelist $sceDelegateProvider.resourceUrlWhitelist} and
	 * {@link ng.$sceDelegateProvider#resourceUrlBlacklist $sceDelegateProvider.resourceUrlBlacklist}
	 *
	 * For the general details about this service in Angular, read the main page for {@link ng.$sce
	 * Strict Contextual Escaping (SCE)}.
	 *
	 * **Example**:  Consider the following case. <a name="example"></a>
	 *
	 * - your app is hosted at url `http://myapp.example.com/`
	 * - but some of your templates are hosted on other domains you control such as
	 *   `http://srv01.assets.example.com/`, `http://srv02.assets.example.com/`, etc.
	 * - and you have an open redirect at `http://myapp.example.com/clickThru?...`.
	 *
	 * Here is what a secure configuration for this scenario might look like:
	 *
	 * ```
	 *  angular.module('myApp', []).config(function($sceDelegateProvider) {
	 *    $sceDelegateProvider.resourceUrlWhitelist([
	 *      // Allow same origin resource loads.
	 *      'self',
	 *      // Allow loading from our assets domain.  Notice the difference between * and **.
	 *      'http://srv*.assets.example.com/**'
	 *    ]);
	 *
	 *    // The blacklist overrides the whitelist so the open redirect here is blocked.
	 *    $sceDelegateProvider.resourceUrlBlacklist([
	 *      'http://myapp.example.com/clickThru**'
	 *    ]);
	 *  });
	 * ```
	 */
	
	function $SceDelegateProvider() {
	  this.SCE_CONTEXTS = SCE_CONTEXTS;
	
	  // Resource URLs can also be trusted by policy.
	  var resourceUrlWhitelist = ['self'],
	      resourceUrlBlacklist = [];
	
	  /**
	   * @ngdoc method
	   * @name $sceDelegateProvider#resourceUrlWhitelist
	   * @kind function
	   *
	   * @param {Array=} whitelist When provided, replaces the resourceUrlWhitelist with the value
	   *    provided.  This must be an array or null.  A snapshot of this array is used so further
	   *    changes to the array are ignored.
	   *
	   *    Follow {@link ng.$sce#resourceUrlPatternItem this link} for a description of the items
	   *    allowed in this array.
	   *
	   *    <div class="alert alert-warning">
	   *    **Note:** an empty whitelist array will block all URLs!
	   *    </div>
	   *
	   * @return {Array} the currently set whitelist array.
	   *
	   * The **default value** when no whitelist has been explicitly set is `['self']` allowing only
	   * same origin resource requests.
	   *
	   * @description
	   * Sets/Gets the whitelist of trusted resource URLs.
	   */
	  this.resourceUrlWhitelist = function(value) {
	    if (arguments.length) {
	      resourceUrlWhitelist = adjustMatchers(value);
	    }
	    return resourceUrlWhitelist;
	  };
	
	  /**
	   * @ngdoc method
	   * @name $sceDelegateProvider#resourceUrlBlacklist
	   * @kind function
	   *
	   * @param {Array=} blacklist When provided, replaces the resourceUrlBlacklist with the value
	   *    provided.  This must be an array or null.  A snapshot of this array is used so further
	   *    changes to the array are ignored.
	   *
	   *    Follow {@link ng.$sce#resourceUrlPatternItem this link} for a description of the items
	   *    allowed in this array.
	   *
	   *    The typical usage for the blacklist is to **block
	   *    [open redirects](http://cwe.mitre.org/data/definitions/601.html)** served by your domain as
	   *    these would otherwise be trusted but actually return content from the redirected domain.
	   *
	   *    Finally, **the blacklist overrides the whitelist** and has the final say.
	   *
	   * @return {Array} the currently set blacklist array.
	   *
	   * The **default value** when no whitelist has been explicitly set is the empty array (i.e. there
	   * is no blacklist.)
	   *
	   * @description
	   * Sets/Gets the blacklist of trusted resource URLs.
	   */
	
	  this.resourceUrlBlacklist = function(value) {
	    if (arguments.length) {
	      resourceUrlBlacklist = adjustMatchers(value);
	    }
	    return resourceUrlBlacklist;
	  };
	
	  this.$get = ['$injector', function($injector) {
	
	    var htmlSanitizer = function htmlSanitizer(html) {
	      throw $sceMinErr('unsafe', 'Attempting to use an unsafe value in a safe context.');
	    };
	
	    if ($injector.has('$sanitize')) {
	      htmlSanitizer = $injector.get('$sanitize');
	    }
	
	
	    function matchUrl(matcher, parsedUrl) {
	      if (matcher === 'self') {
	        return urlIsSameOrigin(parsedUrl);
	      } else {
	        // definitely a regex.  See adjustMatchers()
	        return !!matcher.exec(parsedUrl.href);
	      }
	    }
	
	    function isResourceUrlAllowedByPolicy(url) {
	      var parsedUrl = urlResolve(url.toString());
	      var i, n, allowed = false;
	      // Ensure that at least one item from the whitelist allows this url.
	      for (i = 0, n = resourceUrlWhitelist.length; i < n; i++) {
	        if (matchUrl(resourceUrlWhitelist[i], parsedUrl)) {
	          allowed = true;
	          break;
	        }
	      }
	      if (allowed) {
	        // Ensure that no item from the blacklist blocked this url.
	        for (i = 0, n = resourceUrlBlacklist.length; i < n; i++) {
	          if (matchUrl(resourceUrlBlacklist[i], parsedUrl)) {
	            allowed = false;
	            break;
	          }
	        }
	      }
	      return allowed;
	    }
	
	    function generateHolderType(Base) {
	      var holderType = function TrustedValueHolderType(trustedValue) {
	        this.$$unwrapTrustedValue = function() {
	          return trustedValue;
	        };
	      };
	      if (Base) {
	        holderType.prototype = new Base();
	      }
	      holderType.prototype.valueOf = function sceValueOf() {
	        return this.$$unwrapTrustedValue();
	      };
	      holderType.prototype.toString = function sceToString() {
	        return this.$$unwrapTrustedValue().toString();
	      };
	      return holderType;
	    }
	
	    var trustedValueHolderBase = generateHolderType(),
	        byType = {};
	
	    byType[SCE_CONTEXTS.HTML] = generateHolderType(trustedValueHolderBase);
	    byType[SCE_CONTEXTS.CSS] = generateHolderType(trustedValueHolderBase);
	    byType[SCE_CONTEXTS.URL] = generateHolderType(trustedValueHolderBase);
	    byType[SCE_CONTEXTS.JS] = generateHolderType(trustedValueHolderBase);
	    byType[SCE_CONTEXTS.RESOURCE_URL] = generateHolderType(byType[SCE_CONTEXTS.URL]);
	
	    /**
	     * @ngdoc method
	     * @name $sceDelegate#trustAs
	     *
	     * @description
	     * Returns an object that is trusted by angular for use in specified strict
	     * contextual escaping contexts (such as ng-bind-html, ng-include, any src
	     * attribute interpolation, any dom event binding attribute interpolation
	     * such as for onclick,  etc.) that uses the provided value.
	     * See {@link ng.$sce $sce} for enabling strict contextual escaping.
	     *
	     * @param {string} type The kind of context in which this value is safe for use.  e.g. url,
	     *   resourceUrl, html, js and css.
	     * @param {*} value The value that that should be considered trusted/safe.
	     * @returns {*} A value that can be used to stand in for the provided `value` in places
	     * where Angular expects a $sce.trustAs() return value.
	     */
	    function trustAs(type, trustedValue) {
	      var Constructor = (byType.hasOwnProperty(type) ? byType[type] : null);
	      if (!Constructor) {
	        throw $sceMinErr('icontext',
	            'Attempted to trust a value in invalid context. Context: {0}; Value: {1}',
	            type, trustedValue);
	      }
	      if (trustedValue === null || isUndefined(trustedValue) || trustedValue === '') {
	        return trustedValue;
	      }
	      // All the current contexts in SCE_CONTEXTS happen to be strings.  In order to avoid trusting
	      // mutable objects, we ensure here that the value passed in is actually a string.
	      if (typeof trustedValue !== 'string') {
	        throw $sceMinErr('itype',
	            'Attempted to trust a non-string value in a content requiring a string: Context: {0}',
	            type);
	      }
	      return new Constructor(trustedValue);
	    }
	
	    /**
	     * @ngdoc method
	     * @name $sceDelegate#valueOf
	     *
	     * @description
	     * If the passed parameter had been returned by a prior call to {@link ng.$sceDelegate#trustAs
	     * `$sceDelegate.trustAs`}, returns the value that had been passed to {@link
	     * ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}.
	     *
	     * If the passed parameter is not a value that had been returned by {@link
	     * ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}, returns it as-is.
	     *
	     * @param {*} value The result of a prior {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}
	     *      call or anything else.
	     * @returns {*} The `value` that was originally provided to {@link ng.$sceDelegate#trustAs
	     *     `$sceDelegate.trustAs`} if `value` is the result of such a call.  Otherwise, returns
	     *     `value` unchanged.
	     */
	    function valueOf(maybeTrusted) {
	      if (maybeTrusted instanceof trustedValueHolderBase) {
	        return maybeTrusted.$$unwrapTrustedValue();
	      } else {
	        return maybeTrusted;
	      }
	    }
	
	    /**
	     * @ngdoc method
	     * @name $sceDelegate#getTrusted
	     *
	     * @description
	     * Takes the result of a {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`} call and
	     * returns the originally supplied value if the queried context type is a supertype of the
	     * created type.  If this condition isn't satisfied, throws an exception.
	     *
	     * <div class="alert alert-danger">
	     * Disabling auto-escaping is extremely dangerous, it usually creates a Cross Site Scripting
	     * (XSS) vulnerability in your application.
	     * </div>
	     *
	     * @param {string} type The kind of context in which this value is to be used.
	     * @param {*} maybeTrusted The result of a prior {@link ng.$sceDelegate#trustAs
	     *     `$sceDelegate.trustAs`} call.
	     * @returns {*} The value the was originally provided to {@link ng.$sceDelegate#trustAs
	     *     `$sceDelegate.trustAs`} if valid in this context.  Otherwise, throws an exception.
	     */
	    function getTrusted(type, maybeTrusted) {
	      if (maybeTrusted === null || isUndefined(maybeTrusted) || maybeTrusted === '') {
	        return maybeTrusted;
	      }
	      var constructor = (byType.hasOwnProperty(type) ? byType[type] : null);
	      if (constructor && maybeTrusted instanceof constructor) {
	        return maybeTrusted.$$unwrapTrustedValue();
	      }
	      // If we get here, then we may only take one of two actions.
	      // 1. sanitize the value for the requested type, or
	      // 2. throw an exception.
	      if (type === SCE_CONTEXTS.RESOURCE_URL) {
	        if (isResourceUrlAllowedByPolicy(maybeTrusted)) {
	          return maybeTrusted;
	        } else {
	          throw $sceMinErr('insecurl',
	              'Blocked loading resource from url not allowed by $sceDelegate policy.  URL: {0}',
	              maybeTrusted.toString());
	        }
	      } else if (type === SCE_CONTEXTS.HTML) {
	        return htmlSanitizer(maybeTrusted);
	      }
	      throw $sceMinErr('unsafe', 'Attempting to use an unsafe value in a safe context.');
	    }
	
	    return { trustAs: trustAs,
	             getTrusted: getTrusted,
	             valueOf: valueOf };
	  }];
	}
	
	
	/**
	 * @ngdoc provider
	 * @name $sceProvider
	 * @this
	 *
	 * @description
	 *
	 * The $sceProvider provider allows developers to configure the {@link ng.$sce $sce} service.
	 * -   enable/disable Strict Contextual Escaping (SCE) in a module
	 * -   override the default implementation with a custom delegate
	 *
	 * Read more about {@link ng.$sce Strict Contextual Escaping (SCE)}.
	 */
	
	/**
	 * @ngdoc service
	 * @name $sce
	 * @kind function
	 *
	 * @description
	 *
	 * `$sce` is a service that provides Strict Contextual Escaping services to AngularJS.
	 *
	 * # Strict Contextual Escaping
	 *
	 * Strict Contextual Escaping (SCE) is a mode in which AngularJS requires bindings in certain
	 * contexts to result in a value that is marked as safe to use for that context.  One example of
	 * such a context is binding arbitrary html controlled by the user via `ng-bind-html`.  We refer
	 * to these contexts as privileged or SCE contexts.
	 *
	 * As of version 1.2, Angular ships with SCE enabled by default.
	 *
	 * Note:  When enabled (the default), IE<11 in quirks mode is not supported.  In this mode, IE<11 allow
	 * one to execute arbitrary javascript by the use of the expression() syntax.  Refer
	 * <http://blogs.msdn.com/b/ie/archive/2008/10/16/ending-expressions.aspx> to learn more about them.
	 * You can ensure your document is in standards mode and not quirks mode by adding `<!doctype html>`
	 * to the top of your HTML document.
	 *
	 * SCE assists in writing code in a way that (a) is secure by default and (b) makes auditing for
	 * security vulnerabilities such as XSS, clickjacking, etc. a lot easier.
	 *
	 * Here's an example of a binding in a privileged context:
	 *
	 * ```
	 * <input ng-model="userHtml" aria-label="User input">
	 * <div ng-bind-html="userHtml"></div>
	 * ```
	 *
	 * Notice that `ng-bind-html` is bound to `userHtml` controlled by the user.  With SCE
	 * disabled, this application allows the user to render arbitrary HTML into the DIV.
	 * In a more realistic example, one may be rendering user comments, blog articles, etc. via
	 * bindings.  (HTML is just one example of a context where rendering user controlled input creates
	 * security vulnerabilities.)
	 *
	 * For the case of HTML, you might use a library, either on the client side, or on the server side,
	 * to sanitize unsafe HTML before binding to the value and rendering it in the document.
	 *
	 * How would you ensure that every place that used these types of bindings was bound to a value that
	 * was sanitized by your library (or returned as safe for rendering by your server?)  How can you
	 * ensure that you didn't accidentally delete the line that sanitized the value, or renamed some
	 * properties/fields and forgot to update the binding to the sanitized value?
	 *
	 * To be secure by default, you want to ensure that any such bindings are disallowed unless you can
	 * determine that something explicitly says it's safe to use a value for binding in that
	 * context.  You can then audit your code (a simple grep would do) to ensure that this is only done
	 * for those values that you can easily tell are safe - because they were received from your server,
	 * sanitized by your library, etc.  You can organize your codebase to help with this - perhaps
	 * allowing only the files in a specific directory to do this.  Ensuring that the internal API
	 * exposed by that code doesn't markup arbitrary values as safe then becomes a more manageable task.
	 *
	 * In the case of AngularJS' SCE service, one uses {@link ng.$sce#trustAs $sce.trustAs}
	 * (and shorthand methods such as {@link ng.$sce#trustAsHtml $sce.trustAsHtml}, etc.) to
	 * obtain values that will be accepted by SCE / privileged contexts.
	 *
	 *
	 * ## How does it work?
	 *
	 * In privileged contexts, directives and code will bind to the result of {@link ng.$sce#getTrusted
	 * $sce.getTrusted(context, value)} rather than to the value directly.  Directives use {@link
	 * ng.$sce#parseAs $sce.parseAs} rather than `$parse` to watch attribute bindings, which performs the
	 * {@link ng.$sce#getTrusted $sce.getTrusted} behind the scenes on non-constant literals.
	 *
	 * As an example, {@link ng.directive:ngBindHtml ngBindHtml} uses {@link
	 * ng.$sce#parseAsHtml $sce.parseAsHtml(binding expression)}.  Here's the actual code (slightly
	 * simplified):
	 *
	 * ```
	 * var ngBindHtmlDirective = ['$sce', function($sce) {
	 *   return function(scope, element, attr) {
	 *     scope.$watch($sce.parseAsHtml(attr.ngBindHtml), function(value) {
	 *       element.html(value || '');
	 *     });
	 *   };
	 * }];
	 * ```
	 *
	 * ## Impact on loading templates
	 *
	 * This applies both to the {@link ng.directive:ngInclude `ng-include`} directive as well as
	 * `templateUrl`'s specified by {@link guide/directive directives}.
	 *
	 * By default, Angular only loads templates from the same domain and protocol as the application
	 * document.  This is done by calling {@link ng.$sce#getTrustedResourceUrl
	 * $sce.getTrustedResourceUrl} on the template URL.  To load templates from other domains and/or
	 * protocols, you may either {@link ng.$sceDelegateProvider#resourceUrlWhitelist whitelist
	 * them} or {@link ng.$sce#trustAsResourceUrl wrap it} into a trusted value.
	 *
	 * *Please note*:
	 * The browser's
	 * [Same Origin Policy](https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest)
	 * and [Cross-Origin Resource Sharing (CORS)](http://www.w3.org/TR/cors/)
	 * policy apply in addition to this and may further restrict whether the template is successfully
	 * loaded.  This means that without the right CORS policy, loading templates from a different domain
	 * won't work on all browsers.  Also, loading templates from `file://` URL does not work on some
	 * browsers.
	 *
	 * ## This feels like too much overhead
	 *
	 * It's important to remember that SCE only applies to interpolation expressions.
	 *
	 * If your expressions are constant literals, they're automatically trusted and you don't need to
	 * call `$sce.trustAs` on them (remember to include the `ngSanitize` module) (e.g.
	 * `<div ng-bind-html="'<b>implicitly trusted</b>'"></div>`) just works.
	 *
	 * Additionally, `a[href]` and `img[src]` automatically sanitize their URLs and do not pass them
	 * through {@link ng.$sce#getTrusted $sce.getTrusted}.  SCE doesn't play a role here.
	 *
	 * The included {@link ng.$sceDelegate $sceDelegate} comes with sane defaults to allow you to load
	 * templates in `ng-include` from your application's domain without having to even know about SCE.
	 * It blocks loading templates from other domains or loading templates over http from an https
	 * served document.  You can change these by setting your own custom {@link
	 * ng.$sceDelegateProvider#resourceUrlWhitelist whitelists} and {@link
	 * ng.$sceDelegateProvider#resourceUrlBlacklist blacklists} for matching such URLs.
	 *
	 * This significantly reduces the overhead.  It is far easier to pay the small overhead and have an
	 * application that's secure and can be audited to verify that with much more ease than bolting
	 * security onto an application later.
	 *
	 * <a name="contexts"></a>
	 * ## What trusted context types are supported?
	 *
	 * | Context             | Notes          |
	 * |---------------------|----------------|
	 * | `$sce.HTML`         | For HTML that's safe to source into the application.  The {@link ng.directive:ngBindHtml ngBindHtml} directive uses this context for bindings. If an unsafe value is encountered and the {@link ngSanitize $sanitize} module is present this will sanitize the value instead of throwing an error. |
	 * | `$sce.CSS`          | For CSS that's safe to source into the application.  Currently unused.  Feel free to use it in your own directives. |
	 * | `$sce.URL`          | For URLs that are safe to follow as links.  Currently unused (`<a href=` and `<img src=` sanitize their urls and don't constitute an SCE context. |
	 * | `$sce.RESOURCE_URL` | For URLs that are not only safe to follow as links, but whose contents are also safe to include in your application.  Examples include `ng-include`, `src` / `ngSrc` bindings for tags other than `IMG`, `VIDEO`, `AUDIO`, `SOURCE`, and `TRACK` (e.g. `IFRAME`, `OBJECT`, etc.)  <br><br>Note that `$sce.RESOURCE_URL` makes a stronger statement about the URL than `$sce.URL` does and therefore contexts requiring values trusted for `$sce.RESOURCE_URL` can be used anywhere that values trusted for `$sce.URL` are required. |
	 * | `$sce.JS`           | For JavaScript that is safe to execute in your application's context.  Currently unused.  Feel free to use it in your own directives. |
	 *
	 * ## Format of items in {@link ng.$sceDelegateProvider#resourceUrlWhitelist resourceUrlWhitelist}/{@link ng.$sceDelegateProvider#resourceUrlBlacklist Blacklist} <a name="resourceUrlPatternItem"></a>
	 *
	 *  Each element in these arrays must be one of the following:
	 *
	 *  - **'self'**
	 *    - The special **string**, `'self'`, can be used to match against all URLs of the **same
	 *      domain** as the application document using the **same protocol**.
	 *  - **String** (except the special value `'self'`)
	 *    - The string is matched against the full *normalized / absolute URL* of the resource
	 *      being tested (substring matches are not good enough.)
	 *    - There are exactly **two wildcard sequences** - `*` and `**`.  All other characters
	 *      match themselves.
	 *    - `*`: matches zero or more occurrences of any character other than one of the following 6
	 *      characters: '`:`', '`/`', '`.`', '`?`', '`&`' and '`;`'.  It's a useful wildcard for use
	 *      in a whitelist.
	 *    - `**`: matches zero or more occurrences of *any* character.  As such, it's not
	 *      appropriate for use in a scheme, domain, etc. as it would match too much.  (e.g.
	 *      http://**.example.com/ would match http://evil.com/?ignore=.example.com/ and that might
	 *      not have been the intention.)  Its usage at the very end of the path is ok.  (e.g.
	 *      http://foo.example.com/templates/**).
	 *  - **RegExp** (*see caveat below*)
	 *    - *Caveat*:  While regular expressions are powerful and offer great flexibility,  their syntax
	 *      (and all the inevitable escaping) makes them *harder to maintain*.  It's easy to
	 *      accidentally introduce a bug when one updates a complex expression (imho, all regexes should
	 *      have good test coverage).  For instance, the use of `.` in the regex is correct only in a
	 *      small number of cases.  A `.` character in the regex used when matching the scheme or a
	 *      subdomain could be matched against a `:` or literal `.` that was likely not intended.   It
	 *      is highly recommended to use the string patterns and only fall back to regular expressions
	 *      as a last resort.
	 *    - The regular expression must be an instance of RegExp (i.e. not a string.)  It is
	 *      matched against the **entire** *normalized / absolute URL* of the resource being tested
	 *      (even when the RegExp did not have the `^` and `$` codes.)  In addition, any flags
	 *      present on the RegExp (such as multiline, global, ignoreCase) are ignored.
	 *    - If you are generating your JavaScript from some other templating engine (not
	 *      recommended, e.g. in issue [#4006](https://github.com/angular/angular.js/issues/4006)),
	 *      remember to escape your regular expression (and be aware that you might need more than
	 *      one level of escaping depending on your templating engine and the way you interpolated
	 *      the value.)  Do make use of your platform's escaping mechanism as it might be good
	 *      enough before coding your own.  E.g. Ruby has
	 *      [Regexp.escape(str)](http://www.ruby-doc.org/core-2.0.0/Regexp.html#method-c-escape)
	 *      and Python has [re.escape](http://docs.python.org/library/re.html#re.escape).
	 *      Javascript lacks a similar built in function for escaping.  Take a look at Google
	 *      Closure library's [goog.string.regExpEscape(s)](
	 *      http://docs.closure-library.googlecode.com/git/closure_goog_string_string.js.source.html#line962).
	 *
	 * Refer {@link ng.$sceDelegateProvider $sceDelegateProvider} for an example.
	 *
	 * ## Show me an example using SCE.
	 *
	 * <example module="mySceApp" deps="angular-sanitize.js" name="sce-service">
	 * <file name="index.html">
	 *   <div ng-controller="AppController as myCtrl">
	 *     <i ng-bind-html="myCtrl.explicitlyTrustedHtml" id="explicitlyTrustedHtml"></i><br><br>
	 *     <b>User comments</b><br>
	 *     By default, HTML that isn't explicitly trusted (e.g. Alice's comment) is sanitized when
	 *     $sanitize is available.  If $sanitize isn't available, this results in an error instead of an
	 *     exploit.
	 *     <div class="well">
	 *       <div ng-repeat="userComment in myCtrl.userComments">
	 *         <b>{{userComment.name}}</b>:
	 *         <span ng-bind-html="userComment.htmlComment" class="htmlComment"></span>
	 *         <br>
	 *       </div>
	 *     </div>
	 *   </div>
	 * </file>
	 *
	 * <file name="script.js">
	 *   angular.module('mySceApp', ['ngSanitize'])
	 *     .controller('AppController', ['$http', '$templateCache', '$sce',
	 *       function AppController($http, $templateCache, $sce) {
	 *         var self = this;
	 *         $http.get('test_data.json', {cache: $templateCache}).then(function(response) {
	 *           self.userComments = response.data;
	 *         });
	 *         self.explicitlyTrustedHtml = $sce.trustAsHtml(
	 *             '<span onmouseover="this.textContent=&quot;Explicitly trusted HTML bypasses ' +
	 *             'sanitization.&quot;">Hover over this text.</span>');
	 *       }]);
	 * </file>
	 *
	 * <file name="test_data.json">
	 * [
	 *   { "name": "Alice",
	 *     "htmlComment":
	 *         "<span onmouseover='this.textContent=\"PWN3D!\"'>Is <i>anyone</i> reading this?</span>"
	 *   },
	 *   { "name": "Bob",
	 *     "htmlComment": "<i>Yes!</i>  Am I the only other one?"
	 *   }
	 * ]
	 * </file>
	 *
	 * <file name="protractor.js" type="protractor">
	 *   describe('SCE doc demo', function() {
	 *     it('should sanitize untrusted values', function() {
	 *       expect(element.all(by.css('.htmlComment')).first().getAttribute('innerHTML'))
	 *           .toBe('<span>Is <i>anyone</i> reading this?</span>');
	 *     });
	 *
	 *     it('should NOT sanitize explicitly trusted values', function() {
	 *       expect(element(by.id('explicitlyTrustedHtml')).getAttribute('innerHTML')).toBe(
	 *           '<span onmouseover="this.textContent=&quot;Explicitly trusted HTML bypasses ' +
	 *           'sanitization.&quot;">Hover over this text.</span>');
	 *     });
	 *   });
	 * </file>
	 * </example>
	 *
	 *
	 *
	 * ## Can I disable SCE completely?
	 *
	 * Yes, you can.  However, this is strongly discouraged.  SCE gives you a lot of security benefits
	 * for little coding overhead.  It will be much harder to take an SCE disabled application and
	 * either secure it on your own or enable SCE at a later stage.  It might make sense to disable SCE
	 * for cases where you have a lot of existing code that was written before SCE was introduced and
	 * you're migrating them a module at a time.
	 *
	 * That said, here's how you can completely disable SCE:
	 *
	 * ```
	 * angular.module('myAppWithSceDisabledmyApp', []).config(function($sceProvider) {
	 *   // Completely disable SCE.  For demonstration purposes only!
	 *   // Do not use in new projects.
	 *   $sceProvider.enabled(false);
	 * });
	 * ```
	 *
	 */
	
	function $SceProvider() {
	  var enabled = true;
	
	  /**
	   * @ngdoc method
	   * @name $sceProvider#enabled
	   * @kind function
	   *
	   * @param {boolean=} value If provided, then enables/disables SCE.
	   * @return {boolean} true if SCE is enabled, false otherwise.
	   *
	   * @description
	   * Enables/disables SCE and returns the current value.
	   */
	  this.enabled = function(value) {
	    if (arguments.length) {
	      enabled = !!value;
	    }
	    return enabled;
	  };
	
	
	  /* Design notes on the default implementation for SCE.
	   *
	   * The API contract for the SCE delegate
	   * -------------------------------------
	   * The SCE delegate object must provide the following 3 methods:
	   *
	   * - trustAs(contextEnum, value)
	   *     This method is used to tell the SCE service that the provided value is OK to use in the
	   *     contexts specified by contextEnum.  It must return an object that will be accepted by
	   *     getTrusted() for a compatible contextEnum and return this value.
	   *
	   * - valueOf(value)
	   *     For values that were not produced by trustAs(), return them as is.  For values that were
	   *     produced by trustAs(), return the corresponding input value to trustAs.  Basically, if
	   *     trustAs is wrapping the given values into some type, this operation unwraps it when given
	   *     such a value.
	   *
	   * - getTrusted(contextEnum, value)
	   *     This function should return the a value that is safe to use in the context specified by
	   *     contextEnum or throw and exception otherwise.
	   *
	   * NOTE: This contract deliberately does NOT state that values returned by trustAs() must be
	   * opaque or wrapped in some holder object.  That happens to be an implementation detail.  For
	   * instance, an implementation could maintain a registry of all trusted objects by context.  In
	   * such a case, trustAs() would return the same object that was passed in.  getTrusted() would
	   * return the same object passed in if it was found in the registry under a compatible context or
	   * throw an exception otherwise.  An implementation might only wrap values some of the time based
	   * on some criteria.  getTrusted() might return a value and not throw an exception for special
	   * constants or objects even if not wrapped.  All such implementations fulfill this contract.
	   *
	   *
	   * A note on the inheritance model for SCE contexts
	   * ------------------------------------------------
	   * I've used inheritance and made RESOURCE_URL wrapped types a subtype of URL wrapped types.  This
	   * is purely an implementation details.
	   *
	   * The contract is simply this:
	   *
	   *     getTrusted($sce.RESOURCE_URL, value) succeeding implies that getTrusted($sce.URL, value)
	   *     will also succeed.
	   *
	   * Inheritance happens to capture this in a natural way.  In some future, we
	   * may not use inheritance anymore.  That is OK because no code outside of
	   * sce.js and sceSpecs.js would need to be aware of this detail.
	   */
	
	  this.$get = ['$parse', '$sceDelegate', function(
	                $parse,   $sceDelegate) {
	    // Support: IE 9-11 only
	    // Prereq: Ensure that we're not running in IE<11 quirks mode.  In that mode, IE < 11 allow
	    // the "expression(javascript expression)" syntax which is insecure.
	    if (enabled && msie < 8) {
	      throw $sceMinErr('iequirks',
	        'Strict Contextual Escaping does not support Internet Explorer version < 11 in quirks ' +
	        'mode.  You can fix this by adding the text <!doctype html> to the top of your HTML ' +
	        'document.  See http://docs.angularjs.org/api/ng.$sce for more information.');
	    }
	
	    var sce = shallowCopy(SCE_CONTEXTS);
	
	    /**
	     * @ngdoc method
	     * @name $sce#isEnabled
	     * @kind function
	     *
	     * @return {Boolean} true if SCE is enabled, false otherwise.  If you want to set the value, you
	     * have to do it at module config time on {@link ng.$sceProvider $sceProvider}.
	     *
	     * @description
	     * Returns a boolean indicating if SCE is enabled.
	     */
	    sce.isEnabled = function() {
	      return enabled;
	    };
	    sce.trustAs = $sceDelegate.trustAs;
	    sce.getTrusted = $sceDelegate.getTrusted;
	    sce.valueOf = $sceDelegate.valueOf;
	
	    if (!enabled) {
	      sce.trustAs = sce.getTrusted = function(type, value) { return value; };
	      sce.valueOf = identity;
	    }
	
	    /**
	     * @ngdoc method
	     * @name $sce#parseAs
	     *
	     * @description
	     * Converts Angular {@link guide/expression expression} into a function.  This is like {@link
	     * ng.$parse $parse} and is identical when the expression is a literal constant.  Otherwise, it
	     * wraps the expression in a call to {@link ng.$sce#getTrusted $sce.getTrusted(*type*,
	     * *result*)}
	     *
	     * @param {string} type The kind of SCE context in which this result will be used.
	     * @param {string} expression String expression to compile.
	     * @returns {function(context, locals)} a function which represents the compiled expression:
	     *
	     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
	     *      are evaluated against (typically a scope object).
	     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
	     *      `context`.
	     */
	    sce.parseAs = function sceParseAs(type, expr) {
	      var parsed = $parse(expr);
	      if (parsed.literal && parsed.constant) {
	        return parsed;
	      } else {
	        return $parse(expr, function(value) {
	          return sce.getTrusted(type, value);
	        });
	      }
	    };
	
	    /**
	     * @ngdoc method
	     * @name $sce#trustAs
	     *
	     * @description
	     * Delegates to {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}.  As such,
	     * returns an object that is trusted by angular for use in specified strict contextual
	     * escaping contexts (such as ng-bind-html, ng-include, any src attribute
	     * interpolation, any dom event binding attribute interpolation such as for onclick,  etc.)
	     * that uses the provided value.  See * {@link ng.$sce $sce} for enabling strict contextual
	     * escaping.
	     *
	     * @param {string} type The kind of context in which this value is safe for use.  e.g. url,
	     *   resourceUrl, html, js and css.
	     * @param {*} value The value that that should be considered trusted/safe.
	     * @returns {*} A value that can be used to stand in for the provided `value` in places
	     * where Angular expects a $sce.trustAs() return value.
	     */
	
	    /**
	     * @ngdoc method
	     * @name $sce#trustAsHtml
	     *
	     * @description
	     * Shorthand method.  `$sce.trustAsHtml(value)` →
	     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.HTML, value)`}
	     *
	     * @param {*} value The value to trustAs.
	     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedHtml
	     *     $sce.getTrustedHtml(value)} to obtain the original value.  (privileged directives
	     *     only accept expressions that are either literal constants or are the
	     *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)
	     */
	
	    /**
	     * @ngdoc method
	     * @name $sce#trustAsUrl
	     *
	     * @description
	     * Shorthand method.  `$sce.trustAsUrl(value)` →
	     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.URL, value)`}
	     *
	     * @param {*} value The value to trustAs.
	     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedUrl
	     *     $sce.getTrustedUrl(value)} to obtain the original value.  (privileged directives
	     *     only accept expressions that are either literal constants or are the
	     *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)
	     */
	
	    /**
	     * @ngdoc method
	     * @name $sce#trustAsResourceUrl
	     *
	     * @description
	     * Shorthand method.  `$sce.trustAsResourceUrl(value)` →
	     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.RESOURCE_URL, value)`}
	     *
	     * @param {*} value The value to trustAs.
	     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedResourceUrl
	     *     $sce.getTrustedResourceUrl(value)} to obtain the original value.  (privileged directives
	     *     only accept expressions that are either literal constants or are the return
	     *     value of {@link ng.$sce#trustAs $sce.trustAs}.)
	     */
	
	    /**
	     * @ngdoc method
	     * @name $sce#trustAsJs
	     *
	     * @description
	     * Shorthand method.  `$sce.trustAsJs(value)` →
	     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.JS, value)`}
	     *
	     * @param {*} value The value to trustAs.
	     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedJs
	     *     $sce.getTrustedJs(value)} to obtain the original value.  (privileged directives
	     *     only accept expressions that are either literal constants or are the
	     *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)
	     */
	
	    /**
	     * @ngdoc method
	     * @name $sce#getTrusted
	     *
	     * @description
	     * Delegates to {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted`}.  As such,
	     * takes the result of a {@link ng.$sce#trustAs `$sce.trustAs`}() call and returns the
	     * originally supplied value if the queried context type is a supertype of the created type.
	     * If this condition isn't satisfied, throws an exception.
	     *
	     * @param {string} type The kind of context in which this value is to be used.
	     * @param {*} maybeTrusted The result of a prior {@link ng.$sce#trustAs `$sce.trustAs`}
	     *                         call.
	     * @returns {*} The value the was originally provided to
	     *              {@link ng.$sce#trustAs `$sce.trustAs`} if valid in this context.
	     *              Otherwise, throws an exception.
	     */
	
	    /**
	     * @ngdoc method
	     * @name $sce#getTrustedHtml
	     *
	     * @description
	     * Shorthand method.  `$sce.getTrustedHtml(value)` →
	     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.HTML, value)`}
	     *
	     * @param {*} value The value to pass to `$sce.getTrusted`.
	     * @returns {*} The return value of `$sce.getTrusted($sce.HTML, value)`
	     */
	
	    /**
	     * @ngdoc method
	     * @name $sce#getTrustedCss
	     *
	     * @description
	     * Shorthand method.  `$sce.getTrustedCss(value)` →
	     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.CSS, value)`}
	     *
	     * @param {*} value The value to pass to `$sce.getTrusted`.
	     * @returns {*} The return value of `$sce.getTrusted($sce.CSS, value)`
	     */
	
	    /**
	     * @ngdoc method
	     * @name $sce#getTrustedUrl
	     *
	     * @description
	     * Shorthand method.  `$sce.getTrustedUrl(value)` →
	     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.URL, value)`}
	     *
	     * @param {*} value The value to pass to `$sce.getTrusted`.
	     * @returns {*} The return value of `$sce.getTrusted($sce.URL, value)`
	     */
	
	    /**
	     * @ngdoc method
	     * @name $sce#getTrustedResourceUrl
	     *
	     * @description
	     * Shorthand method.  `$sce.getTrustedResourceUrl(value)` →
	     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.RESOURCE_URL, value)`}
	     *
	     * @param {*} value The value to pass to `$sceDelegate.getTrusted`.
	     * @returns {*} The return value of `$sce.getTrusted($sce.RESOURCE_URL, value)`
	     */
	
	    /**
	     * @ngdoc method
	     * @name $sce#getTrustedJs
	     *
	     * @description
	     * Shorthand method.  `$sce.getTrustedJs(value)` →
	     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.JS, value)`}
	     *
	     * @param {*} value The value to pass to `$sce.getTrusted`.
	     * @returns {*} The return value of `$sce.getTrusted($sce.JS, value)`
	     */
	
	    /**
	     * @ngdoc method
	     * @name $sce#parseAsHtml
	     *
	     * @description
	     * Shorthand method.  `$sce.parseAsHtml(expression string)` →
	     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.HTML, value)`}
	     *
	     * @param {string} expression String expression to compile.
	     * @returns {function(context, locals)} a function which represents the compiled expression:
	     *
	     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
	     *      are evaluated against (typically a scope object).
	     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
	     *      `context`.
	     */
	
	    /**
	     * @ngdoc method
	     * @name $sce#parseAsCss
	     *
	     * @description
	     * Shorthand method.  `$sce.parseAsCss(value)` →
	     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.CSS, value)`}
	     *
	     * @param {string} expression String expression to compile.
	     * @returns {function(context, locals)} a function which represents the compiled expression:
	     *
	     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
	     *      are evaluated against (typically a scope object).
	     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
	     *      `context`.
	     */
	
	    /**
	     * @ngdoc method
	     * @name $sce#parseAsUrl
	     *
	     * @description
	     * Shorthand method.  `$sce.parseAsUrl(value)` →
	     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.URL, value)`}
	     *
	     * @param {string} expression String expression to compile.
	     * @returns {function(context, locals)} a function which represents the compiled expression:
	     *
	     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
	     *      are evaluated against (typically a scope object).
	     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
	     *      `context`.
	     */
	
	    /**
	     * @ngdoc method
	     * @name $sce#parseAsResourceUrl
	     *
	     * @description
	     * Shorthand method.  `$sce.parseAsResourceUrl(value)` →
	     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.RESOURCE_URL, value)`}
	     *
	     * @param {string} expression String expression to compile.
	     * @returns {function(context, locals)} a function which represents the compiled expression:
	     *
	     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
	     *      are evaluated against (typically a scope object).
	     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
	     *      `context`.
	     */
	
	    /**
	     * @ngdoc method
	     * @name $sce#parseAsJs
	     *
	     * @description
	     * Shorthand method.  `$sce.parseAsJs(value)` →
	     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.JS, value)`}
	     *
	     * @param {string} expression String expression to compile.
	     * @returns {function(context, locals)} a function which represents the compiled expression:
	     *
	     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
	     *      are evaluated against (typically a scope object).
	     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
	     *      `context`.
	     */
	
	    // Shorthand delegations.
	    var parse = sce.parseAs,
	        getTrusted = sce.getTrusted,
	        trustAs = sce.trustAs;
	
	    forEach(SCE_CONTEXTS, function(enumValue, name) {
	      var lName = lowercase(name);
	      sce[snakeToCamel('parse_as_' + lName)] = function(expr) {
	        return parse(enumValue, expr);
	      };
	      sce[snakeToCamel('get_trusted_' + lName)] = function(value) {
	        return getTrusted(enumValue, value);
	      };
	      sce[snakeToCamel('trust_as_' + lName)] = function(value) {
	        return trustAs(enumValue, value);
	      };
	    });
	
	    return sce;
	  }];
	}
	
	/* exported $SnifferProvider */
	
	/**
	 * !!! This is an undocumented "private" service !!!
	 *
	 * @name $sniffer
	 * @requires $window
	 * @requires $document
	 * @this
	 *
	 * @property {boolean} history Does the browser support html5 history api ?
	 * @property {boolean} transitions Does the browser support CSS transition events ?
	 * @property {boolean} animations Does the browser support CSS animation events ?
	 *
	 * @description
	 * This is very simple implementation of testing browser's features.
	 */
	function $SnifferProvider() {
	  this.$get = ['$window', '$document', function($window, $document) {
	    var eventSupport = {},
	        // Chrome Packaged Apps are not allowed to access `history.pushState`.
	        // If not sandboxed, they can be detected by the presence of `chrome.app.runtime`
	        // (see https://developer.chrome.com/apps/api_index). If sandboxed, they can be detected by
	        // the presence of an extension runtime ID and the absence of other Chrome runtime APIs
	        // (see https://developer.chrome.com/apps/manifest/sandbox).
	        isChromePackagedApp =
	            $window.chrome &&
	            ($window.chrome.app && $window.chrome.app.runtime ||
	                !$window.chrome.app && $window.chrome.runtime && $window.chrome.runtime.id),
	        hasHistoryPushState = !isChromePackagedApp && $window.history && $window.history.pushState,
	        android =
	          toInt((/android (\d+)/.exec(lowercase(($window.navigator || {}).userAgent)) || [])[1]),
	        boxee = /Boxee/i.test(($window.navigator || {}).userAgent),
	        document = $document[0] || {},
	        bodyStyle = document.body && document.body.style,
	        transitions = false,
	        animations = false;
	
	    if (bodyStyle) {
	      // Support: Android <5, Blackberry Browser 10, default Chrome in Android 4.4.x
	      // Mentioned browsers need a -webkit- prefix for transitions & animations.
	      transitions = !!('transition' in bodyStyle || 'webkitTransition' in bodyStyle);
	      animations = !!('animation' in bodyStyle || 'webkitAnimation' in bodyStyle);
	    }
	
	
	    return {
	      // Android has history.pushState, but it does not update location correctly
	      // so let's not use the history API at all.
	      // http://code.google.com/p/android/issues/detail?id=17471
	      // https://github.com/angular/angular.js/issues/904
	
	      // older webkit browser (533.9) on Boxee box has exactly the same problem as Android has
	      // so let's not use the history API also
	      // We are purposefully using `!(android < 4)` to cover the case when `android` is undefined
	      history: !!(hasHistoryPushState && !(android < 4) && !boxee),
	      hasEvent: function(event) {
	        // Support: IE 9-11 only
	        // IE9 implements 'input' event it's so fubared that we rather pretend that it doesn't have
	        // it. In particular the event is not fired when backspace or delete key are pressed or
	        // when cut operation is performed.
	        // IE10+ implements 'input' event but it erroneously fires under various situations,
	        // e.g. when placeholder changes, or a form is focused.
	        if (event === 'input' && msie) return false;
	
	        if (isUndefined(eventSupport[event])) {
	          var divElm = document.createElement('div');
	          eventSupport[event] = 'on' + event in divElm;
	        }
	
	        return eventSupport[event];
	      },
	      csp: csp(),
	      transitions: transitions,
	      animations: animations,
	      android: android
	    };
	  }];
	}
	
	var $templateRequestMinErr = minErr('$compile');
	
	/**
	 * @ngdoc provider
	 * @name $templateRequestProvider
	 * @this
	 *
	 * @description
	 * Used to configure the options passed to the {@link $http} service when making a template request.
	 *
	 * For example, it can be used for specifying the "Accept" header that is sent to the server, when
	 * requesting a template.
	 */
	function $TemplateRequestProvider() {
	
	  var httpOptions;
	
	  /**
	   * @ngdoc method
	   * @name $templateRequestProvider#httpOptions
	   * @description
	   * The options to be passed to the {@link $http} service when making the request.
	   * You can use this to override options such as the "Accept" header for template requests.
	   *
	   * The {@link $templateRequest} will set the `cache` and the `transformResponse` properties of the
	   * options if not overridden here.
	   *
	   * @param {string=} value new value for the {@link $http} options.
	   * @returns {string|self} Returns the {@link $http} options when used as getter and self if used as setter.
	   */
	  this.httpOptions = function(val) {
	    if (val) {
	      httpOptions = val;
	      return this;
	    }
	    return httpOptions;
	  };
	
	  /**
	   * @ngdoc service
	   * @name $templateRequest
	   *
	   * @description
	   * The `$templateRequest` service runs security checks then downloads the provided template using
	   * `$http` and, upon success, stores the contents inside of `$templateCache`. If the HTTP request
	   * fails or the response data of the HTTP request is empty, a `$compile` error will be thrown (the
	   * exception can be thwarted by setting the 2nd parameter of the function to true). Note that the
	   * contents of `$templateCache` are trusted, so the call to `$sce.getTrustedUrl(tpl)` is omitted
	   * when `tpl` is of type string and `$templateCache` has the matching entry.
	   *
	   * If you want to pass custom options to the `$http` service, such as setting the Accept header you
	   * can configure this via {@link $templateRequestProvider#httpOptions}.
	   *
	   * @param {string|TrustedResourceUrl} tpl The HTTP request template URL
	   * @param {boolean=} ignoreRequestError Whether or not to ignore the exception when the request fails or the template is empty
	   *
	   * @return {Promise} a promise for the HTTP response data of the given URL.
	   *
	   * @property {number} totalPendingRequests total amount of pending template requests being downloaded.
	   */
	  this.$get = ['$exceptionHandler', '$templateCache', '$http', '$q', '$sce',
	    function($exceptionHandler, $templateCache, $http, $q, $sce) {
	
	      function handleRequestFn(tpl, ignoreRequestError) {
	        handleRequestFn.totalPendingRequests++;
	
	        // We consider the template cache holds only trusted templates, so
	        // there's no need to go through whitelisting again for keys that already
	        // are included in there. This also makes Angular accept any script
	        // directive, no matter its name. However, we still need to unwrap trusted
	        // types.
	        if (!isString(tpl) || isUndefined($templateCache.get(tpl))) {
	          tpl = $sce.getTrustedResourceUrl(tpl);
	        }
	
	        var transformResponse = $http.defaults && $http.defaults.transformResponse;
	
	        if (isArray(transformResponse)) {
	          transformResponse = transformResponse.filter(function(transformer) {
	            return transformer !== defaultHttpResponseTransform;
	          });
	        } else if (transformResponse === defaultHttpResponseTransform) {
	          transformResponse = null;
	        }
	
	        return $http.get(tpl, extend({
	            cache: $templateCache,
	            transformResponse: transformResponse
	          }, httpOptions))
	          .finally(function() {
	            handleRequestFn.totalPendingRequests--;
	          })
	          .then(function(response) {
	            $templateCache.put(tpl, response.data);
	            return response.data;
	          }, handleError);
	
	        function handleError(resp) {
	          if (!ignoreRequestError) {
	            resp = $templateRequestMinErr('tpload',
	                'Failed to load template: {0} (HTTP status: {1} {2})',
	                tpl, resp.status, resp.statusText);
	
	            $exceptionHandler(resp);
	          }
	
	          return $q.reject(resp);
	        }
	      }
	
	      handleRequestFn.totalPendingRequests = 0;
	
	      return handleRequestFn;
	    }
	  ];
	}
	
	/** @this */
	function $$TestabilityProvider() {
	  this.$get = ['$rootScope', '$browser', '$location',
	       function($rootScope,   $browser,   $location) {
	
	    /**
	     * @name $testability
	     *
	     * @description
	     * The private $$testability service provides a collection of methods for use when debugging
	     * or by automated test and debugging tools.
	     */
	    var testability = {};
	
	    /**
	     * @name $$testability#findBindings
	     *
	     * @description
	     * Returns an array of elements that are bound (via ng-bind or {{}})
	     * to expressions matching the input.
	     *
	     * @param {Element} element The element root to search from.
	     * @param {string} expression The binding expression to match.
	     * @param {boolean} opt_exactMatch If true, only returns exact matches
	     *     for the expression. Filters and whitespace are ignored.
	     */
	    testability.findBindings = function(element, expression, opt_exactMatch) {
	      var bindings = element.getElementsByClassName('ng-binding');
	      var matches = [];
	      forEach(bindings, function(binding) {
	        var dataBinding = angular.element(binding).data('$binding');
	        if (dataBinding) {
	          forEach(dataBinding, function(bindingName) {
	            if (opt_exactMatch) {
	              var matcher = new RegExp('(^|\\s)' + escapeForRegexp(expression) + '(\\s|\\||$)');
	              if (matcher.test(bindingName)) {
	                matches.push(binding);
	              }
	            } else {
	              if (bindingName.indexOf(expression) !== -1) {
	                matches.push(binding);
	              }
	            }
	          });
	        }
	      });
	      return matches;
	    };
	
	    /**
	     * @name $$testability#findModels
	     *
	     * @description
	     * Returns an array of elements that are two-way found via ng-model to
	     * expressions matching the input.
	     *
	     * @param {Element} element The element root to search from.
	     * @param {string} expression The model expression to match.
	     * @param {boolean} opt_exactMatch If true, only returns exact matches
	     *     for the expression.
	     */
	    testability.findModels = function(element, expression, opt_exactMatch) {
	      var prefixes = ['ng-', 'data-ng-', 'ng\\:'];
	      for (var p = 0; p < prefixes.length; ++p) {
	        var attributeEquals = opt_exactMatch ? '=' : '*=';
	        var selector = '[' + prefixes[p] + 'model' + attributeEquals + '"' + expression + '"]';
	        var elements = element.querySelectorAll(selector);
	        if (elements.length) {
	          return elements;
	        }
	      }
	    };
	
	    /**
	     * @name $$testability#getLocation
	     *
	     * @description
	     * Shortcut for getting the location in a browser agnostic way. Returns
	     *     the path, search, and hash. (e.g. /path?a=b#hash)
	     */
	    testability.getLocation = function() {
	      return $location.url();
	    };
	
	    /**
	     * @name $$testability#setLocation
	     *
	     * @description
	     * Shortcut for navigating to a location without doing a full page reload.
	     *
	     * @param {string} url The location url (path, search and hash,
	     *     e.g. /path?a=b#hash) to go to.
	     */
	    testability.setLocation = function(url) {
	      if (url !== $location.url()) {
	        $location.url(url);
	        $rootScope.$digest();
	      }
	    };
	
	    /**
	     * @name $$testability#whenStable
	     *
	     * @description
	     * Calls the callback when $timeout and $http requests are completed.
	     *
	     * @param {function} callback
	     */
	    testability.whenStable = function(callback) {
	      $browser.notifyWhenNoOutstandingRequests(callback);
	    };
	
	    return testability;
	  }];
	}
	
	/** @this */
	function $TimeoutProvider() {
	  this.$get = ['$rootScope', '$browser', '$q', '$$q', '$exceptionHandler',
	       function($rootScope,   $browser,   $q,   $$q,   $exceptionHandler) {
	
	    var deferreds = {};
	
	
	     /**
	      * @ngdoc service
	      * @name $timeout
	      *
	      * @description
	      * Angular's wrapper for `window.setTimeout`. The `fn` function is wrapped into a try/catch
	      * block and delegates any exceptions to
	      * {@link ng.$exceptionHandler $exceptionHandler} service.
	      *
	      * The return value of calling `$timeout` is a promise, which will be resolved when
	      * the delay has passed and the timeout function, if provided, is executed.
	      *
	      * To cancel a timeout request, call `$timeout.cancel(promise)`.
	      *
	      * In tests you can use {@link ngMock.$timeout `$timeout.flush()`} to
	      * synchronously flush the queue of deferred functions.
	      *
	      * If you only want a promise that will be resolved after some specified delay
	      * then you can call `$timeout` without the `fn` function.
	      *
	      * @param {function()=} fn A function, whose execution should be delayed.
	      * @param {number=} [delay=0] Delay in milliseconds.
	      * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise
	      *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.
	      * @param {...*=} Pass additional parameters to the executed function.
	      * @returns {Promise} Promise that will be resolved when the timeout is reached. The promise
	      *   will be resolved with the return value of the `fn` function.
	      *
	      */
	    function timeout(fn, delay, invokeApply) {
	      if (!isFunction(fn)) {
	        invokeApply = delay;
	        delay = fn;
	        fn = noop;
	      }
	
	      var args = sliceArgs(arguments, 3),
	          skipApply = (isDefined(invokeApply) && !invokeApply),
	          deferred = (skipApply ? $$q : $q).defer(),
	          promise = deferred.promise,
	          timeoutId;
	
	      timeoutId = $browser.defer(function() {
	        try {
	          deferred.resolve(fn.apply(null, args));
	        } catch (e) {
	          deferred.reject(e);
	          $exceptionHandler(e);
	        } finally {
	          delete deferreds[promise.$$timeoutId];
	        }
	
	        if (!skipApply) $rootScope.$apply();
	      }, delay);
	
	      promise.$$timeoutId = timeoutId;
	      deferreds[timeoutId] = deferred;
	
	      return promise;
	    }
	
	
	     /**
	      * @ngdoc method
	      * @name $timeout#cancel
	      *
	      * @description
	      * Cancels a task associated with the `promise`. As a result of this, the promise will be
	      * resolved with a rejection.
	      *
	      * @param {Promise=} promise Promise returned by the `$timeout` function.
	      * @returns {boolean} Returns `true` if the task hasn't executed yet and was successfully
	      *   canceled.
	      */
	    timeout.cancel = function(promise) {
	      if (promise && promise.$$timeoutId in deferreds) {
	        // Timeout cancels should not report an unhandled promise.
	        deferreds[promise.$$timeoutId].promise.catch(noop);
	        deferreds[promise.$$timeoutId].reject('canceled');
	        delete deferreds[promise.$$timeoutId];
	        return $browser.defer.cancel(promise.$$timeoutId);
	      }
	      return false;
	    };
	
	    return timeout;
	  }];
	}
	
	// NOTE:  The usage of window and document instead of $window and $document here is
	// deliberate.  This service depends on the specific behavior of anchor nodes created by the
	// browser (resolving and parsing URLs) that is unlikely to be provided by mock objects and
	// cause us to break tests.  In addition, when the browser resolves a URL for XHR, it
	// doesn't know about mocked locations and resolves URLs to the real document - which is
	// exactly the behavior needed here.  There is little value is mocking these out for this
	// service.
	var urlParsingNode = window.document.createElement('a');
	var originUrl = urlResolve(window.location.href);
	
	
	/**
	 *
	 * Implementation Notes for non-IE browsers
	 * ----------------------------------------
	 * Assigning a URL to the href property of an anchor DOM node, even one attached to the DOM,
	 * results both in the normalizing and parsing of the URL.  Normalizing means that a relative
	 * URL will be resolved into an absolute URL in the context of the application document.
	 * Parsing means that the anchor node's host, hostname, protocol, port, pathname and related
	 * properties are all populated to reflect the normalized URL.  This approach has wide
	 * compatibility - Safari 1+, Mozilla 1+, Opera 7+,e etc.  See
	 * http://www.aptana.com/reference/html/api/HTMLAnchorElement.html
	 *
	 * Implementation Notes for IE
	 * ---------------------------
	 * IE <= 10 normalizes the URL when assigned to the anchor node similar to the other
	 * browsers.  However, the parsed components will not be set if the URL assigned did not specify
	 * them.  (e.g. if you assign a.href = "foo", then a.protocol, a.host, etc. will be empty.)  We
	 * work around that by performing the parsing in a 2nd step by taking a previously normalized
	 * URL (e.g. by assigning to a.href) and assigning it a.href again.  This correctly populates the
	 * properties such as protocol, hostname, port, etc.
	 *
	 * References:
	 *   http://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement
	 *   http://www.aptana.com/reference/html/api/HTMLAnchorElement.html
	 *   http://url.spec.whatwg.org/#urlutils
	 *   https://github.com/angular/angular.js/pull/2902
	 *   http://james.padolsey.com/javascript/parsing-urls-with-the-dom/
	 *
	 * @kind function
	 * @param {string} url The URL to be parsed.
	 * @description Normalizes and parses a URL.
	 * @returns {object} Returns the normalized URL as a dictionary.
	 *
	 *   | member name   | Description    |
	 *   |---------------|----------------|
	 *   | href          | A normalized version of the provided URL if it was not an absolute URL |
	 *   | protocol      | The protocol including the trailing colon                              |
	 *   | host          | The host and port (if the port is non-default) of the normalizedUrl    |
	 *   | search        | The search params, minus the question mark                             |
	 *   | hash          | The hash string, minus the hash symbol
	 *   | hostname      | The hostname
	 *   | port          | The port, without ":"
	 *   | pathname      | The pathname, beginning with "/"
	 *
	 */
	function urlResolve(url) {
	  var href = url;
	
	  // Support: IE 9-11 only
	  if (msie) {
	    // Normalize before parse.  Refer Implementation Notes on why this is
	    // done in two steps on IE.
	    urlParsingNode.setAttribute('href', href);
	    href = urlParsingNode.href;
	  }
	
	  urlParsingNode.setAttribute('href', href);
	
	  // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
	  return {
	    href: urlParsingNode.href,
	    protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
	    host: urlParsingNode.host,
	    search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
	    hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
	    hostname: urlParsingNode.hostname,
	    port: urlParsingNode.port,
	    pathname: (urlParsingNode.pathname.charAt(0) === '/')
	      ? urlParsingNode.pathname
	      : '/' + urlParsingNode.pathname
	  };
	}
	
	/**
	 * Parse a request URL and determine whether this is a same-origin request as the application document.
	 *
	 * @param {string|object} requestUrl The url of the request as a string that will be resolved
	 * or a parsed URL object.
	 * @returns {boolean} Whether the request is for the same origin as the application document.
	 */
	function urlIsSameOrigin(requestUrl) {
	  var parsed = (isString(requestUrl)) ? urlResolve(requestUrl) : requestUrl;
	  return (parsed.protocol === originUrl.protocol &&
	          parsed.host === originUrl.host);
	}
	
	/**
	 * @ngdoc service
	 * @name $window
	 * @this
	 *
	 * @description
	 * A reference to the browser's `window` object. While `window`
	 * is globally available in JavaScript, it causes testability problems, because
	 * it is a global variable. In angular we always refer to it through the
	 * `$window` service, so it may be overridden, removed or mocked for testing.
	 *
	 * Expressions, like the one defined for the `ngClick` directive in the example
	 * below, are evaluated with respect to the current scope.  Therefore, there is
	 * no risk of inadvertently coding in a dependency on a global value in such an
	 * expression.
	 *
	 * @example
	   <example module="windowExample" name="window-service">
	     <file name="index.html">
	       <script>
	         angular.module('windowExample', [])
	           .controller('ExampleController', ['$scope', '$window', function($scope, $window) {
	             $scope.greeting = 'Hello, World!';
	             $scope.doGreeting = function(greeting) {
	               $window.alert(greeting);
	             };
	           }]);
	       </script>
	       <div ng-controller="ExampleController">
	         <input type="text" ng-model="greeting" aria-label="greeting" />
	         <button ng-click="doGreeting(greeting)">ALERT</button>
	       </div>
	     </file>
	     <file name="protractor.js" type="protractor">
	      it('should display the greeting in the input box', function() {
	       element(by.model('greeting')).sendKeys('Hello, E2E Tests');
	       // If we click the button it will block the test runner
	       // element(':button').click();
	      });
	     </file>
	   </example>
	 */
	function $WindowProvider() {
	  this.$get = valueFn(window);
	}
	
	/**
	 * @name $$cookieReader
	 * @requires $document
	 *
	 * @description
	 * This is a private service for reading cookies used by $http and ngCookies
	 *
	 * @return {Object} a key/value map of the current cookies
	 */
	function $$CookieReader($document) {
	  var rawDocument = $document[0] || {};
	  var lastCookies = {};
	  var lastCookieString = '';
	
	  function safeGetCookie(rawDocument) {
	    try {
	      return rawDocument.cookie || '';
	    } catch (e) {
	      return '';
	    }
	  }
	
	  function safeDecodeURIComponent(str) {
	    try {
	      return decodeURIComponent(str);
	    } catch (e) {
	      return str;
	    }
	  }
	
	  return function() {
	    var cookieArray, cookie, i, index, name;
	    var currentCookieString = safeGetCookie(rawDocument);
	
	    if (currentCookieString !== lastCookieString) {
	      lastCookieString = currentCookieString;
	      cookieArray = lastCookieString.split('; ');
	      lastCookies = {};
	
	      for (i = 0; i < cookieArray.length; i++) {
	        cookie = cookieArray[i];
	        index = cookie.indexOf('=');
	        if (index > 0) { //ignore nameless cookies
	          name = safeDecodeURIComponent(cookie.substring(0, index));
	          // the first value that is seen for a cookie is the most
	          // specific one.  values for the same cookie name that
	          // follow are for less specific paths.
	          if (isUndefined(lastCookies[name])) {
	            lastCookies[name] = safeDecodeURIComponent(cookie.substring(index + 1));
	          }
	        }
	      }
	    }
	    return lastCookies;
	  };
	}
	
	$$CookieReader.$inject = ['$document'];
	
	/** @this */
	function $$CookieReaderProvider() {
	  this.$get = $$CookieReader;
	}
	
	/* global currencyFilter: true,
	 dateFilter: true,
	 filterFilter: true,
	 jsonFilter: true,
	 limitToFilter: true,
	 lowercaseFilter: true,
	 numberFilter: true,
	 orderByFilter: true,
	 uppercaseFilter: true,
	 */
	
	/**
	 * @ngdoc provider
	 * @name $filterProvider
	 * @description
	 *
	 * Filters are just functions which transform input to an output. However filters need to be
	 * Dependency Injected. To achieve this a filter definition consists of a factory function which is
	 * annotated with dependencies and is responsible for creating a filter function.
	 *
	 * <div class="alert alert-warning">
	 * **Note:** Filter names must be valid angular {@link expression} identifiers, such as `uppercase` or `orderBy`.
	 * Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace
	 * your filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores
	 * (`myapp_subsection_filterx`).
	 * </div>
	 *
	 * ```js
	 *   // Filter registration
	 *   function MyModule($provide, $filterProvider) {
	 *     // create a service to demonstrate injection (not always needed)
	 *     $provide.value('greet', function(name){
	 *       return 'Hello ' + name + '!';
	 *     });
	 *
	 *     // register a filter factory which uses the
	 *     // greet service to demonstrate DI.
	 *     $filterProvider.register('greet', function(greet){
	 *       // return the filter function which uses the greet service
	 *       // to generate salutation
	 *       return function(text) {
	 *         // filters need to be forgiving so check input validity
	 *         return text && greet(text) || text;
	 *       };
	 *     });
	 *   }
	 * ```
	 *
	 * The filter function is registered with the `$injector` under the filter name suffix with
	 * `Filter`.
	 *
	 * ```js
	 *   it('should be the same instance', inject(
	 *     function($filterProvider) {
	 *       $filterProvider.register('reverse', function(){
	 *         return ...;
	 *       });
	 *     },
	 *     function($filter, reverseFilter) {
	 *       expect($filter('reverse')).toBe(reverseFilter);
	 *     });
	 * ```
	 *
	 *
	 * For more information about how angular filters work, and how to create your own filters, see
	 * {@link guide/filter Filters} in the Angular Developer Guide.
	 */
	
	/**
	 * @ngdoc service
	 * @name $filter
	 * @kind function
	 * @description
	 * Filters are used for formatting data displayed to the user.
	 *
	 * They can be used in view templates, controllers or services.Angular comes
	 * with a collection of [built-in filters](api/ng/filter), but it is easy to
	 * define your own as well.
	 *
	 * The general syntax in templates is as follows:
	 *
	 * ```html
	 * {{ expression [| filter_name[:parameter_value] ... ] }}
	 * ```
	 *
	 * @param {String} name Name of the filter function to retrieve
	 * @return {Function} the filter function
	 * @example
	   <example name="$filter" module="filterExample">
	     <file name="index.html">
	       <div ng-controller="MainCtrl">
	        <h3>{{ originalText }}</h3>
	        <h3>{{ filteredText }}</h3>
	       </div>
	     </file>
	
	     <file name="script.js">
	      angular.module('filterExample', [])
	      .controller('MainCtrl', function($scope, $filter) {
	        $scope.originalText = 'hello';
	        $scope.filteredText = $filter('uppercase')($scope.originalText);
	      });
	     </file>
	   </example>
	  */
	$FilterProvider.$inject = ['$provide'];
	/** @this */
	function $FilterProvider($provide) {
	  var suffix = 'Filter';
	
	  /**
	   * @ngdoc method
	   * @name $filterProvider#register
	   * @param {string|Object} name Name of the filter function, or an object map of filters where
	   *    the keys are the filter names and the values are the filter factories.
	   *
	   *    <div class="alert alert-warning">
	   *    **Note:** Filter names must be valid angular {@link expression} identifiers, such as `uppercase` or `orderBy`.
	   *    Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace
	   *    your filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores
	   *    (`myapp_subsection_filterx`).
	   *    </div>
	    * @param {Function} factory If the first argument was a string, a factory function for the filter to be registered.
	   * @returns {Object} Registered filter instance, or if a map of filters was provided then a map
	   *    of the registered filter instances.
	   */
	  function register(name, factory) {
	    if (isObject(name)) {
	      var filters = {};
	      forEach(name, function(filter, key) {
	        filters[key] = register(key, filter);
	      });
	      return filters;
	    } else {
	      return $provide.factory(name + suffix, factory);
	    }
	  }
	  this.register = register;
	
	  this.$get = ['$injector', function($injector) {
	    return function(name) {
	      return $injector.get(name + suffix);
	    };
	  }];
	
	  ////////////////////////////////////////
	
	  /* global
	    currencyFilter: false,
	    dateFilter: false,
	    filterFilter: false,
	    jsonFilter: false,
	    limitToFilter: false,
	    lowercaseFilter: false,
	    numberFilter: false,
	    orderByFilter: false,
	    uppercaseFilter: false
	  */
	
	  register('currency', currencyFilter);
	  register('date', dateFilter);
	  register('filter', filterFilter);
	  register('json', jsonFilter);
	  register('limitTo', limitToFilter);
	  register('lowercase', lowercaseFilter);
	  register('number', numberFilter);
	  register('orderBy', orderByFilter);
	  register('uppercase', uppercaseFilter);
	}
	
	/**
	 * @ngdoc filter
	 * @name filter
	 * @kind function
	 *
	 * @description
	 * Selects a subset of items from `array` and returns it as a new array.
	 *
	 * @param {Array} array The source array.
	 * @param {string|Object|function()} expression The predicate to be used for selecting items from
	 *   `array`.
	 *
	 *   Can be one of:
	 *
	 *   - `string`: The string is used for matching against the contents of the `array`. All strings or
	 *     objects with string properties in `array` that match this string will be returned. This also
	 *     applies to nested object properties.
	 *     The predicate can be negated by prefixing the string with `!`.
	 *
	 *   - `Object`: A pattern object can be used to filter specific properties on objects contained
	 *     by `array`. For example `{name:"M", phone:"1"}` predicate will return an array of items
	 *     which have property `name` containing "M" and property `phone` containing "1". A special
	 *     property name (`$` by default) can be used (e.g. as in `{$: "text"}`) to accept a match
	 *     against any property of the object or its nested object properties. That's equivalent to the
	 *     simple substring match with a `string` as described above. The special property name can be
	 *     overwritten, using the `anyPropertyKey` parameter.
	 *     The predicate can be negated by prefixing the string with `!`.
	 *     For example `{name: "!M"}` predicate will return an array of items which have property `name`
	 *     not containing "M".
	 *
	 *     Note that a named property will match properties on the same level only, while the special
	 *     `$` property will match properties on the same level or deeper. E.g. an array item like
	 *     `{name: {first: 'John', last: 'Doe'}}` will **not** be matched by `{name: 'John'}`, but
	 *     **will** be matched by `{$: 'John'}`.
	 *
	 *   - `function(value, index, array)`: A predicate function can be used to write arbitrary filters.
	 *     The function is called for each element of the array, with the element, its index, and
	 *     the entire array itself as arguments.
	 *
	 *     The final result is an array of those elements that the predicate returned true for.
	 *
	 * @param {function(actual, expected)|true|false} [comparator] Comparator which is used in
	 *     determining if the expected value (from the filter expression) and actual value (from
	 *     the object in the array) should be considered a match.
	 *
	 *   Can be one of:
	 *
	 *   - `function(actual, expected)`:
	 *     The function will be given the object value and the predicate value to compare and
	 *     should return true if both values should be considered equal.
	 *
	 *   - `true`: A shorthand for `function(actual, expected) { return angular.equals(actual, expected)}`.
	 *     This is essentially strict comparison of expected and actual.
	 *
	 *   - `false`: A short hand for a function which will look for a substring match in a case
	 *     insensitive way. Primitive values are converted to strings. Objects are not compared against
	 *     primitives, unless they have a custom `toString` method (e.g. `Date` objects).
	 *
	 *
	 *   Defaults to `false`.
	 *
	 * @param {string} [anyPropertyKey] The special property name that matches against any property.
	 *     By default `$`.
	 *
	 * @example
	   <example name="filter-filter">
	     <file name="index.html">
	       <div ng-init="friends = [{name:'John', phone:'555-1276'},
	                                {name:'Mary', phone:'800-BIG-MARY'},
	                                {name:'Mike', phone:'555-4321'},
	                                {name:'Adam', phone:'555-5678'},
	                                {name:'Julie', phone:'555-8765'},
	                                {name:'Juliette', phone:'555-5678'}]"></div>
	
	       <label>Search: <input ng-model="searchText"></label>
	       <table id="searchTextResults">
	         <tr><th>Name</th><th>Phone</th></tr>
	         <tr ng-repeat="friend in friends | filter:searchText">
	           <td>{{friend.name}}</td>
	           <td>{{friend.phone}}</td>
	         </tr>
	       </table>
	       <hr>
	       <label>Any: <input ng-model="search.$"></label> <br>
	       <label>Name only <input ng-model="search.name"></label><br>
	       <label>Phone only <input ng-model="search.phone"></label><br>
	       <label>Equality <input type="checkbox" ng-model="strict"></label><br>
	       <table id="searchObjResults">
	         <tr><th>Name</th><th>Phone</th></tr>
	         <tr ng-repeat="friendObj in friends | filter:search:strict">
	           <td>{{friendObj.name}}</td>
	           <td>{{friendObj.phone}}</td>
	         </tr>
	       </table>
	     </file>
	     <file name="protractor.js" type="protractor">
	       var expectFriendNames = function(expectedNames, key) {
	         element.all(by.repeater(key + ' in friends').column(key + '.name')).then(function(arr) {
	           arr.forEach(function(wd, i) {
	             expect(wd.getText()).toMatch(expectedNames[i]);
	           });
	         });
	       };
	
	       it('should search across all fields when filtering with a string', function() {
	         var searchText = element(by.model('searchText'));
	         searchText.clear();
	         searchText.sendKeys('m');
	         expectFriendNames(['Mary', 'Mike', 'Adam'], 'friend');
	
	         searchText.clear();
	         searchText.sendKeys('76');
	         expectFriendNames(['John', 'Julie'], 'friend');
	       });
	
	       it('should search in specific fields when filtering with a predicate object', function() {
	         var searchAny = element(by.model('search.$'));
	         searchAny.clear();
	         searchAny.sendKeys('i');
	         expectFriendNames(['Mary', 'Mike', 'Julie', 'Juliette'], 'friendObj');
	       });
	       it('should use a equal comparison when comparator is true', function() {
	         var searchName = element(by.model('search.name'));
	         var strict = element(by.model('strict'));
	         searchName.clear();
	         searchName.sendKeys('Julie');
	         strict.click();
	         expectFriendNames(['Julie'], 'friendObj');
	       });
	     </file>
	   </example>
	 */
	
	function filterFilter() {
	  return function(array, expression, comparator, anyPropertyKey) {
	    if (!isArrayLike(array)) {
	      if (array == null) {
	        return array;
	      } else {
	        throw minErr('filter')('notarray', 'Expected array but received: {0}', array);
	      }
	    }
	
	    anyPropertyKey = anyPropertyKey || '$';
	    var expressionType = getTypeForFilter(expression);
	    var predicateFn;
	    var matchAgainstAnyProp;
	
	    switch (expressionType) {
	      case 'function':
	        predicateFn = expression;
	        break;
	      case 'boolean':
	      case 'null':
	      case 'number':
	      case 'string':
	        matchAgainstAnyProp = true;
	        // falls through
	      case 'object':
	        predicateFn = createPredicateFn(expression, comparator, anyPropertyKey, matchAgainstAnyProp);
	        break;
	      default:
	        return array;
	    }
	
	    return Array.prototype.filter.call(array, predicateFn);
	  };
	}
	
	// Helper functions for `filterFilter`
	function createPredicateFn(expression, comparator, anyPropertyKey, matchAgainstAnyProp) {
	  var shouldMatchPrimitives = isObject(expression) && (anyPropertyKey in expression);
	  var predicateFn;
	
	  if (comparator === true) {
	    comparator = equals;
	  } else if (!isFunction(comparator)) {
	    comparator = function(actual, expected) {
	      if (isUndefined(actual)) {
	        // No substring matching against `undefined`
	        return false;
	      }
	      if ((actual === null) || (expected === null)) {
	        // No substring matching against `null`; only match against `null`
	        return actual === expected;
	      }
	      if (isObject(expected) || (isObject(actual) && !hasCustomToString(actual))) {
	        // Should not compare primitives against objects, unless they have custom `toString` method
	        return false;
	      }
	
	      actual = lowercase('' + actual);
	      expected = lowercase('' + expected);
	      return actual.indexOf(expected) !== -1;
	    };
	  }
	
	  predicateFn = function(item) {
	    if (shouldMatchPrimitives && !isObject(item)) {
	      return deepCompare(item, expression[anyPropertyKey], comparator, anyPropertyKey, false);
	    }
	    return deepCompare(item, expression, comparator, anyPropertyKey, matchAgainstAnyProp);
	  };
	
	  return predicateFn;
	}
	
	function deepCompare(actual, expected, comparator, anyPropertyKey, matchAgainstAnyProp, dontMatchWholeObject) {
	  var actualType = getTypeForFilter(actual);
	  var expectedType = getTypeForFilter(expected);
	
	  if ((expectedType === 'string') && (expected.charAt(0) === '!')) {
	    return !deepCompare(actual, expected.substring(1), comparator, anyPropertyKey, matchAgainstAnyProp);
	  } else if (isArray(actual)) {
	    // In case `actual` is an array, consider it a match
	    // if ANY of it's items matches `expected`
	    return actual.some(function(item) {
	      return deepCompare(item, expected, comparator, anyPropertyKey, matchAgainstAnyProp);
	    });
	  }
	
	  switch (actualType) {
	    case 'object':
	      var key;
	      if (matchAgainstAnyProp) {
	        for (key in actual) {
	          if ((key.charAt(0) !== '$') && deepCompare(actual[key], expected, comparator, anyPropertyKey, true)) {
	            return true;
	          }
	        }
	        return dontMatchWholeObject ? false : deepCompare(actual, expected, comparator, anyPropertyKey, false);
	      } else if (expectedType === 'object') {
	        for (key in expected) {
	          var expectedVal = expected[key];
	          if (isFunction(expectedVal) || isUndefined(expectedVal)) {
	            continue;
	          }
	
	          var matchAnyProperty = key === anyPropertyKey;
	          var actualVal = matchAnyProperty ? actual : actual[key];
	          if (!deepCompare(actualVal, expectedVal, comparator, anyPropertyKey, matchAnyProperty, matchAnyProperty)) {
	            return false;
	          }
	        }
	        return true;
	      } else {
	        return comparator(actual, expected);
	      }
	    case 'function':
	      return false;
	    default:
	      return comparator(actual, expected);
	  }
	}
	
	// Used for easily differentiating between `null` and actual `object`
	function getTypeForFilter(val) {
	  return (val === null) ? 'null' : typeof val;
	}
	
	var MAX_DIGITS = 22;
	var DECIMAL_SEP = '.';
	var ZERO_CHAR = '0';
	
	/**
	 * @ngdoc filter
	 * @name currency
	 * @kind function
	 *
	 * @description
	 * Formats a number as a currency (ie $1,234.56). When no currency symbol is provided, default
	 * symbol for current locale is used.
	 *
	 * @param {number} amount Input to filter.
	 * @param {string=} symbol Currency symbol or identifier to be displayed.
	 * @param {number=} fractionSize Number of decimal places to round the amount to, defaults to default max fraction size for current locale
	 * @returns {string} Formatted number.
	 *
	 *
	 * @example
	   <example module="currencyExample" name="currency-filter">
	     <file name="index.html">
	       <script>
	         angular.module('currencyExample', [])
	           .controller('ExampleController', ['$scope', function($scope) {
	             $scope.amount = 1234.56;
	           }]);
	       </script>
	       <div ng-controller="ExampleController">
	         <input type="number" ng-model="amount" aria-label="amount"> <br>
	         default currency symbol ($): <span id="currency-default">{{amount | currency}}</span><br>
	         custom currency identifier (USD$): <span id="currency-custom">{{amount | currency:"USD$"}}</span><br>
	         no fractions (0): <span id="currency-no-fractions">{{amount | currency:"USD$":0}}</span>
	       </div>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should init with 1234.56', function() {
	         expect(element(by.id('currency-default')).getText()).toBe('$1,234.56');
	         expect(element(by.id('currency-custom')).getText()).toBe('USD$1,234.56');
	         expect(element(by.id('currency-no-fractions')).getText()).toBe('USD$1,235');
	       });
	       it('should update', function() {
	         if (browser.params.browser === 'safari') {
	           // Safari does not understand the minus key. See
	           // https://github.com/angular/protractor/issues/481
	           return;
	         }
	         element(by.model('amount')).clear();
	         element(by.model('amount')).sendKeys('-1234');
	         expect(element(by.id('currency-default')).getText()).toBe('-$1,234.00');
	         expect(element(by.id('currency-custom')).getText()).toBe('-USD$1,234.00');
	         expect(element(by.id('currency-no-fractions')).getText()).toBe('-USD$1,234');
	       });
	     </file>
	   </example>
	 */
	currencyFilter.$inject = ['$locale'];
	function currencyFilter($locale) {
	  var formats = $locale.NUMBER_FORMATS;
	  return function(amount, currencySymbol, fractionSize) {
	    if (isUndefined(currencySymbol)) {
	      currencySymbol = formats.CURRENCY_SYM;
	    }
	
	    if (isUndefined(fractionSize)) {
	      fractionSize = formats.PATTERNS[1].maxFrac;
	    }
	
	    // if null or undefined pass it through
	    return (amount == null)
	        ? amount
	        : formatNumber(amount, formats.PATTERNS[1], formats.GROUP_SEP, formats.DECIMAL_SEP, fractionSize).
	            replace(/\u00A4/g, currencySymbol);
	  };
	}
	
	/**
	 * @ngdoc filter
	 * @name number
	 * @kind function
	 *
	 * @description
	 * Formats a number as text.
	 *
	 * If the input is null or undefined, it will just be returned.
	 * If the input is infinite (Infinity or -Infinity), the Infinity symbol '∞' or '-∞' is returned, respectively.
	 * If the input is not a number an empty string is returned.
	 *
	 *
	 * @param {number|string} number Number to format.
	 * @param {(number|string)=} fractionSize Number of decimal places to round the number to.
	 * If this is not provided then the fraction size is computed from the current locale's number
	 * formatting pattern. In the case of the default locale, it will be 3.
	 * @returns {string} Number rounded to `fractionSize` appropriately formatted based on the current
	 *                   locale (e.g., in the en_US locale it will have "." as the decimal separator and
	 *                   include "," group separators after each third digit).
	 *
	 * @example
	   <example module="numberFilterExample" name="number-filter">
	     <file name="index.html">
	       <script>
	         angular.module('numberFilterExample', [])
	           .controller('ExampleController', ['$scope', function($scope) {
	             $scope.val = 1234.56789;
	           }]);
	       </script>
	       <div ng-controller="ExampleController">
	         <label>Enter number: <input ng-model='val'></label><br>
	         Default formatting: <span id='number-default'>{{val | number}}</span><br>
	         No fractions: <span>{{val | number:0}}</span><br>
	         Negative number: <span>{{-val | number:4}}</span>
	       </div>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should format numbers', function() {
	         expect(element(by.id('number-default')).getText()).toBe('1,234.568');
	         expect(element(by.binding('val | number:0')).getText()).toBe('1,235');
	         expect(element(by.binding('-val | number:4')).getText()).toBe('-1,234.5679');
	       });
	
	       it('should update', function() {
	         element(by.model('val')).clear();
	         element(by.model('val')).sendKeys('3374.333');
	         expect(element(by.id('number-default')).getText()).toBe('3,374.333');
	         expect(element(by.binding('val | number:0')).getText()).toBe('3,374');
	         expect(element(by.binding('-val | number:4')).getText()).toBe('-3,374.3330');
	      });
	     </file>
	   </example>
	 */
	numberFilter.$inject = ['$locale'];
	function numberFilter($locale) {
	  var formats = $locale.NUMBER_FORMATS;
	  return function(number, fractionSize) {
	
	    // if null or undefined pass it through
	    return (number == null)
	        ? number
	        : formatNumber(number, formats.PATTERNS[0], formats.GROUP_SEP, formats.DECIMAL_SEP,
	                       fractionSize);
	  };
	}
	
	/**
	 * Parse a number (as a string) into three components that can be used
	 * for formatting the number.
	 *
	 * (Significant bits of this parse algorithm came from https://github.com/MikeMcl/big.js/)
	 *
	 * @param  {string} numStr The number to parse
	 * @return {object} An object describing this number, containing the following keys:
	 *  - d : an array of digits containing leading zeros as necessary
	 *  - i : the number of the digits in `d` that are to the left of the decimal point
	 *  - e : the exponent for numbers that would need more than `MAX_DIGITS` digits in `d`
	 *
	 */
	function parse(numStr) {
	  var exponent = 0, digits, numberOfIntegerDigits;
	  var i, j, zeros;
	
	  // Decimal point?
	  if ((numberOfIntegerDigits = numStr.indexOf(DECIMAL_SEP)) > -1) {
	    numStr = numStr.replace(DECIMAL_SEP, '');
	  }
	
	  // Exponential form?
	  if ((i = numStr.search(/e/i)) > 0) {
	    // Work out the exponent.
	    if (numberOfIntegerDigits < 0) numberOfIntegerDigits = i;
	    numberOfIntegerDigits += +numStr.slice(i + 1);
	    numStr = numStr.substring(0, i);
	  } else if (numberOfIntegerDigits < 0) {
	    // There was no decimal point or exponent so it is an integer.
	    numberOfIntegerDigits = numStr.length;
	  }
	
	  // Count the number of leading zeros.
	  for (i = 0; numStr.charAt(i) === ZERO_CHAR; i++) { /* empty */ }
	
	  if (i === (zeros = numStr.length)) {
	    // The digits are all zero.
	    digits = [0];
	    numberOfIntegerDigits = 1;
	  } else {
	    // Count the number of trailing zeros
	    zeros--;
	    while (numStr.charAt(zeros) === ZERO_CHAR) zeros--;
	
	    // Trailing zeros are insignificant so ignore them
	    numberOfIntegerDigits -= i;
	    digits = [];
	    // Convert string to array of digits without leading/trailing zeros.
	    for (j = 0; i <= zeros; i++, j++) {
	      digits[j] = +numStr.charAt(i);
	    }
	  }
	
	  // If the number overflows the maximum allowed digits then use an exponent.
	  if (numberOfIntegerDigits > MAX_DIGITS) {
	    digits = digits.splice(0, MAX_DIGITS - 1);
	    exponent = numberOfIntegerDigits - 1;
	    numberOfIntegerDigits = 1;
	  }
	
	  return { d: digits, e: exponent, i: numberOfIntegerDigits };
	}
	
	/**
	 * Round the parsed number to the specified number of decimal places
	 * This function changed the parsedNumber in-place
	 */
	function roundNumber(parsedNumber, fractionSize, minFrac, maxFrac) {
	    var digits = parsedNumber.d;
	    var fractionLen = digits.length - parsedNumber.i;
	
	    // determine fractionSize if it is not specified; `+fractionSize` converts it to a number
	    fractionSize = (isUndefined(fractionSize)) ? Math.min(Math.max(minFrac, fractionLen), maxFrac) : +fractionSize;
	
	    // The index of the digit to where rounding is to occur
	    var roundAt = fractionSize + parsedNumber.i;
	    var digit = digits[roundAt];
	
	    if (roundAt > 0) {
	      // Drop fractional digits beyond `roundAt`
	      digits.splice(Math.max(parsedNumber.i, roundAt));
	
	      // Set non-fractional digits beyond `roundAt` to 0
	      for (var j = roundAt; j < digits.length; j++) {
	        digits[j] = 0;
	      }
	    } else {
	      // We rounded to zero so reset the parsedNumber
	      fractionLen = Math.max(0, fractionLen);
	      parsedNumber.i = 1;
	      digits.length = Math.max(1, roundAt = fractionSize + 1);
	      digits[0] = 0;
	      for (var i = 1; i < roundAt; i++) digits[i] = 0;
	    }
	
	    if (digit >= 5) {
	      if (roundAt - 1 < 0) {
	        for (var k = 0; k > roundAt; k--) {
	          digits.unshift(0);
	          parsedNumber.i++;
	        }
	        digits.unshift(1);
	        parsedNumber.i++;
	      } else {
	        digits[roundAt - 1]++;
	      }
	    }
	
	    // Pad out with zeros to get the required fraction length
	    for (; fractionLen < Math.max(0, fractionSize); fractionLen++) digits.push(0);
	
	
	    // Do any carrying, e.g. a digit was rounded up to 10
	    var carry = digits.reduceRight(function(carry, d, i, digits) {
	      d = d + carry;
	      digits[i] = d % 10;
	      return Math.floor(d / 10);
	    }, 0);
	    if (carry) {
	      digits.unshift(carry);
	      parsedNumber.i++;
	    }
	}
	
	/**
	 * Format a number into a string
	 * @param  {number} number       The number to format
	 * @param  {{
	 *           minFrac, // the minimum number of digits required in the fraction part of the number
	 *           maxFrac, // the maximum number of digits required in the fraction part of the number
	 *           gSize,   // number of digits in each group of separated digits
	 *           lgSize,  // number of digits in the last group of digits before the decimal separator
	 *           negPre,  // the string to go in front of a negative number (e.g. `-` or `(`))
	 *           posPre,  // the string to go in front of a positive number
	 *           negSuf,  // the string to go after a negative number (e.g. `)`)
	 *           posSuf   // the string to go after a positive number
	 *         }} pattern
	 * @param  {string} groupSep     The string to separate groups of number (e.g. `,`)
	 * @param  {string} decimalSep   The string to act as the decimal separator (e.g. `.`)
	 * @param  {[type]} fractionSize The size of the fractional part of the number
	 * @return {string}              The number formatted as a string
	 */
	function formatNumber(number, pattern, groupSep, decimalSep, fractionSize) {
	
	  if (!(isString(number) || isNumber(number)) || isNaN(number)) return '';
	
	  var isInfinity = !isFinite(number);
	  var isZero = false;
	  var numStr = Math.abs(number) + '',
	      formattedText = '',
	      parsedNumber;
	
	  if (isInfinity) {
	    formattedText = '\u221e';
	  } else {
	    parsedNumber = parse(numStr);
	
	    roundNumber(parsedNumber, fractionSize, pattern.minFrac, pattern.maxFrac);
	
	    var digits = parsedNumber.d;
	    var integerLen = parsedNumber.i;
	    var exponent = parsedNumber.e;
	    var decimals = [];
	    isZero = digits.reduce(function(isZero, d) { return isZero && !d; }, true);
	
	    // pad zeros for small numbers
	    while (integerLen < 0) {
	      digits.unshift(0);
	      integerLen++;
	    }
	
	    // extract decimals digits
	    if (integerLen > 0) {
	      decimals = digits.splice(integerLen, digits.length);
	    } else {
	      decimals = digits;
	      digits = [0];
	    }
	
	    // format the integer digits with grouping separators
	    var groups = [];
	    if (digits.length >= pattern.lgSize) {
	      groups.unshift(digits.splice(-pattern.lgSize, digits.length).join(''));
	    }
	    while (digits.length > pattern.gSize) {
	      groups.unshift(digits.splice(-pattern.gSize, digits.length).join(''));
	    }
	    if (digits.length) {
	      groups.unshift(digits.join(''));
	    }
	    formattedText = groups.join(groupSep);
	
	    // append the decimal digits
	    if (decimals.length) {
	      formattedText += decimalSep + decimals.join('');
	    }
	
	    if (exponent) {
	      formattedText += 'e+' + exponent;
	    }
	  }
	  if (number < 0 && !isZero) {
	    return pattern.negPre + formattedText + pattern.negSuf;
	  } else {
	    return pattern.posPre + formattedText + pattern.posSuf;
	  }
	}
	
	function padNumber(num, digits, trim, negWrap) {
	  var neg = '';
	  if (num < 0 || (negWrap && num <= 0)) {
	    if (negWrap) {
	      num = -num + 1;
	    } else {
	      num = -num;
	      neg = '-';
	    }
	  }
	  num = '' + num;
	  while (num.length < digits) num = ZERO_CHAR + num;
	  if (trim) {
	    num = num.substr(num.length - digits);
	  }
	  return neg + num;
	}
	
	
	function dateGetter(name, size, offset, trim, negWrap) {
	  offset = offset || 0;
	  return function(date) {
	    var value = date['get' + name]();
	    if (offset > 0 || value > -offset) {
	      value += offset;
	    }
	    if (value === 0 && offset === -12) value = 12;
	    return padNumber(value, size, trim, negWrap);
	  };
	}
	
	function dateStrGetter(name, shortForm, standAlone) {
	  return function(date, formats) {
	    var value = date['get' + name]();
	    var propPrefix = (standAlone ? 'STANDALONE' : '') + (shortForm ? 'SHORT' : '');
	    var get = uppercase(propPrefix + name);
	
	    return formats[get][value];
	  };
	}
	
	function timeZoneGetter(date, formats, offset) {
	  var zone = -1 * offset;
	  var paddedZone = (zone >= 0) ? '+' : '';
	
	  paddedZone += padNumber(Math[zone > 0 ? 'floor' : 'ceil'](zone / 60), 2) +
	                padNumber(Math.abs(zone % 60), 2);
	
	  return paddedZone;
	}
	
	function getFirstThursdayOfYear(year) {
	    // 0 = index of January
	    var dayOfWeekOnFirst = (new Date(year, 0, 1)).getDay();
	    // 4 = index of Thursday (+1 to account for 1st = 5)
	    // 11 = index of *next* Thursday (+1 account for 1st = 12)
	    return new Date(year, 0, ((dayOfWeekOnFirst <= 4) ? 5 : 12) - dayOfWeekOnFirst);
	}
	
	function getThursdayThisWeek(datetime) {
	    return new Date(datetime.getFullYear(), datetime.getMonth(),
	      // 4 = index of Thursday
	      datetime.getDate() + (4 - datetime.getDay()));
	}
	
	function weekGetter(size) {
	   return function(date) {
	      var firstThurs = getFirstThursdayOfYear(date.getFullYear()),
	         thisThurs = getThursdayThisWeek(date);
	
	      var diff = +thisThurs - +firstThurs,
	         result = 1 + Math.round(diff / 6.048e8); // 6.048e8 ms per week
	
	      return padNumber(result, size);
	   };
	}
	
	function ampmGetter(date, formats) {
	  return date.getHours() < 12 ? formats.AMPMS[0] : formats.AMPMS[1];
	}
	
	function eraGetter(date, formats) {
	  return date.getFullYear() <= 0 ? formats.ERAS[0] : formats.ERAS[1];
	}
	
	function longEraGetter(date, formats) {
	  return date.getFullYear() <= 0 ? formats.ERANAMES[0] : formats.ERANAMES[1];
	}
	
	var DATE_FORMATS = {
	  yyyy: dateGetter('FullYear', 4, 0, false, true),
	    yy: dateGetter('FullYear', 2, 0, true, true),
	     y: dateGetter('FullYear', 1, 0, false, true),
	  MMMM: dateStrGetter('Month'),
	   MMM: dateStrGetter('Month', true),
	    MM: dateGetter('Month', 2, 1),
	     M: dateGetter('Month', 1, 1),
	  LLLL: dateStrGetter('Month', false, true),
	    dd: dateGetter('Date', 2),
	     d: dateGetter('Date', 1),
	    HH: dateGetter('Hours', 2),
	     H: dateGetter('Hours', 1),
	    hh: dateGetter('Hours', 2, -12),
	     h: dateGetter('Hours', 1, -12),
	    mm: dateGetter('Minutes', 2),
	     m: dateGetter('Minutes', 1),
	    ss: dateGetter('Seconds', 2),
	     s: dateGetter('Seconds', 1),
	     // while ISO 8601 requires fractions to be prefixed with `.` or `,`
	     // we can be just safely rely on using `sss` since we currently don't support single or two digit fractions
	   sss: dateGetter('Milliseconds', 3),
	  EEEE: dateStrGetter('Day'),
	   EEE: dateStrGetter('Day', true),
	     a: ampmGetter,
	     Z: timeZoneGetter,
	    ww: weekGetter(2),
	     w: weekGetter(1),
	     G: eraGetter,
	     GG: eraGetter,
	     GGG: eraGetter,
	     GGGG: longEraGetter
	};
	
	var DATE_FORMATS_SPLIT = /((?:[^yMLdHhmsaZEwG']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|L+|d+|H+|h+|m+|s+|a|Z|G+|w+))(.*)/,
	    NUMBER_STRING = /^-?\d+$/;
	
	/**
	 * @ngdoc filter
	 * @name date
	 * @kind function
	 *
	 * @description
	 *   Formats `date` to a string based on the requested `format`.
	 *
	 *   `format` string can be composed of the following elements:
	 *
	 *   * `'yyyy'`: 4 digit representation of year (e.g. AD 1 => 0001, AD 2010 => 2010)
	 *   * `'yy'`: 2 digit representation of year, padded (00-99). (e.g. AD 2001 => 01, AD 2010 => 10)
	 *   * `'y'`: 1 digit representation of year, e.g. (AD 1 => 1, AD 199 => 199)
	 *   * `'MMMM'`: Month in year (January-December)
	 *   * `'MMM'`: Month in year (Jan-Dec)
	 *   * `'MM'`: Month in year, padded (01-12)
	 *   * `'M'`: Month in year (1-12)
	 *   * `'LLLL'`: Stand-alone month in year (January-December)
	 *   * `'dd'`: Day in month, padded (01-31)
	 *   * `'d'`: Day in month (1-31)
	 *   * `'EEEE'`: Day in Week,(Sunday-Saturday)
	 *   * `'EEE'`: Day in Week, (Sun-Sat)
	 *   * `'HH'`: Hour in day, padded (00-23)
	 *   * `'H'`: Hour in day (0-23)
	 *   * `'hh'`: Hour in AM/PM, padded (01-12)
	 *   * `'h'`: Hour in AM/PM, (1-12)
	 *   * `'mm'`: Minute in hour, padded (00-59)
	 *   * `'m'`: Minute in hour (0-59)
	 *   * `'ss'`: Second in minute, padded (00-59)
	 *   * `'s'`: Second in minute (0-59)
	 *   * `'sss'`: Millisecond in second, padded (000-999)
	 *   * `'a'`: AM/PM marker
	 *   * `'Z'`: 4 digit (+sign) representation of the timezone offset (-1200-+1200)
	 *   * `'ww'`: Week of year, padded (00-53). Week 01 is the week with the first Thursday of the year
	 *   * `'w'`: Week of year (0-53). Week 1 is the week with the first Thursday of the year
	 *   * `'G'`, `'GG'`, `'GGG'`: The abbreviated form of the era string (e.g. 'AD')
	 *   * `'GGGG'`: The long form of the era string (e.g. 'Anno Domini')
	 *
	 *   `format` string can also be one of the following predefined
	 *   {@link guide/i18n localizable formats}:
	 *
	 *   * `'medium'`: equivalent to `'MMM d, y h:mm:ss a'` for en_US locale
	 *     (e.g. Sep 3, 2010 12:05:08 PM)
	 *   * `'short'`: equivalent to `'M/d/yy h:mm a'` for en_US  locale (e.g. 9/3/10 12:05 PM)
	 *   * `'fullDate'`: equivalent to `'EEEE, MMMM d, y'` for en_US  locale
	 *     (e.g. Friday, September 3, 2010)
	 *   * `'longDate'`: equivalent to `'MMMM d, y'` for en_US  locale (e.g. September 3, 2010)
	 *   * `'mediumDate'`: equivalent to `'MMM d, y'` for en_US  locale (e.g. Sep 3, 2010)
	 *   * `'shortDate'`: equivalent to `'M/d/yy'` for en_US locale (e.g. 9/3/10)
	 *   * `'mediumTime'`: equivalent to `'h:mm:ss a'` for en_US locale (e.g. 12:05:08 PM)
	 *   * `'shortTime'`: equivalent to `'h:mm a'` for en_US locale (e.g. 12:05 PM)
	 *
	 *   `format` string can contain literal values. These need to be escaped by surrounding with single quotes (e.g.
	 *   `"h 'in the morning'"`). In order to output a single quote, escape it - i.e., two single quotes in a sequence
	 *   (e.g. `"h 'o''clock'"`).
	 *
	 * @param {(Date|number|string)} date Date to format either as Date object, milliseconds (string or
	 *    number) or various ISO 8601 datetime string formats (e.g. yyyy-MM-ddTHH:mm:ss.sssZ and its
	 *    shorter versions like yyyy-MM-ddTHH:mmZ, yyyy-MM-dd or yyyyMMddTHHmmssZ). If no timezone is
	 *    specified in the string input, the time is considered to be in the local timezone.
	 * @param {string=} format Formatting rules (see Description). If not specified,
	 *    `mediumDate` is used.
	 * @param {string=} timezone Timezone to be used for formatting. It understands UTC/GMT and the
	 *    continental US time zone abbreviations, but for general use, use a time zone offset, for
	 *    example, `'+0430'` (4 hours, 30 minutes east of the Greenwich meridian)
	 *    If not specified, the timezone of the browser will be used.
	 * @returns {string} Formatted string or the input if input is not recognized as date/millis.
	 *
	 * @example
	   <example name="filter-date">
	     <file name="index.html">
	       <span ng-non-bindable>{{1288323623006 | date:'medium'}}</span>:
	           <span>{{1288323623006 | date:'medium'}}</span><br>
	       <span ng-non-bindable>{{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}</span>:
	          <span>{{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}</span><br>
	       <span ng-non-bindable>{{1288323623006 | date:'MM/dd/yyyy @ h:mma'}}</span>:
	          <span>{{'1288323623006' | date:'MM/dd/yyyy @ h:mma'}}</span><br>
	       <span ng-non-bindable>{{1288323623006 | date:"MM/dd/yyyy 'at' h:mma"}}</span>:
	          <span>{{'1288323623006' | date:"MM/dd/yyyy 'at' h:mma"}}</span><br>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should format date', function() {
	         expect(element(by.binding("1288323623006 | date:'medium'")).getText()).
	            toMatch(/Oct 2\d, 2010 \d{1,2}:\d{2}:\d{2} (AM|PM)/);
	         expect(element(by.binding("1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'")).getText()).
	            toMatch(/2010-10-2\d \d{2}:\d{2}:\d{2} (-|\+)?\d{4}/);
	         expect(element(by.binding("'1288323623006' | date:'MM/dd/yyyy @ h:mma'")).getText()).
	            toMatch(/10\/2\d\/2010 @ \d{1,2}:\d{2}(AM|PM)/);
	         expect(element(by.binding("'1288323623006' | date:\"MM/dd/yyyy 'at' h:mma\"")).getText()).
	            toMatch(/10\/2\d\/2010 at \d{1,2}:\d{2}(AM|PM)/);
	       });
	     </file>
	   </example>
	 */
	dateFilter.$inject = ['$locale'];
	function dateFilter($locale) {
	
	
	  var R_ISO8601_STR = /^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;
	                     // 1        2       3         4          5          6          7          8  9     10      11
	  function jsonStringToDate(string) {
	    var match;
	    if ((match = string.match(R_ISO8601_STR))) {
	      var date = new Date(0),
	          tzHour = 0,
	          tzMin  = 0,
	          dateSetter = match[8] ? date.setUTCFullYear : date.setFullYear,
	          timeSetter = match[8] ? date.setUTCHours : date.setHours;
	
	      if (match[9]) {
	        tzHour = toInt(match[9] + match[10]);
	        tzMin = toInt(match[9] + match[11]);
	      }
	      dateSetter.call(date, toInt(match[1]), toInt(match[2]) - 1, toInt(match[3]));
	      var h = toInt(match[4] || 0) - tzHour;
	      var m = toInt(match[5] || 0) - tzMin;
	      var s = toInt(match[6] || 0);
	      var ms = Math.round(parseFloat('0.' + (match[7] || 0)) * 1000);
	      timeSetter.call(date, h, m, s, ms);
	      return date;
	    }
	    return string;
	  }
	
	
	  return function(date, format, timezone) {
	    var text = '',
	        parts = [],
	        fn, match;
	
	    format = format || 'mediumDate';
	    format = $locale.DATETIME_FORMATS[format] || format;
	    if (isString(date)) {
	      date = NUMBER_STRING.test(date) ? toInt(date) : jsonStringToDate(date);
	    }
	
	    if (isNumber(date)) {
	      date = new Date(date);
	    }
	
	    if (!isDate(date) || !isFinite(date.getTime())) {
	      return date;
	    }
	
	    while (format) {
	      match = DATE_FORMATS_SPLIT.exec(format);
	      if (match) {
	        parts = concat(parts, match, 1);
	        format = parts.pop();
	      } else {
	        parts.push(format);
	        format = null;
	      }
	    }
	
	    var dateTimezoneOffset = date.getTimezoneOffset();
	    if (timezone) {
	      dateTimezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);
	      date = convertTimezoneToLocal(date, timezone, true);
	    }
	    forEach(parts, function(value) {
	      fn = DATE_FORMATS[value];
	      text += fn ? fn(date, $locale.DATETIME_FORMATS, dateTimezoneOffset)
	                 : value === '\'\'' ? '\'' : value.replace(/(^'|'$)/g, '').replace(/''/g, '\'');
	    });
	
	    return text;
	  };
	}
	
	
	/**
	 * @ngdoc filter
	 * @name json
	 * @kind function
	 *
	 * @description
	 *   Allows you to convert a JavaScript object into JSON string.
	 *
	 *   This filter is mostly useful for debugging. When using the double curly {{value}} notation
	 *   the binding is automatically converted to JSON.
	 *
	 * @param {*} object Any JavaScript object (including arrays and primitive types) to filter.
	 * @param {number=} spacing The number of spaces to use per indentation, defaults to 2.
	 * @returns {string} JSON string.
	 *
	 *
	 * @example
	   <example name="filter-json">
	     <file name="index.html">
	       <pre id="default-spacing">{{ {'name':'value'} | json }}</pre>
	       <pre id="custom-spacing">{{ {'name':'value'} | json:4 }}</pre>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should jsonify filtered objects', function() {
	         expect(element(by.id('default-spacing')).getText()).toMatch(/\{\n {2}"name": ?"value"\n}/);
	         expect(element(by.id('custom-spacing')).getText()).toMatch(/\{\n {4}"name": ?"value"\n}/);
	       });
	     </file>
	   </example>
	 *
	 */
	function jsonFilter() {
	  return function(object, spacing) {
	    if (isUndefined(spacing)) {
	        spacing = 2;
	    }
	    return toJson(object, spacing);
	  };
	}
	
	
	/**
	 * @ngdoc filter
	 * @name lowercase
	 * @kind function
	 * @description
	 * Converts string to lowercase.
	 * @see angular.lowercase
	 */
	var lowercaseFilter = valueFn(lowercase);
	
	
	/**
	 * @ngdoc filter
	 * @name uppercase
	 * @kind function
	 * @description
	 * Converts string to uppercase.
	 * @see angular.uppercase
	 */
	var uppercaseFilter = valueFn(uppercase);
	
	/**
	 * @ngdoc filter
	 * @name limitTo
	 * @kind function
	 *
	 * @description
	 * Creates a new array or string containing only a specified number of elements. The elements are
	 * taken from either the beginning or the end of the source array, string or number, as specified by
	 * the value and sign (positive or negative) of `limit`. Other array-like objects are also supported
	 * (e.g. array subclasses, NodeLists, jqLite/jQuery collections etc). If a number is used as input,
	 * it is converted to a string.
	 *
	 * @param {Array|ArrayLike|string|number} input - Array/array-like, string or number to be limited.
	 * @param {string|number} limit - The length of the returned array or string. If the `limit` number
	 *     is positive, `limit` number of items from the beginning of the source array/string are copied.
	 *     If the number is negative, `limit` number  of items from the end of the source array/string
	 *     are copied. The `limit` will be trimmed if it exceeds `array.length`. If `limit` is undefined,
	 *     the input will be returned unchanged.
	 * @param {(string|number)=} begin - Index at which to begin limitation. As a negative index,
	 *     `begin` indicates an offset from the end of `input`. Defaults to `0`.
	 * @returns {Array|string} A new sub-array or substring of length `limit` or less if the input had
	 *     less than `limit` elements.
	 *
	 * @example
	   <example module="limitToExample" name="limit-to-filter">
	     <file name="index.html">
	       <script>
	         angular.module('limitToExample', [])
	           .controller('ExampleController', ['$scope', function($scope) {
	             $scope.numbers = [1,2,3,4,5,6,7,8,9];
	             $scope.letters = "abcdefghi";
	             $scope.longNumber = 2345432342;
	             $scope.numLimit = 3;
	             $scope.letterLimit = 3;
	             $scope.longNumberLimit = 3;
	           }]);
	       </script>
	       <div ng-controller="ExampleController">
	         <label>
	            Limit {{numbers}} to:
	            <input type="number" step="1" ng-model="numLimit">
	         </label>
	         <p>Output numbers: {{ numbers | limitTo:numLimit }}</p>
	         <label>
	            Limit {{letters}} to:
	            <input type="number" step="1" ng-model="letterLimit">
	         </label>
	         <p>Output letters: {{ letters | limitTo:letterLimit }}</p>
	         <label>
	            Limit {{longNumber}} to:
	            <input type="number" step="1" ng-model="longNumberLimit">
	         </label>
	         <p>Output long number: {{ longNumber | limitTo:longNumberLimit }}</p>
	       </div>
	     </file>
	     <file name="protractor.js" type="protractor">
	       var numLimitInput = element(by.model('numLimit'));
	       var letterLimitInput = element(by.model('letterLimit'));
	       var longNumberLimitInput = element(by.model('longNumberLimit'));
	       var limitedNumbers = element(by.binding('numbers | limitTo:numLimit'));
	       var limitedLetters = element(by.binding('letters | limitTo:letterLimit'));
	       var limitedLongNumber = element(by.binding('longNumber | limitTo:longNumberLimit'));
	
	       it('should limit the number array to first three items', function() {
	         expect(numLimitInput.getAttribute('value')).toBe('3');
	         expect(letterLimitInput.getAttribute('value')).toBe('3');
	         expect(longNumberLimitInput.getAttribute('value')).toBe('3');
	         expect(limitedNumbers.getText()).toEqual('Output numbers: [1,2,3]');
	         expect(limitedLetters.getText()).toEqual('Output letters: abc');
	         expect(limitedLongNumber.getText()).toEqual('Output long number: 234');
	       });
	
	       // There is a bug in safari and protractor that doesn't like the minus key
	       // it('should update the output when -3 is entered', function() {
	       //   numLimitInput.clear();
	       //   numLimitInput.sendKeys('-3');
	       //   letterLimitInput.clear();
	       //   letterLimitInput.sendKeys('-3');
	       //   longNumberLimitInput.clear();
	       //   longNumberLimitInput.sendKeys('-3');
	       //   expect(limitedNumbers.getText()).toEqual('Output numbers: [7,8,9]');
	       //   expect(limitedLetters.getText()).toEqual('Output letters: ghi');
	       //   expect(limitedLongNumber.getText()).toEqual('Output long number: 342');
	       // });
	
	       it('should not exceed the maximum size of input array', function() {
	         numLimitInput.clear();
	         numLimitInput.sendKeys('100');
	         letterLimitInput.clear();
	         letterLimitInput.sendKeys('100');
	         longNumberLimitInput.clear();
	         longNumberLimitInput.sendKeys('100');
	         expect(limitedNumbers.getText()).toEqual('Output numbers: [1,2,3,4,5,6,7,8,9]');
	         expect(limitedLetters.getText()).toEqual('Output letters: abcdefghi');
	         expect(limitedLongNumber.getText()).toEqual('Output long number: 2345432342');
	       });
	     </file>
	   </example>
	*/
	function limitToFilter() {
	  return function(input, limit, begin) {
	    if (Math.abs(Number(limit)) === Infinity) {
	      limit = Number(limit);
	    } else {
	      limit = toInt(limit);
	    }
	    if (isNumberNaN(limit)) return input;
	
	    if (isNumber(input)) input = input.toString();
	    if (!isArrayLike(input)) return input;
	
	    begin = (!begin || isNaN(begin)) ? 0 : toInt(begin);
	    begin = (begin < 0) ? Math.max(0, input.length + begin) : begin;
	
	    if (limit >= 0) {
	      return sliceFn(input, begin, begin + limit);
	    } else {
	      if (begin === 0) {
	        return sliceFn(input, limit, input.length);
	      } else {
	        return sliceFn(input, Math.max(0, begin + limit), begin);
	      }
	    }
	  };
	}
	
	function sliceFn(input, begin, end) {
	  if (isString(input)) return input.slice(begin, end);
	
	  return slice.call(input, begin, end);
	}
	
	/**
	 * @ngdoc filter
	 * @name orderBy
	 * @kind function
	 *
	 * @description
	 * Returns an array containing the items from the specified `collection`, ordered by a `comparator`
	 * function based on the values computed using the `expression` predicate.
	 *
	 * For example, `[{id: 'foo'}, {id: 'bar'}] | orderBy:'id'` would result in
	 * `[{id: 'bar'}, {id: 'foo'}]`.
	 *
	 * The `collection` can be an Array or array-like object (e.g. NodeList, jQuery object, TypedArray,
	 * String, etc).
	 *
	 * The `expression` can be a single predicate, or a list of predicates each serving as a tie-breaker
	 * for the preceding one. The `expression` is evaluated against each item and the output is used
	 * for comparing with other items.
	 *
	 * You can change the sorting order by setting `reverse` to `true`. By default, items are sorted in
	 * ascending order.
	 *
	 * The comparison is done using the `comparator` function. If none is specified, a default, built-in
	 * comparator is used (see below for details - in a nutshell, it compares numbers numerically and
	 * strings alphabetically).
	 *
	 * ### Under the hood
	 *
	 * Ordering the specified `collection` happens in two phases:
	 *
	 * 1. All items are passed through the predicate (or predicates), and the returned values are saved
	 *    along with their type (`string`, `number` etc). For example, an item `{label: 'foo'}`, passed
	 *    through a predicate that extracts the value of the `label` property, would be transformed to:
	 *    ```
	 *    {
	 *      value: 'foo',
	 *      type: 'string',
	 *      index: ...
	 *    }
	 *    ```
	 * 2. The comparator function is used to sort the items, based on the derived values, types and
	 *    indices.
	 *
	 * If you use a custom comparator, it will be called with pairs of objects of the form
	 * `{value: ..., type: '...', index: ...}` and is expected to return `0` if the objects are equal
	 * (as far as the comparator is concerned), `-1` if the 1st one should be ranked higher than the
	 * second, or `1` otherwise.
	 *
	 * In order to ensure that the sorting will be deterministic across platforms, if none of the
	 * specified predicates can distinguish between two items, `orderBy` will automatically introduce a
	 * dummy predicate that returns the item's index as `value`.
	 * (If you are using a custom comparator, make sure it can handle this predicate as well.)
	 *
	 * Finally, in an attempt to simplify things, if a predicate returns an object as the extracted
	 * value for an item, `orderBy` will try to convert that object to a primitive value, before passing
	 * it to the comparator. The following rules govern the conversion:
	 *
	 * 1. If the object has a `valueOf()` method that returns a primitive, its return value will be
	 *    used instead.<br />
	 *    (If the object has a `valueOf()` method that returns another object, then the returned object
	 *    will be used in subsequent steps.)
	 * 2. If the object has a custom `toString()` method (i.e. not the one inherited from `Object`) that
	 *    returns a primitive, its return value will be used instead.<br />
	 *    (If the object has a `toString()` method that returns another object, then the returned object
	 *    will be used in subsequent steps.)
	 * 3. No conversion; the object itself is used.
	 *
	 * ### The default comparator
	 *
	 * The default, built-in comparator should be sufficient for most usecases. In short, it compares
	 * numbers numerically, strings alphabetically (and case-insensitively), for objects falls back to
	 * using their index in the original collection, and sorts values of different types by type.
	 *
	 * More specifically, it follows these steps to determine the relative order of items:
	 *
	 * 1. If the compared values are of different types, compare the types themselves alphabetically.
	 * 2. If both values are of type `string`, compare them alphabetically in a case- and
	 *    locale-insensitive way.
	 * 3. If both values are objects, compare their indices instead.
	 * 4. Otherwise, return:
	 *    -  `0`, if the values are equal (by strict equality comparison, i.e. using `===`).
	 *    - `-1`, if the 1st value is "less than" the 2nd value (compared using the `<` operator).
	 *    -  `1`, otherwise.
	 *
	 * **Note:** If you notice numbers not being sorted as expected, make sure they are actually being
	 *           saved as numbers and not strings.
	 * **Note:** For the purpose of sorting, `null` values are treated as the string `'null'` (i.e.
	 *           `type: 'string'`, `value: 'null'`). This may cause unexpected sort order relative to
	 *           other values.
	 *
	 * @param {Array|ArrayLike} collection - The collection (array or array-like object) to sort.
	 * @param {(Function|string|Array.<Function|string>)=} expression - A predicate (or list of
	 *    predicates) to be used by the comparator to determine the order of elements.
	 *
	 *    Can be one of:
	 *
	 *    - `Function`: A getter function. This function will be called with each item as argument and
	 *      the return value will be used for sorting.
	 *    - `string`: An Angular expression. This expression will be evaluated against each item and the
	 *      result will be used for sorting. For example, use `'label'` to sort by a property called
	 *      `label` or `'label.substring(0, 3)'` to sort by the first 3 characters of the `label`
	 *      property.<br />
	 *      (The result of a constant expression is interpreted as a property name to be used for
	 *      comparison. For example, use `'"special name"'` (note the extra pair of quotes) to sort by a
	 *      property called `special name`.)<br />
	 *      An expression can be optionally prefixed with `+` or `-` to control the sorting direction,
	 *      ascending or descending. For example, `'+label'` or `'-label'`. If no property is provided,
	 *      (e.g. `'+'` or `'-'`), the collection element itself is used in comparisons.
	 *    - `Array`: An array of function and/or string predicates. If a predicate cannot determine the
	 *      relative order of two items, the next predicate is used as a tie-breaker.
	 *
	 * **Note:** If the predicate is missing or empty then it defaults to `'+'`.
	 *
	 * @param {boolean=} reverse - If `true`, reverse the sorting order.
	 * @param {(Function)=} comparator - The comparator function used to determine the relative order of
	 *    value pairs. If omitted, the built-in comparator will be used.
	 *
	 * @returns {Array} - The sorted array.
	 *
	 *
	 * @example
	 * ### Ordering a table with `ngRepeat`
	 *
	 * The example below demonstrates a simple {@link ngRepeat ngRepeat}, where the data is sorted by
	 * age in descending order (expression is set to `'-age'`). The `comparator` is not set, which means
	 * it defaults to the built-in comparator.
	 *
	   <example name="orderBy-static" module="orderByExample1">
	     <file name="index.html">
	       <div ng-controller="ExampleController">
	         <table class="friends">
	           <tr>
	             <th>Name</th>
	             <th>Phone Number</th>
	             <th>Age</th>
	           </tr>
	           <tr ng-repeat="friend in friends | orderBy:'-age'">
	             <td>{{friend.name}}</td>
	             <td>{{friend.phone}}</td>
	             <td>{{friend.age}}</td>
	           </tr>
	         </table>
	       </div>
	     </file>
	     <file name="script.js">
	       angular.module('orderByExample1', [])
	         .controller('ExampleController', ['$scope', function($scope) {
	           $scope.friends = [
	             {name: 'John',   phone: '555-1212',  age: 10},
	             {name: 'Mary',   phone: '555-9876',  age: 19},
	             {name: 'Mike',   phone: '555-4321',  age: 21},
	             {name: 'Adam',   phone: '555-5678',  age: 35},
	             {name: 'Julie',  phone: '555-8765',  age: 29}
	           ];
	         }]);
	     </file>
	     <file name="style.css">
	       .friends {
	         border-collapse: collapse;
	       }
	
	       .friends th {
	         border-bottom: 1px solid;
	       }
	       .friends td, .friends th {
	         border-left: 1px solid;
	         padding: 5px 10px;
	       }
	       .friends td:first-child, .friends th:first-child {
	         border-left: none;
	       }
	     </file>
	     <file name="protractor.js" type="protractor">
	       // Element locators
	       var names = element.all(by.repeater('friends').column('friend.name'));
	
	       it('should sort friends by age in reverse order', function() {
	         expect(names.get(0).getText()).toBe('Adam');
	         expect(names.get(1).getText()).toBe('Julie');
	         expect(names.get(2).getText()).toBe('Mike');
	         expect(names.get(3).getText()).toBe('Mary');
	         expect(names.get(4).getText()).toBe('John');
	       });
	     </file>
	   </example>
	 * <hr />
	 *
	 * @example
	 * ### Changing parameters dynamically
	 *
	 * All parameters can be changed dynamically. The next example shows how you can make the columns of
	 * a table sortable, by binding the `expression` and `reverse` parameters to scope properties.
	 *
	   <example name="orderBy-dynamic" module="orderByExample2">
	     <file name="index.html">
	       <div ng-controller="ExampleController">
	         <pre>Sort by = {{propertyName}}; reverse = {{reverse}}</pre>
	         <hr/>
	         <button ng-click="propertyName = null; reverse = false">Set to unsorted</button>
	         <hr/>
	         <table class="friends">
	           <tr>
	             <th>
	               <button ng-click="sortBy('name')">Name</button>
	               <span class="sortorder" ng-show="propertyName === 'name'" ng-class="{reverse: reverse}"></span>
	             </th>
	             <th>
	               <button ng-click="sortBy('phone')">Phone Number</button>
	               <span class="sortorder" ng-show="propertyName === 'phone'" ng-class="{reverse: reverse}"></span>
	             </th>
	             <th>
	               <button ng-click="sortBy('age')">Age</button>
	               <span class="sortorder" ng-show="propertyName === 'age'" ng-class="{reverse: reverse}"></span>
	             </th>
	           </tr>
	           <tr ng-repeat="friend in friends | orderBy:propertyName:reverse">
	             <td>{{friend.name}}</td>
	             <td>{{friend.phone}}</td>
	             <td>{{friend.age}}</td>
	           </tr>
	         </table>
	       </div>
	     </file>
	     <file name="script.js">
	       angular.module('orderByExample2', [])
	         .controller('ExampleController', ['$scope', function($scope) {
	           var friends = [
	             {name: 'John',   phone: '555-1212',  age: 10},
	             {name: 'Mary',   phone: '555-9876',  age: 19},
	             {name: 'Mike',   phone: '555-4321',  age: 21},
	             {name: 'Adam',   phone: '555-5678',  age: 35},
	             {name: 'Julie',  phone: '555-8765',  age: 29}
	           ];
	
	           $scope.propertyName = 'age';
	           $scope.reverse = true;
	           $scope.friends = friends;
	
	           $scope.sortBy = function(propertyName) {
	             $scope.reverse = ($scope.propertyName === propertyName) ? !$scope.reverse : false;
	             $scope.propertyName = propertyName;
	           };
	         }]);
	     </file>
	     <file name="style.css">
	       .friends {
	         border-collapse: collapse;
	       }
	
	       .friends th {
	         border-bottom: 1px solid;
	       }
	       .friends td, .friends th {
	         border-left: 1px solid;
	         padding: 5px 10px;
	       }
	       .friends td:first-child, .friends th:first-child {
	         border-left: none;
	       }
	
	       .sortorder:after {
	         content: '\25b2';   // BLACK UP-POINTING TRIANGLE
	       }
	       .sortorder.reverse:after {
	         content: '\25bc';   // BLACK DOWN-POINTING TRIANGLE
	       }
	     </file>
	     <file name="protractor.js" type="protractor">
	       // Element locators
	       var unsortButton = element(by.partialButtonText('unsorted'));
	       var nameHeader = element(by.partialButtonText('Name'));
	       var phoneHeader = element(by.partialButtonText('Phone'));
	       var ageHeader = element(by.partialButtonText('Age'));
	       var firstName = element(by.repeater('friends').column('friend.name').row(0));
	       var lastName = element(by.repeater('friends').column('friend.name').row(4));
	
	       it('should sort friends by some property, when clicking on the column header', function() {
	         expect(firstName.getText()).toBe('Adam');
	         expect(lastName.getText()).toBe('John');
	
	         phoneHeader.click();
	         expect(firstName.getText()).toBe('John');
	         expect(lastName.getText()).toBe('Mary');
	
	         nameHeader.click();
	         expect(firstName.getText()).toBe('Adam');
	         expect(lastName.getText()).toBe('Mike');
	
	         ageHeader.click();
	         expect(firstName.getText()).toBe('John');
	         expect(lastName.getText()).toBe('Adam');
	       });
	
	       it('should sort friends in reverse order, when clicking on the same column', function() {
	         expect(firstName.getText()).toBe('Adam');
	         expect(lastName.getText()).toBe('John');
	
	         ageHeader.click();
	         expect(firstName.getText()).toBe('John');
	         expect(lastName.getText()).toBe('Adam');
	
	         ageHeader.click();
	         expect(firstName.getText()).toBe('Adam');
	         expect(lastName.getText()).toBe('John');
	       });
	
	       it('should restore the original order, when clicking "Set to unsorted"', function() {
	         expect(firstName.getText()).toBe('Adam');
	         expect(lastName.getText()).toBe('John');
	
	         unsortButton.click();
	         expect(firstName.getText()).toBe('John');
	         expect(lastName.getText()).toBe('Julie');
	       });
	     </file>
	   </example>
	 * <hr />
	 *
	 * @example
	 * ### Using `orderBy` inside a controller
	 *
	 * It is also possible to call the `orderBy` filter manually, by injecting `orderByFilter`, and
	 * calling it with the desired parameters. (Alternatively, you could inject the `$filter` factory
	 * and retrieve the `orderBy` filter with `$filter('orderBy')`.)
	 *
	   <example name="orderBy-call-manually" module="orderByExample3">
	     <file name="index.html">
	       <div ng-controller="ExampleController">
	         <pre>Sort by = {{propertyName}}; reverse = {{reverse}}</pre>
	         <hr/>
	         <button ng-click="sortBy(null)">Set to unsorted</button>
	         <hr/>
	         <table class="friends">
	           <tr>
	             <th>
	               <button ng-click="sortBy('name')">Name</button>
	               <span class="sortorder" ng-show="propertyName === 'name'" ng-class="{reverse: reverse}"></span>
	             </th>
	             <th>
	               <button ng-click="sortBy('phone')">Phone Number</button>
	               <span class="sortorder" ng-show="propertyName === 'phone'" ng-class="{reverse: reverse}"></span>
	             </th>
	             <th>
	               <button ng-click="sortBy('age')">Age</button>
	               <span class="sortorder" ng-show="propertyName === 'age'" ng-class="{reverse: reverse}"></span>
	             </th>
	           </tr>
	           <tr ng-repeat="friend in friends">
	             <td>{{friend.name}}</td>
	             <td>{{friend.phone}}</td>
	             <td>{{friend.age}}</td>
	           </tr>
	         </table>
	       </div>
	     </file>
	     <file name="script.js">
	       angular.module('orderByExample3', [])
	         .controller('ExampleController', ['$scope', 'orderByFilter', function($scope, orderBy) {
	           var friends = [
	             {name: 'John',   phone: '555-1212',  age: 10},
	             {name: 'Mary',   phone: '555-9876',  age: 19},
	             {name: 'Mike',   phone: '555-4321',  age: 21},
	             {name: 'Adam',   phone: '555-5678',  age: 35},
	             {name: 'Julie',  phone: '555-8765',  age: 29}
	           ];
	
	           $scope.propertyName = 'age';
	           $scope.reverse = true;
	           $scope.friends = orderBy(friends, $scope.propertyName, $scope.reverse);
	
	           $scope.sortBy = function(propertyName) {
	             $scope.reverse = (propertyName !== null && $scope.propertyName === propertyName)
	                 ? !$scope.reverse : false;
	             $scope.propertyName = propertyName;
	             $scope.friends = orderBy(friends, $scope.propertyName, $scope.reverse);
	           };
	         }]);
	     </file>
	     <file name="style.css">
	       .friends {
	         border-collapse: collapse;
	       }
	
	       .friends th {
	         border-bottom: 1px solid;
	       }
	       .friends td, .friends th {
	         border-left: 1px solid;
	         padding: 5px 10px;
	       }
	       .friends td:first-child, .friends th:first-child {
	         border-left: none;
	       }
	
	       .sortorder:after {
	         content: '\25b2';   // BLACK UP-POINTING TRIANGLE
	       }
	       .sortorder.reverse:after {
	         content: '\25bc';   // BLACK DOWN-POINTING TRIANGLE
	       }
	     </file>
	     <file name="protractor.js" type="protractor">
	       // Element locators
	       var unsortButton = element(by.partialButtonText('unsorted'));
	       var nameHeader = element(by.partialButtonText('Name'));
	       var phoneHeader = element(by.partialButtonText('Phone'));
	       var ageHeader = element(by.partialButtonText('Age'));
	       var firstName = element(by.repeater('friends').column('friend.name').row(0));
	       var lastName = element(by.repeater('friends').column('friend.name').row(4));
	
	       it('should sort friends by some property, when clicking on the column header', function() {
	         expect(firstName.getText()).toBe('Adam');
	         expect(lastName.getText()).toBe('John');
	
	         phoneHeader.click();
	         expect(firstName.getText()).toBe('John');
	         expect(lastName.getText()).toBe('Mary');
	
	         nameHeader.click();
	         expect(firstName.getText()).toBe('Adam');
	         expect(lastName.getText()).toBe('Mike');
	
	         ageHeader.click();
	         expect(firstName.getText()).toBe('John');
	         expect(lastName.getText()).toBe('Adam');
	       });
	
	       it('should sort friends in reverse order, when clicking on the same column', function() {
	         expect(firstName.getText()).toBe('Adam');
	         expect(lastName.getText()).toBe('John');
	
	         ageHeader.click();
	         expect(firstName.getText()).toBe('John');
	         expect(lastName.getText()).toBe('Adam');
	
	         ageHeader.click();
	         expect(firstName.getText()).toBe('Adam');
	         expect(lastName.getText()).toBe('John');
	       });
	
	       it('should restore the original order, when clicking "Set to unsorted"', function() {
	         expect(firstName.getText()).toBe('Adam');
	         expect(lastName.getText()).toBe('John');
	
	         unsortButton.click();
	         expect(firstName.getText()).toBe('John');
	         expect(lastName.getText()).toBe('Julie');
	       });
	     </file>
	   </example>
	 * <hr />
	 *
	 * @example
	 * ### Using a custom comparator
	 *
	 * If you have very specific requirements about the way items are sorted, you can pass your own
	 * comparator function. For example, you might need to compare some strings in a locale-sensitive
	 * way. (When specifying a custom comparator, you also need to pass a value for the `reverse`
	 * argument - passing `false` retains the default sorting order, i.e. ascending.)
	 *
	   <example name="orderBy-custom-comparator" module="orderByExample4">
	     <file name="index.html">
	       <div ng-controller="ExampleController">
	         <div class="friends-container custom-comparator">
	           <h3>Locale-sensitive Comparator</h3>
	           <table class="friends">
	             <tr>
	               <th>Name</th>
	               <th>Favorite Letter</th>
	             </tr>
	             <tr ng-repeat="friend in friends | orderBy:'favoriteLetter':false:localeSensitiveComparator">
	               <td>{{friend.name}}</td>
	               <td>{{friend.favoriteLetter}}</td>
	             </tr>
	           </table>
	         </div>
	         <div class="friends-container default-comparator">
	           <h3>Default Comparator</h3>
	           <table class="friends">
	             <tr>
	               <th>Name</th>
	               <th>Favorite Letter</th>
	             </tr>
	             <tr ng-repeat="friend in friends | orderBy:'favoriteLetter'">
	               <td>{{friend.name}}</td>
	               <td>{{friend.favoriteLetter}}</td>
	             </tr>
	           </table>
	         </div>
	       </div>
	     </file>
	     <file name="script.js">
	       angular.module('orderByExample4', [])
	         .controller('ExampleController', ['$scope', function($scope) {
	           $scope.friends = [
	             {name: 'John',   favoriteLetter: 'Ä'},
	             {name: 'Mary',   favoriteLetter: 'Ü'},
	             {name: 'Mike',   favoriteLetter: 'Ö'},
	             {name: 'Adam',   favoriteLetter: 'H'},
	             {name: 'Julie',  favoriteLetter: 'Z'}
	           ];
	
	           $scope.localeSensitiveComparator = function(v1, v2) {
	             // If we don't get strings, just compare by index
	             if (v1.type !== 'string' || v2.type !== 'string') {
	               return (v1.index < v2.index) ? -1 : 1;
	             }
	
	             // Compare strings alphabetically, taking locale into account
	             return v1.value.localeCompare(v2.value);
	           };
	         }]);
	     </file>
	     <file name="style.css">
	       .friends-container {
	         display: inline-block;
	         margin: 0 30px;
	       }
	
	       .friends {
	         border-collapse: collapse;
	       }
	
	       .friends th {
	         border-bottom: 1px solid;
	       }
	       .friends td, .friends th {
	         border-left: 1px solid;
	         padding: 5px 10px;
	       }
	       .friends td:first-child, .friends th:first-child {
	         border-left: none;
	       }
	     </file>
	     <file name="protractor.js" type="protractor">
	       // Element locators
	       var container = element(by.css('.custom-comparator'));
	       var names = container.all(by.repeater('friends').column('friend.name'));
	
	       it('should sort friends by favorite letter (in correct alphabetical order)', function() {
	         expect(names.get(0).getText()).toBe('John');
	         expect(names.get(1).getText()).toBe('Adam');
	         expect(names.get(2).getText()).toBe('Mike');
	         expect(names.get(3).getText()).toBe('Mary');
	         expect(names.get(4).getText()).toBe('Julie');
	       });
	     </file>
	   </example>
	 *
	 */
	orderByFilter.$inject = ['$parse'];
	function orderByFilter($parse) {
	  return function(array, sortPredicate, reverseOrder, compareFn) {
	
	    if (array == null) return array;
	    if (!isArrayLike(array)) {
	      throw minErr('orderBy')('notarray', 'Expected array but received: {0}', array);
	    }
	
	    if (!isArray(sortPredicate)) { sortPredicate = [sortPredicate]; }
	    if (sortPredicate.length === 0) { sortPredicate = ['+']; }
	
	    var predicates = processPredicates(sortPredicate);
	
	    var descending = reverseOrder ? -1 : 1;
	
	    // Define the `compare()` function. Use a default comparator if none is specified.
	    var compare = isFunction(compareFn) ? compareFn : defaultCompare;
	
	    // The next three lines are a version of a Swartzian Transform idiom from Perl
	    // (sometimes called the Decorate-Sort-Undecorate idiom)
	    // See https://en.wikipedia.org/wiki/Schwartzian_transform
	    var compareValues = Array.prototype.map.call(array, getComparisonObject);
	    compareValues.sort(doComparison);
	    array = compareValues.map(function(item) { return item.value; });
	
	    return array;
	
	    function getComparisonObject(value, index) {
	      // NOTE: We are adding an extra `tieBreaker` value based on the element's index.
	      // This will be used to keep the sort stable when none of the input predicates can
	      // distinguish between two elements.
	      return {
	        value: value,
	        tieBreaker: {value: index, type: 'number', index: index},
	        predicateValues: predicates.map(function(predicate) {
	          return getPredicateValue(predicate.get(value), index);
	        })
	      };
	    }
	
	    function doComparison(v1, v2) {
	      for (var i = 0, ii = predicates.length; i < ii; i++) {
	        var result = compare(v1.predicateValues[i], v2.predicateValues[i]);
	        if (result) {
	          return result * predicates[i].descending * descending;
	        }
	      }
	
	      return compare(v1.tieBreaker, v2.tieBreaker) * descending;
	    }
	  };
	
	  function processPredicates(sortPredicates) {
	    return sortPredicates.map(function(predicate) {
	      var descending = 1, get = identity;
	
	      if (isFunction(predicate)) {
	        get = predicate;
	      } else if (isString(predicate)) {
	        if ((predicate.charAt(0) === '+' || predicate.charAt(0) === '-')) {
	          descending = predicate.charAt(0) === '-' ? -1 : 1;
	          predicate = predicate.substring(1);
	        }
	        if (predicate !== '') {
	          get = $parse(predicate);
	          if (get.constant) {
	            var key = get();
	            get = function(value) { return value[key]; };
	          }
	        }
	      }
	      return {get: get, descending: descending};
	    });
	  }
	
	  function isPrimitive(value) {
	    switch (typeof value) {
	      case 'number': /* falls through */
	      case 'boolean': /* falls through */
	      case 'string':
	        return true;
	      default:
	        return false;
	    }
	  }
	
	  function objectValue(value) {
	    // If `valueOf` is a valid function use that
	    if (isFunction(value.valueOf)) {
	      value = value.valueOf();
	      if (isPrimitive(value)) return value;
	    }
	    // If `toString` is a valid function and not the one from `Object.prototype` use that
	    if (hasCustomToString(value)) {
	      value = value.toString();
	      if (isPrimitive(value)) return value;
	    }
	
	    return value;
	  }
	
	  function getPredicateValue(value, index) {
	    var type = typeof value;
	    if (value === null) {
	      type = 'string';
	      value = 'null';
	    } else if (type === 'object') {
	      value = objectValue(value);
	    }
	    return {value: value, type: type, index: index};
	  }
	
	  function defaultCompare(v1, v2) {
	    var result = 0;
	    var type1 = v1.type;
	    var type2 = v2.type;
	
	    if (type1 === type2) {
	      var value1 = v1.value;
	      var value2 = v2.value;
	
	      if (type1 === 'string') {
	        // Compare strings case-insensitively
	        value1 = value1.toLowerCase();
	        value2 = value2.toLowerCase();
	      } else if (type1 === 'object') {
	        // For basic objects, use the position of the object
	        // in the collection instead of the value
	        if (isObject(value1)) value1 = v1.index;
	        if (isObject(value2)) value2 = v2.index;
	      }
	
	      if (value1 !== value2) {
	        result = value1 < value2 ? -1 : 1;
	      }
	    } else {
	      result = type1 < type2 ? -1 : 1;
	    }
	
	    return result;
	  }
	}
	
	function ngDirective(directive) {
	  if (isFunction(directive)) {
	    directive = {
	      link: directive
	    };
	  }
	  directive.restrict = directive.restrict || 'AC';
	  return valueFn(directive);
	}
	
	/**
	 * @ngdoc directive
	 * @name a
	 * @restrict E
	 *
	 * @description
	 * Modifies the default behavior of the html a tag so that the default action is prevented when
	 * the href attribute is empty.
	 *
	 * For dynamically creating `href` attributes for a tags, see the {@link ng.ngHref `ngHref`} directive.
	 */
	var htmlAnchorDirective = valueFn({
	  restrict: 'E',
	  compile: function(element, attr) {
	    if (!attr.href && !attr.xlinkHref) {
	      return function(scope, element) {
	        // If the linked element is not an anchor tag anymore, do nothing
	        if (element[0].nodeName.toLowerCase() !== 'a') return;
	
	        // SVGAElement does not use the href attribute, but rather the 'xlinkHref' attribute.
	        var href = toString.call(element.prop('href')) === '[object SVGAnimatedString]' ?
	                   'xlink:href' : 'href';
	        element.on('click', function(event) {
	          // if we have no href url, then don't navigate anywhere.
	          if (!element.attr(href)) {
	            event.preventDefault();
	          }
	        });
	      };
	    }
	  }
	});
	
	/**
	 * @ngdoc directive
	 * @name ngHref
	 * @restrict A
	 * @priority 99
	 *
	 * @description
	 * Using Angular markup like `{{hash}}` in an href attribute will
	 * make the link go to the wrong URL if the user clicks it before
	 * Angular has a chance to replace the `{{hash}}` markup with its
	 * value. Until Angular replaces the markup the link will be broken
	 * and will most likely return a 404 error. The `ngHref` directive
	 * solves this problem.
	 *
	 * The wrong way to write it:
	 * ```html
	 * <a href="http://www.gravatar.com/avatar/{{hash}}">link1</a>
	 * ```
	 *
	 * The correct way to write it:
	 * ```html
	 * <a ng-href="http://www.gravatar.com/avatar/{{hash}}">link1</a>
	 * ```
	 *
	 * @element A
	 * @param {template} ngHref any string which can contain `{{}}` markup.
	 *
	 * @example
	 * This example shows various combinations of `href`, `ng-href` and `ng-click` attributes
	 * in links and their different behaviors:
	    <example name="ng-href">
	      <file name="index.html">
	        <input ng-model="value" /><br />
	        <a id="link-1" href ng-click="value = 1">link 1</a> (link, don't reload)<br />
	        <a id="link-2" href="" ng-click="value = 2">link 2</a> (link, don't reload)<br />
	        <a id="link-3" ng-href="/{{'123'}}">link 3</a> (link, reload!)<br />
	        <a id="link-4" href="" name="xx" ng-click="value = 4">anchor</a> (link, don't reload)<br />
	        <a id="link-5" name="xxx" ng-click="value = 5">anchor</a> (no link)<br />
	        <a id="link-6" ng-href="{{value}}">link</a> (link, change location)
	      </file>
	      <file name="protractor.js" type="protractor">
	        it('should execute ng-click but not reload when href without value', function() {
	          element(by.id('link-1')).click();
	          expect(element(by.model('value')).getAttribute('value')).toEqual('1');
	          expect(element(by.id('link-1')).getAttribute('href')).toBe('');
	        });
	
	        it('should execute ng-click but not reload when href empty string', function() {
	          element(by.id('link-2')).click();
	          expect(element(by.model('value')).getAttribute('value')).toEqual('2');
	          expect(element(by.id('link-2')).getAttribute('href')).toBe('');
	        });
	
	        it('should execute ng-click and change url when ng-href specified', function() {
	          expect(element(by.id('link-3')).getAttribute('href')).toMatch(/\/123$/);
	
	          element(by.id('link-3')).click();
	
	          // At this point, we navigate away from an Angular page, so we need
	          // to use browser.driver to get the base webdriver.
	
	          browser.wait(function() {
	            return browser.driver.getCurrentUrl().then(function(url) {
	              return url.match(/\/123$/);
	            });
	          }, 5000, 'page should navigate to /123');
	        });
	
	        it('should execute ng-click but not reload when href empty string and name specified', function() {
	          element(by.id('link-4')).click();
	          expect(element(by.model('value')).getAttribute('value')).toEqual('4');
	          expect(element(by.id('link-4')).getAttribute('href')).toBe('');
	        });
	
	        it('should execute ng-click but not reload when no href but name specified', function() {
	          element(by.id('link-5')).click();
	          expect(element(by.model('value')).getAttribute('value')).toEqual('5');
	          expect(element(by.id('link-5')).getAttribute('href')).toBe(null);
	        });
	
	        it('should only change url when only ng-href', function() {
	          element(by.model('value')).clear();
	          element(by.model('value')).sendKeys('6');
	          expect(element(by.id('link-6')).getAttribute('href')).toMatch(/\/6$/);
	
	          element(by.id('link-6')).click();
	
	          // At this point, we navigate away from an Angular page, so we need
	          // to use browser.driver to get the base webdriver.
	          browser.wait(function() {
	            return browser.driver.getCurrentUrl().then(function(url) {
	              return url.match(/\/6$/);
	            });
	          }, 5000, 'page should navigate to /6');
	        });
	      </file>
	    </example>
	 */
	
	/**
	 * @ngdoc directive
	 * @name ngSrc
	 * @restrict A
	 * @priority 99
	 *
	 * @description
	 * Using Angular markup like `{{hash}}` in a `src` attribute doesn't
	 * work right: The browser will fetch from the URL with the literal
	 * text `{{hash}}` until Angular replaces the expression inside
	 * `{{hash}}`. The `ngSrc` directive solves this problem.
	 *
	 * The buggy way to write it:
	 * ```html
	 * <img src="http://www.gravatar.com/avatar/{{hash}}" alt="Description"/>
	 * ```
	 *
	 * The correct way to write it:
	 * ```html
	 * <img ng-src="http://www.gravatar.com/avatar/{{hash}}" alt="Description" />
	 * ```
	 *
	 * @element IMG
	 * @param {template} ngSrc any string which can contain `{{}}` markup.
	 */
	
	/**
	 * @ngdoc directive
	 * @name ngSrcset
	 * @restrict A
	 * @priority 99
	 *
	 * @description
	 * Using Angular markup like `{{hash}}` in a `srcset` attribute doesn't
	 * work right: The browser will fetch from the URL with the literal
	 * text `{{hash}}` until Angular replaces the expression inside
	 * `{{hash}}`. The `ngSrcset` directive solves this problem.
	 *
	 * The buggy way to write it:
	 * ```html
	 * <img srcset="http://www.gravatar.com/avatar/{{hash}} 2x" alt="Description"/>
	 * ```
	 *
	 * The correct way to write it:
	 * ```html
	 * <img ng-srcset="http://www.gravatar.com/avatar/{{hash}} 2x" alt="Description" />
	 * ```
	 *
	 * @element IMG
	 * @param {template} ngSrcset any string which can contain `{{}}` markup.
	 */
	
	/**
	 * @ngdoc directive
	 * @name ngDisabled
	 * @restrict A
	 * @priority 100
	 *
	 * @description
	 *
	 * This directive sets the `disabled` attribute on the element if the
	 * {@link guide/expression expression} inside `ngDisabled` evaluates to truthy.
	 *
	 * A special directive is necessary because we cannot use interpolation inside the `disabled`
	 * attribute. See the {@link guide/interpolation interpolation guide} for more info.
	 *
	 * @example
	    <example name="ng-disabled">
	      <file name="index.html">
	        <label>Click me to toggle: <input type="checkbox" ng-model="checked"></label><br/>
	        <button ng-model="button" ng-disabled="checked">Button</button>
	      </file>
	      <file name="protractor.js" type="protractor">
	        it('should toggle button', function() {
	          expect(element(by.css('button')).getAttribute('disabled')).toBeFalsy();
	          element(by.model('checked')).click();
	          expect(element(by.css('button')).getAttribute('disabled')).toBeTruthy();
	        });
	      </file>
	    </example>
	 *
	 * @element INPUT
	 * @param {expression} ngDisabled If the {@link guide/expression expression} is truthy,
	 *     then the `disabled` attribute will be set on the element
	 */
	
	
	/**
	 * @ngdoc directive
	 * @name ngChecked
	 * @restrict A
	 * @priority 100
	 *
	 * @description
	 * Sets the `checked` attribute on the element, if the expression inside `ngChecked` is truthy.
	 *
	 * Note that this directive should not be used together with {@link ngModel `ngModel`},
	 * as this can lead to unexpected behavior.
	 *
	 * A special directive is necessary because we cannot use interpolation inside the `checked`
	 * attribute. See the {@link guide/interpolation interpolation guide} for more info.
	 *
	 * @example
	    <example name="ng-checked">
	      <file name="index.html">
	        <label>Check me to check both: <input type="checkbox" ng-model="master"></label><br/>
	        <input id="checkSlave" type="checkbox" ng-checked="master" aria-label="Slave input">
	      </file>
	      <file name="protractor.js" type="protractor">
	        it('should check both checkBoxes', function() {
	          expect(element(by.id('checkSlave')).getAttribute('checked')).toBeFalsy();
	          element(by.model('master')).click();
	          expect(element(by.id('checkSlave')).getAttribute('checked')).toBeTruthy();
	        });
	      </file>
	    </example>
	 *
	 * @element INPUT
	 * @param {expression} ngChecked If the {@link guide/expression expression} is truthy,
	 *     then the `checked` attribute will be set on the element
	 */
	
	
	/**
	 * @ngdoc directive
	 * @name ngReadonly
	 * @restrict A
	 * @priority 100
	 *
	 * @description
	 *
	 * Sets the `readonly` attribute on the element, if the expression inside `ngReadonly` is truthy.
	 * Note that `readonly` applies only to `input` elements with specific types. [See the input docs on
	 * MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly) for more information.
	 *
	 * A special directive is necessary because we cannot use interpolation inside the `readonly`
	 * attribute. See the {@link guide/interpolation interpolation guide} for more info.
	 *
	 * @example
	    <example name="ng-readonly">
	      <file name="index.html">
	        <label>Check me to make text readonly: <input type="checkbox" ng-model="checked"></label><br/>
	        <input type="text" ng-readonly="checked" value="I'm Angular" aria-label="Readonly field" />
	      </file>
	      <file name="protractor.js" type="protractor">
	        it('should toggle readonly attr', function() {
	          expect(element(by.css('[type="text"]')).getAttribute('readonly')).toBeFalsy();
	          element(by.model('checked')).click();
	          expect(element(by.css('[type="text"]')).getAttribute('readonly')).toBeTruthy();
	        });
	      </file>
	    </example>
	 *
	 * @element INPUT
	 * @param {expression} ngReadonly If the {@link guide/expression expression} is truthy,
	 *     then special attribute "readonly" will be set on the element
	 */
	
	
	/**
	 * @ngdoc directive
	 * @name ngSelected
	 * @restrict A
	 * @priority 100
	 *
	 * @description
	 *
	 * Sets the `selected` attribute on the element, if the expression inside `ngSelected` is truthy.
	 *
	 * A special directive is necessary because we cannot use interpolation inside the `selected`
	 * attribute. See the {@link guide/interpolation interpolation guide} for more info.
	 *
	 * <div class="alert alert-warning">
	 *   **Note:** `ngSelected` does not interact with the `select` and `ngModel` directives, it only
	 *   sets the `selected` attribute on the element. If you are using `ngModel` on the select, you
	 *   should not use `ngSelected` on the options, as `ngModel` will set the select value and
	 *   selected options.
	 * </div>
	 *
	 * @example
	    <example name="ng-selected">
	      <file name="index.html">
	        <label>Check me to select: <input type="checkbox" ng-model="selected"></label><br/>
	        <select aria-label="ngSelected demo">
	          <option>Hello!</option>
	          <option id="greet" ng-selected="selected">Greetings!</option>
	        </select>
	      </file>
	      <file name="protractor.js" type="protractor">
	        it('should select Greetings!', function() {
	          expect(element(by.id('greet')).getAttribute('selected')).toBeFalsy();
	          element(by.model('selected')).click();
	          expect(element(by.id('greet')).getAttribute('selected')).toBeTruthy();
	        });
	      </file>
	    </example>
	 *
	 * @element OPTION
	 * @param {expression} ngSelected If the {@link guide/expression expression} is truthy,
	 *     then special attribute "selected" will be set on the element
	 */
	
	/**
	 * @ngdoc directive
	 * @name ngOpen
	 * @restrict A
	 * @priority 100
	 *
	 * @description
	 *
	 * Sets the `open` attribute on the element, if the expression inside `ngOpen` is truthy.
	 *
	 * A special directive is necessary because we cannot use interpolation inside the `open`
	 * attribute. See the {@link guide/interpolation interpolation guide} for more info.
	 *
	 * ## A note about browser compatibility
	 *
	 * Edge, Firefox, and Internet Explorer do not support the `details` element, it is
	 * recommended to use {@link ng.ngShow} and {@link ng.ngHide} instead.
	 *
	 * @example
	     <example name="ng-open">
	       <file name="index.html">
	         <label>Check me check multiple: <input type="checkbox" ng-model="open"></label><br/>
	         <details id="details" ng-open="open">
	            <summary>Show/Hide me</summary>
	         </details>
	       </file>
	       <file name="protractor.js" type="protractor">
	         it('should toggle open', function() {
	           expect(element(by.id('details')).getAttribute('open')).toBeFalsy();
	           element(by.model('open')).click();
	           expect(element(by.id('details')).getAttribute('open')).toBeTruthy();
	         });
	       </file>
	     </example>
	 *
	 * @element DETAILS
	 * @param {expression} ngOpen If the {@link guide/expression expression} is truthy,
	 *     then special attribute "open" will be set on the element
	 */
	
	var ngAttributeAliasDirectives = {};
	
	// boolean attrs are evaluated
	forEach(BOOLEAN_ATTR, function(propName, attrName) {
	  // binding to multiple is not supported
	  if (propName === 'multiple') return;
	
	  function defaultLinkFn(scope, element, attr) {
	    scope.$watch(attr[normalized], function ngBooleanAttrWatchAction(value) {
	      attr.$set(attrName, !!value);
	    });
	  }
	
	  var normalized = directiveNormalize('ng-' + attrName);
	  var linkFn = defaultLinkFn;
	
	  if (propName === 'checked') {
	    linkFn = function(scope, element, attr) {
	      // ensuring ngChecked doesn't interfere with ngModel when both are set on the same input
	      if (attr.ngModel !== attr[normalized]) {
	        defaultLinkFn(scope, element, attr);
	      }
	    };
	  }
	
	  ngAttributeAliasDirectives[normalized] = function() {
	    return {
	      restrict: 'A',
	      priority: 100,
	      link: linkFn
	    };
	  };
	});
	
	// aliased input attrs are evaluated
	forEach(ALIASED_ATTR, function(htmlAttr, ngAttr) {
	  ngAttributeAliasDirectives[ngAttr] = function() {
	    return {
	      priority: 100,
	      link: function(scope, element, attr) {
	        //special case ngPattern when a literal regular expression value
	        //is used as the expression (this way we don't have to watch anything).
	        if (ngAttr === 'ngPattern' && attr.ngPattern.charAt(0) === '/') {
	          var match = attr.ngPattern.match(REGEX_STRING_REGEXP);
	          if (match) {
	            attr.$set('ngPattern', new RegExp(match[1], match[2]));
	            return;
	          }
	        }
	
	        scope.$watch(attr[ngAttr], function ngAttrAliasWatchAction(value) {
	          attr.$set(ngAttr, value);
	        });
	      }
	    };
	  };
	});
	
	// ng-src, ng-srcset, ng-href are interpolated
	forEach(['src', 'srcset', 'href'], function(attrName) {
	  var normalized = directiveNormalize('ng-' + attrName);
	  ngAttributeAliasDirectives[normalized] = function() {
	    return {
	      priority: 99, // it needs to run after the attributes are interpolated
	      link: function(scope, element, attr) {
	        var propName = attrName,
	            name = attrName;
	
	        if (attrName === 'href' &&
	            toString.call(element.prop('href')) === '[object SVGAnimatedString]') {
	          name = 'xlinkHref';
	          attr.$attr[name] = 'xlink:href';
	          propName = null;
	        }
	
	        attr.$observe(normalized, function(value) {
	          if (!value) {
	            if (attrName === 'href') {
	              attr.$set(name, null);
	            }
	            return;
	          }
	
	          attr.$set(name, value);
	
	          // Support: IE 9-11 only
	          // On IE, if "ng:src" directive declaration is used and "src" attribute doesn't exist
	          // then calling element.setAttribute('src', 'foo') doesn't do anything, so we need
	          // to set the property as well to achieve the desired effect.
	          // We use attr[attrName] value since $set can sanitize the url.
	          if (msie && propName) element.prop(propName, attr[name]);
	        });
	      }
	    };
	  };
	});
	
	/* global -nullFormCtrl, -PENDING_CLASS, -SUBMITTED_CLASS
	 */
	var nullFormCtrl = {
	  $addControl: noop,
	  $$renameControl: nullFormRenameControl,
	  $removeControl: noop,
	  $setValidity: noop,
	  $setDirty: noop,
	  $setPristine: noop,
	  $setSubmitted: noop
	},
	PENDING_CLASS = 'ng-pending',
	SUBMITTED_CLASS = 'ng-submitted';
	
	function nullFormRenameControl(control, name) {
	  control.$name = name;
	}
	
	/**
	 * @ngdoc type
	 * @name form.FormController
	 *
	 * @property {boolean} $pristine True if user has not interacted with the form yet.
	 * @property {boolean} $dirty True if user has already interacted with the form.
	 * @property {boolean} $valid True if all of the containing forms and controls are valid.
	 * @property {boolean} $invalid True if at least one containing control or form is invalid.
	 * @property {boolean} $pending True if at least one containing control or form is pending.
	 * @property {boolean} $submitted True if user has submitted the form even if its invalid.
	 *
	 * @property {Object} $error Is an object hash, containing references to controls or
	 *  forms with failing validators, where:
	 *
	 *  - keys are validation tokens (error names),
	 *  - values are arrays of controls or forms that have a failing validator for given error name.
	 *
	 *  Built-in validation tokens:
	 *
	 *  - `email`
	 *  - `max`
	 *  - `maxlength`
	 *  - `min`
	 *  - `minlength`
	 *  - `number`
	 *  - `pattern`
	 *  - `required`
	 *  - `url`
	 *  - `date`
	 *  - `datetimelocal`
	 *  - `time`
	 *  - `week`
	 *  - `month`
	 *
	 * @description
	 * `FormController` keeps track of all its controls and nested forms as well as the state of them,
	 * such as being valid/invalid or dirty/pristine.
	 *
	 * Each {@link ng.directive:form form} directive creates an instance
	 * of `FormController`.
	 *
	 */
	//asks for $scope to fool the BC controller module
	FormController.$inject = ['$element', '$attrs', '$scope', '$animate', '$interpolate'];
	function FormController($element, $attrs, $scope, $animate, $interpolate) {
	  this.$$controls = [];
	
	  // init state
	  this.$error = {};
	  this.$$success = {};
	  this.$pending = undefined;
	  this.$name = $interpolate($attrs.name || $attrs.ngForm || '')($scope);
	  this.$dirty = false;
	  this.$pristine = true;
	  this.$valid = true;
	  this.$invalid = false;
	  this.$submitted = false;
	  this.$$parentForm = nullFormCtrl;
	
	  this.$$element = $element;
	  this.$$animate = $animate;
	
	  setupValidity(this);
	}
	
	FormController.prototype = {
	  /**
	   * @ngdoc method
	   * @name form.FormController#$rollbackViewValue
	   *
	   * @description
	   * Rollback all form controls pending updates to the `$modelValue`.
	   *
	   * Updates may be pending by a debounced event or because the input is waiting for a some future
	   * event defined in `ng-model-options`. This method is typically needed by the reset button of
	   * a form that uses `ng-model-options` to pend updates.
	   */
	  $rollbackViewValue: function() {
	    forEach(this.$$controls, function(control) {
	      control.$rollbackViewValue();
	    });
	  },
	
	  /**
	   * @ngdoc method
	   * @name form.FormController#$commitViewValue
	   *
	   * @description
	   * Commit all form controls pending updates to the `$modelValue`.
	   *
	   * Updates may be pending by a debounced event or because the input is waiting for a some future
	   * event defined in `ng-model-options`. This method is rarely needed as `NgModelController`
	   * usually handles calling this in response to input events.
	   */
	  $commitViewValue: function() {
	    forEach(this.$$controls, function(control) {
	      control.$commitViewValue();
	    });
	  },
	
	  /**
	   * @ngdoc method
	   * @name form.FormController#$addControl
	   * @param {object} control control object, either a {@link form.FormController} or an
	   * {@link ngModel.NgModelController}
	   *
	   * @description
	   * Register a control with the form. Input elements using ngModelController do this automatically
	   * when they are linked.
	   *
	   * Note that the current state of the control will not be reflected on the new parent form. This
	   * is not an issue with normal use, as freshly compiled and linked controls are in a `$pristine`
	   * state.
	   *
	   * However, if the method is used programmatically, for example by adding dynamically created controls,
	   * or controls that have been previously removed without destroying their corresponding DOM element,
	   * it's the developers responsibility to make sure the current state propagates to the parent form.
	   *
	   * For example, if an input control is added that is already `$dirty` and has `$error` properties,
	   * calling `$setDirty()` and `$validate()` afterwards will propagate the state to the parent form.
	   */
	  $addControl: function(control) {
	    // Breaking change - before, inputs whose name was "hasOwnProperty" were quietly ignored
	    // and not added to the scope.  Now we throw an error.
	    assertNotHasOwnProperty(control.$name, 'input');
	    this.$$controls.push(control);
	
	    if (control.$name) {
	      this[control.$name] = control;
	    }
	
	    control.$$parentForm = this;
	  },
	
	  // Private API: rename a form control
	  $$renameControl: function(control, newName) {
	    var oldName = control.$name;
	
	    if (this[oldName] === control) {
	      delete this[oldName];
	    }
	    this[newName] = control;
	    control.$name = newName;
	  },
	
	  /**
	   * @ngdoc method
	   * @name form.FormController#$removeControl
	   * @param {object} control control object, either a {@link form.FormController} or an
	   * {@link ngModel.NgModelController}
	   *
	   * @description
	   * Deregister a control from the form.
	   *
	   * Input elements using ngModelController do this automatically when they are destroyed.
	   *
	   * Note that only the removed control's validation state (`$errors`etc.) will be removed from the
	   * form. `$dirty`, `$submitted` states will not be changed, because the expected behavior can be
	   * different from case to case. For example, removing the only `$dirty` control from a form may or
	   * may not mean that the form is still `$dirty`.
	   */
	  $removeControl: function(control) {
	    if (control.$name && this[control.$name] === control) {
	      delete this[control.$name];
	    }
	    forEach(this.$pending, function(value, name) {
	      // eslint-disable-next-line no-invalid-this
	      this.$setValidity(name, null, control);
	    }, this);
	    forEach(this.$error, function(value, name) {
	      // eslint-disable-next-line no-invalid-this
	      this.$setValidity(name, null, control);
	    }, this);
	    forEach(this.$$success, function(value, name) {
	      // eslint-disable-next-line no-invalid-this
	      this.$setValidity(name, null, control);
	    }, this);
	
	    arrayRemove(this.$$controls, control);
	    control.$$parentForm = nullFormCtrl;
	  },
	
	  /**
	   * @ngdoc method
	   * @name form.FormController#$setDirty
	   *
	   * @description
	   * Sets the form to a dirty state.
	   *
	   * This method can be called to add the 'ng-dirty' class and set the form to a dirty
	   * state (ng-dirty class). This method will also propagate to parent forms.
	   */
	  $setDirty: function() {
	    this.$$animate.removeClass(this.$$element, PRISTINE_CLASS);
	    this.$$animate.addClass(this.$$element, DIRTY_CLASS);
	    this.$dirty = true;
	    this.$pristine = false;
	    this.$$parentForm.$setDirty();
	  },
	
	  /**
	   * @ngdoc method
	   * @name form.FormController#$setPristine
	   *
	   * @description
	   * Sets the form to its pristine state.
	   *
	   * This method sets the form's `$pristine` state to true, the `$dirty` state to false, removes
	   * the `ng-dirty` class and adds the `ng-pristine` class. Additionally, it sets the `$submitted`
	   * state to false.
	   *
	   * This method will also propagate to all the controls contained in this form.
	   *
	   * Setting a form back to a pristine state is often useful when we want to 'reuse' a form after
	   * saving or resetting it.
	   */
	  $setPristine: function() {
	    this.$$animate.setClass(this.$$element, PRISTINE_CLASS, DIRTY_CLASS + ' ' + SUBMITTED_CLASS);
	    this.$dirty = false;
	    this.$pristine = true;
	    this.$submitted = false;
	    forEach(this.$$controls, function(control) {
	      control.$setPristine();
	    });
	  },
	
	  /**
	   * @ngdoc method
	   * @name form.FormController#$setUntouched
	   *
	   * @description
	   * Sets the form to its untouched state.
	   *
	   * This method can be called to remove the 'ng-touched' class and set the form controls to their
	   * untouched state (ng-untouched class).
	   *
	   * Setting a form controls back to their untouched state is often useful when setting the form
	   * back to its pristine state.
	   */
	  $setUntouched: function() {
	    forEach(this.$$controls, function(control) {
	      control.$setUntouched();
	    });
	  },
	
	  /**
	   * @ngdoc method
	   * @name form.FormController#$setSubmitted
	   *
	   * @description
	   * Sets the form to its submitted state.
	   */
	  $setSubmitted: function() {
	    this.$$animate.addClass(this.$$element, SUBMITTED_CLASS);
	    this.$submitted = true;
	    this.$$parentForm.$setSubmitted();
	  }
	};
	
	/**
	 * @ngdoc method
	 * @name form.FormController#$setValidity
	 *
	 * @description
	 * Sets the validity of a form control.
	 *
	 * This method will also propagate to parent forms.
	 */
	addSetValidityMethod({
	  clazz: FormController,
	  set: function(object, property, controller) {
	    var list = object[property];
	    if (!list) {
	      object[property] = [controller];
	    } else {
	      var index = list.indexOf(controller);
	      if (index === -1) {
	        list.push(controller);
	      }
	    }
	  },
	  unset: function(object, property, controller) {
	    var list = object[property];
	    if (!list) {
	      return;
	    }
	    arrayRemove(list, controller);
	    if (list.length === 0) {
	      delete object[property];
	    }
	  }
	});
	
	/**
	 * @ngdoc directive
	 * @name ngForm
	 * @restrict EAC
	 *
	 * @description
	 * Nestable alias of {@link ng.directive:form `form`} directive. HTML
	 * does not allow nesting of form elements. It is useful to nest forms, for example if the validity of a
	 * sub-group of controls needs to be determined.
	 *
	 * Note: the purpose of `ngForm` is to group controls,
	 * but not to be a replacement for the `<form>` tag with all of its capabilities
	 * (e.g. posting to the server, ...).
	 *
	 * @param {string=} ngForm|name Name of the form. If specified, the form controller will be published into
	 *                       related scope, under this name.
	 *
	 */
	
	 /**
	 * @ngdoc directive
	 * @name form
	 * @restrict E
	 *
	 * @description
	 * Directive that instantiates
	 * {@link form.FormController FormController}.
	 *
	 * If the `name` attribute is specified, the form controller is published onto the current scope under
	 * this name.
	 *
	 * # Alias: {@link ng.directive:ngForm `ngForm`}
	 *
	 * In Angular, forms can be nested. This means that the outer form is valid when all of the child
	 * forms are valid as well. However, browsers do not allow nesting of `<form>` elements, so
	 * Angular provides the {@link ng.directive:ngForm `ngForm`} directive, which behaves identically to
	 * `form` but can be nested. Nested forms can be useful, for example, if the validity of a sub-group
	 * of controls needs to be determined.
	 *
	 * # CSS classes
	 *  - `ng-valid` is set if the form is valid.
	 *  - `ng-invalid` is set if the form is invalid.
	 *  - `ng-pending` is set if the form is pending.
	 *  - `ng-pristine` is set if the form is pristine.
	 *  - `ng-dirty` is set if the form is dirty.
	 *  - `ng-submitted` is set if the form was submitted.
	 *
	 * Keep in mind that ngAnimate can detect each of these classes when added and removed.
	 *
	 *
	 * # Submitting a form and preventing the default action
	 *
	 * Since the role of forms in client-side Angular applications is different than in classical
	 * roundtrip apps, it is desirable for the browser not to translate the form submission into a full
	 * page reload that sends the data to the server. Instead some javascript logic should be triggered
	 * to handle the form submission in an application-specific way.
	 *
	 * For this reason, Angular prevents the default action (form submission to the server) unless the
	 * `<form>` element has an `action` attribute specified.
	 *
	 * You can use one of the following two ways to specify what javascript method should be called when
	 * a form is submitted:
	 *
	 * - {@link ng.directive:ngSubmit ngSubmit} directive on the form element
	 * - {@link ng.directive:ngClick ngClick} directive on the first
	  *  button or input field of type submit (input[type=submit])
	 *
	 * To prevent double execution of the handler, use only one of the {@link ng.directive:ngSubmit ngSubmit}
	 * or {@link ng.directive:ngClick ngClick} directives.
	 * This is because of the following form submission rules in the HTML specification:
	 *
	 * - If a form has only one input field then hitting enter in this field triggers form submit
	 * (`ngSubmit`)
	 * - if a form has 2+ input fields and no buttons or input[type=submit] then hitting enter
	 * doesn't trigger submit
	 * - if a form has one or more input fields and one or more buttons or input[type=submit] then
	 * hitting enter in any of the input fields will trigger the click handler on the *first* button or
	 * input[type=submit] (`ngClick`) *and* a submit handler on the enclosing form (`ngSubmit`)
	 *
	 * Any pending `ngModelOptions` changes will take place immediately when an enclosing form is
	 * submitted. Note that `ngClick` events will occur before the model is updated. Use `ngSubmit`
	 * to have access to the updated model.
	 *
	 * ## Animation Hooks
	 *
	 * Animations in ngForm are triggered when any of the associated CSS classes are added and removed.
	 * These classes are: `.ng-pristine`, `.ng-dirty`, `.ng-invalid` and `.ng-valid` as well as any
	 * other validations that are performed within the form. Animations in ngForm are similar to how
	 * they work in ngClass and animations can be hooked into using CSS transitions, keyframes as well
	 * as JS animations.
	 *
	 * The following example shows a simple way to utilize CSS transitions to style a form element
	 * that has been rendered as invalid after it has been validated:
	 *
	 * <pre>
	 * //be sure to include ngAnimate as a module to hook into more
	 * //advanced animations
	 * .my-form {
	 *   transition:0.5s linear all;
	 *   background: white;
	 * }
	 * .my-form.ng-invalid {
	 *   background: red;
	 *   color:white;
	 * }
	 * </pre>
	 *
	 * @example
	    <example name="ng-form" deps="angular-animate.js" animations="true" fixBase="true" module="formExample">
	      <file name="index.html">
	       <script>
	         angular.module('formExample', [])
	           .controller('FormController', ['$scope', function($scope) {
	             $scope.userType = 'guest';
	           }]);
	       </script>
	       <style>
	        .my-form {
	          transition:all linear 0.5s;
	          background: transparent;
	        }
	        .my-form.ng-invalid {
	          background: red;
	        }
	       </style>
	       <form name="myForm" ng-controller="FormController" class="my-form">
	         userType: <input name="input" ng-model="userType" required>
	         <span class="error" ng-show="myForm.input.$error.required">Required!</span><br>
	         <code>userType = {{userType}}</code><br>
	         <code>myForm.input.$valid = {{myForm.input.$valid}}</code><br>
	         <code>myForm.input.$error = {{myForm.input.$error}}</code><br>
	         <code>myForm.$valid = {{myForm.$valid}}</code><br>
	         <code>myForm.$error.required = {{!!myForm.$error.required}}</code><br>
	        </form>
	      </file>
	      <file name="protractor.js" type="protractor">
	        it('should initialize to model', function() {
	          var userType = element(by.binding('userType'));
	          var valid = element(by.binding('myForm.input.$valid'));
	
	          expect(userType.getText()).toContain('guest');
	          expect(valid.getText()).toContain('true');
	        });
	
	        it('should be invalid if empty', function() {
	          var userType = element(by.binding('userType'));
	          var valid = element(by.binding('myForm.input.$valid'));
	          var userInput = element(by.model('userType'));
	
	          userInput.clear();
	          userInput.sendKeys('');
	
	          expect(userType.getText()).toEqual('userType =');
	          expect(valid.getText()).toContain('false');
	        });
	      </file>
	    </example>
	 *
	 * @param {string=} name Name of the form. If specified, the form controller will be published into
	 *                       related scope, under this name.
	 */
	var formDirectiveFactory = function(isNgForm) {
	  return ['$timeout', '$parse', function($timeout, $parse) {
	    var formDirective = {
	      name: 'form',
	      restrict: isNgForm ? 'EAC' : 'E',
	      require: ['form', '^^?form'], //first is the form's own ctrl, second is an optional parent form
	      controller: FormController,
	      compile: function ngFormCompile(formElement, attr) {
	        // Setup initial state of the control
	        formElement.addClass(PRISTINE_CLASS).addClass(VALID_CLASS);
	
	        var nameAttr = attr.name ? 'name' : (isNgForm && attr.ngForm ? 'ngForm' : false);
	
	        return {
	          pre: function ngFormPreLink(scope, formElement, attr, ctrls) {
	            var controller = ctrls[0];
	
	            // if `action` attr is not present on the form, prevent the default action (submission)
	            if (!('action' in attr)) {
	              // we can't use jq events because if a form is destroyed during submission the default
	              // action is not prevented. see #1238
	              //
	              // IE 9 is not affected because it doesn't fire a submit event and try to do a full
	              // page reload if the form was destroyed by submission of the form via a click handler
	              // on a button in the form. Looks like an IE9 specific bug.
	              var handleFormSubmission = function(event) {
	                scope.$apply(function() {
	                  controller.$commitViewValue();
	                  controller.$setSubmitted();
	                });
	
	                event.preventDefault();
	              };
	
	              formElement[0].addEventListener('submit', handleFormSubmission);
	
	              // unregister the preventDefault listener so that we don't not leak memory but in a
	              // way that will achieve the prevention of the default action.
	              formElement.on('$destroy', function() {
	                $timeout(function() {
	                  formElement[0].removeEventListener('submit', handleFormSubmission);
	                }, 0, false);
	              });
	            }
	
	            var parentFormCtrl = ctrls[1] || controller.$$parentForm;
	            parentFormCtrl.$addControl(controller);
	
	            var setter = nameAttr ? getSetter(controller.$name) : noop;
	
	            if (nameAttr) {
	              setter(scope, controller);
	              attr.$observe(nameAttr, function(newValue) {
	                if (controller.$name === newValue) return;
	                setter(scope, undefined);
	                controller.$$parentForm.$$renameControl(controller, newValue);
	                setter = getSetter(controller.$name);
	                setter(scope, controller);
	              });
	            }
	            formElement.on('$destroy', function() {
	              controller.$$parentForm.$removeControl(controller);
	              setter(scope, undefined);
	              extend(controller, nullFormCtrl); //stop propagating child destruction handlers upwards
	            });
	          }
	        };
	      }
	    };
	
	    return formDirective;
	
	    function getSetter(expression) {
	      if (expression === '') {
	        //create an assignable expression, so forms with an empty name can be renamed later
	        return $parse('this[""]').assign;
	      }
	      return $parse(expression).assign || noop;
	    }
	  }];
	};
	
	var formDirective = formDirectiveFactory();
	var ngFormDirective = formDirectiveFactory(true);
	
	
	
	// helper methods
	function setupValidity(instance) {
	  instance.$$classCache = {};
	  instance.$$classCache[INVALID_CLASS] = !(instance.$$classCache[VALID_CLASS] = instance.$$element.hasClass(VALID_CLASS));
	}
	function addSetValidityMethod(context) {
	  var clazz = context.clazz,
	      set = context.set,
	      unset = context.unset;
	
	  clazz.prototype.$setValidity = function(validationErrorKey, state, controller) {
	    if (isUndefined(state)) {
	      createAndSet(this, '$pending', validationErrorKey, controller);
	    } else {
	      unsetAndCleanup(this, '$pending', validationErrorKey, controller);
	    }
	    if (!isBoolean(state)) {
	      unset(this.$error, validationErrorKey, controller);
	      unset(this.$$success, validationErrorKey, controller);
	    } else {
	      if (state) {
	        unset(this.$error, validationErrorKey, controller);
	        set(this.$$success, validationErrorKey, controller);
	      } else {
	        set(this.$error, validationErrorKey, controller);
	        unset(this.$$success, validationErrorKey, controller);
	      }
	    }
	    if (this.$pending) {
	      cachedToggleClass(this, PENDING_CLASS, true);
	      this.$valid = this.$invalid = undefined;
	      toggleValidationCss(this, '', null);
	    } else {
	      cachedToggleClass(this, PENDING_CLASS, false);
	      this.$valid = isObjectEmpty(this.$error);
	      this.$invalid = !this.$valid;
	      toggleValidationCss(this, '', this.$valid);
	    }
	
	    // re-read the state as the set/unset methods could have
	    // combined state in this.$error[validationError] (used for forms),
	    // where setting/unsetting only increments/decrements the value,
	    // and does not replace it.
	    var combinedState;
	    if (this.$pending && this.$pending[validationErrorKey]) {
	      combinedState = undefined;
	    } else if (this.$error[validationErrorKey]) {
	      combinedState = false;
	    } else if (this.$$success[validationErrorKey]) {
	      combinedState = true;
	    } else {
	      combinedState = null;
	    }
	
	    toggleValidationCss(this, validationErrorKey, combinedState);
	    this.$$parentForm.$setValidity(validationErrorKey, combinedState, this);
	  };
	
	  function createAndSet(ctrl, name, value, controller) {
	    if (!ctrl[name]) {
	      ctrl[name] = {};
	    }
	    set(ctrl[name], value, controller);
	  }
	
	  function unsetAndCleanup(ctrl, name, value, controller) {
	    if (ctrl[name]) {
	      unset(ctrl[name], value, controller);
	    }
	    if (isObjectEmpty(ctrl[name])) {
	      ctrl[name] = undefined;
	    }
	  }
	
	  function cachedToggleClass(ctrl, className, switchValue) {
	    if (switchValue && !ctrl.$$classCache[className]) {
	      ctrl.$$animate.addClass(ctrl.$$element, className);
	      ctrl.$$classCache[className] = true;
	    } else if (!switchValue && ctrl.$$classCache[className]) {
	      ctrl.$$animate.removeClass(ctrl.$$element, className);
	      ctrl.$$classCache[className] = false;
	    }
	  }
	
	  function toggleValidationCss(ctrl, validationErrorKey, isValid) {
	    validationErrorKey = validationErrorKey ? '-' + snake_case(validationErrorKey, '-') : '';
	
	    cachedToggleClass(ctrl, VALID_CLASS + validationErrorKey, isValid === true);
	    cachedToggleClass(ctrl, INVALID_CLASS + validationErrorKey, isValid === false);
	  }
	}
	
	function isObjectEmpty(obj) {
	  if (obj) {
	    for (var prop in obj) {
	      if (obj.hasOwnProperty(prop)) {
	        return false;
	      }
	    }
	  }
	  return true;
	}
	
	/* global
	  VALID_CLASS: false,
	  INVALID_CLASS: false,
	  PRISTINE_CLASS: false,
	  DIRTY_CLASS: false,
	  ngModelMinErr: false
	*/
	
	// Regex code was initially obtained from SO prior to modification: https://stackoverflow.com/questions/3143070/javascript-regex-iso-datetime#answer-3143231
	var ISO_DATE_REGEXP = /^\d{4,}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+(?:[+-][0-2]\d:[0-5]\d|Z)$/;
	// See valid URLs in RFC3987 (http://tools.ietf.org/html/rfc3987)
	// Note: We are being more lenient, because browsers are too.
	//   1. Scheme
	//   2. Slashes
	//   3. Username
	//   4. Password
	//   5. Hostname
	//   6. Port
	//   7. Path
	//   8. Query
	//   9. Fragment
	//                 1111111111111111 222   333333    44444        55555555555555555555555     666     77777777     8888888     999
	var URL_REGEXP = /^[a-z][a-z\d.+-]*:\/*(?:[^:@]+(?::[^@]+)?@)?(?:[^\s:/?#]+|\[[a-f\d:]+])(?::\d+)?(?:\/[^?#]*)?(?:\?[^#]*)?(?:#.*)?$/i;
	// eslint-disable-next-line max-len
	var EMAIL_REGEXP = /^(?=.{1,254}$)(?=.{1,64}@)[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+(\.[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+)*@[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?(\.[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?)*$/;
	var NUMBER_REGEXP = /^\s*(-|\+)?(\d+|(\d*(\.\d*)))([eE][+-]?\d+)?\s*$/;
	var DATE_REGEXP = /^(\d{4,})-(\d{2})-(\d{2})$/;
	var DATETIMELOCAL_REGEXP = /^(\d{4,})-(\d\d)-(\d\d)T(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/;
	var WEEK_REGEXP = /^(\d{4,})-W(\d\d)$/;
	var MONTH_REGEXP = /^(\d{4,})-(\d\d)$/;
	var TIME_REGEXP = /^(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/;
	
	var PARTIAL_VALIDATION_EVENTS = 'keydown wheel mousedown';
	var PARTIAL_VALIDATION_TYPES = createMap();
	forEach('date,datetime-local,month,time,week'.split(','), function(type) {
	  PARTIAL_VALIDATION_TYPES[type] = true;
	});
	
	var inputType = {
	
	  /**
	   * @ngdoc input
	   * @name input[text]
	   *
	   * @description
	   * Standard HTML text input with angular data binding, inherited by most of the `input` elements.
	   *
	   *
	   * @param {string} ngModel Assignable angular expression to data-bind to.
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {string=} required Adds `required` validation error key if the value is not entered.
	   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	   *    `required` when you want to data-bind to the `required` attribute.
	   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
	   *    minlength.
	   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
	   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of
	   *    any length.
	   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string
	   *    that contains the regular expression body that will be converted to a regular expression
	   *    as in the ngPattern directive.
	   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel {@link ngModel.NgModelController#$viewValue $viewValue}
	   *    does not match a RegExp found by evaluating the Angular expression given in the attribute value.
	   *    If the expression evaluates to a RegExp object, then this is used directly.
	   *    If the expression evaluates to a string, then it will be converted to a RegExp
	   *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
	   *    `new RegExp('^abc$')`.<br />
	   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
	   *    start at the index of the last search's match, thus not taking the whole input value into
	   *    account.
	   * @param {string=} ngChange Angular expression to be executed when input changes due to user
	   *    interaction with the input element.
	   * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.
	   *    This parameter is ignored for input[type=password] controls, which will never trim the
	   *    input.
	   *
	   * @example
	      <example name="text-input-directive" module="textInputExample">
	        <file name="index.html">
	         <script>
	           angular.module('textInputExample', [])
	             .controller('ExampleController', ['$scope', function($scope) {
	               $scope.example = {
	                 text: 'guest',
	                 word: /^\s*\w*\s*$/
	               };
	             }]);
	         </script>
	         <form name="myForm" ng-controller="ExampleController">
	           <label>Single word:
	             <input type="text" name="input" ng-model="example.text"
	                    ng-pattern="example.word" required ng-trim="false">
	           </label>
	           <div role="alert">
	             <span class="error" ng-show="myForm.input.$error.required">
	               Required!</span>
	             <span class="error" ng-show="myForm.input.$error.pattern">
	               Single word only!</span>
	           </div>
	           <code>text = {{example.text}}</code><br/>
	           <code>myForm.input.$valid = {{myForm.input.$valid}}</code><br/>
	           <code>myForm.input.$error = {{myForm.input.$error}}</code><br/>
	           <code>myForm.$valid = {{myForm.$valid}}</code><br/>
	           <code>myForm.$error.required = {{!!myForm.$error.required}}</code><br/>
	          </form>
	        </file>
	        <file name="protractor.js" type="protractor">
	          var text = element(by.binding('example.text'));
	          var valid = element(by.binding('myForm.input.$valid'));
	          var input = element(by.model('example.text'));
	
	          it('should initialize to model', function() {
	            expect(text.getText()).toContain('guest');
	            expect(valid.getText()).toContain('true');
	          });
	
	          it('should be invalid if empty', function() {
	            input.clear();
	            input.sendKeys('');
	
	            expect(text.getText()).toEqual('text =');
	            expect(valid.getText()).toContain('false');
	          });
	
	          it('should be invalid if multi word', function() {
	            input.clear();
	            input.sendKeys('hello world');
	
	            expect(valid.getText()).toContain('false');
	          });
	        </file>
	      </example>
	   */
	  'text': textInputType,
	
	    /**
	     * @ngdoc input
	     * @name input[date]
	     *
	     * @description
	     * Input with date validation and transformation. In browsers that do not yet support
	     * the HTML5 date input, a text element will be used. In that case, text must be entered in a valid ISO-8601
	     * date format (yyyy-MM-dd), for example: `2009-01-06`. Since many
	     * modern browsers do not yet support this input type, it is important to provide cues to users on the
	     * expected input format via a placeholder or label.
	     *
	     * The model must always be a Date object, otherwise Angular will throw an error.
	     * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
	     *
	     * The timezone to be used to read/write the `Date` instance in the model can be defined using
	     * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
	     *
	     * @param {string} ngModel Assignable angular expression to data-bind to.
	     * @param {string=} name Property name of the form under which the control is published.
	     * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`. This must be a
	     *   valid ISO date string (yyyy-MM-dd). You can also use interpolation inside this attribute
	     *   (e.g. `min="{{minDate | date:'yyyy-MM-dd'}}"`). Note that `min` will also add native HTML5
	     *   constraint validation.
	     * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`. This must be
	     *   a valid ISO date string (yyyy-MM-dd). You can also use interpolation inside this attribute
	     *   (e.g. `max="{{maxDate | date:'yyyy-MM-dd'}}"`). Note that `max` will also add native HTML5
	     *   constraint validation.
	     * @param {(date|string)=} ngMin Sets the `min` validation constraint to the Date / ISO date string
	     *   the `ngMin` expression evaluates to. Note that it does not set the `min` attribute.
	     * @param {(date|string)=} ngMax Sets the `max` validation constraint to the Date / ISO date string
	     *   the `ngMax` expression evaluates to. Note that it does not set the `max` attribute.
	     * @param {string=} required Sets `required` validation error key if the value is not entered.
	     * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	     *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	     *    `required` when you want to data-bind to the `required` attribute.
	     * @param {string=} ngChange Angular expression to be executed when input changes due to user
	     *    interaction with the input element.
	     *
	     * @example
	     <example name="date-input-directive" module="dateInputExample">
	     <file name="index.html">
	       <script>
	          angular.module('dateInputExample', [])
	            .controller('DateController', ['$scope', function($scope) {
	              $scope.example = {
	                value: new Date(2013, 9, 22)
	              };
	            }]);
	       </script>
	       <form name="myForm" ng-controller="DateController as dateCtrl">
	          <label for="exampleInput">Pick a date in 2013:</label>
	          <input type="date" id="exampleInput" name="input" ng-model="example.value"
	              placeholder="yyyy-MM-dd" min="2013-01-01" max="2013-12-31" required />
	          <div role="alert">
	            <span class="error" ng-show="myForm.input.$error.required">
	                Required!</span>
	            <span class="error" ng-show="myForm.input.$error.date">
	                Not a valid date!</span>
	           </div>
	           <tt>value = {{example.value | date: "yyyy-MM-dd"}}</tt><br/>
	           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	       </form>
	     </file>
	     <file name="protractor.js" type="protractor">
	        var value = element(by.binding('example.value | date: "yyyy-MM-dd"'));
	        var valid = element(by.binding('myForm.input.$valid'));
	
	        // currently protractor/webdriver does not support
	        // sending keys to all known HTML5 input controls
	        // for various browsers (see https://github.com/angular/protractor/issues/562).
	        function setInput(val) {
	          // set the value of the element and force validation.
	          var scr = "var ipt = document.getElementById('exampleInput'); " +
	          "ipt.value = '" + val + "';" +
	          "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
	          browser.executeScript(scr);
	        }
	
	        it('should initialize to model', function() {
	          expect(value.getText()).toContain('2013-10-22');
	          expect(valid.getText()).toContain('myForm.input.$valid = true');
	        });
	
	        it('should be invalid if empty', function() {
	          setInput('');
	          expect(value.getText()).toEqual('value =');
	          expect(valid.getText()).toContain('myForm.input.$valid = false');
	        });
	
	        it('should be invalid if over max', function() {
	          setInput('2015-01-01');
	          expect(value.getText()).toContain('');
	          expect(valid.getText()).toContain('myForm.input.$valid = false');
	        });
	     </file>
	     </example>
	     */
	  'date': createDateInputType('date', DATE_REGEXP,
	         createDateParser(DATE_REGEXP, ['yyyy', 'MM', 'dd']),
	         'yyyy-MM-dd'),
	
	   /**
	    * @ngdoc input
	    * @name input[datetime-local]
	    *
	    * @description
	    * Input with datetime validation and transformation. In browsers that do not yet support
	    * the HTML5 date input, a text element will be used. In that case, the text must be entered in a valid ISO-8601
	    * local datetime format (yyyy-MM-ddTHH:mm:ss), for example: `2010-12-28T14:57:00`.
	    *
	    * The model must always be a Date object, otherwise Angular will throw an error.
	    * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
	    *
	    * The timezone to be used to read/write the `Date` instance in the model can be defined using
	    * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
	    *
	    * @param {string} ngModel Assignable angular expression to data-bind to.
	    * @param {string=} name Property name of the form under which the control is published.
	    * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
	    *   This must be a valid ISO datetime format (yyyy-MM-ddTHH:mm:ss). You can also use interpolation
	    *   inside this attribute (e.g. `min="{{minDatetimeLocal | date:'yyyy-MM-ddTHH:mm:ss'}}"`).
	    *   Note that `min` will also add native HTML5 constraint validation.
	    * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
	    *   This must be a valid ISO datetime format (yyyy-MM-ddTHH:mm:ss). You can also use interpolation
	    *   inside this attribute (e.g. `max="{{maxDatetimeLocal | date:'yyyy-MM-ddTHH:mm:ss'}}"`).
	    *   Note that `max` will also add native HTML5 constraint validation.
	    * @param {(date|string)=} ngMin Sets the `min` validation error key to the Date / ISO datetime string
	    *   the `ngMin` expression evaluates to. Note that it does not set the `min` attribute.
	    * @param {(date|string)=} ngMax Sets the `max` validation error key to the Date / ISO datetime string
	    *   the `ngMax` expression evaluates to. Note that it does not set the `max` attribute.
	    * @param {string=} required Sets `required` validation error key if the value is not entered.
	    * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	    *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	    *    `required` when you want to data-bind to the `required` attribute.
	    * @param {string=} ngChange Angular expression to be executed when input changes due to user
	    *    interaction with the input element.
	    *
	    * @example
	    <example name="datetimelocal-input-directive" module="dateExample">
	    <file name="index.html">
	      <script>
	        angular.module('dateExample', [])
	          .controller('DateController', ['$scope', function($scope) {
	            $scope.example = {
	              value: new Date(2010, 11, 28, 14, 57)
	            };
	          }]);
	      </script>
	      <form name="myForm" ng-controller="DateController as dateCtrl">
	        <label for="exampleInput">Pick a date between in 2013:</label>
	        <input type="datetime-local" id="exampleInput" name="input" ng-model="example.value"
	            placeholder="yyyy-MM-ddTHH:mm:ss" min="2001-01-01T00:00:00" max="2013-12-31T00:00:00" required />
	        <div role="alert">
	          <span class="error" ng-show="myForm.input.$error.required">
	              Required!</span>
	          <span class="error" ng-show="myForm.input.$error.datetimelocal">
	              Not a valid date!</span>
	        </div>
	        <tt>value = {{example.value | date: "yyyy-MM-ddTHH:mm:ss"}}</tt><br/>
	        <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	        <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	        <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	        <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	      </form>
	    </file>
	    <file name="protractor.js" type="protractor">
	      var value = element(by.binding('example.value | date: "yyyy-MM-ddTHH:mm:ss"'));
	      var valid = element(by.binding('myForm.input.$valid'));
	
	      // currently protractor/webdriver does not support
	      // sending keys to all known HTML5 input controls
	      // for various browsers (https://github.com/angular/protractor/issues/562).
	      function setInput(val) {
	        // set the value of the element and force validation.
	        var scr = "var ipt = document.getElementById('exampleInput'); " +
	        "ipt.value = '" + val + "';" +
	        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
	        browser.executeScript(scr);
	      }
	
	      it('should initialize to model', function() {
	        expect(value.getText()).toContain('2010-12-28T14:57:00');
	        expect(valid.getText()).toContain('myForm.input.$valid = true');
	      });
	
	      it('should be invalid if empty', function() {
	        setInput('');
	        expect(value.getText()).toEqual('value =');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });
	
	      it('should be invalid if over max', function() {
	        setInput('2015-01-01T23:59:00');
	        expect(value.getText()).toContain('');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });
	    </file>
	    </example>
	    */
	  'datetime-local': createDateInputType('datetimelocal', DATETIMELOCAL_REGEXP,
	      createDateParser(DATETIMELOCAL_REGEXP, ['yyyy', 'MM', 'dd', 'HH', 'mm', 'ss', 'sss']),
	      'yyyy-MM-ddTHH:mm:ss.sss'),
	
	  /**
	   * @ngdoc input
	   * @name input[time]
	   *
	   * @description
	   * Input with time validation and transformation. In browsers that do not yet support
	   * the HTML5 time input, a text element will be used. In that case, the text must be entered in a valid ISO-8601
	   * local time format (HH:mm:ss), for example: `14:57:00`. Model must be a Date object. This binding will always output a
	   * Date object to the model of January 1, 1970, or local date `new Date(1970, 0, 1, HH, mm, ss)`.
	   *
	   * The model must always be a Date object, otherwise Angular will throw an error.
	   * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
	   *
	   * The timezone to be used to read/write the `Date` instance in the model can be defined using
	   * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
	   *
	   * @param {string} ngModel Assignable angular expression to data-bind to.
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
	   *   This must be a valid ISO time format (HH:mm:ss). You can also use interpolation inside this
	   *   attribute (e.g. `min="{{minTime | date:'HH:mm:ss'}}"`). Note that `min` will also add
	   *   native HTML5 constraint validation.
	   * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
	   *   This must be a valid ISO time format (HH:mm:ss). You can also use interpolation inside this
	   *   attribute (e.g. `max="{{maxTime | date:'HH:mm:ss'}}"`). Note that `max` will also add
	   *   native HTML5 constraint validation.
	   * @param {(date|string)=} ngMin Sets the `min` validation constraint to the Date / ISO time string the
	   *   `ngMin` expression evaluates to. Note that it does not set the `min` attribute.
	   * @param {(date|string)=} ngMax Sets the `max` validation constraint to the Date / ISO time string the
	   *   `ngMax` expression evaluates to. Note that it does not set the `max` attribute.
	   * @param {string=} required Sets `required` validation error key if the value is not entered.
	   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	   *    `required` when you want to data-bind to the `required` attribute.
	   * @param {string=} ngChange Angular expression to be executed when input changes due to user
	   *    interaction with the input element.
	   *
	   * @example
	   <example name="time-input-directive" module="timeExample">
	   <file name="index.html">
	     <script>
	      angular.module('timeExample', [])
	        .controller('DateController', ['$scope', function($scope) {
	          $scope.example = {
	            value: new Date(1970, 0, 1, 14, 57, 0)
	          };
	        }]);
	     </script>
	     <form name="myForm" ng-controller="DateController as dateCtrl">
	        <label for="exampleInput">Pick a time between 8am and 5pm:</label>
	        <input type="time" id="exampleInput" name="input" ng-model="example.value"
	            placeholder="HH:mm:ss" min="08:00:00" max="17:00:00" required />
	        <div role="alert">
	          <span class="error" ng-show="myForm.input.$error.required">
	              Required!</span>
	          <span class="error" ng-show="myForm.input.$error.time">
	              Not a valid date!</span>
	        </div>
	        <tt>value = {{example.value | date: "HH:mm:ss"}}</tt><br/>
	        <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	        <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	        <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	        <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	     </form>
	   </file>
	   <file name="protractor.js" type="protractor">
	      var value = element(by.binding('example.value | date: "HH:mm:ss"'));
	      var valid = element(by.binding('myForm.input.$valid'));
	
	      // currently protractor/webdriver does not support
	      // sending keys to all known HTML5 input controls
	      // for various browsers (https://github.com/angular/protractor/issues/562).
	      function setInput(val) {
	        // set the value of the element and force validation.
	        var scr = "var ipt = document.getElementById('exampleInput'); " +
	        "ipt.value = '" + val + "';" +
	        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
	        browser.executeScript(scr);
	      }
	
	      it('should initialize to model', function() {
	        expect(value.getText()).toContain('14:57:00');
	        expect(valid.getText()).toContain('myForm.input.$valid = true');
	      });
	
	      it('should be invalid if empty', function() {
	        setInput('');
	        expect(value.getText()).toEqual('value =');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });
	
	      it('should be invalid if over max', function() {
	        setInput('23:59:00');
	        expect(value.getText()).toContain('');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });
	   </file>
	   </example>
	   */
	  'time': createDateInputType('time', TIME_REGEXP,
	      createDateParser(TIME_REGEXP, ['HH', 'mm', 'ss', 'sss']),
	     'HH:mm:ss.sss'),
	
	   /**
	    * @ngdoc input
	    * @name input[week]
	    *
	    * @description
	    * Input with week-of-the-year validation and transformation to Date. In browsers that do not yet support
	    * the HTML5 week input, a text element will be used. In that case, the text must be entered in a valid ISO-8601
	    * week format (yyyy-W##), for example: `2013-W02`.
	    *
	    * The model must always be a Date object, otherwise Angular will throw an error.
	    * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
	    *
	    * The timezone to be used to read/write the `Date` instance in the model can be defined using
	    * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
	    *
	    * @param {string} ngModel Assignable angular expression to data-bind to.
	    * @param {string=} name Property name of the form under which the control is published.
	    * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
	    *   This must be a valid ISO week format (yyyy-W##). You can also use interpolation inside this
	    *   attribute (e.g. `min="{{minWeek | date:'yyyy-Www'}}"`). Note that `min` will also add
	    *   native HTML5 constraint validation.
	    * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
	    *   This must be a valid ISO week format (yyyy-W##). You can also use interpolation inside this
	    *   attribute (e.g. `max="{{maxWeek | date:'yyyy-Www'}}"`). Note that `max` will also add
	    *   native HTML5 constraint validation.
	    * @param {(date|string)=} ngMin Sets the `min` validation constraint to the Date / ISO week string
	    *   the `ngMin` expression evaluates to. Note that it does not set the `min` attribute.
	    * @param {(date|string)=} ngMax Sets the `max` validation constraint to the Date / ISO week string
	    *   the `ngMax` expression evaluates to. Note that it does not set the `max` attribute.
	    * @param {string=} required Sets `required` validation error key if the value is not entered.
	    * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	    *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	    *    `required` when you want to data-bind to the `required` attribute.
	    * @param {string=} ngChange Angular expression to be executed when input changes due to user
	    *    interaction with the input element.
	    *
	    * @example
	    <example name="week-input-directive" module="weekExample">
	    <file name="index.html">
	      <script>
	      angular.module('weekExample', [])
	        .controller('DateController', ['$scope', function($scope) {
	          $scope.example = {
	            value: new Date(2013, 0, 3)
	          };
	        }]);
	      </script>
	      <form name="myForm" ng-controller="DateController as dateCtrl">
	        <label>Pick a date between in 2013:
	          <input id="exampleInput" type="week" name="input" ng-model="example.value"
	                 placeholder="YYYY-W##" min="2012-W32"
	                 max="2013-W52" required />
	        </label>
	        <div role="alert">
	          <span class="error" ng-show="myForm.input.$error.required">
	              Required!</span>
	          <span class="error" ng-show="myForm.input.$error.week">
	              Not a valid date!</span>
	        </div>
	        <tt>value = {{example.value | date: "yyyy-Www"}}</tt><br/>
	        <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	        <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	        <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	        <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	      </form>
	    </file>
	    <file name="protractor.js" type="protractor">
	      var value = element(by.binding('example.value | date: "yyyy-Www"'));
	      var valid = element(by.binding('myForm.input.$valid'));
	
	      // currently protractor/webdriver does not support
	      // sending keys to all known HTML5 input controls
	      // for various browsers (https://github.com/angular/protractor/issues/562).
	      function setInput(val) {
	        // set the value of the element and force validation.
	        var scr = "var ipt = document.getElementById('exampleInput'); " +
	        "ipt.value = '" + val + "';" +
	        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
	        browser.executeScript(scr);
	      }
	
	      it('should initialize to model', function() {
	        expect(value.getText()).toContain('2013-W01');
	        expect(valid.getText()).toContain('myForm.input.$valid = true');
	      });
	
	      it('should be invalid if empty', function() {
	        setInput('');
	        expect(value.getText()).toEqual('value =');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });
	
	      it('should be invalid if over max', function() {
	        setInput('2015-W01');
	        expect(value.getText()).toContain('');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });
	    </file>
	    </example>
	    */
	  'week': createDateInputType('week', WEEK_REGEXP, weekParser, 'yyyy-Www'),
	
	  /**
	   * @ngdoc input
	   * @name input[month]
	   *
	   * @description
	   * Input with month validation and transformation. In browsers that do not yet support
	   * the HTML5 month input, a text element will be used. In that case, the text must be entered in a valid ISO-8601
	   * month format (yyyy-MM), for example: `2009-01`.
	   *
	   * The model must always be a Date object, otherwise Angular will throw an error.
	   * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
	   * If the model is not set to the first of the month, the next view to model update will set it
	   * to the first of the month.
	   *
	   * The timezone to be used to read/write the `Date` instance in the model can be defined using
	   * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
	   *
	   * @param {string} ngModel Assignable angular expression to data-bind to.
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
	   *   This must be a valid ISO month format (yyyy-MM). You can also use interpolation inside this
	   *   attribute (e.g. `min="{{minMonth | date:'yyyy-MM'}}"`). Note that `min` will also add
	   *   native HTML5 constraint validation.
	   * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
	   *   This must be a valid ISO month format (yyyy-MM). You can also use interpolation inside this
	   *   attribute (e.g. `max="{{maxMonth | date:'yyyy-MM'}}"`). Note that `max` will also add
	   *   native HTML5 constraint validation.
	   * @param {(date|string)=} ngMin Sets the `min` validation constraint to the Date / ISO week string
	   *   the `ngMin` expression evaluates to. Note that it does not set the `min` attribute.
	   * @param {(date|string)=} ngMax Sets the `max` validation constraint to the Date / ISO week string
	   *   the `ngMax` expression evaluates to. Note that it does not set the `max` attribute.
	
	   * @param {string=} required Sets `required` validation error key if the value is not entered.
	   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	   *    `required` when you want to data-bind to the `required` attribute.
	   * @param {string=} ngChange Angular expression to be executed when input changes due to user
	   *    interaction with the input element.
	   *
	   * @example
	   <example name="month-input-directive" module="monthExample">
	   <file name="index.html">
	     <script>
	      angular.module('monthExample', [])
	        .controller('DateController', ['$scope', function($scope) {
	          $scope.example = {
	            value: new Date(2013, 9, 1)
	          };
	        }]);
	     </script>
	     <form name="myForm" ng-controller="DateController as dateCtrl">
	       <label for="exampleInput">Pick a month in 2013:</label>
	       <input id="exampleInput" type="month" name="input" ng-model="example.value"
	          placeholder="yyyy-MM" min="2013-01" max="2013-12" required />
	       <div role="alert">
	         <span class="error" ng-show="myForm.input.$error.required">
	            Required!</span>
	         <span class="error" ng-show="myForm.input.$error.month">
	            Not a valid month!</span>
	       </div>
	       <tt>value = {{example.value | date: "yyyy-MM"}}</tt><br/>
	       <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	       <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	       <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	       <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	     </form>
	   </file>
	   <file name="protractor.js" type="protractor">
	      var value = element(by.binding('example.value | date: "yyyy-MM"'));
	      var valid = element(by.binding('myForm.input.$valid'));
	
	      // currently protractor/webdriver does not support
	      // sending keys to all known HTML5 input controls
	      // for various browsers (https://github.com/angular/protractor/issues/562).
	      function setInput(val) {
	        // set the value of the element and force validation.
	        var scr = "var ipt = document.getElementById('exampleInput'); " +
	        "ipt.value = '" + val + "';" +
	        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
	        browser.executeScript(scr);
	      }
	
	      it('should initialize to model', function() {
	        expect(value.getText()).toContain('2013-10');
	        expect(valid.getText()).toContain('myForm.input.$valid = true');
	      });
	
	      it('should be invalid if empty', function() {
	        setInput('');
	        expect(value.getText()).toEqual('value =');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });
	
	      it('should be invalid if over max', function() {
	        setInput('2015-01');
	        expect(value.getText()).toContain('');
	        expect(valid.getText()).toContain('myForm.input.$valid = false');
	      });
	   </file>
	   </example>
	   */
	  'month': createDateInputType('month', MONTH_REGEXP,
	     createDateParser(MONTH_REGEXP, ['yyyy', 'MM']),
	     'yyyy-MM'),
	
	  /**
	   * @ngdoc input
	   * @name input[number]
	   *
	   * @description
	   * Text input with number validation and transformation. Sets the `number` validation
	   * error if not a valid number.
	   *
	   * <div class="alert alert-warning">
	   * The model must always be of type `number` otherwise Angular will throw an error.
	   * Be aware that a string containing a number is not enough. See the {@link ngModel:numfmt}
	   * error docs for more information and an example of how to convert your model if necessary.
	   * </div>
	   *
	   * ## Issues with HTML5 constraint validation
	   *
	   * In browsers that follow the
	   * [HTML5 specification](https://html.spec.whatwg.org/multipage/forms.html#number-state-%28type=number%29),
	   * `input[number]` does not work as expected with {@link ngModelOptions `ngModelOptions.allowInvalid`}.
	   * If a non-number is entered in the input, the browser will report the value as an empty string,
	   * which means the view / model values in `ngModel` and subsequently the scope value
	   * will also be an empty string.
	   *
	   *
	   * @param {string} ngModel Assignable angular expression to data-bind to.
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
	   *    Can be interpolated.
	   * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
	   *    Can be interpolated.
	   * @param {string=} ngMin Like `min`, sets the `min` validation error key if the value entered is less than `ngMin`,
	   *    but does not trigger HTML5 native validation. Takes an expression.
	   * @param {string=} ngMax Like `max`, sets the `max` validation error key if the value entered is greater than `ngMax`,
	   *    but does not trigger HTML5 native validation. Takes an expression.
	   * @param {string=} step Sets the `step` validation error key if the value entered does not fit the `step` constraint.
	   *    Can be interpolated.
	   * @param {string=} ngStep Like `step`, sets the `step` validation error key if the value entered does not fit the `ngStep` constraint,
	   *    but does not trigger HTML5 native validation. Takes an expression.
	   * @param {string=} required Sets `required` validation error key if the value is not entered.
	   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	   *    `required` when you want to data-bind to the `required` attribute.
	   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
	   *    minlength.
	   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
	   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of
	   *    any length.
	   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string
	   *    that contains the regular expression body that will be converted to a regular expression
	   *    as in the ngPattern directive.
	   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel {@link ngModel.NgModelController#$viewValue $viewValue}
	   *    does not match a RegExp found by evaluating the Angular expression given in the attribute value.
	   *    If the expression evaluates to a RegExp object, then this is used directly.
	   *    If the expression evaluates to a string, then it will be converted to a RegExp
	   *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
	   *    `new RegExp('^abc$')`.<br />
	   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
	   *    start at the index of the last search's match, thus not taking the whole input value into
	   *    account.
	   * @param {string=} ngChange Angular expression to be executed when input changes due to user
	   *    interaction with the input element.
	   *
	   * @example
	      <example name="number-input-directive" module="numberExample">
	        <file name="index.html">
	         <script>
	           angular.module('numberExample', [])
	             .controller('ExampleController', ['$scope', function($scope) {
	               $scope.example = {
	                 value: 12
	               };
	             }]);
	         </script>
	         <form name="myForm" ng-controller="ExampleController">
	           <label>Number:
	             <input type="number" name="input" ng-model="example.value"
	                    min="0" max="99" required>
	          </label>
	           <div role="alert">
	             <span class="error" ng-show="myForm.input.$error.required">
	               Required!</span>
	             <span class="error" ng-show="myForm.input.$error.number">
	               Not valid number!</span>
	           </div>
	           <tt>value = {{example.value}}</tt><br/>
	           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	          </form>
	        </file>
	        <file name="protractor.js" type="protractor">
	          var value = element(by.binding('example.value'));
	          var valid = element(by.binding('myForm.input.$valid'));
	          var input = element(by.model('example.value'));
	
	          it('should initialize to model', function() {
	            expect(value.getText()).toContain('12');
	            expect(valid.getText()).toContain('true');
	          });
	
	          it('should be invalid if empty', function() {
	            input.clear();
	            input.sendKeys('');
	            expect(value.getText()).toEqual('value =');
	            expect(valid.getText()).toContain('false');
	          });
	
	          it('should be invalid if over max', function() {
	            input.clear();
	            input.sendKeys('123');
	            expect(value.getText()).toEqual('value =');
	            expect(valid.getText()).toContain('false');
	          });
	        </file>
	      </example>
	   */
	  'number': numberInputType,
	
	
	  /**
	   * @ngdoc input
	   * @name input[url]
	   *
	   * @description
	   * Text input with URL validation. Sets the `url` validation error key if the content is not a
	   * valid URL.
	   *
	   * <div class="alert alert-warning">
	   * **Note:** `input[url]` uses a regex to validate urls that is derived from the regex
	   * used in Chromium. If you need stricter validation, you can use `ng-pattern` or modify
	   * the built-in validators (see the {@link guide/forms Forms guide})
	   * </div>
	   *
	   * @param {string} ngModel Assignable angular expression to data-bind to.
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {string=} required Sets `required` validation error key if the value is not entered.
	   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	   *    `required` when you want to data-bind to the `required` attribute.
	   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
	   *    minlength.
	   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
	   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of
	   *    any length.
	   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string
	   *    that contains the regular expression body that will be converted to a regular expression
	   *    as in the ngPattern directive.
	   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel {@link ngModel.NgModelController#$viewValue $viewValue}
	   *    does not match a RegExp found by evaluating the Angular expression given in the attribute value.
	   *    If the expression evaluates to a RegExp object, then this is used directly.
	   *    If the expression evaluates to a string, then it will be converted to a RegExp
	   *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
	   *    `new RegExp('^abc$')`.<br />
	   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
	   *    start at the index of the last search's match, thus not taking the whole input value into
	   *    account.
	   * @param {string=} ngChange Angular expression to be executed when input changes due to user
	   *    interaction with the input element.
	   *
	   * @example
	      <example name="url-input-directive" module="urlExample">
	        <file name="index.html">
	         <script>
	           angular.module('urlExample', [])
	             .controller('ExampleController', ['$scope', function($scope) {
	               $scope.url = {
	                 text: 'http://google.com'
	               };
	             }]);
	         </script>
	         <form name="myForm" ng-controller="ExampleController">
	           <label>URL:
	             <input type="url" name="input" ng-model="url.text" required>
	           <label>
	           <div role="alert">
	             <span class="error" ng-show="myForm.input.$error.required">
	               Required!</span>
	             <span class="error" ng-show="myForm.input.$error.url">
	               Not valid url!</span>
	           </div>
	           <tt>text = {{url.text}}</tt><br/>
	           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	           <tt>myForm.$error.url = {{!!myForm.$error.url}}</tt><br/>
	          </form>
	        </file>
	        <file name="protractor.js" type="protractor">
	          var text = element(by.binding('url.text'));
	          var valid = element(by.binding('myForm.input.$valid'));
	          var input = element(by.model('url.text'));
	
	          it('should initialize to model', function() {
	            expect(text.getText()).toContain('http://google.com');
	            expect(valid.getText()).toContain('true');
	          });
	
	          it('should be invalid if empty', function() {
	            input.clear();
	            input.sendKeys('');
	
	            expect(text.getText()).toEqual('text =');
	            expect(valid.getText()).toContain('false');
	          });
	
	          it('should be invalid if not url', function() {
	            input.clear();
	            input.sendKeys('box');
	
	            expect(valid.getText()).toContain('false');
	          });
	        </file>
	      </example>
	   */
	  'url': urlInputType,
	
	
	  /**
	   * @ngdoc input
	   * @name input[email]
	   *
	   * @description
	   * Text input with email validation. Sets the `email` validation error key if not a valid email
	   * address.
	   *
	   * <div class="alert alert-warning">
	   * **Note:** `input[email]` uses a regex to validate email addresses that is derived from the regex
	   * used in Chromium. If you need stricter validation (e.g. requiring a top-level domain), you can
	   * use `ng-pattern` or modify the built-in validators (see the {@link guide/forms Forms guide})
	   * </div>
	   *
	   * @param {string} ngModel Assignable angular expression to data-bind to.
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {string=} required Sets `required` validation error key if the value is not entered.
	   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	   *    `required` when you want to data-bind to the `required` attribute.
	   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
	   *    minlength.
	   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
	   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of
	   *    any length.
	   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string
	   *    that contains the regular expression body that will be converted to a regular expression
	   *    as in the ngPattern directive.
	   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel {@link ngModel.NgModelController#$viewValue $viewValue}
	   *    does not match a RegExp found by evaluating the Angular expression given in the attribute value.
	   *    If the expression evaluates to a RegExp object, then this is used directly.
	   *    If the expression evaluates to a string, then it will be converted to a RegExp
	   *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
	   *    `new RegExp('^abc$')`.<br />
	   *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
	   *    start at the index of the last search's match, thus not taking the whole input value into
	   *    account.
	   * @param {string=} ngChange Angular expression to be executed when input changes due to user
	   *    interaction with the input element.
	   *
	   * @example
	      <example name="email-input-directive" module="emailExample">
	        <file name="index.html">
	         <script>
	           angular.module('emailExample', [])
	             .controller('ExampleController', ['$scope', function($scope) {
	               $scope.email = {
	                 text: 'me@example.com'
	               };
	             }]);
	         </script>
	           <form name="myForm" ng-controller="ExampleController">
	             <label>Email:
	               <input type="email" name="input" ng-model="email.text" required>
	             </label>
	             <div role="alert">
	               <span class="error" ng-show="myForm.input.$error.required">
	                 Required!</span>
	               <span class="error" ng-show="myForm.input.$error.email">
	                 Not valid email!</span>
	             </div>
	             <tt>text = {{email.text}}</tt><br/>
	             <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
	             <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
	             <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	             <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	             <tt>myForm.$error.email = {{!!myForm.$error.email}}</tt><br/>
	           </form>
	         </file>
	        <file name="protractor.js" type="protractor">
	          var text = element(by.binding('email.text'));
	          var valid = element(by.binding('myForm.input.$valid'));
	          var input = element(by.model('email.text'));
	
	          it('should initialize to model', function() {
	            expect(text.getText()).toContain('me@example.com');
	            expect(valid.getText()).toContain('true');
	          });
	
	          it('should be invalid if empty', function() {
	            input.clear();
	            input.sendKeys('');
	            expect(text.getText()).toEqual('text =');
	            expect(valid.getText()).toContain('false');
	          });
	
	          it('should be invalid if not email', function() {
	            input.clear();
	            input.sendKeys('xxx');
	
	            expect(valid.getText()).toContain('false');
	          });
	        </file>
	      </example>
	   */
	  'email': emailInputType,
	
	
	  /**
	   * @ngdoc input
	   * @name input[radio]
	   *
	   * @description
	   * HTML radio button.
	   *
	   * @param {string} ngModel Assignable angular expression to data-bind to.
	   * @param {string} value The value to which the `ngModel` expression should be set when selected.
	   *    Note that `value` only supports `string` values, i.e. the scope model needs to be a string,
	   *    too. Use `ngValue` if you need complex models (`number`, `object`, ...).
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {string=} ngChange Angular expression to be executed when input changes due to user
	   *    interaction with the input element.
	   * @param {string} ngValue Angular expression to which `ngModel` will be be set when the radio
	   *    is selected. Should be used instead of the `value` attribute if you need
	   *    a non-string `ngModel` (`boolean`, `array`, ...).
	   *
	   * @example
	      <example name="radio-input-directive" module="radioExample">
	        <file name="index.html">
	         <script>
	           angular.module('radioExample', [])
	             .controller('ExampleController', ['$scope', function($scope) {
	               $scope.color = {
	                 name: 'blue'
	               };
	               $scope.specialValue = {
	                 "id": "12345",
	                 "value": "green"
	               };
	             }]);
	         </script>
	         <form name="myForm" ng-controller="ExampleController">
	           <label>
	             <input type="radio" ng-model="color.name" value="red">
	             Red
	           </label><br/>
	           <label>
	             <input type="radio" ng-model="color.name" ng-value="specialValue">
	             Green
	           </label><br/>
	           <label>
	             <input type="radio" ng-model="color.name" value="blue">
	             Blue
	           </label><br/>
	           <tt>color = {{color.name | json}}</tt><br/>
	          </form>
	          Note that `ng-value="specialValue"` sets radio item's value to be the value of `$scope.specialValue`.
	        </file>
	        <file name="protractor.js" type="protractor">
	          it('should change state', function() {
	            var inputs = element.all(by.model('color.name'));
	            var color = element(by.binding('color.name'));
	
	            expect(color.getText()).toContain('blue');
	
	            inputs.get(0).click();
	            expect(color.getText()).toContain('red');
	
	            inputs.get(1).click();
	            expect(color.getText()).toContain('green');
	          });
	        </file>
	      </example>
	   */
	  'radio': radioInputType,
	
	  /**
	   * @ngdoc input
	   * @name input[range]
	   *
	   * @description
	   * Native range input with validation and transformation.
	   *
	   * The model for the range input must always be a `Number`.
	   *
	   * IE9 and other browsers that do not support the `range` type fall back
	   * to a text input without any default values for `min`, `max` and `step`. Model binding,
	   * validation and number parsing are nevertheless supported.
	   *
	   * Browsers that support range (latest Chrome, Safari, Firefox, Edge) treat `input[range]`
	   * in a way that never allows the input to hold an invalid value. That means:
	   * - any non-numerical value is set to `(max + min) / 2`.
	   * - any numerical value that is less than the current min val, or greater than the current max val
	   * is set to the min / max val respectively.
	   * - additionally, the current `step` is respected, so the nearest value that satisfies a step
	   * is used.
	   *
	   * See the [HTML Spec on input[type=range]](https://www.w3.org/TR/html5/forms.html#range-state-(type=range))
	   * for more info.
	   *
	   * This has the following consequences for Angular:
	   *
	   * Since the element value should always reflect the current model value, a range input
	   * will set the bound ngModel expression to the value that the browser has set for the
	   * input element. For example, in the following input `<input type="range" ng-model="model.value">`,
	   * if the application sets `model.value = null`, the browser will set the input to `'50'`.
	   * Angular will then set the model to `50`, to prevent input and model value being out of sync.
	   *
	   * That means the model for range will immediately be set to `50` after `ngModel` has been
	   * initialized. It also means a range input can never have the required error.
	   *
	   * This does not only affect changes to the model value, but also to the values of the `min`,
	   * `max`, and `step` attributes. When these change in a way that will cause the browser to modify
	   * the input value, Angular will also update the model value.
	   *
	   * Automatic value adjustment also means that a range input element can never have the `required`,
	   * `min`, or `max` errors.
	   *
	   * However, `step` is currently only fully implemented by Firefox. Other browsers have problems
	   * when the step value changes dynamically - they do not adjust the element value correctly, but
	   * instead may set the `stepMismatch` error. If that's the case, the Angular will set the `step`
	   * error on the input, and set the model to `undefined`.
	   *
	   * Note that `input[range]` is not compatible with`ngMax`, `ngMin`, and `ngStep`, because they do
	   * not set the `min` and `max` attributes, which means that the browser won't automatically adjust
	   * the input value based on their values, and will always assume min = 0, max = 100, and step = 1.
	   *
	   * @param {string}  ngModel Assignable angular expression to data-bind to.
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {string=} min Sets the `min` validation to ensure that the value entered is greater
	   *                  than `min`. Can be interpolated.
	   * @param {string=} max Sets the `max` validation to ensure that the value entered is less than `max`.
	   *                  Can be interpolated.
	   * @param {string=} step Sets the `step` validation to ensure that the value entered matches the `step`
	   *                  Can be interpolated.
	   * @param {string=} ngChange Angular expression to be executed when the ngModel value changes due
	   *                  to user interaction with the input element.
	   * @param {expression=} ngChecked If the expression is truthy, then the `checked` attribute will be set on the
	   *                      element. **Note** : `ngChecked` should not be used alongside `ngModel`.
	   *                      Checkout {@link ng.directive:ngChecked ngChecked} for usage.
	   *
	   * @example
	      <example name="range-input-directive" module="rangeExample">
	        <file name="index.html">
	          <script>
	            angular.module('rangeExample', [])
	              .controller('ExampleController', ['$scope', function($scope) {
	                $scope.value = 75;
	                $scope.min = 10;
	                $scope.max = 90;
	              }]);
	          </script>
	          <form name="myForm" ng-controller="ExampleController">
	
	            Model as range: <input type="range" name="range" ng-model="value" min="{{min}}"  max="{{max}}">
	            <hr>
	            Model as number: <input type="number" ng-model="value"><br>
	            Min: <input type="number" ng-model="min"><br>
	            Max: <input type="number" ng-model="max"><br>
	            value = <code>{{value}}</code><br/>
	            myForm.range.$valid = <code>{{myForm.range.$valid}}</code><br/>
	            myForm.range.$error = <code>{{myForm.range.$error}}</code>
	          </form>
	        </file>
	      </example>
	
	   * ## Range Input with ngMin & ngMax attributes
	
	   * @example
	      <example name="range-input-directive-ng" module="rangeExample">
	        <file name="index.html">
	          <script>
	            angular.module('rangeExample', [])
	              .controller('ExampleController', ['$scope', function($scope) {
	                $scope.value = 75;
	                $scope.min = 10;
	                $scope.max = 90;
	              }]);
	          </script>
	          <form name="myForm" ng-controller="ExampleController">
	            Model as range: <input type="range" name="range" ng-model="value" ng-min="min" ng-max="max">
	            <hr>
	            Model as number: <input type="number" ng-model="value"><br>
	            Min: <input type="number" ng-model="min"><br>
	            Max: <input type="number" ng-model="max"><br>
	            value = <code>{{value}}</code><br/>
	            myForm.range.$valid = <code>{{myForm.range.$valid}}</code><br/>
	            myForm.range.$error = <code>{{myForm.range.$error}}</code>
	          </form>
	        </file>
	      </example>
	
	   */
	  'range': rangeInputType,
	
	  /**
	   * @ngdoc input
	   * @name input[checkbox]
	   *
	   * @description
	   * HTML checkbox.
	   *
	   * @param {string} ngModel Assignable angular expression to data-bind to.
	   * @param {string=} name Property name of the form under which the control is published.
	   * @param {expression=} ngTrueValue The value to which the expression should be set when selected.
	   * @param {expression=} ngFalseValue The value to which the expression should be set when not selected.
	   * @param {string=} ngChange Angular expression to be executed when input changes due to user
	   *    interaction with the input element.
	   *
	   * @example
	      <example name="checkbox-input-directive" module="checkboxExample">
	        <file name="index.html">
	         <script>
	           angular.module('checkboxExample', [])
	             .controller('ExampleController', ['$scope', function($scope) {
	               $scope.checkboxModel = {
	                value1 : true,
	                value2 : 'YES'
	              };
	             }]);
	         </script>
	         <form name="myForm" ng-controller="ExampleController">
	           <label>Value1:
	             <input type="checkbox" ng-model="checkboxModel.value1">
	           </label><br/>
	           <label>Value2:
	             <input type="checkbox" ng-model="checkboxModel.value2"
	                    ng-true-value="'YES'" ng-false-value="'NO'">
	            </label><br/>
	           <tt>value1 = {{checkboxModel.value1}}</tt><br/>
	           <tt>value2 = {{checkboxModel.value2}}</tt><br/>
	          </form>
	        </file>
	        <file name="protractor.js" type="protractor">
	          it('should change state', function() {
	            var value1 = element(by.binding('checkboxModel.value1'));
	            var value2 = element(by.binding('checkboxModel.value2'));
	
	            expect(value1.getText()).toContain('true');
	            expect(value2.getText()).toContain('YES');
	
	            element(by.model('checkboxModel.value1')).click();
	            element(by.model('checkboxModel.value2')).click();
	
	            expect(value1.getText()).toContain('false');
	            expect(value2.getText()).toContain('NO');
	          });
	        </file>
	      </example>
	   */
	  'checkbox': checkboxInputType,
	
	  'hidden': noop,
	  'button': noop,
	  'submit': noop,
	  'reset': noop,
	  'file': noop
	};
	
	function stringBasedInputType(ctrl) {
	  ctrl.$formatters.push(function(value) {
	    return ctrl.$isEmpty(value) ? value : value.toString();
	  });
	}
	
	function textInputType(scope, element, attr, ctrl, $sniffer, $browser) {
	  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
	  stringBasedInputType(ctrl);
	}
	
	function baseInputType(scope, element, attr, ctrl, $sniffer, $browser) {
	  var type = lowercase(element[0].type);
	
	  // In composition mode, users are still inputting intermediate text buffer,
	  // hold the listener until composition is done.
	  // More about composition events: https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent
	  if (!$sniffer.android) {
	    var composing = false;
	
	    element.on('compositionstart', function() {
	      composing = true;
	    });
	
	    element.on('compositionend', function() {
	      composing = false;
	      listener();
	    });
	  }
	
	  var timeout;
	
	  var listener = function(ev) {
	    if (timeout) {
	      $browser.defer.cancel(timeout);
	      timeout = null;
	    }
	    if (composing) return;
	    var value = element.val(),
	        event = ev && ev.type;
	
	    // By default we will trim the value
	    // If the attribute ng-trim exists we will avoid trimming
	    // If input type is 'password', the value is never trimmed
	    if (type !== 'password' && (!attr.ngTrim || attr.ngTrim !== 'false')) {
	      value = trim(value);
	    }
	
	    // If a control is suffering from bad input (due to native validators), browsers discard its
	    // value, so it may be necessary to revalidate (by calling $setViewValue again) even if the
	    // control's value is the same empty value twice in a row.
	    if (ctrl.$viewValue !== value || (value === '' && ctrl.$$hasNativeValidators)) {
	      ctrl.$setViewValue(value, event);
	    }
	  };
	
	  // if the browser does support "input" event, we are fine - except on IE9 which doesn't fire the
	  // input event on backspace, delete or cut
	  if ($sniffer.hasEvent('input')) {
	    element.on('input', listener);
	  } else {
	    var deferListener = function(ev, input, origValue) {
	      if (!timeout) {
	        timeout = $browser.defer(function() {
	          timeout = null;
	          if (!input || input.value !== origValue) {
	            listener(ev);
	          }
	        });
	      }
	    };
	
	    element.on('keydown', /** @this */ function(event) {
	      var key = event.keyCode;
	
	      // ignore
	      //    command            modifiers                   arrows
	      if (key === 91 || (15 < key && key < 19) || (37 <= key && key <= 40)) return;
	
	      deferListener(event, this, this.value);
	    });
	
	    // if user modifies input value using context menu in IE, we need "paste" and "cut" events to catch it
	    if ($sniffer.hasEvent('paste')) {
	      element.on('paste cut', deferListener);
	    }
	  }
	
	  // if user paste into input using mouse on older browser
	  // or form autocomplete on newer browser, we need "change" event to catch it
	  element.on('change', listener);
	
	  // Some native input types (date-family) have the ability to change validity without
	  // firing any input/change events.
	  // For these event types, when native validators are present and the browser supports the type,
	  // check for validity changes on various DOM events.
	  if (PARTIAL_VALIDATION_TYPES[type] && ctrl.$$hasNativeValidators && type === attr.type) {
	    element.on(PARTIAL_VALIDATION_EVENTS, /** @this */ function(ev) {
	      if (!timeout) {
	        var validity = this[VALIDITY_STATE_PROPERTY];
	        var origBadInput = validity.badInput;
	        var origTypeMismatch = validity.typeMismatch;
	        timeout = $browser.defer(function() {
	          timeout = null;
	          if (validity.badInput !== origBadInput || validity.typeMismatch !== origTypeMismatch) {
	            listener(ev);
	          }
	        });
	      }
	    });
	  }
	
	  ctrl.$render = function() {
	    // Workaround for Firefox validation #12102.
	    var value = ctrl.$isEmpty(ctrl.$viewValue) ? '' : ctrl.$viewValue;
	    if (element.val() !== value) {
	      element.val(value);
	    }
	  };
	}
	
	function weekParser(isoWeek, existingDate) {
	  if (isDate(isoWeek)) {
	    return isoWeek;
	  }
	
	  if (isString(isoWeek)) {
	    WEEK_REGEXP.lastIndex = 0;
	    var parts = WEEK_REGEXP.exec(isoWeek);
	    if (parts) {
	      var year = +parts[1],
	          week = +parts[2],
	          hours = 0,
	          minutes = 0,
	          seconds = 0,
	          milliseconds = 0,
	          firstThurs = getFirstThursdayOfYear(year),
	          addDays = (week - 1) * 7;
	
	      if (existingDate) {
	        hours = existingDate.getHours();
	        minutes = existingDate.getMinutes();
	        seconds = existingDate.getSeconds();
	        milliseconds = existingDate.getMilliseconds();
	      }
	
	      return new Date(year, 0, firstThurs.getDate() + addDays, hours, minutes, seconds, milliseconds);
	    }
	  }
	
	  return NaN;
	}
	
	function createDateParser(regexp, mapping) {
	  return function(iso, date) {
	    var parts, map;
	
	    if (isDate(iso)) {
	      return iso;
	    }
	
	    if (isString(iso)) {
	      // When a date is JSON'ified to wraps itself inside of an extra
	      // set of double quotes. This makes the date parsing code unable
	      // to match the date string and parse it as a date.
	      if (iso.charAt(0) === '"' && iso.charAt(iso.length - 1) === '"') {
	        iso = iso.substring(1, iso.length - 1);
	      }
	      if (ISO_DATE_REGEXP.test(iso)) {
	        return new Date(iso);
	      }
	      regexp.lastIndex = 0;
	      parts = regexp.exec(iso);
	
	      if (parts) {
	        parts.shift();
	        if (date) {
	          map = {
	            yyyy: date.getFullYear(),
	            MM: date.getMonth() + 1,
	            dd: date.getDate(),
	            HH: date.getHours(),
	            mm: date.getMinutes(),
	            ss: date.getSeconds(),
	            sss: date.getMilliseconds() / 1000
	          };
	        } else {
	          map = { yyyy: 1970, MM: 1, dd: 1, HH: 0, mm: 0, ss: 0, sss: 0 };
	        }
	
	        forEach(parts, function(part, index) {
	          if (index < mapping.length) {
	            map[mapping[index]] = +part;
	          }
	        });
	        return new Date(map.yyyy, map.MM - 1, map.dd, map.HH, map.mm, map.ss || 0, map.sss * 1000 || 0);
	      }
	    }
	
	    return NaN;
	  };
	}
	
	function createDateInputType(type, regexp, parseDate, format) {
	  return function dynamicDateInputType(scope, element, attr, ctrl, $sniffer, $browser, $filter) {
	    badInputChecker(scope, element, attr, ctrl);
	    baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
	    var timezone = ctrl && ctrl.$options.getOption('timezone');
	    var previousDate;
	
	    ctrl.$$parserName = type;
	    ctrl.$parsers.push(function(value) {
	      if (ctrl.$isEmpty(value)) return null;
	      if (regexp.test(value)) {
	        // Note: We cannot read ctrl.$modelValue, as there might be a different
	        // parser/formatter in the processing chain so that the model
	        // contains some different data format!
	        var parsedDate = parseDate(value, previousDate);
	        if (timezone) {
	          parsedDate = convertTimezoneToLocal(parsedDate, timezone);
	        }
	        return parsedDate;
	      }
	      return undefined;
	    });
	
	    ctrl.$formatters.push(function(value) {
	      if (value && !isDate(value)) {
	        throw ngModelMinErr('datefmt', 'Expected `{0}` to be a date', value);
	      }
	      if (isValidDate(value)) {
	        previousDate = value;
	        if (previousDate && timezone) {
	          previousDate = convertTimezoneToLocal(previousDate, timezone, true);
	        }
	        return $filter('date')(value, format, timezone);
	      } else {
	        previousDate = null;
	        return '';
	      }
	    });
	
	    if (isDefined(attr.min) || attr.ngMin) {
	      var minVal;
	      ctrl.$validators.min = function(value) {
	        return !isValidDate(value) || isUndefined(minVal) || parseDate(value) >= minVal;
	      };
	      attr.$observe('min', function(val) {
	        minVal = parseObservedDateValue(val);
	        ctrl.$validate();
	      });
	    }
	
	    if (isDefined(attr.max) || attr.ngMax) {
	      var maxVal;
	      ctrl.$validators.max = function(value) {
	        return !isValidDate(value) || isUndefined(maxVal) || parseDate(value) <= maxVal;
	      };
	      attr.$observe('max', function(val) {
	        maxVal = parseObservedDateValue(val);
	        ctrl.$validate();
	      });
	    }
	
	    function isValidDate(value) {
	      // Invalid Date: getTime() returns NaN
	      return value && !(value.getTime && value.getTime() !== value.getTime());
	    }
	
	    function parseObservedDateValue(val) {
	      return isDefined(val) && !isDate(val) ? parseDate(val) || undefined : val;
	    }
	  };
	}
	
	function badInputChecker(scope, element, attr, ctrl) {
	  var node = element[0];
	  var nativeValidation = ctrl.$$hasNativeValidators = isObject(node.validity);
	  if (nativeValidation) {
	    ctrl.$parsers.push(function(value) {
	      var validity = element.prop(VALIDITY_STATE_PROPERTY) || {};
	      return validity.badInput || validity.typeMismatch ? undefined : value;
	    });
	  }
	}
	
	function numberFormatterParser(ctrl) {
	  ctrl.$$parserName = 'number';
	  ctrl.$parsers.push(function(value) {
	    if (ctrl.$isEmpty(value))      return null;
	    if (NUMBER_REGEXP.test(value)) return parseFloat(value);
	    return undefined;
	  });
	
	  ctrl.$formatters.push(function(value) {
	    if (!ctrl.$isEmpty(value)) {
	      if (!isNumber(value)) {
	        throw ngModelMinErr('numfmt', 'Expected `{0}` to be a number', value);
	      }
	      value = value.toString();
	    }
	    return value;
	  });
	}
	
	function parseNumberAttrVal(val) {
	  if (isDefined(val) && !isNumber(val)) {
	    val = parseFloat(val);
	  }
	  return !isNumberNaN(val) ? val : undefined;
	}
	
	function isNumberInteger(num) {
	  // See http://stackoverflow.com/questions/14636536/how-to-check-if-a-variable-is-an-integer-in-javascript#14794066
	  // (minus the assumption that `num` is a number)
	
	  // eslint-disable-next-line no-bitwise
	  return (num | 0) === num;
	}
	
	function countDecimals(num) {
	  var numString = num.toString();
	  var decimalSymbolIndex = numString.indexOf('.');
	
	  if (decimalSymbolIndex === -1) {
	    if (-1 < num && num < 1) {
	      // It may be in the exponential notation format (`1e-X`)
	      var match = /e-(\d+)$/.exec(numString);
	
	      if (match) {
	        return Number(match[1]);
	      }
	    }
	
	    return 0;
	  }
	
	  return numString.length - decimalSymbolIndex - 1;
	}
	
	function isValidForStep(viewValue, stepBase, step) {
	  // At this point `stepBase` and `step` are expected to be non-NaN values
	  // and `viewValue` is expected to be a valid stringified number.
	  var value = Number(viewValue);
	
	  // Due to limitations in Floating Point Arithmetic (e.g. `0.3 - 0.2 !== 0.1` or
	  // `0.5 % 0.1 !== 0`), we need to convert all numbers to integers.
	  if (!isNumberInteger(value) || !isNumberInteger(stepBase) || !isNumberInteger(step)) {
	    var decimalCount = Math.max(countDecimals(value), countDecimals(stepBase), countDecimals(step));
	    var multiplier = Math.pow(10, decimalCount);
	
	    value = value * multiplier;
	    stepBase = stepBase * multiplier;
	    step = step * multiplier;
	  }
	
	  return (value - stepBase) % step === 0;
	}
	
	function numberInputType(scope, element, attr, ctrl, $sniffer, $browser) {
	  badInputChecker(scope, element, attr, ctrl);
	  numberFormatterParser(ctrl);
	  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
	
	  var minVal;
	  var maxVal;
	
	  if (isDefined(attr.min) || attr.ngMin) {
	    ctrl.$validators.min = function(value) {
	      return ctrl.$isEmpty(value) || isUndefined(minVal) || value >= minVal;
	    };
	
	    attr.$observe('min', function(val) {
	      minVal = parseNumberAttrVal(val);
	      // TODO(matsko): implement validateLater to reduce number of validations
	      ctrl.$validate();
	    });
	  }
	
	  if (isDefined(attr.max) || attr.ngMax) {
	    ctrl.$validators.max = function(value) {
	      return ctrl.$isEmpty(value) || isUndefined(maxVal) || value <= maxVal;
	    };
	
	    attr.$observe('max', function(val) {
	      maxVal = parseNumberAttrVal(val);
	      // TODO(matsko): implement validateLater to reduce number of validations
	      ctrl.$validate();
	    });
	  }
	
	  if (isDefined(attr.step) || attr.ngStep) {
	    var stepVal;
	    ctrl.$validators.step = function(modelValue, viewValue) {
	      return ctrl.$isEmpty(viewValue) || isUndefined(stepVal) ||
	             isValidForStep(viewValue, minVal || 0, stepVal);
	    };
	
	    attr.$observe('step', function(val) {
	      stepVal = parseNumberAttrVal(val);
	      // TODO(matsko): implement validateLater to reduce number of validations
	      ctrl.$validate();
	    });
	  }
	}
	
	function rangeInputType(scope, element, attr, ctrl, $sniffer, $browser) {
	  badInputChecker(scope, element, attr, ctrl);
	  numberFormatterParser(ctrl);
	  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
	
	  var supportsRange = ctrl.$$hasNativeValidators && element[0].type === 'range',
	      minVal = supportsRange ? 0 : undefined,
	      maxVal = supportsRange ? 100 : undefined,
	      stepVal = supportsRange ? 1 : undefined,
	      validity = element[0].validity,
	      hasMinAttr = isDefined(attr.min),
	      hasMaxAttr = isDefined(attr.max),
	      hasStepAttr = isDefined(attr.step);
	
	  var originalRender = ctrl.$render;
	
	  ctrl.$render = supportsRange && isDefined(validity.rangeUnderflow) && isDefined(validity.rangeOverflow) ?
	    //Browsers that implement range will set these values automatically, but reading the adjusted values after
	    //$render would cause the min / max validators to be applied with the wrong value
	    function rangeRender() {
	      originalRender();
	      ctrl.$setViewValue(element.val());
	    } :
	    originalRender;
	
	  if (hasMinAttr) {
	    ctrl.$validators.min = supportsRange ?
	      // Since all browsers set the input to a valid value, we don't need to check validity
	      function noopMinValidator() { return true; } :
	      // non-support browsers validate the min val
	      function minValidator(modelValue, viewValue) {
	        return ctrl.$isEmpty(viewValue) || isUndefined(minVal) || viewValue >= minVal;
	      };
	
	    setInitialValueAndObserver('min', minChange);
	  }
	
	  if (hasMaxAttr) {
	    ctrl.$validators.max = supportsRange ?
	      // Since all browsers set the input to a valid value, we don't need to check validity
	      function noopMaxValidator() { return true; } :
	      // non-support browsers validate the max val
	      function maxValidator(modelValue, viewValue) {
	        return ctrl.$isEmpty(viewValue) || isUndefined(maxVal) || viewValue <= maxVal;
	      };
	
	    setInitialValueAndObserver('max', maxChange);
	  }
	
	  if (hasStepAttr) {
	    ctrl.$validators.step = supportsRange ?
	      function nativeStepValidator() {
	        // Currently, only FF implements the spec on step change correctly (i.e. adjusting the
	        // input element value to a valid value). It's possible that other browsers set the stepMismatch
	        // validity error instead, so we can at least report an error in that case.
	        return !validity.stepMismatch;
	      } :
	      // ngStep doesn't set the setp attr, so the browser doesn't adjust the input value as setting step would
	      function stepValidator(modelValue, viewValue) {
	        return ctrl.$isEmpty(viewValue) || isUndefined(stepVal) ||
	               isValidForStep(viewValue, minVal || 0, stepVal);
	      };
	
	    setInitialValueAndObserver('step', stepChange);
	  }
	
	  function setInitialValueAndObserver(htmlAttrName, changeFn) {
	    // interpolated attributes set the attribute value only after a digest, but we need the
	    // attribute value when the input is first rendered, so that the browser can adjust the
	    // input value based on the min/max value
	    element.attr(htmlAttrName, attr[htmlAttrName]);
	    attr.$observe(htmlAttrName, changeFn);
	  }
	
	  function minChange(val) {
	    minVal = parseNumberAttrVal(val);
	    // ignore changes before model is initialized
	    if (isNumberNaN(ctrl.$modelValue)) {
	      return;
	    }
	
	    if (supportsRange) {
	      var elVal = element.val();
	      // IE11 doesn't set the el val correctly if the minVal is greater than the element value
	      if (minVal > elVal) {
	        elVal = minVal;
	        element.val(elVal);
	      }
	      ctrl.$setViewValue(elVal);
	    } else {
	      // TODO(matsko): implement validateLater to reduce number of validations
	      ctrl.$validate();
	    }
	  }
	
	  function maxChange(val) {
	    maxVal = parseNumberAttrVal(val);
	    // ignore changes before model is initialized
	    if (isNumberNaN(ctrl.$modelValue)) {
	      return;
	    }
	
	    if (supportsRange) {
	      var elVal = element.val();
	      // IE11 doesn't set the el val correctly if the maxVal is less than the element value
	      if (maxVal < elVal) {
	        element.val(maxVal);
	        // IE11 and Chrome don't set the value to the minVal when max < min
	        elVal = maxVal < minVal ? minVal : maxVal;
	      }
	      ctrl.$setViewValue(elVal);
	    } else {
	      // TODO(matsko): implement validateLater to reduce number of validations
	      ctrl.$validate();
	    }
	  }
	
	  function stepChange(val) {
	    stepVal = parseNumberAttrVal(val);
	    // ignore changes before model is initialized
	    if (isNumberNaN(ctrl.$modelValue)) {
	      return;
	    }
	
	    // Some browsers don't adjust the input value correctly, but set the stepMismatch error
	    if (supportsRange && ctrl.$viewValue !== element.val()) {
	      ctrl.$setViewValue(element.val());
	    } else {
	      // TODO(matsko): implement validateLater to reduce number of validations
	      ctrl.$validate();
	    }
	  }
	}
	
	function urlInputType(scope, element, attr, ctrl, $sniffer, $browser) {
	  // Note: no badInputChecker here by purpose as `url` is only a validation
	  // in browsers, i.e. we can always read out input.value even if it is not valid!
	  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
	  stringBasedInputType(ctrl);
	
	  ctrl.$$parserName = 'url';
	  ctrl.$validators.url = function(modelValue, viewValue) {
	    var value = modelValue || viewValue;
	    return ctrl.$isEmpty(value) || URL_REGEXP.test(value);
	  };
	}
	
	function emailInputType(scope, element, attr, ctrl, $sniffer, $browser) {
	  // Note: no badInputChecker here by purpose as `url` is only a validation
	  // in browsers, i.e. we can always read out input.value even if it is not valid!
	  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
	  stringBasedInputType(ctrl);
	
	  ctrl.$$parserName = 'email';
	  ctrl.$validators.email = function(modelValue, viewValue) {
	    var value = modelValue || viewValue;
	    return ctrl.$isEmpty(value) || EMAIL_REGEXP.test(value);
	  };
	}
	
	function radioInputType(scope, element, attr, ctrl) {
	  var doTrim = !attr.ngTrim || trim(attr.ngTrim) !== 'false';
	  // make the name unique, if not defined
	  if (isUndefined(attr.name)) {
	    element.attr('name', nextUid());
	  }
	
	  var listener = function(ev) {
	    var value;
	    if (element[0].checked) {
	      value = attr.value;
	      if (doTrim) {
	        value = trim(value);
	      }
	      ctrl.$setViewValue(value, ev && ev.type);
	    }
	  };
	
	  element.on('click', listener);
	
	  ctrl.$render = function() {
	    var value = attr.value;
	    if (doTrim) {
	      value = trim(value);
	    }
	    element[0].checked = (value === ctrl.$viewValue);
	  };
	
	  attr.$observe('value', ctrl.$render);
	}
	
	function parseConstantExpr($parse, context, name, expression, fallback) {
	  var parseFn;
	  if (isDefined(expression)) {
	    parseFn = $parse(expression);
	    if (!parseFn.constant) {
	      throw ngModelMinErr('constexpr', 'Expected constant expression for `{0}`, but saw ' +
	                                   '`{1}`.', name, expression);
	    }
	    return parseFn(context);
	  }
	  return fallback;
	}
	
	function checkboxInputType(scope, element, attr, ctrl, $sniffer, $browser, $filter, $parse) {
	  var trueValue = parseConstantExpr($parse, scope, 'ngTrueValue', attr.ngTrueValue, true);
	  var falseValue = parseConstantExpr($parse, scope, 'ngFalseValue', attr.ngFalseValue, false);
	
	  var listener = function(ev) {
	    ctrl.$setViewValue(element[0].checked, ev && ev.type);
	  };
	
	  element.on('click', listener);
	
	  ctrl.$render = function() {
	    element[0].checked = ctrl.$viewValue;
	  };
	
	  // Override the standard `$isEmpty` because the $viewValue of an empty checkbox is always set to `false`
	  // This is because of the parser below, which compares the `$modelValue` with `trueValue` to convert
	  // it to a boolean.
	  ctrl.$isEmpty = function(value) {
	    return value === false;
	  };
	
	  ctrl.$formatters.push(function(value) {
	    return equals(value, trueValue);
	  });
	
	  ctrl.$parsers.push(function(value) {
	    return value ? trueValue : falseValue;
	  });
	}
	
	
	/**
	 * @ngdoc directive
	 * @name textarea
	 * @restrict E
	 *
	 * @description
	 * HTML textarea element control with angular data-binding. The data-binding and validation
	 * properties of this element are exactly the same as those of the
	 * {@link ng.directive:input input element}.
	 *
	 * @param {string} ngModel Assignable angular expression to data-bind to.
	 * @param {string=} name Property name of the form under which the control is published.
	 * @param {string=} required Sets `required` validation error key if the value is not entered.
	 * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	 *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	 *    `required` when you want to data-bind to the `required` attribute.
	 * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
	 *    minlength.
	 * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
	 *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of any
	 *    length.
	 * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel {@link ngModel.NgModelController#$viewValue $viewValue}
	 *    does not match a RegExp found by evaluating the Angular expression given in the attribute value.
	 *    If the expression evaluates to a RegExp object, then this is used directly.
	 *    If the expression evaluates to a string, then it will be converted to a RegExp
	 *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
	 *    `new RegExp('^abc$')`.<br />
	 *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
	 *    start at the index of the last search's match, thus not taking the whole input value into
	 *    account.
	 * @param {string=} ngChange Angular expression to be executed when input changes due to user
	 *    interaction with the input element.
	 * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.
	 *
	 * @knownIssue
	 *
	 * When specifying the `placeholder` attribute of `<textarea>`, Internet Explorer will temporarily
	 * insert the placeholder value as the textarea's content. If the placeholder value contains
	 * interpolation (`{{ ... }}`), an error will be logged in the console when Angular tries to update
	 * the value of the by-then-removed text node. This doesn't affect the functionality of the
	 * textarea, but can be undesirable.
	 *
	 * You can work around this Internet Explorer issue by using `ng-attr-placeholder` instead of
	 * `placeholder` on textareas, whenever you need interpolation in the placeholder value. You can
	 * find more details on `ngAttr` in the
	 * [Interpolation](guide/interpolation#-ngattr-for-binding-to-arbitrary-attributes) section of the
	 * Developer Guide.
	 */
	
	
	/**
	 * @ngdoc directive
	 * @name input
	 * @restrict E
	 *
	 * @description
	 * HTML input element control. When used together with {@link ngModel `ngModel`}, it provides data-binding,
	 * input state control, and validation.
	 * Input control follows HTML5 input types and polyfills the HTML5 validation behavior for older browsers.
	 *
	 * <div class="alert alert-warning">
	 * **Note:** Not every feature offered is available for all input types.
	 * Specifically, data binding and event handling via `ng-model` is unsupported for `input[file]`.
	 * </div>
	 *
	 * @param {string} ngModel Assignable angular expression to data-bind to.
	 * @param {string=} name Property name of the form under which the control is published.
	 * @param {string=} required Sets `required` validation error key if the value is not entered.
	 * @param {boolean=} ngRequired Sets `required` attribute if set to true
	 * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
	 *    minlength.
	 * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
	 *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of any
	 *    length.
	 * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel {@link ngModel.NgModelController#$viewValue $viewValue}
	 *    value does not match a RegExp found by evaluating the Angular expression given in the attribute value.
	 *    If the expression evaluates to a RegExp object, then this is used directly.
	 *    If the expression evaluates to a string, then it will be converted to a RegExp
	 *    after wrapping it in `^` and `$` characters. For instance, `"abc"` will be converted to
	 *    `new RegExp('^abc$')`.<br />
	 *    **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
	 *    start at the index of the last search's match, thus not taking the whole input value into
	 *    account.
	 * @param {string=} ngChange Angular expression to be executed when input changes due to user
	 *    interaction with the input element.
	 * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.
	 *    This parameter is ignored for input[type=password] controls, which will never trim the
	 *    input.
	 *
	 * @example
	    <example name="input-directive" module="inputExample">
	      <file name="index.html">
	       <script>
	          angular.module('inputExample', [])
	            .controller('ExampleController', ['$scope', function($scope) {
	              $scope.user = {name: 'guest', last: 'visitor'};
	            }]);
	       </script>
	       <div ng-controller="ExampleController">
	         <form name="myForm">
	           <label>
	              User name:
	              <input type="text" name="userName" ng-model="user.name" required>
	           </label>
	           <div role="alert">
	             <span class="error" ng-show="myForm.userName.$error.required">
	              Required!</span>
	           </div>
	           <label>
	              Last name:
	              <input type="text" name="lastName" ng-model="user.last"
	              ng-minlength="3" ng-maxlength="10">
	           </label>
	           <div role="alert">
	             <span class="error" ng-show="myForm.lastName.$error.minlength">
	               Too short!</span>
	             <span class="error" ng-show="myForm.lastName.$error.maxlength">
	               Too long!</span>
	           </div>
	         </form>
	         <hr>
	         <tt>user = {{user}}</tt><br/>
	         <tt>myForm.userName.$valid = {{myForm.userName.$valid}}</tt><br/>
	         <tt>myForm.userName.$error = {{myForm.userName.$error}}</tt><br/>
	         <tt>myForm.lastName.$valid = {{myForm.lastName.$valid}}</tt><br/>
	         <tt>myForm.lastName.$error = {{myForm.lastName.$error}}</tt><br/>
	         <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	         <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	         <tt>myForm.$error.minlength = {{!!myForm.$error.minlength}}</tt><br/>
	         <tt>myForm.$error.maxlength = {{!!myForm.$error.maxlength}}</tt><br/>
	       </div>
	      </file>
	      <file name="protractor.js" type="protractor">
	        var user = element(by.exactBinding('user'));
	        var userNameValid = element(by.binding('myForm.userName.$valid'));
	        var lastNameValid = element(by.binding('myForm.lastName.$valid'));
	        var lastNameError = element(by.binding('myForm.lastName.$error'));
	        var formValid = element(by.binding('myForm.$valid'));
	        var userNameInput = element(by.model('user.name'));
	        var userLastInput = element(by.model('user.last'));
	
	        it('should initialize to model', function() {
	          expect(user.getText()).toContain('{"name":"guest","last":"visitor"}');
	          expect(userNameValid.getText()).toContain('true');
	          expect(formValid.getText()).toContain('true');
	        });
	
	        it('should be invalid if empty when required', function() {
	          userNameInput.clear();
	          userNameInput.sendKeys('');
	
	          expect(user.getText()).toContain('{"last":"visitor"}');
	          expect(userNameValid.getText()).toContain('false');
	          expect(formValid.getText()).toContain('false');
	        });
	
	        it('should be valid if empty when min length is set', function() {
	          userLastInput.clear();
	          userLastInput.sendKeys('');
	
	          expect(user.getText()).toContain('{"name":"guest","last":""}');
	          expect(lastNameValid.getText()).toContain('true');
	          expect(formValid.getText()).toContain('true');
	        });
	
	        it('should be invalid if less than required min length', function() {
	          userLastInput.clear();
	          userLastInput.sendKeys('xx');
	
	          expect(user.getText()).toContain('{"name":"guest"}');
	          expect(lastNameValid.getText()).toContain('false');
	          expect(lastNameError.getText()).toContain('minlength');
	          expect(formValid.getText()).toContain('false');
	        });
	
	        it('should be invalid if longer than max length', function() {
	          userLastInput.clear();
	          userLastInput.sendKeys('some ridiculously long name');
	
	          expect(user.getText()).toContain('{"name":"guest"}');
	          expect(lastNameValid.getText()).toContain('false');
	          expect(lastNameError.getText()).toContain('maxlength');
	          expect(formValid.getText()).toContain('false');
	        });
	      </file>
	    </example>
	 */
	var inputDirective = ['$browser', '$sniffer', '$filter', '$parse',
	    function($browser, $sniffer, $filter, $parse) {
	  return {
	    restrict: 'E',
	    require: ['?ngModel'],
	    link: {
	      pre: function(scope, element, attr, ctrls) {
	        if (ctrls[0]) {
	          (inputType[lowercase(attr.type)] || inputType.text)(scope, element, attr, ctrls[0], $sniffer,
	                                                              $browser, $filter, $parse);
	        }
	      }
	    }
	  };
	}];
	
	
	
	var CONSTANT_VALUE_REGEXP = /^(true|false|\d+)$/;
	/**
	 * @ngdoc directive
	 * @name ngValue
	 *
	 * @description
	 * Binds the given expression to the value of the element.
	 *
	 * It is mainly used on {@link input[radio] `input[radio]`} and option elements,
	 * so that when the element is selected, the {@link ngModel `ngModel`} of that element (or its
	 * {@link select `select`} parent element) is set to the bound value. It is especially useful
	 * for dynamically generated lists using {@link ngRepeat `ngRepeat`}, as shown below.
	 *
	 * It can also be used to achieve one-way binding of a given expression to an input element
	 * such as an `input[text]` or a `textarea`, when that element does not use ngModel.
	 *
	 * @element input
	 * @param {string=} ngValue angular expression, whose value will be bound to the `value` attribute
	 * and `value` property of the element.
	 *
	 * @example
	    <example name="ngValue-directive" module="valueExample">
	      <file name="index.html">
	       <script>
	          angular.module('valueExample', [])
	            .controller('ExampleController', ['$scope', function($scope) {
	              $scope.names = ['pizza', 'unicorns', 'robots'];
	              $scope.my = { favorite: 'unicorns' };
	            }]);
	       </script>
	        <form ng-controller="ExampleController">
	          <h2>Which is your favorite?</h2>
	            <label ng-repeat="name in names" for="{{name}}">
	              {{name}}
	              <input type="radio"
	                     ng-model="my.favorite"
	                     ng-value="name"
	                     id="{{name}}"
	                     name="favorite">
	            </label>
	          <div>You chose {{my.favorite}}</div>
	        </form>
	      </file>
	      <file name="protractor.js" type="protractor">
	        var favorite = element(by.binding('my.favorite'));
	
	        it('should initialize to model', function() {
	          expect(favorite.getText()).toContain('unicorns');
	        });
	        it('should bind the values to the inputs', function() {
	          element.all(by.model('my.favorite')).get(0).click();
	          expect(favorite.getText()).toContain('pizza');
	        });
	      </file>
	    </example>
	 */
	var ngValueDirective = function() {
	  /**
	   *  inputs use the value attribute as their default value if the value property is not set.
	   *  Once the value property has been set (by adding input), it will not react to changes to
	   *  the value attribute anymore. Setting both attribute and property fixes this behavior, and
	   *  makes it possible to use ngValue as a sort of one-way bind.
	   */
	  function updateElementValue(element, attr, value) {
	    element.prop('value', value);
	    attr.$set('value', value);
	  }
	
	  return {
	    restrict: 'A',
	    priority: 100,
	    compile: function(tpl, tplAttr) {
	      if (CONSTANT_VALUE_REGEXP.test(tplAttr.ngValue)) {
	        return function ngValueConstantLink(scope, elm, attr) {
	          var value = scope.$eval(attr.ngValue);
	          updateElementValue(elm, attr, value);
	        };
	      } else {
	        return function ngValueLink(scope, elm, attr) {
	          scope.$watch(attr.ngValue, function valueWatchAction(value) {
	            updateElementValue(elm, attr, value);
	          });
	        };
	      }
	    }
	  };
	};
	
	/**
	 * @ngdoc directive
	 * @name ngBind
	 * @restrict AC
	 *
	 * @description
	 * The `ngBind` attribute tells Angular to replace the text content of the specified HTML element
	 * with the value of a given expression, and to update the text content when the value of that
	 * expression changes.
	 *
	 * Typically, you don't use `ngBind` directly, but instead you use the double curly markup like
	 * `{{ expression }}` which is similar but less verbose.
	 *
	 * It is preferable to use `ngBind` instead of `{{ expression }}` if a template is momentarily
	 * displayed by the browser in its raw state before Angular compiles it. Since `ngBind` is an
	 * element attribute, it makes the bindings invisible to the user while the page is loading.
	 *
	 * An alternative solution to this problem would be using the
	 * {@link ng.directive:ngCloak ngCloak} directive.
	 *
	 *
	 * @element ANY
	 * @param {expression} ngBind {@link guide/expression Expression} to evaluate.
	 *
	 * @example
	 * Enter a name in the Live Preview text box; the greeting below the text box changes instantly.
	   <example module="bindExample" name="ng-bind">
	     <file name="index.html">
	       <script>
	         angular.module('bindExample', [])
	           .controller('ExampleController', ['$scope', function($scope) {
	             $scope.name = 'Whirled';
	           }]);
	       </script>
	       <div ng-controller="ExampleController">
	         <label>Enter name: <input type="text" ng-model="name"></label><br>
	         Hello <span ng-bind="name"></span>!
	       </div>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should check ng-bind', function() {
	         var nameInput = element(by.model('name'));
	
	         expect(element(by.binding('name')).getText()).toBe('Whirled');
	         nameInput.clear();
	         nameInput.sendKeys('world');
	         expect(element(by.binding('name')).getText()).toBe('world');
	       });
	     </file>
	   </example>
	 */
	var ngBindDirective = ['$compile', function($compile) {
	  return {
	    restrict: 'AC',
	    compile: function ngBindCompile(templateElement) {
	      $compile.$$addBindingClass(templateElement);
	      return function ngBindLink(scope, element, attr) {
	        $compile.$$addBindingInfo(element, attr.ngBind);
	        element = element[0];
	        scope.$watch(attr.ngBind, function ngBindWatchAction(value) {
	          element.textContent = stringify(value);
	        });
	      };
	    }
	  };
	}];
	
	
	/**
	 * @ngdoc directive
	 * @name ngBindTemplate
	 *
	 * @description
	 * The `ngBindTemplate` directive specifies that the element
	 * text content should be replaced with the interpolation of the template
	 * in the `ngBindTemplate` attribute.
	 * Unlike `ngBind`, the `ngBindTemplate` can contain multiple `{{` `}}`
	 * expressions. This directive is needed since some HTML elements
	 * (such as TITLE and OPTION) cannot contain SPAN elements.
	 *
	 * @element ANY
	 * @param {string} ngBindTemplate template of form
	 *   <tt>{{</tt> <tt>expression</tt> <tt>}}</tt> to eval.
	 *
	 * @example
	 * Try it here: enter text in text box and watch the greeting change.
	   <example module="bindExample" name="ng-bind-template">
	     <file name="index.html">
	       <script>
	         angular.module('bindExample', [])
	           .controller('ExampleController', ['$scope', function($scope) {
	             $scope.salutation = 'Hello';
	             $scope.name = 'World';
	           }]);
	       </script>
	       <div ng-controller="ExampleController">
	        <label>Salutation: <input type="text" ng-model="salutation"></label><br>
	        <label>Name: <input type="text" ng-model="name"></label><br>
	        <pre ng-bind-template="{{salutation}} {{name}}!"></pre>
	       </div>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should check ng-bind', function() {
	         var salutationElem = element(by.binding('salutation'));
	         var salutationInput = element(by.model('salutation'));
	         var nameInput = element(by.model('name'));
	
	         expect(salutationElem.getText()).toBe('Hello World!');
	
	         salutationInput.clear();
	         salutationInput.sendKeys('Greetings');
	         nameInput.clear();
	         nameInput.sendKeys('user');
	
	         expect(salutationElem.getText()).toBe('Greetings user!');
	       });
	     </file>
	   </example>
	 */
	var ngBindTemplateDirective = ['$interpolate', '$compile', function($interpolate, $compile) {
	  return {
	    compile: function ngBindTemplateCompile(templateElement) {
	      $compile.$$addBindingClass(templateElement);
	      return function ngBindTemplateLink(scope, element, attr) {
	        var interpolateFn = $interpolate(element.attr(attr.$attr.ngBindTemplate));
	        $compile.$$addBindingInfo(element, interpolateFn.expressions);
	        element = element[0];
	        attr.$observe('ngBindTemplate', function(value) {
	          element.textContent = isUndefined(value) ? '' : value;
	        });
	      };
	    }
	  };
	}];
	
	
	/**
	 * @ngdoc directive
	 * @name ngBindHtml
	 *
	 * @description
	 * Evaluates the expression and inserts the resulting HTML into the element in a secure way. By default,
	 * the resulting HTML content will be sanitized using the {@link ngSanitize.$sanitize $sanitize} service.
	 * To utilize this functionality, ensure that `$sanitize` is available, for example, by including {@link
	 * ngSanitize} in your module's dependencies (not in core Angular). In order to use {@link ngSanitize}
	 * in your module's dependencies, you need to include "angular-sanitize.js" in your application.
	 *
	 * You may also bypass sanitization for values you know are safe. To do so, bind to
	 * an explicitly trusted value via {@link ng.$sce#trustAsHtml $sce.trustAsHtml}.  See the example
	 * under {@link ng.$sce#show-me-an-example-using-sce- Strict Contextual Escaping (SCE)}.
	 *
	 * Note: If a `$sanitize` service is unavailable and the bound value isn't explicitly trusted, you
	 * will have an exception (instead of an exploit.)
	 *
	 * @element ANY
	 * @param {expression} ngBindHtml {@link guide/expression Expression} to evaluate.
	 *
	 * @example
	
	   <example module="bindHtmlExample" deps="angular-sanitize.js" name="ng-bind-html">
	     <file name="index.html">
	       <div ng-controller="ExampleController">
	        <p ng-bind-html="myHTML"></p>
	       </div>
	     </file>
	
	     <file name="script.js">
	       angular.module('bindHtmlExample', ['ngSanitize'])
	         .controller('ExampleController', ['$scope', function($scope) {
	           $scope.myHTML =
	              'I am an <code>HTML</code>string with ' +
	              '<a href="#">links!</a> and other <em>stuff</em>';
	         }]);
	     </file>
	
	     <file name="protractor.js" type="protractor">
	       it('should check ng-bind-html', function() {
	         expect(element(by.binding('myHTML')).getText()).toBe(
	             'I am an HTMLstring with links! and other stuff');
	       });
	     </file>
	   </example>
	 */
	var ngBindHtmlDirective = ['$sce', '$parse', '$compile', function($sce, $parse, $compile) {
	  return {
	    restrict: 'A',
	    compile: function ngBindHtmlCompile(tElement, tAttrs) {
	      var ngBindHtmlGetter = $parse(tAttrs.ngBindHtml);
	      var ngBindHtmlWatch = $parse(tAttrs.ngBindHtml, function sceValueOf(val) {
	        // Unwrap the value to compare the actual inner safe value, not the wrapper object.
	        return $sce.valueOf(val);
	      });
	      $compile.$$addBindingClass(tElement);
	
	      return function ngBindHtmlLink(scope, element, attr) {
	        $compile.$$addBindingInfo(element, attr.ngBindHtml);
	
	        scope.$watch(ngBindHtmlWatch, function ngBindHtmlWatchAction() {
	          // The watched value is the unwrapped value. To avoid re-escaping, use the direct getter.
	          var value = ngBindHtmlGetter(scope);
	          element.html($sce.getTrustedHtml(value) || '');
	        });
	      };
	    }
	  };
	}];
	
	/**
	 * @ngdoc directive
	 * @name ngChange
	 *
	 * @description
	 * Evaluate the given expression when the user changes the input.
	 * The expression is evaluated immediately, unlike the JavaScript onchange event
	 * which only triggers at the end of a change (usually, when the user leaves the
	 * form element or presses the return key).
	 *
	 * The `ngChange` expression is only evaluated when a change in the input value causes
	 * a new value to be committed to the model.
	 *
	 * It will not be evaluated:
	 * * if the value returned from the `$parsers` transformation pipeline has not changed
	 * * if the input has continued to be invalid since the model will stay `null`
	 * * if the model is changed programmatically and not by a change to the input value
	 *
	 *
	 * Note, this directive requires `ngModel` to be present.
	 *
	 * @element input
	 * @param {expression} ngChange {@link guide/expression Expression} to evaluate upon change
	 * in input value.
	 *
	 * @example
	 * <example name="ngChange-directive" module="changeExample">
	 *   <file name="index.html">
	 *     <script>
	 *       angular.module('changeExample', [])
	 *         .controller('ExampleController', ['$scope', function($scope) {
	 *           $scope.counter = 0;
	 *           $scope.change = function() {
	 *             $scope.counter++;
	 *           };
	 *         }]);
	 *     </script>
	 *     <div ng-controller="ExampleController">
	 *       <input type="checkbox" ng-model="confirmed" ng-change="change()" id="ng-change-example1" />
	 *       <input type="checkbox" ng-model="confirmed" id="ng-change-example2" />
	 *       <label for="ng-change-example2">Confirmed</label><br />
	 *       <tt>debug = {{confirmed}}</tt><br/>
	 *       <tt>counter = {{counter}}</tt><br/>
	 *     </div>
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	 *     var counter = element(by.binding('counter'));
	 *     var debug = element(by.binding('confirmed'));
	 *
	 *     it('should evaluate the expression if changing from view', function() {
	 *       expect(counter.getText()).toContain('0');
	 *
	 *       element(by.id('ng-change-example1')).click();
	 *
	 *       expect(counter.getText()).toContain('1');
	 *       expect(debug.getText()).toContain('true');
	 *     });
	 *
	 *     it('should not evaluate the expression if changing from model', function() {
	 *       element(by.id('ng-change-example2')).click();
	
	 *       expect(counter.getText()).toContain('0');
	 *       expect(debug.getText()).toContain('true');
	 *     });
	 *   </file>
	 * </example>
	 */
	var ngChangeDirective = valueFn({
	  restrict: 'A',
	  require: 'ngModel',
	  link: function(scope, element, attr, ctrl) {
	    ctrl.$viewChangeListeners.push(function() {
	      scope.$eval(attr.ngChange);
	    });
	  }
	});
	
	/* exported
	  ngClassDirective,
	  ngClassEvenDirective,
	  ngClassOddDirective
	*/
	
	function classDirective(name, selector) {
	  name = 'ngClass' + name;
	  var indexWatchExpression;
	
	  return ['$parse', function($parse) {
	    return {
	      restrict: 'AC',
	      link: function(scope, element, attr) {
	        var expression = attr[name].trim();
	        var isOneTime = (expression.charAt(0) === ':') && (expression.charAt(1) === ':');
	
	        var watchInterceptor = isOneTime ? toFlatValue : toClassString;
	        var watchExpression = $parse(expression, watchInterceptor);
	        var watchAction = isOneTime ? ngClassOneTimeWatchAction : ngClassWatchAction;
	
	        var classCounts = element.data('$classCounts');
	        var oldModulo = true;
	        var oldClassString;
	
	        if (!classCounts) {
	          // Use createMap() to prevent class assumptions involving property
	          // names in Object.prototype
	          classCounts = createMap();
	          element.data('$classCounts', classCounts);
	        }
	
	        if (name !== 'ngClass') {
	          if (!indexWatchExpression) {
	            indexWatchExpression = $parse('$index', function moduloTwo($index) {
	              // eslint-disable-next-line no-bitwise
	              return $index & 1;
	            });
	          }
	
	          scope.$watch(indexWatchExpression, ngClassIndexWatchAction);
	        }
	
	        scope.$watch(watchExpression, watchAction, isOneTime);
	
	        function addClasses(classString) {
	          classString = digestClassCounts(split(classString), 1);
	          attr.$addClass(classString);
	        }
	
	        function removeClasses(classString) {
	          classString = digestClassCounts(split(classString), -1);
	          attr.$removeClass(classString);
	        }
	
	        function updateClasses(oldClassString, newClassString) {
	          var oldClassArray = split(oldClassString);
	          var newClassArray = split(newClassString);
	
	          var toRemoveArray = arrayDifference(oldClassArray, newClassArray);
	          var toAddArray = arrayDifference(newClassArray, oldClassArray);
	
	          var toRemoveString = digestClassCounts(toRemoveArray, -1);
	          var toAddString = digestClassCounts(toAddArray, 1);
	
	          attr.$addClass(toAddString);
	          attr.$removeClass(toRemoveString);
	        }
	
	        function digestClassCounts(classArray, count) {
	          var classesToUpdate = [];
	
	          forEach(classArray, function(className) {
	            if (count > 0 || classCounts[className]) {
	              classCounts[className] = (classCounts[className] || 0) + count;
	              if (classCounts[className] === +(count > 0)) {
	                classesToUpdate.push(className);
	              }
	            }
	          });
	
	          return classesToUpdate.join(' ');
	        }
	
	        function ngClassIndexWatchAction(newModulo) {
	          // This watch-action should run before the `ngClass[OneTime]WatchAction()`, thus it
	          // adds/removes `oldClassString`. If the `ngClass` expression has changed as well, the
	          // `ngClass[OneTime]WatchAction()` will update the classes.
	          if (newModulo === selector) {
	            addClasses(oldClassString);
	          } else {
	            removeClasses(oldClassString);
	          }
	
	          oldModulo = newModulo;
	        }
	
	        function ngClassOneTimeWatchAction(newClassValue) {
	          var newClassString = toClassString(newClassValue);
	
	          if (newClassString !== oldClassString) {
	            ngClassWatchAction(newClassString);
	          }
	        }
	
	        function ngClassWatchAction(newClassString) {
	          if (oldModulo === selector) {
	            updateClasses(oldClassString, newClassString);
	          }
	
	          oldClassString = newClassString;
	        }
	      }
	    };
	  }];
	
	  // Helpers
	  function arrayDifference(tokens1, tokens2) {
	    if (!tokens1 || !tokens1.length) return [];
	    if (!tokens2 || !tokens2.length) return tokens1;
	
	    var values = [];
	
	    outer:
	    for (var i = 0; i < tokens1.length; i++) {
	      var token = tokens1[i];
	      for (var j = 0; j < tokens2.length; j++) {
	        if (token === tokens2[j]) continue outer;
	      }
	      values.push(token);
	    }
	
	    return values;
	  }
	
	  function split(classString) {
	    return classString && classString.split(' ');
	  }
	
	  function toClassString(classValue) {
	    var classString = classValue;
	
	    if (isArray(classValue)) {
	      classString = classValue.map(toClassString).join(' ');
	    } else if (isObject(classValue)) {
	      classString = Object.keys(classValue).
	        filter(function(key) { return classValue[key]; }).
	        join(' ');
	    }
	
	    return classString;
	  }
	
	  function toFlatValue(classValue) {
	    var flatValue = classValue;
	
	    if (isArray(classValue)) {
	      flatValue = classValue.map(toFlatValue);
	    } else if (isObject(classValue)) {
	      var hasUndefined = false;
	
	      flatValue = Object.keys(classValue).filter(function(key) {
	        var value = classValue[key];
	
	        if (!hasUndefined && isUndefined(value)) {
	          hasUndefined = true;
	        }
	
	        return value;
	      });
	
	      if (hasUndefined) {
	        // Prevent the `oneTimeLiteralWatchInterceptor` from unregistering
	        // the watcher, by including at least one `undefined` value.
	        flatValue.push(undefined);
	      }
	    }
	
	    return flatValue;
	  }
	}
	
	/**
	 * @ngdoc directive
	 * @name ngClass
	 * @restrict AC
	 *
	 * @description
	 * The `ngClass` directive allows you to dynamically set CSS classes on an HTML element by databinding
	 * an expression that represents all classes to be added.
	 *
	 * The directive operates in three different ways, depending on which of three types the expression
	 * evaluates to:
	 *
	 * 1. If the expression evaluates to a string, the string should be one or more space-delimited class
	 * names.
	 *
	 * 2. If the expression evaluates to an object, then for each key-value pair of the
	 * object with a truthy value the corresponding key is used as a class name.
	 *
	 * 3. If the expression evaluates to an array, each element of the array should either be a string as in
	 * type 1 or an object as in type 2. This means that you can mix strings and objects together in an array
	 * to give you more control over what CSS classes appear. See the code below for an example of this.
	 *
	 *
	 * The directive won't add duplicate classes if a particular class was already set.
	 *
	 * When the expression changes, the previously added classes are removed and only then are the
	 * new classes added.
	 *
	 * @knownIssue
	 * You should not use {@link guide/interpolation interpolation} in the value of the `class`
	 * attribute, when using the `ngClass` directive on the same element.
	 * See {@link guide/interpolation#known-issues here} for more info.
	 *
	 * @animations
	 * | Animation                        | Occurs                              |
	 * |----------------------------------|-------------------------------------|
	 * | {@link ng.$animate#addClass addClass}       | just before the class is applied to the element   |
	 * | {@link ng.$animate#removeClass removeClass} | just before the class is removed from the element |
	 *
	 * @element ANY
	 * @param {expression} ngClass {@link guide/expression Expression} to eval. The result
	 *   of the evaluation can be a string representing space delimited class
	 *   names, an array, or a map of class names to boolean values. In the case of a map, the
	 *   names of the properties whose values are truthy will be added as css classes to the
	 *   element.
	 *
	 * @example Example that demonstrates basic bindings via ngClass directive.
	   <example name="ng-class">
	     <file name="index.html">
	       <p ng-class="{strike: deleted, bold: important, 'has-error': error}">Map Syntax Example</p>
	       <label>
	          <input type="checkbox" ng-model="deleted">
	          deleted (apply "strike" class)
	       </label><br>
	       <label>
	          <input type="checkbox" ng-model="important">
	          important (apply "bold" class)
	       </label><br>
	       <label>
	          <input type="checkbox" ng-model="error">
	          error (apply "has-error" class)
	       </label>
	       <hr>
	       <p ng-class="style">Using String Syntax</p>
	       <input type="text" ng-model="style"
	              placeholder="Type: bold strike red" aria-label="Type: bold strike red">
	       <hr>
	       <p ng-class="[style1, style2, style3]">Using Array Syntax</p>
	       <input ng-model="style1"
	              placeholder="Type: bold, strike or red" aria-label="Type: bold, strike or red"><br>
	       <input ng-model="style2"
	              placeholder="Type: bold, strike or red" aria-label="Type: bold, strike or red 2"><br>
	       <input ng-model="style3"
	              placeholder="Type: bold, strike or red" aria-label="Type: bold, strike or red 3"><br>
	       <hr>
	       <p ng-class="[style4, {orange: warning}]">Using Array and Map Syntax</p>
	       <input ng-model="style4" placeholder="Type: bold, strike" aria-label="Type: bold, strike"><br>
	       <label><input type="checkbox" ng-model="warning"> warning (apply "orange" class)</label>
	     </file>
	     <file name="style.css">
	       .strike {
	           text-decoration: line-through;
	       }
	       .bold {
	           font-weight: bold;
	       }
	       .red {
	           color: red;
	       }
	       .has-error {
	           color: red;
	           background-color: yellow;
	       }
	       .orange {
	           color: orange;
	       }
	     </file>
	     <file name="protractor.js" type="protractor">
	       var ps = element.all(by.css('p'));
	
	       it('should let you toggle the class', function() {
	
	         expect(ps.first().getAttribute('class')).not.toMatch(/bold/);
	         expect(ps.first().getAttribute('class')).not.toMatch(/has-error/);
	
	         element(by.model('important')).click();
	         expect(ps.first().getAttribute('class')).toMatch(/bold/);
	
	         element(by.model('error')).click();
	         expect(ps.first().getAttribute('class')).toMatch(/has-error/);
	       });
	
	       it('should let you toggle string example', function() {
	         expect(ps.get(1).getAttribute('class')).toBe('');
	         element(by.model('style')).clear();
	         element(by.model('style')).sendKeys('red');
	         expect(ps.get(1).getAttribute('class')).toBe('red');
	       });
	
	       it('array example should have 3 classes', function() {
	         expect(ps.get(2).getAttribute('class')).toBe('');
	         element(by.model('style1')).sendKeys('bold');
	         element(by.model('style2')).sendKeys('strike');
	         element(by.model('style3')).sendKeys('red');
	         expect(ps.get(2).getAttribute('class')).toBe('bold strike red');
	       });
	
	       it('array with map example should have 2 classes', function() {
	         expect(ps.last().getAttribute('class')).toBe('');
	         element(by.model('style4')).sendKeys('bold');
	         element(by.model('warning')).click();
	         expect(ps.last().getAttribute('class')).toBe('bold orange');
	       });
	     </file>
	   </example>
	
	   ## Animations
	
	   The example below demonstrates how to perform animations using ngClass.
	
	   <example module="ngAnimate" deps="angular-animate.js" animations="true" name="ng-class">
	     <file name="index.html">
	      <input id="setbtn" type="button" value="set" ng-click="myVar='my-class'">
	      <input id="clearbtn" type="button" value="clear" ng-click="myVar=''">
	      <br>
	      <span class="base-class" ng-class="myVar">Sample Text</span>
	     </file>
	     <file name="style.css">
	       .base-class {
	         transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
	       }
	
	       .base-class.my-class {
	         color: red;
	         font-size:3em;
	       }
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should check ng-class', function() {
	         expect(element(by.css('.base-class')).getAttribute('class')).not.
	           toMatch(/my-class/);
	
	         element(by.id('setbtn')).click();
	
	         expect(element(by.css('.base-class')).getAttribute('class')).
	           toMatch(/my-class/);
	
	         element(by.id('clearbtn')).click();
	
	         expect(element(by.css('.base-class')).getAttribute('class')).not.
	           toMatch(/my-class/);
	       });
	     </file>
	   </example>
	
	
	   ## ngClass and pre-existing CSS3 Transitions/Animations
	   The ngClass directive still supports CSS3 Transitions/Animations even if they do not follow the ngAnimate CSS naming structure.
	   Upon animation ngAnimate will apply supplementary CSS classes to track the start and end of an animation, but this will not hinder
	   any pre-existing CSS transitions already on the element. To get an idea of what happens during a class-based animation, be sure
	   to view the step by step details of {@link $animate#addClass $animate.addClass} and
	   {@link $animate#removeClass $animate.removeClass}.
	 */
	var ngClassDirective = classDirective('', true);
	
	/**
	 * @ngdoc directive
	 * @name ngClassOdd
	 * @restrict AC
	 *
	 * @description
	 * The `ngClassOdd` and `ngClassEven` directives work exactly as
	 * {@link ng.directive:ngClass ngClass}, except they work in
	 * conjunction with `ngRepeat` and take effect only on odd (even) rows.
	 *
	 * This directive can be applied only within the scope of an
	 * {@link ng.directive:ngRepeat ngRepeat}.
	 *
	 * @element ANY
	 * @param {expression} ngClassOdd {@link guide/expression Expression} to eval. The result
	 *   of the evaluation can be a string representing space delimited class names or an array.
	 *
	 * @example
	   <example name="ng-class-odd">
	     <file name="index.html">
	        <ol ng-init="names=['John', 'Mary', 'Cate', 'Suz']">
	          <li ng-repeat="name in names">
	           <span ng-class-odd="'odd'" ng-class-even="'even'">
	             {{name}}
	           </span>
	          </li>
	        </ol>
	     </file>
	     <file name="style.css">
	       .odd {
	         color: red;
	       }
	       .even {
	         color: blue;
	       }
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should check ng-class-odd and ng-class-even', function() {
	         expect(element(by.repeater('name in names').row(0).column('name')).getAttribute('class')).
	           toMatch(/odd/);
	         expect(element(by.repeater('name in names').row(1).column('name')).getAttribute('class')).
	           toMatch(/even/);
	       });
	     </file>
	   </example>
	 */
	var ngClassOddDirective = classDirective('Odd', 0);
	
	/**
	 * @ngdoc directive
	 * @name ngClassEven
	 * @restrict AC
	 *
	 * @description
	 * The `ngClassOdd` and `ngClassEven` directives work exactly as
	 * {@link ng.directive:ngClass ngClass}, except they work in
	 * conjunction with `ngRepeat` and take effect only on odd (even) rows.
	 *
	 * This directive can be applied only within the scope of an
	 * {@link ng.directive:ngRepeat ngRepeat}.
	 *
	 * @element ANY
	 * @param {expression} ngClassEven {@link guide/expression Expression} to eval. The
	 *   result of the evaluation can be a string representing space delimited class names or an array.
	 *
	 * @example
	   <example name="ng-class-even">
	     <file name="index.html">
	        <ol ng-init="names=['John', 'Mary', 'Cate', 'Suz']">
	          <li ng-repeat="name in names">
	           <span ng-class-odd="'odd'" ng-class-even="'even'">
	             {{name}} &nbsp; &nbsp; &nbsp;
	           </span>
	          </li>
	        </ol>
	     </file>
	     <file name="style.css">
	       .odd {
	         color: red;
	       }
	       .even {
	         color: blue;
	       }
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should check ng-class-odd and ng-class-even', function() {
	         expect(element(by.repeater('name in names').row(0).column('name')).getAttribute('class')).
	           toMatch(/odd/);
	         expect(element(by.repeater('name in names').row(1).column('name')).getAttribute('class')).
	           toMatch(/even/);
	       });
	     </file>
	   </example>
	 */
	var ngClassEvenDirective = classDirective('Even', 1);
	
	/**
	 * @ngdoc directive
	 * @name ngCloak
	 * @restrict AC
	 *
	 * @description
	 * The `ngCloak` directive is used to prevent the Angular html template from being briefly
	 * displayed by the browser in its raw (uncompiled) form while your application is loading. Use this
	 * directive to avoid the undesirable flicker effect caused by the html template display.
	 *
	 * The directive can be applied to the `<body>` element, but the preferred usage is to apply
	 * multiple `ngCloak` directives to small portions of the page to permit progressive rendering
	 * of the browser view.
	 *
	 * `ngCloak` works in cooperation with the following css rule embedded within `angular.js` and
	 * `angular.min.js`.
	 * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).
	 *
	 * ```css
	 * [ng\:cloak], [ng-cloak], [data-ng-cloak], [x-ng-cloak], .ng-cloak, .x-ng-cloak {
	 *   display: none !important;
	 * }
	 * ```
	 *
	 * When this css rule is loaded by the browser, all html elements (including their children) that
	 * are tagged with the `ngCloak` directive are hidden. When Angular encounters this directive
	 * during the compilation of the template it deletes the `ngCloak` element attribute, making
	 * the compiled element visible.
	 *
	 * For the best result, the `angular.js` script must be loaded in the head section of the html
	 * document; alternatively, the css rule above must be included in the external stylesheet of the
	 * application.
	 *
	 * @element ANY
	 *
	 * @example
	   <example name="ng-cloak">
	     <file name="index.html">
	        <div id="template1" ng-cloak>{{ 'hello' }}</div>
	        <div id="template2" class="ng-cloak">{{ 'world' }}</div>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should remove the template directive and css class', function() {
	         expect($('#template1').getAttribute('ng-cloak')).
	           toBeNull();
	         expect($('#template2').getAttribute('ng-cloak')).
	           toBeNull();
	       });
	     </file>
	   </example>
	 *
	 */
	var ngCloakDirective = ngDirective({
	  compile: function(element, attr) {
	    attr.$set('ngCloak', undefined);
	    element.removeClass('ng-cloak');
	  }
	});
	
	/**
	 * @ngdoc directive
	 * @name ngController
	 *
	 * @description
	 * The `ngController` directive attaches a controller class to the view. This is a key aspect of how angular
	 * supports the principles behind the Model-View-Controller design pattern.
	 *
	 * MVC components in angular:
	 *
	 * * Model — Models are the properties of a scope; scopes are attached to the DOM where scope properties
	 *   are accessed through bindings.
	 * * View — The template (HTML with data bindings) that is rendered into the View.
	 * * Controller — The `ngController` directive specifies a Controller class; the class contains business
	 *   logic behind the application to decorate the scope with functions and values
	 *
	 * Note that you can also attach controllers to the DOM by declaring it in a route definition
	 * via the {@link ngRoute.$route $route} service. A common mistake is to declare the controller
	 * again using `ng-controller` in the template itself.  This will cause the controller to be attached
	 * and executed twice.
	 *
	 * @element ANY
	 * @scope
	 * @priority 500
	 * @param {expression} ngController Name of a constructor function registered with the current
	 * {@link ng.$controllerProvider $controllerProvider} or an {@link guide/expression expression}
	 * that on the current scope evaluates to a constructor function.
	 *
	 * The controller instance can be published into a scope property by specifying
	 * `ng-controller="as propertyName"`.
	 *
	 * If the current `$controllerProvider` is configured to use globals (via
	 * {@link ng.$controllerProvider#allowGlobals `$controllerProvider.allowGlobals()` }), this may
	 * also be the name of a globally accessible constructor function (deprecated, not recommended).
	 *
	 * @example
	 * Here is a simple form for editing user contact information. Adding, removing, clearing, and
	 * greeting are methods declared on the controller (see source tab). These methods can
	 * easily be called from the angular markup. Any changes to the data are automatically reflected
	 * in the View without the need for a manual update.
	 *
	 * Two different declaration styles are included below:
	 *
	 * * one binds methods and properties directly onto the controller using `this`:
	 * `ng-controller="SettingsController1 as settings"`
	 * * one injects `$scope` into the controller:
	 * `ng-controller="SettingsController2"`
	 *
	 * The second option is more common in the Angular community, and is generally used in boilerplates
	 * and in this guide. However, there are advantages to binding properties directly to the controller
	 * and avoiding scope.
	 *
	 * * Using `controller as` makes it obvious which controller you are accessing in the template when
	 * multiple controllers apply to an element.
	 * * If you are writing your controllers as classes you have easier access to the properties and
	 * methods, which will appear on the scope, from inside the controller code.
	 * * Since there is always a `.` in the bindings, you don't have to worry about prototypal
	 * inheritance masking primitives.
	 *
	 * This example demonstrates the `controller as` syntax.
	 *
	 * <example name="ngControllerAs" module="controllerAsExample">
	 *   <file name="index.html">
	 *    <div id="ctrl-as-exmpl" ng-controller="SettingsController1 as settings">
	 *      <label>Name: <input type="text" ng-model="settings.name"/></label>
	 *      <button ng-click="settings.greet()">greet</button><br/>
	 *      Contact:
	 *      <ul>
	 *        <li ng-repeat="contact in settings.contacts">
	 *          <select ng-model="contact.type" aria-label="Contact method" id="select_{{$index}}">
	 *             <option>phone</option>
	 *             <option>email</option>
	 *          </select>
	 *          <input type="text" ng-model="contact.value" aria-labelledby="select_{{$index}}" />
	 *          <button ng-click="settings.clearContact(contact)">clear</button>
	 *          <button ng-click="settings.removeContact(contact)" aria-label="Remove">X</button>
	 *        </li>
	 *        <li><button ng-click="settings.addContact()">add</button></li>
	 *     </ul>
	 *    </div>
	 *   </file>
	 *   <file name="app.js">
	 *    angular.module('controllerAsExample', [])
	 *      .controller('SettingsController1', SettingsController1);
	 *
	 *    function SettingsController1() {
	 *      this.name = 'John Smith';
	 *      this.contacts = [
	 *        {type: 'phone', value: '408 555 1212'},
	 *        {type: 'email', value: 'john.smith@example.org'}
	 *      ];
	 *    }
	 *
	 *    SettingsController1.prototype.greet = function() {
	 *      alert(this.name);
	 *    };
	 *
	 *    SettingsController1.prototype.addContact = function() {
	 *      this.contacts.push({type: 'email', value: 'yourname@example.org'});
	 *    };
	 *
	 *    SettingsController1.prototype.removeContact = function(contactToRemove) {
	 *     var index = this.contacts.indexOf(contactToRemove);
	 *      this.contacts.splice(index, 1);
	 *    };
	 *
	 *    SettingsController1.prototype.clearContact = function(contact) {
	 *      contact.type = 'phone';
	 *      contact.value = '';
	 *    };
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	 *     it('should check controller as', function() {
	 *       var container = element(by.id('ctrl-as-exmpl'));
	 *         expect(container.element(by.model('settings.name'))
	 *           .getAttribute('value')).toBe('John Smith');
	 *
	 *       var firstRepeat =
	 *           container.element(by.repeater('contact in settings.contacts').row(0));
	 *       var secondRepeat =
	 *           container.element(by.repeater('contact in settings.contacts').row(1));
	 *
	 *       expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
	 *           .toBe('408 555 1212');
	 *
	 *       expect(secondRepeat.element(by.model('contact.value')).getAttribute('value'))
	 *           .toBe('john.smith@example.org');
	 *
	 *       firstRepeat.element(by.buttonText('clear')).click();
	 *
	 *       expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
	 *           .toBe('');
	 *
	 *       container.element(by.buttonText('add')).click();
	 *
	 *       expect(container.element(by.repeater('contact in settings.contacts').row(2))
	 *           .element(by.model('contact.value'))
	 *           .getAttribute('value'))
	 *           .toBe('yourname@example.org');
	 *     });
	 *   </file>
	 * </example>
	 *
	 * This example demonstrates the "attach to `$scope`" style of controller.
	 *
	 * <example name="ngController" module="controllerExample">
	 *  <file name="index.html">
	 *   <div id="ctrl-exmpl" ng-controller="SettingsController2">
	 *     <label>Name: <input type="text" ng-model="name"/></label>
	 *     <button ng-click="greet()">greet</button><br/>
	 *     Contact:
	 *     <ul>
	 *       <li ng-repeat="contact in contacts">
	 *         <select ng-model="contact.type" id="select_{{$index}}">
	 *            <option>phone</option>
	 *            <option>email</option>
	 *         </select>
	 *         <input type="text" ng-model="contact.value" aria-labelledby="select_{{$index}}" />
	 *         <button ng-click="clearContact(contact)">clear</button>
	 *         <button ng-click="removeContact(contact)">X</button>
	 *       </li>
	 *       <li>[ <button ng-click="addContact()">add</button> ]</li>
	 *    </ul>
	 *   </div>
	 *  </file>
	 *  <file name="app.js">
	 *   angular.module('controllerExample', [])
	 *     .controller('SettingsController2', ['$scope', SettingsController2]);
	 *
	 *   function SettingsController2($scope) {
	 *     $scope.name = 'John Smith';
	 *     $scope.contacts = [
	 *       {type:'phone', value:'408 555 1212'},
	 *       {type:'email', value:'john.smith@example.org'}
	 *     ];
	 *
	 *     $scope.greet = function() {
	 *       alert($scope.name);
	 *     };
	 *
	 *     $scope.addContact = function() {
	 *       $scope.contacts.push({type:'email', value:'yourname@example.org'});
	 *     };
	 *
	 *     $scope.removeContact = function(contactToRemove) {
	 *       var index = $scope.contacts.indexOf(contactToRemove);
	 *       $scope.contacts.splice(index, 1);
	 *     };
	 *
	 *     $scope.clearContact = function(contact) {
	 *       contact.type = 'phone';
	 *       contact.value = '';
	 *     };
	 *   }
	 *  </file>
	 *  <file name="protractor.js" type="protractor">
	 *    it('should check controller', function() {
	 *      var container = element(by.id('ctrl-exmpl'));
	 *
	 *      expect(container.element(by.model('name'))
	 *          .getAttribute('value')).toBe('John Smith');
	 *
	 *      var firstRepeat =
	 *          container.element(by.repeater('contact in contacts').row(0));
	 *      var secondRepeat =
	 *          container.element(by.repeater('contact in contacts').row(1));
	 *
	 *      expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
	 *          .toBe('408 555 1212');
	 *      expect(secondRepeat.element(by.model('contact.value')).getAttribute('value'))
	 *          .toBe('john.smith@example.org');
	 *
	 *      firstRepeat.element(by.buttonText('clear')).click();
	 *
	 *      expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
	 *          .toBe('');
	 *
	 *      container.element(by.buttonText('add')).click();
	 *
	 *      expect(container.element(by.repeater('contact in contacts').row(2))
	 *          .element(by.model('contact.value'))
	 *          .getAttribute('value'))
	 *          .toBe('yourname@example.org');
	 *    });
	 *  </file>
	 *</example>
	
	 */
	var ngControllerDirective = [function() {
	  return {
	    restrict: 'A',
	    scope: true,
	    controller: '@',
	    priority: 500
	  };
	}];
	
	/**
	 * @ngdoc directive
	 * @name ngCsp
	 *
	 * @restrict A
	 * @element ANY
	 * @description
	 *
	 * Angular has some features that can conflict with certain restrictions that are applied when using
	 * [CSP (Content Security Policy)](https://developer.mozilla.org/en/Security/CSP) rules.
	 *
	 * If you intend to implement CSP with these rules then you must tell Angular not to use these
	 * features.
	 *
	 * This is necessary when developing things like Google Chrome Extensions or Universal Windows Apps.
	 *
	 *
	 * The following default rules in CSP affect Angular:
	 *
	 * * The use of `eval()`, `Function(string)` and similar functions to dynamically create and execute
	 * code from strings is forbidden. Angular makes use of this in the {@link $parse} service to
	 * provide a 30% increase in the speed of evaluating Angular expressions. (This CSP rule can be
	 * disabled with the CSP keyword `unsafe-eval`, but it is generally not recommended as it would
	 * weaken the protections offered by CSP.)
	 *
	 * * The use of inline resources, such as inline `<script>` and `<style>` elements, are forbidden.
	 * This prevents apps from injecting custom styles directly into the document. Angular makes use of
	 * this to include some CSS rules (e.g. {@link ngCloak} and {@link ngHide}). To make these
	 * directives work when a CSP rule is blocking inline styles, you must link to the `angular-csp.css`
	 * in your HTML manually. (This CSP rule can be disabled with the CSP keyword `unsafe-inline`, but
	 * it is generally not recommended as it would weaken the protections offered by CSP.)
	 *
	 * If you do not provide `ngCsp` then Angular tries to autodetect if CSP is blocking dynamic code
	 * creation from strings (e.g., `unsafe-eval` not specified in CSP header) and automatically
	 * deactivates this feature in the {@link $parse} service. This autodetection, however, triggers a
	 * CSP error to be logged in the console:
	 *
	 * ```
	 * Refused to evaluate a string as JavaScript because 'unsafe-eval' is not an allowed source of
	 * script in the following Content Security Policy directive: "default-src 'self'". Note that
	 * 'script-src' was not explicitly set, so 'default-src' is used as a fallback.
	 * ```
	 *
	 * This error is harmless but annoying. To prevent the error from showing up, put the `ngCsp`
	 * directive on an element of the HTML document that appears before the `<script>` tag that loads
	 * the `angular.js` file.
	 *
	 * *Note: This directive is only available in the `ng-csp` and `data-ng-csp` attribute form.*
	 *
	 * You can specify which of the CSP related Angular features should be deactivated by providing
	 * a value for the `ng-csp` attribute. The options are as follows:
	 *
	 * * no-inline-style: this stops Angular from injecting CSS styles into the DOM
	 *
	 * * no-unsafe-eval: this stops Angular from optimizing $parse with unsafe eval of strings
	 *
	 * You can use these values in the following combinations:
	 *
	 *
	 * * No declaration means that Angular will assume that you can do inline styles, but it will do
	 * a runtime check for unsafe-eval. E.g. `<body>`. This is backwardly compatible with previous
	 * versions of Angular.
	 *
	 * * A simple `ng-csp` (or `data-ng-csp`) attribute will tell Angular to deactivate both inline
	 * styles and unsafe eval. E.g. `<body ng-csp>`. This is backwardly compatible with previous
	 * versions of Angular.
	 *
	 * * Specifying only `no-unsafe-eval` tells Angular that we must not use eval, but that we can
	 * inject inline styles. E.g. `<body ng-csp="no-unsafe-eval">`.
	 *
	 * * Specifying only `no-inline-style` tells Angular that we must not inject styles, but that we can
	 * run eval - no automatic check for unsafe eval will occur. E.g. `<body ng-csp="no-inline-style">`
	 *
	 * * Specifying both `no-unsafe-eval` and `no-inline-style` tells Angular that we must not inject
	 * styles nor use eval, which is the same as an empty: ng-csp.
	 * E.g.`<body ng-csp="no-inline-style;no-unsafe-eval">`
	 *
	 * @example
	 * This example shows how to apply the `ngCsp` directive to the `html` tag.
	   ```html
	     <!doctype html>
	     <html ng-app ng-csp>
	     ...
	     ...
	     </html>
	   ```
	  * @example
	      <!-- Note: the `.csp` suffix in the example name triggers CSP mode in our http server! -->
	      <example name="example.csp" module="cspExample" ng-csp="true">
	        <file name="index.html">
	          <div ng-controller="MainController as ctrl">
	            <div>
	              <button ng-click="ctrl.inc()" id="inc">Increment</button>
	              <span id="counter">
	                {{ctrl.counter}}
	              </span>
	            </div>
	
	            <div>
	              <button ng-click="ctrl.evil()" id="evil">Evil</button>
	              <span id="evilError">
	                {{ctrl.evilError}}
	              </span>
	            </div>
	          </div>
	        </file>
	        <file name="script.js">
	           angular.module('cspExample', [])
	             .controller('MainController', function MainController() {
	                this.counter = 0;
	                this.inc = function() {
	                  this.counter++;
	                };
	                this.evil = function() {
	                  try {
	                    eval('1+2'); // eslint-disable-line no-eval
	                  } catch (e) {
	                    this.evilError = e.message;
	                  }
	                };
	              });
	        </file>
	        <file name="protractor.js" type="protractor">
	          var util, webdriver;
	
	          var incBtn = element(by.id('inc'));
	          var counter = element(by.id('counter'));
	          var evilBtn = element(by.id('evil'));
	          var evilError = element(by.id('evilError'));
	
	          function getAndClearSevereErrors() {
	            return browser.manage().logs().get('browser').then(function(browserLog) {
	              return browserLog.filter(function(logEntry) {
	                return logEntry.level.value > webdriver.logging.Level.WARNING.value;
	              });
	            });
	          }
	
	          function clearErrors() {
	            getAndClearSevereErrors();
	          }
	
	          function expectNoErrors() {
	            getAndClearSevereErrors().then(function(filteredLog) {
	              expect(filteredLog.length).toEqual(0);
	              if (filteredLog.length) {
	                console.log('browser console errors: ' + util.inspect(filteredLog));
	              }
	            });
	          }
	
	          function expectError(regex) {
	            getAndClearSevereErrors().then(function(filteredLog) {
	              var found = false;
	              filteredLog.forEach(function(log) {
	                if (log.message.match(regex)) {
	                  found = true;
	                }
	              });
	              if (!found) {
	                throw new Error('expected an error that matches ' + regex);
	              }
	            });
	          }
	
	          beforeEach(function() {
	            util = require('util');
	            webdriver = require('selenium-webdriver');
	          });
	
	          // For now, we only test on Chrome,
	          // as Safari does not load the page with Protractor's injected scripts,
	          // and Firefox webdriver always disables content security policy (#6358)
	          if (browser.params.browser !== 'chrome') {
	            return;
	          }
	
	          it('should not report errors when the page is loaded', function() {
	            // clear errors so we are not dependent on previous tests
	            clearErrors();
	            // Need to reload the page as the page is already loaded when
	            // we come here
	            browser.driver.getCurrentUrl().then(function(url) {
	              browser.get(url);
	            });
	            expectNoErrors();
	          });
	
	          it('should evaluate expressions', function() {
	            expect(counter.getText()).toEqual('0');
	            incBtn.click();
	            expect(counter.getText()).toEqual('1');
	            expectNoErrors();
	          });
	
	          it('should throw and report an error when using "eval"', function() {
	            evilBtn.click();
	            expect(evilError.getText()).toMatch(/Content Security Policy/);
	            expectError(/Content Security Policy/);
	          });
	        </file>
	      </example>
	  */
	
	// `ngCsp` is not implemented as a proper directive any more, because we need it be processed while
	// we bootstrap the app (before `$parse` is instantiated). For this reason, we just have the `csp()`
	// fn that looks for the `ng-csp` attribute anywhere in the current doc.
	
	/**
	 * @ngdoc directive
	 * @name ngClick
	 *
	 * @description
	 * The ngClick directive allows you to specify custom behavior when
	 * an element is clicked.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngClick {@link guide/expression Expression} to evaluate upon
	 * click. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example name="ng-click">
	     <file name="index.html">
	      <button ng-click="count = count + 1" ng-init="count=0">
	        Increment
	      </button>
	      <span>
	        count: {{count}}
	      </span>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should check ng-click', function() {
	         expect(element(by.binding('count')).getText()).toMatch('0');
	         element(by.css('button')).click();
	         expect(element(by.binding('count')).getText()).toMatch('1');
	       });
	     </file>
	   </example>
	 */
	/*
	 * A collection of directives that allows creation of custom event handlers that are defined as
	 * angular expressions and are compiled and executed within the current scope.
	 */
	var ngEventDirectives = {};
	
	// For events that might fire synchronously during DOM manipulation
	// we need to execute their event handlers asynchronously using $evalAsync,
	// so that they are not executed in an inconsistent state.
	var forceAsyncEvents = {
	  'blur': true,
	  'focus': true
	};
	forEach(
	  'click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste'.split(' '),
	  function(eventName) {
	    var directiveName = directiveNormalize('ng-' + eventName);
	    ngEventDirectives[directiveName] = ['$parse', '$rootScope', function($parse, $rootScope) {
	      return {
	        restrict: 'A',
	        compile: function($element, attr) {
	          // We expose the powerful $event object on the scope that provides access to the Window,
	          // etc. that isn't protected by the fast paths in $parse.  We explicitly request better
	          // checks at the cost of speed since event handler expressions are not executed as
	          // frequently as regular change detection.
	          var fn = $parse(attr[directiveName], /* interceptorFn */ null, /* expensiveChecks */ true);
	          return function ngEventHandler(scope, element) {
	            element.on(eventName, function(event) {
	              var callback = function() {
	                fn(scope, {$event:event});
	              };
	              if (forceAsyncEvents[eventName] && $rootScope.$$phase) {
	                scope.$evalAsync(callback);
	              } else {
	                scope.$apply(callback);
	              }
	            });
	          };
	        }
	      };
	    }];
	  }
	);
	
	/**
	 * @ngdoc directive
	 * @name ngDblclick
	 *
	 * @description
	 * The `ngDblclick` directive allows you to specify custom behavior on a dblclick event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngDblclick {@link guide/expression Expression} to evaluate upon
	 * a dblclick. (The Event object is available as `$event`)
	 *
	 * @example
	   <example name="ng-dblclick">
	     <file name="index.html">
	      <button ng-dblclick="count = count + 1" ng-init="count=0">
	        Increment (on double click)
	      </button>
	      count: {{count}}
	     </file>
	   </example>
	 */
	
	
	/**
	 * @ngdoc directive
	 * @name ngMousedown
	 *
	 * @description
	 * The ngMousedown directive allows you to specify custom behavior on mousedown event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngMousedown {@link guide/expression Expression} to evaluate upon
	 * mousedown. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example name="ng-mousedown">
	     <file name="index.html">
	      <button ng-mousedown="count = count + 1" ng-init="count=0">
	        Increment (on mouse down)
	      </button>
	      count: {{count}}
	     </file>
	   </example>
	 */
	
	
	/**
	 * @ngdoc directive
	 * @name ngMouseup
	 *
	 * @description
	 * Specify custom behavior on mouseup event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngMouseup {@link guide/expression Expression} to evaluate upon
	 * mouseup. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example name="ng-mouseup">
	     <file name="index.html">
	      <button ng-mouseup="count = count + 1" ng-init="count=0">
	        Increment (on mouse up)
	      </button>
	      count: {{count}}
	     </file>
	   </example>
	 */
	
	/**
	 * @ngdoc directive
	 * @name ngMouseover
	 *
	 * @description
	 * Specify custom behavior on mouseover event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngMouseover {@link guide/expression Expression} to evaluate upon
	 * mouseover. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example name="ng-mouseover">
	     <file name="index.html">
	      <button ng-mouseover="count = count + 1" ng-init="count=0">
	        Increment (when mouse is over)
	      </button>
	      count: {{count}}
	     </file>
	   </example>
	 */
	
	
	/**
	 * @ngdoc directive
	 * @name ngMouseenter
	 *
	 * @description
	 * Specify custom behavior on mouseenter event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngMouseenter {@link guide/expression Expression} to evaluate upon
	 * mouseenter. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example name="ng-mouseenter">
	     <file name="index.html">
	      <button ng-mouseenter="count = count + 1" ng-init="count=0">
	        Increment (when mouse enters)
	      </button>
	      count: {{count}}
	     </file>
	   </example>
	 */
	
	
	/**
	 * @ngdoc directive
	 * @name ngMouseleave
	 *
	 * @description
	 * Specify custom behavior on mouseleave event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngMouseleave {@link guide/expression Expression} to evaluate upon
	 * mouseleave. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example name="ng-mouseleave">
	     <file name="index.html">
	      <button ng-mouseleave="count = count + 1" ng-init="count=0">
	        Increment (when mouse leaves)
	      </button>
	      count: {{count}}
	     </file>
	   </example>
	 */
	
	
	/**
	 * @ngdoc directive
	 * @name ngMousemove
	 *
	 * @description
	 * Specify custom behavior on mousemove event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngMousemove {@link guide/expression Expression} to evaluate upon
	 * mousemove. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example name="ng-mousemove">
	     <file name="index.html">
	      <button ng-mousemove="count = count + 1" ng-init="count=0">
	        Increment (when mouse moves)
	      </button>
	      count: {{count}}
	     </file>
	   </example>
	 */
	
	
	/**
	 * @ngdoc directive
	 * @name ngKeydown
	 *
	 * @description
	 * Specify custom behavior on keydown event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngKeydown {@link guide/expression Expression} to evaluate upon
	 * keydown. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)
	 *
	 * @example
	   <example name="ng-keydown">
	     <file name="index.html">
	      <input ng-keydown="count = count + 1" ng-init="count=0">
	      key down count: {{count}}
	     </file>
	   </example>
	 */
	
	
	/**
	 * @ngdoc directive
	 * @name ngKeyup
	 *
	 * @description
	 * Specify custom behavior on keyup event.
	 *
	 * @element ANY
	 * @priority 0
	 * @param {expression} ngKeyup {@link guide/expression Expression} to evaluate upon
	 * keyup. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)
	 *
	 * @example
	   <example name="ng-keyup">
	     <file name="index.html">
	       <p>Typing in the input box below updates the key count</p>
	       <input ng-keyup="count = count + 1" ng-init="count=0"> key up count: {{count}}
	
	       <p>Typing in the input box below updates the keycode</p>
	       <input ng-keyup="event=$event">
	       <p>event keyCode: {{ event.keyCode }}</p>
	       <p>event altKey: {{ event.altKey }}</p>
	     </file>
	   </example>
	 */
	
	
	/**
	 * @ngdoc directive
	 * @name ngKeypress
	 *
	 * @description
	 * Specify custom behavior on keypress event.
	 *
	 * @element ANY
	 * @param {expression} ngKeypress {@link guide/expression Expression} to evaluate upon
	 * keypress. ({@link guide/expression#-event- Event object is available as `$event`}
	 * and can be interrogated for keyCode, altKey, etc.)
	 *
	 * @example
	   <example name="ng-keypress">
	     <file name="index.html">
	      <input ng-keypress="count = count + 1" ng-init="count=0">
	      key press count: {{count}}
	     </file>
	   </example>
	 */
	
	
	/**
	 * @ngdoc directive
	 * @name ngSubmit
	 *
	 * @description
	 * Enables binding angular expressions to onsubmit events.
	 *
	 * Additionally it prevents the default action (which for form means sending the request to the
	 * server and reloading the current page), but only if the form does not contain `action`,
	 * `data-action`, or `x-action` attributes.
	 *
	 * <div class="alert alert-warning">
	 * **Warning:** Be careful not to cause "double-submission" by using both the `ngClick` and
	 * `ngSubmit` handlers together. See the
	 * {@link form#submitting-a-form-and-preventing-the-default-action `form` directive documentation}
	 * for a detailed discussion of when `ngSubmit` may be triggered.
	 * </div>
	 *
	 * @element form
	 * @priority 0
	 * @param {expression} ngSubmit {@link guide/expression Expression} to eval.
	 * ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example module="submitExample" name="ng-submit">
	     <file name="index.html">
	      <script>
	        angular.module('submitExample', [])
	          .controller('ExampleController', ['$scope', function($scope) {
	            $scope.list = [];
	            $scope.text = 'hello';
	            $scope.submit = function() {
	              if ($scope.text) {
	                $scope.list.push(this.text);
	                $scope.text = '';
	              }
	            };
	          }]);
	      </script>
	      <form ng-submit="submit()" ng-controller="ExampleController">
	        Enter text and hit enter:
	        <input type="text" ng-model="text" name="text" />
	        <input type="submit" id="submit" value="Submit" />
	        <pre>list={{list}}</pre>
	      </form>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should check ng-submit', function() {
	         expect(element(by.binding('list')).getText()).toBe('list=[]');
	         element(by.css('#submit')).click();
	         expect(element(by.binding('list')).getText()).toContain('hello');
	         expect(element(by.model('text')).getAttribute('value')).toBe('');
	       });
	       it('should ignore empty strings', function() {
	         expect(element(by.binding('list')).getText()).toBe('list=[]');
	         element(by.css('#submit')).click();
	         element(by.css('#submit')).click();
	         expect(element(by.binding('list')).getText()).toContain('hello');
	        });
	     </file>
	   </example>
	 */
	
	/**
	 * @ngdoc directive
	 * @name ngFocus
	 *
	 * @description
	 * Specify custom behavior on focus event.
	 *
	 * Note: As the `focus` event is executed synchronously when calling `input.focus()`
	 * AngularJS executes the expression using `scope.$evalAsync` if the event is fired
	 * during an `$apply` to ensure a consistent state.
	 *
	 * @element window, input, select, textarea, a
	 * @priority 0
	 * @param {expression} ngFocus {@link guide/expression Expression} to evaluate upon
	 * focus. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	 * See {@link ng.directive:ngClick ngClick}
	 */
	
	/**
	 * @ngdoc directive
	 * @name ngBlur
	 *
	 * @description
	 * Specify custom behavior on blur event.
	 *
	 * A [blur event](https://developer.mozilla.org/en-US/docs/Web/Events/blur) fires when
	 * an element has lost focus.
	 *
	 * Note: As the `blur` event is executed synchronously also during DOM manipulations
	 * (e.g. removing a focussed input),
	 * AngularJS executes the expression using `scope.$evalAsync` if the event is fired
	 * during an `$apply` to ensure a consistent state.
	 *
	 * @element window, input, select, textarea, a
	 * @priority 0
	 * @param {expression} ngBlur {@link guide/expression Expression} to evaluate upon
	 * blur. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	 * See {@link ng.directive:ngClick ngClick}
	 */
	
	/**
	 * @ngdoc directive
	 * @name ngCopy
	 *
	 * @description
	 * Specify custom behavior on copy event.
	 *
	 * @element window, input, select, textarea, a
	 * @priority 0
	 * @param {expression} ngCopy {@link guide/expression Expression} to evaluate upon
	 * copy. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example name="ng-copy">
	     <file name="index.html">
	      <input ng-copy="copied=true" ng-init="copied=false; value='copy me'" ng-model="value">
	      copied: {{copied}}
	     </file>
	   </example>
	 */
	
	/**
	 * @ngdoc directive
	 * @name ngCut
	 *
	 * @description
	 * Specify custom behavior on cut event.
	 *
	 * @element window, input, select, textarea, a
	 * @priority 0
	 * @param {expression} ngCut {@link guide/expression Expression} to evaluate upon
	 * cut. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example name="ng-cut">
	     <file name="index.html">
	      <input ng-cut="cut=true" ng-init="cut=false; value='cut me'" ng-model="value">
	      cut: {{cut}}
	     </file>
	   </example>
	 */
	
	/**
	 * @ngdoc directive
	 * @name ngPaste
	 *
	 * @description
	 * Specify custom behavior on paste event.
	 *
	 * @element window, input, select, textarea, a
	 * @priority 0
	 * @param {expression} ngPaste {@link guide/expression Expression} to evaluate upon
	 * paste. ({@link guide/expression#-event- Event object is available as `$event`})
	 *
	 * @example
	   <example name="ng-paste">
	     <file name="index.html">
	      <input ng-paste="paste=true" ng-init="paste=false" placeholder='paste here'>
	      pasted: {{paste}}
	     </file>
	   </example>
	 */
	
	/**
	 * @ngdoc directive
	 * @name ngIf
	 * @restrict A
	 * @multiElement
	 *
	 * @description
	 * The `ngIf` directive removes or recreates a portion of the DOM tree based on an
	 * {expression}. If the expression assigned to `ngIf` evaluates to a false
	 * value then the element is removed from the DOM, otherwise a clone of the
	 * element is reinserted into the DOM.
	 *
	 * `ngIf` differs from `ngShow` and `ngHide` in that `ngIf` completely removes and recreates the
	 * element in the DOM rather than changing its visibility via the `display` css property.  A common
	 * case when this difference is significant is when using css selectors that rely on an element's
	 * position within the DOM, such as the `:first-child` or `:last-child` pseudo-classes.
	 *
	 * Note that when an element is removed using `ngIf` its scope is destroyed and a new scope
	 * is created when the element is restored.  The scope created within `ngIf` inherits from
	 * its parent scope using
	 * [prototypal inheritance](https://github.com/angular/angular.js/wiki/Understanding-Scopes#javascript-prototypal-inheritance).
	 * An important implication of this is if `ngModel` is used within `ngIf` to bind to
	 * a javascript primitive defined in the parent scope. In this case any modifications made to the
	 * variable within the child scope will override (hide) the value in the parent scope.
	 *
	 * Also, `ngIf` recreates elements using their compiled state. An example of this behavior
	 * is if an element's class attribute is directly modified after it's compiled, using something like
	 * jQuery's `.addClass()` method, and the element is later removed. When `ngIf` recreates the element
	 * the added class will be lost because the original compiled state is used to regenerate the element.
	 *
	 * Additionally, you can provide animations via the `ngAnimate` module to animate the `enter`
	 * and `leave` effects.
	 *
	 * @animations
	 * | Animation                        | Occurs                               |
	 * |----------------------------------|-------------------------------------|
	 * | {@link ng.$animate#enter enter}  | just after the `ngIf` contents change and a new DOM element is created and injected into the `ngIf` container |
	 * | {@link ng.$animate#leave leave}  | just before the `ngIf` contents are removed from the DOM |
	 *
	 * @element ANY
	 * @scope
	 * @priority 600
	 * @param {expression} ngIf If the {@link guide/expression expression} is falsy then
	 *     the element is removed from the DOM tree. If it is truthy a copy of the compiled
	 *     element is added to the DOM tree.
	 *
	 * @example
	  <example module="ngAnimate" deps="angular-animate.js" animations="true" name="ng-if">
	    <file name="index.html">
	      <label>Click me: <input type="checkbox" ng-model="checked" ng-init="checked=true" /></label><br/>
	      Show when checked:
	      <span ng-if="checked" class="animate-if">
	        This is removed when the checkbox is unchecked.
	      </span>
	    </file>
	    <file name="animations.css">
	      .animate-if {
	        background:white;
	        border:1px solid black;
	        padding:10px;
	      }
	
	      .animate-if.ng-enter, .animate-if.ng-leave {
	        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
	      }
	
	      .animate-if.ng-enter,
	      .animate-if.ng-leave.ng-leave-active {
	        opacity:0;
	      }
	
	      .animate-if.ng-leave,
	      .animate-if.ng-enter.ng-enter-active {
	        opacity:1;
	      }
	    </file>
	  </example>
	 */
	var ngIfDirective = ['$animate', '$compile', function($animate, $compile) {
	  return {
	    multiElement: true,
	    transclude: 'element',
	    priority: 600,
	    terminal: true,
	    restrict: 'A',
	    $$tlb: true,
	    link: function($scope, $element, $attr, ctrl, $transclude) {
	        var block, childScope, previousElements;
	        $scope.$watch($attr.ngIf, function ngIfWatchAction(value) {
	
	          if (value) {
	            if (!childScope) {
	              $transclude(function(clone, newScope) {
	                childScope = newScope;
	                clone[clone.length++] = $compile.$$createComment('end ngIf', $attr.ngIf);
	                // Note: We only need the first/last node of the cloned nodes.
	                // However, we need to keep the reference to the jqlite wrapper as it might be changed later
	                // by a directive with templateUrl when its template arrives.
	                block = {
	                  clone: clone
	                };
	                $animate.enter(clone, $element.parent(), $element);
	              });
	            }
	          } else {
	            if (previousElements) {
	              previousElements.remove();
	              previousElements = null;
	            }
	            if (childScope) {
	              childScope.$destroy();
	              childScope = null;
	            }
	            if (block) {
	              previousElements = getBlockNodes(block.clone);
	              $animate.leave(previousElements).done(function(response) {
	                if (response !== false) previousElements = null;
	              });
	              block = null;
	            }
	          }
	        });
	    }
	  };
	}];
	
	/**
	 * @ngdoc directive
	 * @name ngInclude
	 * @restrict ECA
	 *
	 * @description
	 * Fetches, compiles and includes an external HTML fragment.
	 *
	 * By default, the template URL is restricted to the same domain and protocol as the
	 * application document. This is done by calling {@link $sce#getTrustedResourceUrl
	 * $sce.getTrustedResourceUrl} on it. To load templates from other domains or protocols
	 * you may either {@link ng.$sceDelegateProvider#resourceUrlWhitelist whitelist them} or
	 * {@link $sce#trustAsResourceUrl wrap them} as trusted values. Refer to Angular's {@link
	 * ng.$sce Strict Contextual Escaping}.
	 *
	 * In addition, the browser's
	 * [Same Origin Policy](https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest)
	 * and [Cross-Origin Resource Sharing (CORS)](http://www.w3.org/TR/cors/)
	 * policy may further restrict whether the template is successfully loaded.
	 * For example, `ngInclude` won't work for cross-domain requests on all browsers and for `file://`
	 * access on some browsers.
	 *
	 * @animations
	 * | Animation                        | Occurs                              |
	 * |----------------------------------|-------------------------------------|
	 * | {@link ng.$animate#enter enter}  | when the expression changes, on the new include |
	 * | {@link ng.$animate#leave leave}  | when the expression changes, on the old include |
	 *
	 * The enter and leave animation occur concurrently.
	 *
	 * @scope
	 * @priority 400
	 *
	 * @param {string} ngInclude|src angular expression evaluating to URL. If the source is a string constant,
	 *                 make sure you wrap it in **single** quotes, e.g. `src="'myPartialTemplate.html'"`.
	 * @param {string=} onload Expression to evaluate when a new partial is loaded.
	 *                  <div class="alert alert-warning">
	 *                  **Note:** When using onload on SVG elements in IE11, the browser will try to call
	 *                  a function with the name on the window element, which will usually throw a
	 *                  "function is undefined" error. To fix this, you can instead use `data-onload` or a
	 *                  different form that {@link guide/directive#normalization matches} `onload`.
	 *                  </div>
	   *
	 * @param {string=} autoscroll Whether `ngInclude` should call {@link ng.$anchorScroll
	 *                  $anchorScroll} to scroll the viewport after the content is loaded.
	 *
	 *                  - If the attribute is not set, disable scrolling.
	 *                  - If the attribute is set without value, enable scrolling.
	 *                  - Otherwise enable scrolling only if the expression evaluates to truthy value.
	 *
	 * @example
	  <example module="includeExample" deps="angular-animate.js" animations="true" name="ng-include">
	    <file name="index.html">
	     <div ng-controller="ExampleController">
	       <select ng-model="template" ng-options="t.name for t in templates">
	        <option value="">(blank)</option>
	       </select>
	       url of the template: <code>{{template.url}}</code>
	       <hr/>
	       <div class="slide-animate-container">
	         <div class="slide-animate" ng-include="template.url"></div>
	       </div>
	     </div>
	    </file>
	    <file name="script.js">
	      angular.module('includeExample', ['ngAnimate'])
	        .controller('ExampleController', ['$scope', function($scope) {
	          $scope.templates =
	            [{ name: 'template1.html', url: 'template1.html'},
	             { name: 'template2.html', url: 'template2.html'}];
	          $scope.template = $scope.templates[0];
	        }]);
	     </file>
	    <file name="template1.html">
	      Content of template1.html
	    </file>
	    <file name="template2.html">
	      Content of template2.html
	    </file>
	    <file name="animations.css">
	      .slide-animate-container {
	        position:relative;
	        background:white;
	        border:1px solid black;
	        height:40px;
	        overflow:hidden;
	      }
	
	      .slide-animate {
	        padding:10px;
	      }
	
	      .slide-animate.ng-enter, .slide-animate.ng-leave {
	        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
	
	        position:absolute;
	        top:0;
	        left:0;
	        right:0;
	        bottom:0;
	        display:block;
	        padding:10px;
	      }
	
	      .slide-animate.ng-enter {
	        top:-50px;
	      }
	      .slide-animate.ng-enter.ng-enter-active {
	        top:0;
	      }
	
	      .slide-animate.ng-leave {
	        top:0;
	      }
	      .slide-animate.ng-leave.ng-leave-active {
	        top:50px;
	      }
	    </file>
	    <file name="protractor.js" type="protractor">
	      var templateSelect = element(by.model('template'));
	      var includeElem = element(by.css('[ng-include]'));
	
	      it('should load template1.html', function() {
	        expect(includeElem.getText()).toMatch(/Content of template1.html/);
	      });
	
	      it('should load template2.html', function() {
	        if (browser.params.browser === 'firefox') {
	          // Firefox can't handle using selects
	          // See https://github.com/angular/protractor/issues/480
	          return;
	        }
	        templateSelect.click();
	        templateSelect.all(by.css('option')).get(2).click();
	        expect(includeElem.getText()).toMatch(/Content of template2.html/);
	      });
	
	      it('should change to blank', function() {
	        if (browser.params.browser === 'firefox') {
	          // Firefox can't handle using selects
	          return;
	        }
	        templateSelect.click();
	        templateSelect.all(by.css('option')).get(0).click();
	        expect(includeElem.isPresent()).toBe(false);
	      });
	    </file>
	  </example>
	 */
	
	
	/**
	 * @ngdoc event
	 * @name ngInclude#$includeContentRequested
	 * @eventType emit on the scope ngInclude was declared in
	 * @description
	 * Emitted every time the ngInclude content is requested.
	 *
	 * @param {Object} angularEvent Synthetic event object.
	 * @param {String} src URL of content to load.
	 */
	
	
	/**
	 * @ngdoc event
	 * @name ngInclude#$includeContentLoaded
	 * @eventType emit on the current ngInclude scope
	 * @description
	 * Emitted every time the ngInclude content is reloaded.
	 *
	 * @param {Object} angularEvent Synthetic event object.
	 * @param {String} src URL of content to load.
	 */
	
	
	/**
	 * @ngdoc event
	 * @name ngInclude#$includeContentError
	 * @eventType emit on the scope ngInclude was declared in
	 * @description
	 * Emitted when a template HTTP request yields an erroneous response (status < 200 || status > 299)
	 *
	 * @param {Object} angularEvent Synthetic event object.
	 * @param {String} src URL of content to load.
	 */
	var ngIncludeDirective = ['$templateRequest', '$anchorScroll', '$animate',
	                  function($templateRequest,   $anchorScroll,   $animate) {
	  return {
	    restrict: 'ECA',
	    priority: 400,
	    terminal: true,
	    transclude: 'element',
	    controller: angular.noop,
	    compile: function(element, attr) {
	      var srcExp = attr.ngInclude || attr.src,
	          onloadExp = attr.onload || '',
	          autoScrollExp = attr.autoscroll;
	
	      return function(scope, $element, $attr, ctrl, $transclude) {
	        var changeCounter = 0,
	            currentScope,
	            previousElement,
	            currentElement;
	
	        var cleanupLastIncludeContent = function() {
	          if (previousElement) {
	            previousElement.remove();
	            previousElement = null;
	          }
	          if (currentScope) {
	            currentScope.$destroy();
	            currentScope = null;
	          }
	          if (currentElement) {
	            $animate.leave(currentElement).done(function(response) {
	              if (response !== false) previousElement = null;
	            });
	            previousElement = currentElement;
	            currentElement = null;
	          }
	        };
	
	        scope.$watch(srcExp, function ngIncludeWatchAction(src) {
	          var afterAnimation = function(response) {
	            if (response !== false && isDefined(autoScrollExp) &&
	              (!autoScrollExp || scope.$eval(autoScrollExp))) {
	                $anchorScroll();
	            }
	          };
	          var thisChangeId = ++changeCounter;
	
	          if (src) {
	            //set the 2nd param to true to ignore the template request error so that the inner
	            //contents and scope can be cleaned up.
	            $templateRequest(src, true).then(function(response) {
	              if (scope.$$destroyed) return;
	
	              if (thisChangeId !== changeCounter) return;
	              var newScope = scope.$new();
	              ctrl.template = response;
	
	              // Note: This will also link all children of ng-include that were contained in the original
	              // html. If that content contains controllers, ... they could pollute/change the scope.
	              // However, using ng-include on an element with additional content does not make sense...
	              // Note: We can't remove them in the cloneAttchFn of $transclude as that
	              // function is called before linking the content, which would apply child
	              // directives to non existing elements.
	              var clone = $transclude(newScope, function(clone) {
	                cleanupLastIncludeContent();
	                $animate.enter(clone, null, $element).done(afterAnimation);
	              });
	
	              currentScope = newScope;
	              currentElement = clone;
	
	              currentScope.$emit('$includeContentLoaded', src);
	              scope.$eval(onloadExp);
	            }, function() {
	              if (scope.$$destroyed) return;
	
	              if (thisChangeId === changeCounter) {
	                cleanupLastIncludeContent();
	                scope.$emit('$includeContentError', src);
	              }
	            });
	            scope.$emit('$includeContentRequested', src);
	          } else {
	            cleanupLastIncludeContent();
	            ctrl.template = null;
	          }
	        });
	      };
	    }
	  };
	}];
	
	// This directive is called during the $transclude call of the first `ngInclude` directive.
	// It will replace and compile the content of the element with the loaded template.
	// We need this directive so that the element content is already filled when
	// the link function of another directive on the same element as ngInclude
	// is called.
	var ngIncludeFillContentDirective = ['$compile',
	  function($compile) {
	    return {
	      restrict: 'ECA',
	      priority: -400,
	      require: 'ngInclude',
	      link: function(scope, $element, $attr, ctrl) {
	        if (toString.call($element[0]).match(/SVG/)) {
	          // WebKit: https://bugs.webkit.org/show_bug.cgi?id=135698 --- SVG elements do not
	          // support innerHTML, so detect this here and try to generate the contents
	          // specially.
	          $element.empty();
	          $compile(jqLiteBuildFragment(ctrl.template, window.document).childNodes)(scope,
	              function namespaceAdaptedClone(clone) {
	            $element.append(clone);
	          }, {futureParentElement: $element});
	          return;
	        }
	
	        $element.html(ctrl.template);
	        $compile($element.contents())(scope);
	      }
	    };
	  }];
	
	/**
	 * @ngdoc directive
	 * @name ngInit
	 * @restrict AC
	 *
	 * @description
	 * The `ngInit` directive allows you to evaluate an expression in the
	 * current scope.
	 *
	 * <div class="alert alert-danger">
	 * This directive can be abused to add unnecessary amounts of logic into your templates.
	 * There are only a few appropriate uses of `ngInit`, such as for aliasing special properties of
	 * {@link ng.directive:ngRepeat `ngRepeat`}, as seen in the demo below; and for injecting data via
	 * server side scripting. Besides these few cases, you should use {@link guide/controller controllers}
	 * rather than `ngInit` to initialize values on a scope.
	 * </div>
	 *
	 * <div class="alert alert-warning">
	 * **Note**: If you have assignment in `ngInit` along with a {@link ng.$filter `filter`}, make
	 * sure you have parentheses to ensure correct operator precedence:
	 * <pre class="prettyprint">
	 * `<div ng-init="test1 = ($index | toString)"></div>`
	 * </pre>
	 * </div>
	 *
	 * @priority 450
	 *
	 * @element ANY
	 * @param {expression} ngInit {@link guide/expression Expression} to eval.
	 *
	 * @example
	   <example module="initExample" name="ng-init">
	     <file name="index.html">
	   <script>
	     angular.module('initExample', [])
	       .controller('ExampleController', ['$scope', function($scope) {
	         $scope.list = [['a', 'b'], ['c', 'd']];
	       }]);
	   </script>
	   <div ng-controller="ExampleController">
	     <div ng-repeat="innerList in list" ng-init="outerIndex = $index">
	       <div ng-repeat="value in innerList" ng-init="innerIndex = $index">
	          <span class="example-init">list[ {{outerIndex}} ][ {{innerIndex}} ] = {{value}};</span>
	       </div>
	     </div>
	   </div>
	     </file>
	     <file name="protractor.js" type="protractor">
	       it('should alias index positions', function() {
	         var elements = element.all(by.css('.example-init'));
	         expect(elements.get(0).getText()).toBe('list[ 0 ][ 0 ] = a;');
	         expect(elements.get(1).getText()).toBe('list[ 0 ][ 1 ] = b;');
	         expect(elements.get(2).getText()).toBe('list[ 1 ][ 0 ] = c;');
	         expect(elements.get(3).getText()).toBe('list[ 1 ][ 1 ] = d;');
	       });
	     </file>
	   </example>
	 */
	var ngInitDirective = ngDirective({
	  priority: 450,
	  compile: function() {
	    return {
	      pre: function(scope, element, attrs) {
	        scope.$eval(attrs.ngInit);
	      }
	    };
	  }
	});
	
	/**
	 * @ngdoc directive
	 * @name ngList
	 *
	 * @description
	 * Text input that converts between a delimited string and an array of strings. The default
	 * delimiter is a comma followed by a space - equivalent to `ng-list=", "`. You can specify a custom
	 * delimiter as the value of the `ngList` attribute - for example, `ng-list=" | "`.
	 *
	 * The behaviour of the directive is affected by the use of the `ngTrim` attribute.
	 * * If `ngTrim` is set to `"false"` then whitespace around both the separator and each
	 *   list item is respected. This implies that the user of the directive is responsible for
	 *   dealing with whitespace but also allows you to use whitespace as a delimiter, such as a
	 *   tab or newline character.
	 * * Otherwise whitespace around the delimiter is ignored when splitting (although it is respected
	 *   when joining the list items back together) and whitespace around each list item is stripped
	 *   before it is added to the model.
	 *
	 * ### Example with Validation
	 *
	 * <example name="ngList-directive" module="listExample">
	 *   <file name="app.js">
	 *      angular.module('listExample', [])
	 *        .controller('ExampleController', ['$scope', function($scope) {
	 *          $scope.names = ['morpheus', 'neo', 'trinity'];
	 *        }]);
	 *   </file>
	 *   <file name="index.html">
	 *    <form name="myForm" ng-controller="ExampleController">
	 *      <label>List: <input name="namesInput" ng-model="names" ng-list required></label>
	 *      <span role="alert">
	 *        <span class="error" ng-show="myForm.namesInput.$error.required">
	 *        Required!</span>
	 *      </span>
	 *      <br>
	 *      <tt>names = {{names}}</tt><br/>
	 *      <tt>myForm.namesInput.$valid = {{myForm.namesInput.$valid}}</tt><br/>
	 *      <tt>myForm.namesInput.$error = {{myForm.namesInput.$error}}</tt><br/>
	 *      <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
	 *      <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
	 *     </form>
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	 *     var listInput = element(by.model('names'));
	 *     var names = element(by.exactBinding('names'));
	 *     var valid = element(by.binding('myForm.namesInput.$valid'));
	 *     var error = element(by.css('span.error'));
	 *
	 *     it('should initialize to model', function() {
	 *       expect(names.getText()).toContain('["morpheus","neo","trinity"]');
	 *       expect(valid.getText()).toContain('true');
	 *       expect(error.getCssValue('display')).toBe('none');
	 *     });
	 *
	 *     it('should be invalid if empty', function() {
	 *       listInput.clear();
	 *       listInput.sendKeys('');
	 *
	 *       expect(names.getText()).toContain('');
	 *       expect(valid.getText()).toContain('false');
	 *       expect(error.getCssValue('display')).not.toBe('none');
	 *     });
	 *   </file>
	 * </example>
	 *
	 * ### Example - splitting on newline
	 * <example name="ngList-directive-newlines">
	 *   <file name="index.html">
	 *    <textarea ng-model="list" ng-list="&#10;" ng-trim="false"></textarea>
	 *    <pre>{{ list | json }}</pre>
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	 *     it("should split the text by newlines", function() {
	 *       var listInput = element(by.model('list'));
	 *       var output = element(by.binding('list | json'));
	 *       listInput.sendKeys('abc\ndef\nghi');
	 *       expect(output.getText()).toContain('[\n  "abc",\n  "def",\n  "ghi"\n]');
	 *     });
	 *   </file>
	 * </example>
	 *
	 * @element input
	 * @param {string=} ngList optional delimiter that should be used to split the value.
	 */
	var ngListDirective = function() {
	  return {
	    restrict: 'A',
	    priority: 100,
	    require: 'ngModel',
	    link: function(scope, element, attr, ctrl) {
	      var ngList = attr.ngList || ', ';
	      var trimValues = attr.ngTrim !== 'false';
	      var separator = trimValues ? trim(ngList) : ngList;
	
	      var parse = function(viewValue) {
	        // If the viewValue is invalid (say required but empty) it will be `undefined`
	        if (isUndefined(viewValue)) return;
	
	        var list = [];
	
	        if (viewValue) {
	          forEach(viewValue.split(separator), function(value) {
	            if (value) list.push(trimValues ? trim(value) : value);
	          });
	        }
	
	        return list;
	      };
	
	      ctrl.$parsers.push(parse);
	      ctrl.$formatters.push(function(value) {
	        if (isArray(value)) {
	          return value.join(ngList);
	        }
	
	        return undefined;
	      });
	
	      // Override the standard $isEmpty because an empty array means the input is empty.
	      ctrl.$isEmpty = function(value) {
	        return !value || !value.length;
	      };
	    }
	  };
	};
	
	/* global VALID_CLASS: true,
	  INVALID_CLASS: true,
	  PRISTINE_CLASS: true,
	  DIRTY_CLASS: true,
	  UNTOUCHED_CLASS: true,
	  TOUCHED_CLASS: true,
	  PENDING_CLASS: true,
	  addSetValidityMethod: true,
	  setupValidity: true,
	  defaultModelOptions: false
	*/
	
	
	var VALID_CLASS = 'ng-valid',
	    INVALID_CLASS = 'ng-invalid',
	    PRISTINE_CLASS = 'ng-pristine',
	    DIRTY_CLASS = 'ng-dirty',
	    UNTOUCHED_CLASS = 'ng-untouched',
	    TOUCHED_CLASS = 'ng-touched',
	    EMPTY_CLASS = 'ng-empty',
	    NOT_EMPTY_CLASS = 'ng-not-empty';
	
	var ngModelMinErr = minErr('ngModel');
	
	/**
	 * @ngdoc type
	 * @name ngModel.NgModelController
	 *
	 * @property {*} $viewValue The actual value from the control's view. For `input` elements, this is a
	 * String. See {@link ngModel.NgModelController#$setViewValue} for information about when the $viewValue
	 * is set.
	 * @property {*} $modelValue The value in the model that the control is bound to.
	 * @property {Array.<Function>} $parsers Array of functions to execute, as a pipeline, whenever
	       the control reads value from the DOM. The functions are called in array order, each passing
	       its return value through to the next. The last return value is forwarded to the
	       {@link ngModel.NgModelController#$validators `$validators`} collection.
	
	Parsers are used to sanitize / convert the {@link ngModel.NgModelController#$viewValue
	`$viewValue`}.
	
	Returning `undefined` from a parser means a parse error occurred. In that case,
	no {@link ngModel.NgModelController#$validators `$validators`} will run and the `ngModel`
	will be set to `undefined` unless {@link ngModelOptions `ngModelOptions.allowInvalid`}
	is set to `true`. The parse error is stored in `ngModel.$error.parse`.
	
	 *
	 * @property {Array.<Function>} $formatters Array of functions to execute, as a pipeline, whenever
	       the model value changes. The functions are called in reverse array order, each passing the value through to the
	       next. The last return value is used as the actual DOM value.
	       Used to format / convert values for display in the control.
	 * ```js
	 * function formatter(value) {
	 *   if (value) {
	 *     return value.toUpperCase();
	 *   }
	 * }
	 * ngModel.$formatters.push(formatter);
	 * ```
	 *
	 * @property {Object.<string, function>} $validators A collection of validators that are applied
	 *      whenever the model value changes. The key value within the object refers to the name of the
	 *      validator while the function refers to the validation operation. The validation operation is
	 *      provided with the model value as an argument and must return a true or false value depending
	 *      on the response of that validation.
	 *
	 * ```js
	 * ngModel.$validators.validCharacters = function(modelValue, viewValue) {
	 *   var value = modelValue || viewValue;
	 *   return /[0-9]+/.test(value) &&
	 *          /[a-z]+/.test(value) &&
	 *          /[A-Z]+/.test(value) &&
	 *          /\W+/.test(value);
	 * };
	 * ```
	 *
	 * @property {Object.<string, function>} $asyncValidators A collection of validations that are expected to
	 *      perform an asynchronous validation (e.g. a HTTP request). The validation function that is provided
	 *      is expected to return a promise when it is run during the model validation process. Once the promise
	 *      is delivered then the validation status will be set to true when fulfilled and false when rejected.
	 *      When the asynchronous validators are triggered, each of the validators will run in parallel and the model
	 *      value will only be updated once all validators have been fulfilled. As long as an asynchronous validator
	 *      is unfulfilled, its key will be added to the controllers `$pending` property. Also, all asynchronous validators
	 *      will only run once all synchronous validators have passed.
	 *
	 * Please note that if $http is used then it is important that the server returns a success HTTP response code
	 * in order to fulfill the validation and a status level of `4xx` in order to reject the validation.
	 *
	 * ```js
	 * ngModel.$asyncValidators.uniqueUsername = function(modelValue, viewValue) {
	 *   var value = modelValue || viewValue;
	 *
	 *   // Lookup user by username
	 *   return $http.get('/api/users/' + value).
	 *      then(function resolved() {
	 *        //username exists, this means validation fails
	 *        return $q.reject('exists');
	 *      }, function rejected() {
	 *        //username does not exist, therefore this validation passes
	 *        return true;
	 *      });
	 * };
	 * ```
	 *
	 * @property {Array.<Function>} $viewChangeListeners Array of functions to execute whenever the
	 *     view value has changed. It is called with no arguments, and its return value is ignored.
	 *     This can be used in place of additional $watches against the model value.
	 *
	 * @property {Object} $error An object hash with all failing validator ids as keys.
	 * @property {Object} $pending An object hash with all pending validator ids as keys.
	 *
	 * @property {boolean} $untouched True if control has not lost focus yet.
	 * @property {boolean} $touched True if control has lost focus.
	 * @property {boolean} $pristine True if user has not interacted with the control yet.
	 * @property {boolean} $dirty True if user has already interacted with the control.
	 * @property {boolean} $valid True if there is no error.
	 * @property {boolean} $invalid True if at least one error on the control.
	 * @property {string} $name The name attribute of the control.
	 *
	 * @description
	 *
	 * `NgModelController` provides API for the {@link ngModel `ngModel`} directive.
	 * The controller contains services for data-binding, validation, CSS updates, and value formatting
	 * and parsing. It purposefully does not contain any logic which deals with DOM rendering or
	 * listening to DOM events.
	 * Such DOM related logic should be provided by other directives which make use of
	 * `NgModelController` for data-binding to control elements.
	 * Angular provides this DOM logic for most {@link input `input`} elements.
	 * At the end of this page you can find a {@link ngModel.NgModelController#custom-control-example
	 * custom control example} that uses `ngModelController` to bind to `contenteditable` elements.
	 *
	 * @example
	 * ### Custom Control Example
	 * This example shows how to use `NgModelController` with a custom control to achieve
	 * data-binding. Notice how different directives (`contenteditable`, `ng-model`, and `required`)
	 * collaborate together to achieve the desired result.
	 *
	 * `contenteditable` is an HTML5 attribute, which tells the browser to let the element
	 * contents be edited in place by the user.
	 *
	 * We are using the {@link ng.service:$sce $sce} service here and include the {@link ngSanitize $sanitize}
	 * module to automatically remove "bad" content like inline event listener (e.g. `<span onclick="...">`).
	 * However, as we are using `$sce` the model can still decide to provide unsafe content if it marks
	 * that content using the `$sce` service.
	 *
	 * <example name="NgModelController" module="customControl" deps="angular-sanitize.js">
	    <file name="style.css">
	      [contenteditable] {
	        border: 1px solid black;
	        background-color: white;
	        min-height: 20px;
	      }
	
	      .ng-invalid {
	        border: 1px solid red;
	      }
	
	    </file>
	    <file name="script.js">
	      angular.module('customControl', ['ngSanitize']).
	        directive('contenteditable', ['$sce', function($sce) {
	          return {
	            restrict: 'A', // only activate on element attribute
	            require: '?ngModel', // get a hold of NgModelController
	            link: function(scope, element, attrs, ngModel) {
	              if (!ngModel) return; // do nothing if no ng-model
	
	              // Specify how UI should be updated
	              ngModel.$render = function() {
	                element.html($sce.getTrustedHtml(ngModel.$viewValue || ''));
	              };
	
	              // Listen for change events to enable binding
	              element.on('blur keyup change', function() {
	                scope.$evalAsync(read);
	              });
	              read(); // initialize
	
	              // Write data to the model
	              function read() {
	                var html = element.html();
	                // When we clear the content editable the browser leaves a <br> behind
	                // If strip-br attribute is provided then we strip this out
	                if (attrs.stripBr && html === '<br>') {
	                  html = '';
	                }
	                ngModel.$setViewValue(html);
	              }
	            }
	          };
	        }]);
	    </file>
	    <file name="index.html">
	      <form name="myForm">
	       <div contenteditable
	            name="myWidget" ng-model="userContent"
	            strip-br="true"
	            required>Change me!</div>
	        <span ng-show="myForm.myWidget.$error.required">Required!</span>
	       <hr>
	       <textarea ng-model="userContent" aria-label="Dynamic textarea"></textarea>
	      </form>
	    </file>
	    <file name="protractor.js" type="protractor">
	    it('should data-bind and become invalid', function() {
	      if (browser.params.browser === 'safari' || browser.params.browser === 'firefox') {
	        // SafariDriver can't handle contenteditable
	        // and Firefox driver can't clear contenteditables very well
	        return;
	      }
	      var contentEditable = element(by.css('[contenteditable]'));
	      var content = 'Change me!';
	
	      expect(contentEditable.getText()).toEqual(content);
	
	      contentEditable.clear();
	      contentEditable.sendKeys(protractor.Key.BACK_SPACE);
	      expect(contentEditable.getText()).toEqual('');
	      expect(contentEditable.getAttribute('class')).toMatch(/ng-invalid-required/);
	    });
	    </file>
	 * </example>
	 *
	 *
	 */
	NgModelController.$inject = ['$scope', '$exceptionHandler', '$attrs', '$element', '$parse', '$animate', '$timeout', '$q', '$interpolate'];
	function NgModelController($scope, $exceptionHandler, $attr, $element, $parse, $animate, $timeout, $q, $interpolate) {
	  this.$viewValue = Number.NaN;
	  this.$modelValue = Number.NaN;
	  this.$$rawModelValue = undefined; // stores the parsed modelValue / model set from scope regardless of validity.
	  this.$validators = {};
	  this.$asyncValidators = {};
	  this.$parsers = [];
	  this.$formatters = [];
	  this.$viewChangeListeners = [];
	  this.$untouched = true;
	  this.$touched = false;
	  this.$pristine = true;
	  this.$dirty = false;
	  this.$valid = true;
	  this.$invalid = false;
	  this.$error = {}; // keep invalid keys here
	  this.$$success = {}; // keep valid keys here
	  this.$pending = undefined; // keep pending keys here
	  this.$name = $interpolate($attr.name || '', false)($scope);
	  this.$$parentForm = nullFormCtrl;
	  this.$options = defaultModelOptions;
	
	  this.$$parsedNgModel = $parse($attr.ngModel);
	  this.$$parsedNgModelAssign = this.$$parsedNgModel.assign;
	  this.$$ngModelGet = this.$$parsedNgModel;
	  this.$$ngModelSet = this.$$parsedNgModelAssign;
	  this.$$pendingDebounce = null;
	  this.$$parserValid = undefined;
	
	  this.$$currentValidationRunId = 0;
	
	  this.$$scope = $scope;
	  this.$$attr = $attr;
	  this.$$element = $element;
	  this.$$animate = $animate;
	  this.$$timeout = $timeout;
	  this.$$parse = $parse;
	  this.$$q = $q;
	  this.$$exceptionHandler = $exceptionHandler;
	
	  setupValidity(this);
	  setupModelWatcher(this);
	}
	
	NgModelController.prototype = {
	  $$initGetterSetters: function() {
	    if (this.$options.getOption('getterSetter')) {
	      var invokeModelGetter = this.$$parse(this.$$attr.ngModel + '()'),
	          invokeModelSetter = this.$$parse(this.$$attr.ngModel + '($$$p)');
	
	      this.$$ngModelGet = function($scope) {
	        var modelValue = this.$$parsedNgModel($scope);
	        if (isFunction(modelValue)) {
	          modelValue = invokeModelGetter($scope);
	        }
	        return modelValue;
	      };
	      this.$$ngModelSet = function($scope, newValue) {
	        if (isFunction(this.$$parsedNgModel($scope))) {
	          invokeModelSetter($scope, {$$$p: newValue});
	        } else {
	          this.$$parsedNgModelAssign($scope, newValue);
	        }
	      };
	    } else if (!this.$$parsedNgModel.assign) {
	      throw ngModelMinErr('nonassign', 'Expression \'{0}\' is non-assignable. Element: {1}',
	          this.$$attr.ngModel, startingTag(this.$$element));
	    }
	  },
	
	
	  /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$render
	   *
	   * @description
	   * Called when the view needs to be updated. It is expected that the user of the ng-model
	   * directive will implement this method.
	   *
	   * The `$render()` method is invoked in the following situations:
	   *
	   * * `$rollbackViewValue()` is called.  If we are rolling back the view value to the last
	   *   committed value then `$render()` is called to update the input control.
	   * * The value referenced by `ng-model` is changed programmatically and both the `$modelValue` and
	   *   the `$viewValue` are different from last time.
	   *
	   * Since `ng-model` does not do a deep watch, `$render()` is only invoked if the values of
	   * `$modelValue` and `$viewValue` are actually different from their previous values. If `$modelValue`
	   * or `$viewValue` are objects (rather than a string or number) then `$render()` will not be
	   * invoked if you only change a property on the objects.
	   */
	  $render: noop,
	
	  /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$isEmpty
	   *
	   * @description
	   * This is called when we need to determine if the value of an input is empty.
	   *
	   * For instance, the required directive does this to work out if the input has data or not.
	   *
	   * The default `$isEmpty` function checks whether the value is `undefined`, `''`, `null` or `NaN`.
	   *
	   * You can override this for input directives whose concept of being empty is different from the
	   * default. The `checkboxInputType` directive does this because in its case a value of `false`
	   * implies empty.
	   *
	   * @param {*} value The value of the input to check for emptiness.
	   * @returns {boolean} True if `value` is "empty".
	   */
	  $isEmpty: function(value) {
	    // eslint-disable-next-line no-self-compare
	    return isUndefined(value) || value === '' || value === null || value !== value;
	  },
	
	  $$updateEmptyClasses: function(value) {
	    if (this.$isEmpty(value)) {
	      this.$$animate.removeClass(this.$$element, NOT_EMPTY_CLASS);
	      this.$$animate.addClass(this.$$element, EMPTY_CLASS);
	    } else {
	      this.$$animate.removeClass(this.$$element, EMPTY_CLASS);
	      this.$$animate.addClass(this.$$element, NOT_EMPTY_CLASS);
	    }
	  },
	
	  /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$setPristine
	   *
	   * @description
	   * Sets the control to its pristine state.
	   *
	   * This method can be called to remove the `ng-dirty` class and set the control to its pristine
	   * state (`ng-pristine` class). A model is considered to be pristine when the control
	   * has not been changed from when first compiled.
	   */
	  $setPristine: function() {
	    this.$dirty = false;
	    this.$pristine = true;
	    this.$$animate.removeClass(this.$$element, DIRTY_CLASS);
	    this.$$animate.addClass(this.$$element, PRISTINE_CLASS);
	  },
	
	  /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$setDirty
	   *
	   * @description
	   * Sets the control to its dirty state.
	   *
	   * This method can be called to remove the `ng-pristine` class and set the control to its dirty
	   * state (`ng-dirty` class). A model is considered to be dirty when the control has been changed
	   * from when first compiled.
	   */
	  $setDirty: function() {
	    this.$dirty = true;
	    this.$pristine = false;
	    this.$$animate.removeClass(this.$$element, PRISTINE_CLASS);
	    this.$$animate.addClass(this.$$element, DIRTY_CLASS);
	    this.$$parentForm.$setDirty();
	  },
	
	  /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$setUntouched
	   *
	   * @description
	   * Sets the control to its untouched state.
	   *
	   * This method can be called to remove the `ng-touched` class and set the control to its
	   * untouched state (`ng-untouched` class). Upon compilation, a model is set as untouched
	   * by default, however this function can be used to restore that state if the model has
	   * already been touched by the user.
	   */
	  $setUntouched: function() {
	    this.$touched = false;
	    this.$untouched = true;
	    this.$$animate.setClass(this.$$element, UNTOUCHED_CLASS, TOUCHED_CLASS);
	  },
	
	  /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$setTouched
	   *
	   * @description
	   * Sets the control to its touched state.
	   *
	   * This method can be called to remove the `ng-untouched` class and set the control to its
	   * touched state (`ng-touched` class). A model is considered to be touched when the user has
	   * first focused the control element and then shifted focus away from the control (blur event).
	   */
	  $setTouched: function() {
	    this.$touched = true;
	    this.$untouched = false;
	    this.$$animate.setClass(this.$$element, TOUCHED_CLASS, UNTOUCHED_CLASS);
	  },
	
	  /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$rollbackViewValue
	   *
	   * @description
	   * Cancel an update and reset the input element's value to prevent an update to the `$modelValue`,
	   * which may be caused by a pending debounced event or because the input is waiting for some
	   * future event.
	   *
	   * If you have an input that uses `ng-model-options` to set up debounced updates or updates that
	   * depend on special events such as `blur`, there can be a period when the `$viewValue` is out of
	   * sync with the ngModel's `$modelValue`.
	   *
	   * In this case, you can use `$rollbackViewValue()` to manually cancel the debounced / future update
	   * and reset the input to the last committed view value.
	   *
	   * It is also possible that you run into difficulties if you try to update the ngModel's `$modelValue`
	   * programmatically before these debounced/future events have resolved/occurred, because Angular's
	   * dirty checking mechanism is not able to tell whether the model has actually changed or not.
	   *
	   * The `$rollbackViewValue()` method should be called before programmatically changing the model of an
	   * input which may have such events pending. This is important in order to make sure that the
	   * input field will be updated with the new model value and any pending operations are cancelled.
	   *
	   * <example name="ng-model-cancel-update" module="cancel-update-example">
	   *   <file name="app.js">
	   *     angular.module('cancel-update-example', [])
	   *
	   *     .controller('CancelUpdateController', ['$scope', function($scope) {
	   *       $scope.model = {value1: '', value2: ''};
	   *
	   *       $scope.setEmpty = function(e, value, rollback) {
	   *         if (e.keyCode === 27) {
	   *           e.preventDefault();
	   *           if (rollback) {
	   *             $scope.myForm[value].$rollbackViewValue();
	   *           }
	   *           $scope.model[value] = '';
	   *         }
	   *       };
	   *     }]);
	   *   </file>
	   *   <file name="index.html">
	   *     <div ng-controller="CancelUpdateController">
	   *       <p>Both of these inputs are only updated if they are blurred. Hitting escape should
	   *       empty them. Follow these steps and observe the difference:</p>
	   *       <ol>
	   *         <li>Type something in the input. You will see that the model is not yet updated</li>
	   *         <li>Press the Escape key.
	   *           <ol>
	   *             <li> In the first example, nothing happens, because the model is already '', and no
	   *             update is detected. If you blur the input, the model will be set to the current view.
	   *             </li>
	   *             <li> In the second example, the pending update is cancelled, and the input is set back
	   *             to the last committed view value (''). Blurring the input does nothing.
	   *             </li>
	   *           </ol>
	   *         </li>
	   *       </ol>
	   *
	   *       <form name="myForm" ng-model-options="{ updateOn: 'blur' }">
	   *         <div>
	   *           <p id="inputDescription1">Without $rollbackViewValue():</p>
	   *           <input name="value1" aria-describedby="inputDescription1" ng-model="model.value1"
	   *                  ng-keydown="setEmpty($event, 'value1')">
	   *           value1: "{{ model.value1 }}"
	   *         </div>
	   *
	   *         <div>
	   *           <p id="inputDescription2">With $rollbackViewValue():</p>
	   *           <input name="value2" aria-describedby="inputDescription2" ng-model="model.value2"
	   *                  ng-keydown="setEmpty($event, 'value2', true)">
	   *           value2: "{{ model.value2 }}"
	   *         </div>
	   *       </form>
	   *     </div>
	   *   </file>
	       <file name="style.css">
	          div {
	            display: table-cell;
	          }
	          div:nth-child(1) {
	            padding-right: 30px;
	          }
	
	        </file>
	   * </example>
	   */
	  $rollbackViewValue: function() {
	    this.$$timeout.cancel(this.$$pendingDebounce);
	    this.$viewValue = this.$$lastCommittedViewValue;
	    this.$render();
	  },
	
	  /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$validate
	   *
	   * @description
	   * Runs each of the registered validators (first synchronous validators and then
	   * asynchronous validators).
	   * If the validity changes to invalid, the model will be set to `undefined`,
	   * unless {@link ngModelOptions `ngModelOptions.allowInvalid`} is `true`.
	   * If the validity changes to valid, it will set the model to the last available valid
	   * `$modelValue`, i.e. either the last parsed value or the last value set from the scope.
	   */
	  $validate: function() {
	    // ignore $validate before model is initialized
	    if (isNumberNaN(this.$modelValue)) {
	      return;
	    }
	
	    var viewValue = this.$$lastCommittedViewValue;
	    // Note: we use the $$rawModelValue as $modelValue might have been
	    // set to undefined during a view -> model update that found validation
	    // errors. We can't parse the view here, since that could change
	    // the model although neither viewValue nor the model on the scope changed
	    var modelValue = this.$$rawModelValue;
	
	    var prevValid = this.$valid;
	    var prevModelValue = this.$modelValue;
	
	    var allowInvalid = this.$options.getOption('allowInvalid');
	
	    var that = this;
	    this.$$runValidators(modelValue, viewValue, function(allValid) {
	      // If there was no change in validity, don't update the model
	      // This prevents changing an invalid modelValue to undefined
	      if (!allowInvalid && prevValid !== allValid) {
	        // Note: Don't check this.$valid here, as we could have
	        // external validators (e.g. calculated on the server),
	        // that just call $setValidity and need the model value
	        // to calculate their validity.
	        that.$modelValue = allValid ? modelValue : undefined;
	
	        if (that.$modelValue !== prevModelValue) {
	          that.$$writeModelToScope();
	        }
	      }
	    });
	  },
	
	  $$runValidators: function(modelValue, viewValue, doneCallback) {
	    this.$$currentValidationRunId++;
	    var localValidationRunId = this.$$currentValidationRunId;
	    var that = this;
	
	    // check parser error
	    if (!processParseErrors()) {
	      validationDone(false);
	      return;
	    }
	    if (!processSyncValidators()) {
	      validationDone(false);
	      return;
	    }
	    processAsyncValidators();
	
	    function processParseErrors() {
	      var errorKey = that.$$parserName || 'parse';
	      if (isUndefined(that.$$parserValid)) {
	        setValidity(errorKey, null);
	      } else {
	        if (!that.$$parserValid) {
	          forEach(that.$validators, function(v, name) {
	            setValidity(name, null);
	          });
	          forEach(that.$asyncValidators, function(v, name) {
	            setValidity(name, null);
	          });
	        }
	        // Set the parse error last, to prevent unsetting it, should a $validators key == parserName
	        setValidity(errorKey, that.$$parserValid);
	        return that.$$parserValid;
	      }
	      return true;
	    }
	
	    function processSyncValidators() {
	      var syncValidatorsValid = true;
	      forEach(that.$validators, function(validator, name) {
	        var result = Boolean(validator(modelValue, viewValue));
	        syncValidatorsValid = syncValidatorsValid && result;
	        setValidity(name, result);
	      });
	      if (!syncValidatorsValid) {
	        forEach(that.$asyncValidators, function(v, name) {
	          setValidity(name, null);
	        });
	        return false;
	      }
	      return true;
	    }
	
	    function processAsyncValidators() {
	      var validatorPromises = [];
	      var allValid = true;
	      forEach(that.$asyncValidators, function(validator, name) {
	        var promise = validator(modelValue, viewValue);
	        if (!isPromiseLike(promise)) {
	          throw ngModelMinErr('nopromise',
	            'Expected asynchronous validator to return a promise but got \'{0}\' instead.', promise);
	        }
	        setValidity(name, undefined);
	        validatorPromises.push(promise.then(function() {
	          setValidity(name, true);
	        }, function() {
	          allValid = false;
	          setValidity(name, false);
	        }));
	      });
	      if (!validatorPromises.length) {
	        validationDone(true);
	      } else {
	        that.$$q.all(validatorPromises).then(function() {
	          validationDone(allValid);
	        }, noop);
	      }
	    }
	
	    function setValidity(name, isValid) {
	      if (localValidationRunId === that.$$currentValidationRunId) {
	        that.$setValidity(name, isValid);
	      }
	    }
	
	    function validationDone(allValid) {
	      if (localValidationRunId === that.$$currentValidationRunId) {
	
	        doneCallback(allValid);
	      }
	    }
	  },
	
	  /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$commitViewValue
	   *
	   * @description
	   * Commit a pending update to the `$modelValue`.
	   *
	   * Updates may be pending by a debounced event or because the input is waiting for a some future
	   * event defined in `ng-model-options`. this method is rarely needed as `NgModelController`
	   * usually handles calling this in response to input events.
	   */
	  $commitViewValue: function() {
	    var viewValue = this.$viewValue;
	
	    this.$$timeout.cancel(this.$$pendingDebounce);
	
	    // If the view value has not changed then we should just exit, except in the case where there is
	    // a native validator on the element. In this case the validation state may have changed even though
	    // the viewValue has stayed empty.
	    if (this.$$lastCommittedViewValue === viewValue && (viewValue !== '' || !this.$$hasNativeValidators)) {
	      return;
	    }
	    this.$$updateEmptyClasses(viewValue);
	    this.$$lastCommittedViewValue = viewValue;
	
	    // change to dirty
	    if (this.$pristine) {
	      this.$setDirty();
	    }
	    this.$$parseAndValidate();
	  },
	
	  $$parseAndValidate: function() {
	    var viewValue = this.$$lastCommittedViewValue;
	    var modelValue = viewValue;
	    var that = this;
	
	    this.$$parserValid = isUndefined(modelValue) ? undefined : true;
	
	    if (this.$$parserValid) {
	      for (var i = 0; i < this.$parsers.length; i++) {
	        modelValue = this.$parsers[i](modelValue);
	        if (isUndefined(modelValue)) {
	          this.$$parserValid = false;
	          break;
	        }
	      }
	    }
	    if (isNumberNaN(this.$modelValue)) {
	      // this.$modelValue has not been touched yet...
	      this.$modelValue = this.$$ngModelGet(this.$$scope);
	    }
	    var prevModelValue = this.$modelValue;
	    var allowInvalid = this.$options.getOption('allowInvalid');
	    this.$$rawModelValue = modelValue;
	
	    if (allowInvalid) {
	      this.$modelValue = modelValue;
	      writeToModelIfNeeded();
	    }
	
	    // Pass the $$lastCommittedViewValue here, because the cached viewValue might be out of date.
	    // This can happen if e.g. $setViewValue is called from inside a parser
	    this.$$runValidators(modelValue, this.$$lastCommittedViewValue, function(allValid) {
	      if (!allowInvalid) {
	        // Note: Don't check this.$valid here, as we could have
	        // external validators (e.g. calculated on the server),
	        // that just call $setValidity and need the model value
	        // to calculate their validity.
	        that.$modelValue = allValid ? modelValue : undefined;
	        writeToModelIfNeeded();
	      }
	    });
	
	    function writeToModelIfNeeded() {
	      if (that.$modelValue !== prevModelValue) {
	        that.$$writeModelToScope();
	      }
	    }
	  },
	
	  $$writeModelToScope: function() {
	    this.$$ngModelSet(this.$$scope, this.$modelValue);
	    forEach(this.$viewChangeListeners, function(listener) {
	      try {
	        listener();
	      } catch (e) {
	        // eslint-disable-next-line no-invalid-this
	        this.$$exceptionHandler(e);
	      }
	    }, this);
	  },
	
	  /**
	   * @ngdoc method
	   * @name ngModel.NgModelController#$setViewValue
	   *
	   * @description
	   * Update the view value.
	   *
	   * This method should be called when a control wants to change the view value; typically,
	   * this is done from within a DOM event handler. For example, the {@link ng.directive:input input}
	   * directive calls it when the value of the input changes and {@link ng.directive:select select}
	   * calls it when an option is selected.
	   *
	   * When `$setViewValue` is called, the new `value` will be staged for committing through the `$parsers`
	   * and `$validators` pipelines. If there are no special {@link ngModelOptions} specified then the staged
	   * value sent directly for processing, finally to be applied to `$modelValue` and then the
	   * **expression** specified in the `ng-model` attribute. Lastly, all the registered change listeners,
	   * in the `$viewChangeListeners` list, are called.
	   *
	   * In case the {@link ng.directive:ngModelOptions ngModelOptions} directive is used with `updateOn`
	   * and the `default` trigger is not listed, all those actions will remain pending until one of the
	   * `updateOn` events is triggered on the DOM element.
	   * All these actions will be debounced if the {@link ng.directive:ngModelOptions ngModelOptions}
	   * directive is used with a custom debounce for this particular event.
	   * Note that a `$digest` is only triggered once the `updateOn` events are fired, or if `debounce`
	   * is specified, once the timer runs out.
	   *
	   * When used with standard inputs, the view value will always be a string (which is in some cases
	   * parsed into another type, such as a `Date` object for `input[date]`.)
	   * However, custom controls might also pass objects to this method. In this case, we should make
	   * a copy of the object before passing it to `$setViewValue`. This is because `ngModel` does not
	   * perform a deep watch of objects, it only looks for a change of identity. If you only change
	   * the property of the object then ngModel will not realize that the object has changed and
	   * will not invoke the `$parsers` and `$validators` pipelines. For this reason, you should
	   * not change properties of the copy once it has been passed to `$setViewValue`.
	   * Otherwise you may cause the model value on the scope to change incorrectly.
	   *
	   * <div class="alert alert-info">
	   * In any case, the value passed to the method should always reflect the current value
	   * of the control. For example, if you are calling `$setViewValue` for an input element,
	   * you should pass the input DOM value. Otherwise, the control and the scope model become
	   * out of sync. It's also important to note that `$setViewValue` does not call `$render` or change
	   * the control's DOM value in any way. If we want to change the control's DOM value
	   * programmatically, we should update the `ngModel` scope expression. Its new value will be
	   * picked up by the model controller, which will run it through the `$formatters`, `$render` it
	   * to update the DOM, and finally call `$validate` on it.
	   * </div>
	   *
	   * @param {*} value value from the view.
	   * @param {string} trigger Event that triggered the update.
	   */
	  $setViewValue: function(value, trigger) {
	    this.$viewValue = value;
	    if (this.$options.getOption('updateOnDefault')) {
	      this.$$debounceViewValueCommit(trigger);
	    }
	  },
	
	  $$debounceViewValueCommit: function(trigger) {
	    var debounceDelay = this.$options.getOption('debounce');
	
	    if (isNumber(debounceDelay[trigger])) {
	      debounceDelay = debounceDelay[trigger];
	    } else if (isNumber(debounceDelay['default'])) {
	      debounceDelay = debounceDelay['default'];
	    }
	
	    this.$$timeout.cancel(this.$$pendingDebounce);
	    var that = this;
	    if (debounceDelay > 0) { // this fails if debounceDelay is an object
	      this.$$pendingDebounce = this.$$timeout(function() {
	        that.$commitViewValue();
	      }, debounceDelay);
	    } else if (this.$$scope.$root.$$phase) {
	      this.$commitViewValue();
	    } else {
	      this.$$scope.$apply(function() {
	        that.$commitViewValue();
	      });
	    }
	  }
	};
	
	function setupModelWatcher(ctrl) {
	  // model -> value
	  // Note: we cannot use a normal scope.$watch as we want to detect the following:
	  // 1. scope value is 'a'
	  // 2. user enters 'b'
	  // 3. ng-change kicks in and reverts scope value to 'a'
	  //    -> scope value did not change since the last digest as
	  //       ng-change executes in apply phase
	  // 4. view should be changed back to 'a'
	  ctrl.$$scope.$watch(function ngModelWatch() {
	    var modelValue = ctrl.$$ngModelGet(ctrl.$$scope);
	
	    // if scope model value and ngModel value are out of sync
	    // TODO(perf): why not move this to the action fn?
	    if (modelValue !== ctrl.$modelValue &&
	       // checks for NaN is needed to allow setting the model to NaN when there's an asyncValidator
	        // eslint-disable-next-line no-self-compare
	       (ctrl.$modelValue === ctrl.$modelValue || modelValue === modelValue)
	    ) {
	      ctrl.$modelValue = ctrl.$$rawModelValue = modelValue;
	      ctrl.$$parserValid = undefined;
	
	      var formatters = ctrl.$formatters,
	          idx = formatters.length;
	
	      var viewValue = modelValue;
	      while (idx--) {
	        viewValue = formatters[idx](viewValue);
	      }
	      if (ctrl.$viewValue !== viewValue) {
	        ctrl.$$updateEmptyClasses(viewValue);
	        ctrl.$viewValue = ctrl.$$lastCommittedViewValue = viewValue;
	        ctrl.$render();
	
	        // It is possible that model and view value have been updated during render
	        ctrl.$$runValidators(ctrl.$modelValue, ctrl.$viewValue, noop);
	      }
	    }
	
	    return modelValue;
	  });
	}
	
	/**
	 * @ngdoc method
	 * @name ngModel.NgModelController#$setValidity
	 *
	 * @description
	 * Change the validity state, and notify the form.
	 *
	 * This method can be called within $parsers/$formatters or a custom validation implementation.
	 * However, in most cases it should be sufficient to use the `ngModel.$validators` and
	 * `ngModel.$asyncValidators` collections which will call `$setValidity` automatically.
	 *
	 * @param {string} validationErrorKey Name of the validator. The `validationErrorKey` will be assigned
	 *        to either `$error[validationErrorKey]` or `$pending[validationErrorKey]`
	 *        (for unfulfilled `$asyncValidators`), so that it is available for data-binding.
	 *        The `validationErrorKey` should be in camelCase and will get converted into dash-case
	 *        for class name. Example: `myError` will result in `ng-valid-my-error` and `ng-invalid-my-error`
	 *        class and can be bound to as  `{{someForm.someControl.$error.myError}}` .
	 * @param {boolean} isValid Whether the current state is valid (true), invalid (false), pending (undefined),
	 *                          or skipped (null). Pending is used for unfulfilled `$asyncValidators`.
	 *                          Skipped is used by Angular when validators do not run because of parse errors and
	 *                          when `$asyncValidators` do not run because any of the `$validators` failed.
	 */
	addSetValidityMethod({
	  clazz: NgModelController,
	  set: function(object, property) {
	    object[property] = true;
	  },
	  unset: function(object, property) {
	    delete object[property];
	  }
	});
	
	
	/**
	 * @ngdoc directive
	 * @name ngModel
	 *
	 * @element input
	 * @priority 1
	 *
	 * @description
	 * The `ngModel` directive binds an `input`,`select`, `textarea` (or custom form control) to a
	 * property on the scope using {@link ngModel.NgModelController NgModelController},
	 * which is created and exposed by this directive.
	 *
	 * `ngModel` is responsible for:
	 *
	 * - Binding the view into the model, which other directives such as `input`, `textarea` or `select`
	 *   require.
	 * - Providing validation behavior (i.e. required, number, email, url).
	 * - Keeping the state of the control (valid/invalid, dirty/pristine, touched/untouched, validation errors).
	 * - Setting related css classes on the element (`ng-valid`, `ng-invalid`, `ng-dirty`, `ng-pristine`, `ng-touched`,
	 *   `ng-untouched`, `ng-empty`, `ng-not-empty`) including animations.
	 * - Registering the control with its parent {@link ng.directive:form form}.
	 *
	 * Note: `ngModel` will try to bind to the property given by evaluating the expression on the
	 * current scope. If the property doesn't already exist on this scope, it will be created
	 * implicitly and added to the scope.
	 *
	 * For best practices on using `ngModel`, see:
	 *
	 *  - [Understanding Scopes](https://github.com/angular/angular.js/wiki/Understanding-Scopes)
	 *
	 * For basic examples, how to use `ngModel`, see:
	 *
	 *  - {@link ng.directive:input input}
	 *    - {@link input[text] text}
	 *    - {@link input[checkbox] checkbox}
	 *    - {@link input[radio] radio}
	 *    - {@link input[number] number}
	 *    - {@link input[email] email}
	 *    - {@link input[url] url}
	 *    - {@link input[date] date}
	 *    - {@link input[datetime-local] datetime-local}
	 *    - {@link input[time] time}
	 *    - {@link input[month] month}
	 *    - {@link input[week] week}
	 *  - {@link ng.directive:select select}
	 *  - {@link ng.directive:textarea textarea}
	 *
	 * # Complex Models (objects or collections)
	 *
	 * By default, `ngModel` watches the model by reference, not value. This is important to know when
	 * binding inputs to models that are objects (e.g. `Date`) or collections (e.g. arrays). If only properties of the
	 * object or collection change, `ngModel` will not be notified and so the input will not be  re-rendered.
	 *
	 * The model must be assigned an entirely new object or collection before a re-rendering will occur.
	 *
	 * Some directives have options that will cause them to use a custom `$watchCollection` on the model expression
	 * - for example, `ngOptions` will do so when a `track by` clause is included in the comprehension expression or
	 * if the select is given the `multiple` attribute.
	 *
	 * The `$watchCollection()` method only does a shallow comparison, meaning that changing properties deeper than the
	 * first level of the object (or only changing the properties of an item in the collection if it's an array) will still
	 * not trigger a re-rendering of the model.
	 *
	 * # CSS classes
	 * The following CSS classes are added and removed on the associated input/select/textarea element
	 * depending on the validity of the model.
	 *
	 *  - `ng-valid`: the model is valid
	 *  - `ng-invalid`: the model is invalid
	 *  - `ng-valid-[key]`: for each valid key added by `$setValidity`
	 *  - `ng-invalid-[key]`: for each invalid key added by `$setValidity`
	 *  - `ng-pristine`: the control hasn't been interacted with yet
	 *  - `ng-dirty`: the control has been interacted with
	 *  - `ng-touched`: the control has been blurred
	 *  - `ng-untouched`: the control hasn't been blurred
	 *  - `ng-pending`: any `$asyncValidators` are unfulfilled
	 *  - `ng-empty`: the view does not contain a value or the value is deemed "empty", as defined
	 *     by the {@link ngModel.NgModelController#$isEmpty} method
	 *  - `ng-not-empty`: the view contains a non-empty value
	 *
	 * Keep in mind that ngAnimate can detect each of these classes when added and removed.
	 *
	 * ## Animation Hooks
	 *
	 * Animations within models are triggered when any of the associated CSS classes are added and removed
	 * on the input element which is attached to the model. These classes include: `.ng-pristine`, `.ng-dirty`,
	 * `.ng-invalid` and `.ng-valid` as well as any other validations that are performed on the model itself.
	 * The animations that are triggered within ngModel are similar to how they work in ngClass and
	 * animations can be hooked into using CSS transitions, keyframes as well as JS animations.
	 *
	 * The following example shows a simple way to utilize CSS transitions to style an input element
	 * that has been rendered as invalid after it has been validated:
	 *
	 * <pre>
	 * //be sure to include ngAnimate as a module to hook into more
	 * //advanced animations
	 * .my-input {
	 *   transition:0.5s linear all;
	 *   background: white;
	 * }
	 * .my-input.ng-invalid {
	 *   background: red;
	 *   color:white;
	 * }
	 * </pre>
	 *
	 * @example
	 * <example deps="angular-animate.js" animations="true" fixBase="true" module="inputExample" name="ng-model">
	     <file name="index.html">
	       <script>
	        angular.module('inputExample', [])
	          .controller('ExampleController', ['$scope', function($scope) {
	            $scope.val = '1';
	          }]);
	       </script>
	       <style>
	         .my-input {
	           transition:all linear 0.5s;
	           background: transparent;
	         }
	         .my-input.ng-invalid {
	           color:white;
	           background: red;
	         }
	       </style>
	       <p id="inputDescription">
	        Update input to see transitions when valid/invalid.
	        Integer is a valid value.
	       </p>
	       <form name="testForm" ng-controller="ExampleController">
	         <input ng-model="val" ng-pattern="/^\d+$/" name="anim" class="my-input"
	                aria-describedby="inputDescription" />
	       </form>
	     </file>
	 * </example>
	 *
	 * ## Binding to a getter/setter
	 *
	 * Sometimes it's helpful to bind `ngModel` to a getter/setter function.  A getter/setter is a
	 * function that returns a representation of the model when called with zero arguments, and sets
	 * the internal state of a model when called with an argument. It's sometimes useful to use this
	 * for models that have an internal representation that's different from what the model exposes
	 * to the view.
	 *
	 * <div class="alert alert-success">
	 * **Best Practice:** It's best to keep getters fast because Angular is likely to call them more
	 * frequently than other parts of your code.
	 * </div>
	 *
	 * You use this behavior by adding `ng-model-options="{ getterSetter: true }"` to an element that
	 * has `ng-model` attached to it. You can also add `ng-model-options="{ getterSetter: true }"` to
	 * a `<form>`, which will enable this behavior for all `<input>`s within it. See
	 * {@link ng.directive:ngModelOptions `ngModelOptions`} for more.
	 *
	 * The following example shows how to use `ngModel` with a getter/setter:
	 *
	 * @example
	 * <example name="ngModel-getter-setter" module="getterSetterExample">
	     <file name="index.html">
	       <div ng-controller="ExampleController">
	         <form name="userForm">
	           <label>Name:
	             <input type="text" name="userName"
	                    ng-model="user.name"
	                    ng-model-options="{ getterSetter: true }" />
	           </label>
	         </form>
	         <pre>user.name = <span ng-bind="user.name()"></span></pre>
	       </div>
	     </file>
	     <file name="app.js">
	       angular.module('getterSetterExample', [])
	         .controller('ExampleController', ['$scope', function($scope) {
	           var _name = 'Brian';
	           $scope.user = {
	             name: function(newName) {
	              // Note that newName can be undefined for two reasons:
	              // 1. Because it is called as a getter and thus called with no arguments
	              // 2. Because the property should actually be set to undefined. This happens e.g. if the
	              //    input is invalid
	              return arguments.length ? (_name = newName) : _name;
	             }
	           };
	         }]);
	     </file>
	 * </example>
	 */
	var ngModelDirective = ['$rootScope', function($rootScope) {
	  return {
	    restrict: 'A',
	    require: ['ngModel', '^?form', '^?ngModelOptions'],
	    controller: NgModelController,
	    // Prelink needs to run before any input directive
	    // so that we can set the NgModelOptions in NgModelController
	    // before anyone else uses it.
	    priority: 1,
	    compile: function ngModelCompile(element) {
	      // Setup initial state of the control
	      element.addClass(PRISTINE_CLASS).addClass(UNTOUCHED_CLASS).addClass(VALID_CLASS);
	
	      return {
	        pre: function ngModelPreLink(scope, element, attr, ctrls) {
	          var modelCtrl = ctrls[0],
	              formCtrl = ctrls[1] || modelCtrl.$$parentForm,
	              optionsCtrl = ctrls[2];
	
	          if (optionsCtrl) {
	            modelCtrl.$options = optionsCtrl.$options;
	          }
	
	          modelCtrl.$$initGetterSetters();
	
	          // notify others, especially parent forms
	          formCtrl.$addControl(modelCtrl);
	
	          attr.$observe('name', function(newValue) {
	            if (modelCtrl.$name !== newValue) {
	              modelCtrl.$$parentForm.$$renameControl(modelCtrl, newValue);
	            }
	          });
	
	          scope.$on('$destroy', function() {
	            modelCtrl.$$parentForm.$removeControl(modelCtrl);
	          });
	        },
	        post: function ngModelPostLink(scope, element, attr, ctrls) {
	          var modelCtrl = ctrls[0];
	          if (modelCtrl.$options.getOption('updateOn')) {
	            element.on(modelCtrl.$options.getOption('updateOn'), function(ev) {
	              modelCtrl.$$debounceViewValueCommit(ev && ev.type);
	            });
	          }
	
	          function setTouched() {
	            modelCtrl.$setTouched();
	          }
	
	          element.on('blur', function() {
	            if (modelCtrl.$touched) return;
	
	            if ($rootScope.$$phase) {
	              scope.$evalAsync(setTouched);
	            } else {
	              scope.$apply(setTouched);
	            }
	          });
	        }
	      };
	    }
	  };
	}];
	
	/* exported defaultModelOptions */
	var defaultModelOptions;
	var DEFAULT_REGEXP = /(\s+|^)default(\s+|$)/;
	
	/**
	 * @ngdoc type
	 * @name ModelOptions
	 * @description
	 * A container for the options set by the {@link ngModelOptions} directive
	 */
	function ModelOptions(options) {
	  this.$$options = options;
	}
	
	ModelOptions.prototype = {
	
	  /**
	   * @ngdoc method
	   * @name ModelOptions#getOption
	   * @param {string} name the name of the option to retrieve
	   * @returns {*} the value of the option
	   * @description
	   * Returns the value of the given option
	   */
	  getOption: function(name) {
	    return this.$$options[name];
	  },
	
	  /**
	   * @ngdoc method
	   * @name ModelOptions#createChild
	   * @param {Object} options a hash of options for the new child that will override the parent's options
	   * @return {ModelOptions} a new `ModelOptions` object initialized with the given options.
	   */
	  createChild: function(options) {
	    var inheritAll = false;
	
	    // make a shallow copy
	    options = extend({}, options);
	
	    // Inherit options from the parent if specified by the value `"$inherit"`
	    forEach(options, /* @this */ function(option, key) {
	      if (option === '$inherit') {
	        if (key === '*') {
	          inheritAll = true;
	        } else {
	          options[key] = this.$$options[key];
	          // `updateOn` is special so we must also inherit the `updateOnDefault` option
	          if (key === 'updateOn') {
	            options.updateOnDefault = this.$$options.updateOnDefault;
	          }
	        }
	      } else {
	        if (key === 'updateOn') {
	          // If the `updateOn` property contains the `default` event then we have to remove
	          // it from the event list and set the `updateOnDefault` flag.
	          options.updateOnDefault = false;
	          options[key] = trim(option.replace(DEFAULT_REGEXP, function() {
	            options.updateOnDefault = true;
	            return ' ';
	          }));
	        }
	      }
	    }, this);
	
	    if (inheritAll) {
	      // We have a property of the form: `"*": "$inherit"`
	      delete options['*'];
	      defaults(options, this.$$options);
	    }
	
	    // Finally add in any missing defaults
	    defaults(options, defaultModelOptions.$$options);
	
	    return new ModelOptions(options);
	  }
	};
	
	
	defaultModelOptions = new ModelOptions({
	  updateOn: '',
	  updateOnDefault: true,
	  debounce: 0,
	  getterSetter: false,
	  allowInvalid: false,
	  timezone: null
	});
	
	
	/**
	 * @ngdoc directive
	 * @name ngModelOptions
	 *
	 * @description
	 * This directive allows you to modify the behaviour of {@link ngModel} directives within your
	 * application. You can specify an `ngModelOptions` directive on any element. All {@link ngModel}
	 * directives will use the options of their nearest `ngModelOptions` ancestor.
	 *
	 * The `ngModelOptions` settings are found by evaluating the value of the attribute directive as
	 * an Angular expression. This expression should evaluate to an object, whose properties contain
	 * the settings. For example: `<div "ng-model-options"="{ debounce: 100 }"`.
	 *
	 * ## Inheriting Options
	 *
	 * You can specify that an `ngModelOptions` setting should be inherited from a parent `ngModelOptions`
	 * directive by giving it the value of `"$inherit"`.
	 * Then it will inherit that setting from the first `ngModelOptions` directive found by traversing up the
	 * DOM tree. If there is no ancestor element containing an `ngModelOptions` directive then default settings
	 * will be used.
	 *
	 * For example given the following fragment of HTML
	 *
	 *
	 * ```html
	 * <div ng-model-options="{ allowInvalid: true, debounce: 200 }">
	 *   <form ng-model-options="{ updateOn: 'blur', allowInvalid: '$inherit' }">
	 *     <input ng-model-options="{ updateOn: 'default', allowInvalid: '$inherit' }" />
	 *   </form>
	 * </div>
	 * ```
	 *
	 * the `input` element will have the following settings
	 *
	 * ```js
	 * { allowInvalid: true, updateOn: 'default', debounce: 0 }
	 * ```
	 *
	 * Notice that the `debounce` setting was not inherited and used the default value instead.
	 *
	 * You can specify that all undefined settings are automatically inherited from an ancestor by
	 * including a property with key of `"*"` and value of `"$inherit"`.
	 *
	 * For example given the following fragment of HTML
	 *
	 *
	 * ```html
	 * <div ng-model-options="{ allowInvalid: true, debounce: 200 }">
	 *   <form ng-model-options="{ updateOn: 'blur', "*": '$inherit' }">
	 *     <input ng-model-options="{ updateOn: 'default', "*": '$inherit' }" />
	 *   </form>
	 * </div>
	 * ```
	 *
	 * the `input` element will have the following settings
	 *
	 * ```js
	 * { allowInvalid: true, updateOn: 'default', debounce: 200 }
	 * ```
	 *
	 * Notice that the `debounce` setting now inherits the value from the outer `<div>` element.
	 *
	 * If you are creating a reusable component then you should be careful when using `"*": "$inherit"`
	 * since you may inadvertently inherit a setting in the future that changes the behavior of your component.
	 *
	 *
	 * ## Triggering and debouncing model updates
	 *
	 * The `updateOn` and `debounce` properties allow you to specify a custom list of events that will
	 * trigger a model update and/or a debouncing delay so that the actual update only takes place when
	 * a timer expires; this timer will be reset after another change takes place.
	 *
	 * Given the nature of `ngModelOptions`, the value displayed inside input fields in the view might
	 * be different from the value in the actual model. This means that if you update the model you
	 * should also invoke {@link ngModel.NgModelController#$rollbackViewValue} on the relevant input field in
	 * order to make sure it is synchronized with the model and that any debounced action is canceled.
	 *
	 * The easiest way to reference the control's {@link ngModel.NgModelController#$rollbackViewValue}
	 * method is by making sure the input is placed inside a form that has a `name` attribute. This is
	 * important because `form` controllers are published to the related scope under the name in their
	 * `name` attribute.
	 *
	 * Any pending changes will take place immediately when an enclosing form is submitted via the
	 * `submit` event. Note that `ngClick` events will occur before the model is updated. Use `ngSubmit`
	 * to have access to the updated model.
	 *
	 * The following example shows how to override immediate updates. Changes on the inputs within the
	 * form will update the model only when the control loses focus (blur event). If `escape` key is
	 * pressed while the input field is focused, the value is reset to the value in the current model.
	 *
	 * <example name="ngModelOptions-directive-blur" module="optionsExample">
	 *   <file name="index.html">
	 *     <div ng-controller="ExampleController">
	 *       <form name="userForm">
	 *         <label>
	 *           Name:
	 *           <input type="text" name="userName"
	 *                  ng-model="user.name"
	 *                  ng-model-options="{ updateOn: 'blur' }"
	 *                  ng-keyup="cancel($event)" />
	 *         </label><br />
	 *         <label>
	 *           Other data:
	 *           <input type="text" ng-model="user.data" />
	 *         </label><br />
	 *       </form>
	 *       <pre>user.name = <span ng-bind="user.name"></span></pre>
	 *     </div>
	 *   </file>
	 *   <file name="app.js">
	 *     angular.module('optionsExample', [])
	 *       .controller('ExampleController', ['$scope', function($scope) {
	 *         $scope.user = { name: 'say', data: '' };
	 *
	 *         $scope.cancel = function(e) {
	 *           if (e.keyCode === 27) {
	 *             $scope.userForm.userName.$rollbackViewValue();
	 *           }
	 *         };
	 *       }]);
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	 *     var model = element(by.binding('user.name'));
	 *     var input = element(by.model('user.name'));
	 *     var other = element(by.model('user.data'));
	 *
	 *     it('should allow custom events', function() {
	 *       input.sendKeys(' hello');
	 *       input.click();
	 *       expect(model.getText()).toEqual('say');
	 *       other.click();
	 *       expect(model.getText()).toEqual('say hello');
	 *     });
	 *
	 *     it('should $rollbackViewValue when model changes', function() {
	 *       input.sendKeys(' hello');
	 *       expect(input.getAttribute('value')).toEqual('say hello');
	 *       input.sendKeys(protractor.Key.ESCAPE);
	 *       expect(input.getAttribute('value')).toEqual('say');
	 *       other.click();
	 *       expect(model.getText()).toEqual('say');
	 *     });
	 *   </file>
	 * </example>
	 *
	 * The next example shows how to debounce model changes. Model will be updated only 1 sec after last change.
	 * If the `Clear` button is pressed, any debounced action is canceled and the value becomes empty.
	 *
	 * <example name="ngModelOptions-directive-debounce" module="optionsExample">
	 *   <file name="index.html">
	 *     <div ng-controller="ExampleController">
	 *       <form name="userForm">
	 *         Name:
	 *         <input type="text" name="userName"
	 *                ng-model="user.name"
	 *                ng-model-options="{ debounce: 1000 }" />
	 *         <button ng-click="userForm.userName.$rollbackViewValue(); user.name=''">Clear</button><br />
	 *       </form>
	 *       <pre>user.name = <span ng-bind="user.name"></span></pre>
	 *     </div>
	 *   </file>
	 *   <file name="app.js">
	 *     angular.module('optionsExample', [])
	 *       .controller('ExampleController', ['$scope', function($scope) {
	 *         $scope.user = { name: 'say' };
	 *       }]);
	 *   </file>
	 * </example>
	 *
	 * ## Model updates and validation
	 *
	 * The default behaviour in `ngModel` is that the model value is set to `undefined` when the
	 * validation determines that the value is invalid. By setting the `allowInvalid` property to true,
	 * the model will still be updated even if the value is invalid.
	 *
	 *
	 * ## Connecting to the scope
	 *
	 * By setting the `getterSetter` property to true you are telling ngModel that the `ngModel` expression
	 * on the scope refers to a "getter/setter" function rather than the value itself.
	 *
	 * The following example shows how to bind to getter/setters:
	 *
	 * <example name="ngModelOptions-directive-getter-setter" module="getterSetterExample">
	 *   <file name="index.html">
	 *     <div ng-controller="ExampleController">
	 *       <form name="userForm">
	 *         <label>
	 *           Name:
	 *           <input type="text" name="userName"
	 *                  ng-model="user.name"
	 *                  ng-model-options="{ getterSetter: true }" />
	 *         </label>
	 *       </form>
	 *       <pre>user.name = <span ng-bind="user.name()"></span></pre>
	 *     </div>
	 *   </file>
	 *   <file name="app.js">
	 *     angular.module('getterSetterExample', [])
	 *       .controller('ExampleController', ['$scope', function($scope) {
	 *         var _name = 'Brian';
	 *         $scope.user = {
	 *           name: function(newName) {
	 *             return angular.isDefined(newName) ? (_name = newName) : _name;
	 *           }
	 *         };
	 *       }]);
	 *   </file>
	 * </example>
	 *
	 *
	 * ## Specifying timezones
	 *
	 * You can specify the timezone that date/time input directives expect by providing its name in the
	 * `timezone` property.
	 *
	 * @param {Object} ngModelOptions options to apply to {@link ngModel} directives on this element and
	 *   and its descendents. Valid keys are:
	 *   - `updateOn`: string specifying which event should the input be bound to. You can set several
	 *     events using an space delimited list. There is a special event called `default` that
	 *     matches the default events belonging to the control.
	 *   - `debounce`: integer value which contains the debounce model update value in milliseconds. A
	 *     value of 0 triggers an immediate update. If an object is supplied instead, you can specify a
	 *     custom value for each event. For example:
	 *     ```
	 *     ng-model-options="{
	 *       updateOn: 'default blur',
	 *       debounce: { 'default': 500, 'blur': 0 }
	 *     }"
	 *     ```
	 *   - `allowInvalid`: boolean value which indicates that the model can be set with values that did
	 *     not validate correctly instead of the default behavior of setting the model to undefined.
	 *   - `getterSetter`: boolean value which determines whether or not to treat functions bound to
	 *     `ngModel` as getters/setters.
	 *   - `timezone`: Defines the timezone to be used to read/write the `Date` instance in the model for
	 *     `<input type="date" />`, `<input type="time" />`, ... . It understands UTC/GMT and the
	 *     continental US time zone abbreviations, but for general use, use a time zone offset, for
	 *     example, `'+0430'` (4 hours, 30 minutes east of the Greenwich meridian)
	 *     If not specified, the timezone of the browser will be used.
	 *
	 */
	var ngModelOptionsDirective = function() {
	  NgModelOptionsController.$inject = ['$attrs', '$scope'];
	  function NgModelOptionsController($attrs, $scope) {
	    this.$$attrs = $attrs;
	    this.$$scope = $scope;
	  }
	  NgModelOptionsController.prototype = {
	    $onInit: function() {
	      var parentOptions = this.parentCtrl ? this.parentCtrl.$options : defaultModelOptions;
	      var modelOptionsDefinition = this.$$scope.$eval(this.$$attrs.ngModelOptions);
	
	      this.$options = parentOptions.createChild(modelOptionsDefinition);
	    }
	  };
	
	  return {
	    restrict: 'A',
	    // ngModelOptions needs to run before ngModel and input directives
	    priority: 10,
	    require: {parentCtrl: '?^^ngModelOptions'},
	    bindToController: true,
	    controller: NgModelOptionsController
	  };
	};
	
	
	// shallow copy over values from `src` that are not already specified on `dst`
	function defaults(dst, src) {
	  forEach(src, function(value, key) {
	    if (!isDefined(dst[key])) {
	      dst[key] = value;
	    }
	  });
	}
	
	/**
	 * @ngdoc directive
	 * @name ngNonBindable
	 * @restrict AC
	 * @priority 1000
	 *
	 * @description
	 * The `ngNonBindable` directive tells Angular not to compile or bind the contents of the current
	 * DOM element. This is useful if the element contains what appears to be Angular directives and
	 * bindings but which should be ignored by Angular. This could be the case if you have a site that
	 * displays snippets of code, for instance.
	 *
	 * @element ANY
	 *
	 * @example
	 * In this example there are two locations where a simple interpolation binding (`{{}}`) is present,
	 * but the one wrapped in `ngNonBindable` is left alone.
	 *
	 * @example
	    <example name="ng-non-bindable">
	      <file name="index.html">
	        <div>Normal: {{1 + 2}}</div>
	        <div ng-non-bindable>Ignored: {{1 + 2}}</div>
	      </file>
	      <file name="protractor.js" type="protractor">
	       it('should check ng-non-bindable', function() {
	         expect(element(by.binding('1 + 2')).getText()).toContain('3');
	         expect(element.all(by.css('div')).last().getText()).toMatch(/1 \+ 2/);
	       });
	      </file>
	    </example>
	 */
	var ngNonBindableDirective = ngDirective({ terminal: true, priority: 1000 });
	
	/* exported ngOptionsDirective */
	
	/* global jqLiteRemove */
	
	var ngOptionsMinErr = minErr('ngOptions');
	
	/**
	 * @ngdoc directive
	 * @name ngOptions
	 * @restrict A
	 *
	 * @description
	 *
	 * The `ngOptions` attribute can be used to dynamically generate a list of `<option>`
	 * elements for the `<select>` element using the array or object obtained by evaluating the
	 * `ngOptions` comprehension expression.
	 *
	 * In many cases, {@link ng.directive:ngRepeat ngRepeat} can be used on `<option>` elements instead of
	 * `ngOptions` to achieve a similar result. However, `ngOptions` provides some benefits:
	 * - more flexibility in how the `<select>`'s model is assigned via the `select` **`as`** part of the
	 * comprehension expression
	 * - reduced memory consumption by not creating a new scope for each repeated instance
	 * - increased render speed by creating the options in a documentFragment instead of individually
	 *
	 * When an item in the `<select>` menu is selected, the array element or object property
	 * represented by the selected option will be bound to the model identified by the `ngModel`
	 * directive.
	 *
	 * Optionally, a single hard-coded `<option>` element, with the value set to an empty string, can
	 * be nested into the `<select>` element. This element will then represent the `null` or "not selected"
	 * option. See example below for demonstration.
	 *
	 * ## Complex Models (objects or collections)
	 *
	 * By default, `ngModel` watches the model by reference, not value. This is important to know when
	 * binding the select to a model that is an object or a collection.
	 *
	 * One issue occurs if you want to preselect an option. For example, if you set
	 * the model to an object that is equal to an object in your collection, `ngOptions` won't be able to set the selection,
	 * because the objects are not identical. So by default, you should always reference the item in your collection
	 * for preselections, e.g.: `$scope.selected = $scope.collection[3]`.
	 *
	 * Another solution is to use a `track by` clause, because then `ngOptions` will track the identity
	 * of the item not by reference, but by the result of the `track by` expression. For example, if your
	 * collection items have an id property, you would `track by item.id`.
	 *
	 * A different issue with objects or collections is that ngModel won't detect if an object property or
	 * a collection item changes. For that reason, `ngOptions` additionally watches the model using
	 * `$watchCollection`, when the expression contains a `track by` clause or the the select has the `multiple` attribute.
	 * This allows ngOptions to trigger a re-rendering of the options even if the actual object/collection
	 * has not changed identity, but only a property on the object or an item in the collection changes.
	 *
	 * Note that `$watchCollection` does a shallow comparison of the properties of the object (or the items in the collection
	 * if the model is an array). This means that changing a property deeper than the first level inside the
	 * object/collection will not trigger a re-rendering.
	 *
	 * ## `select` **`as`**
	 *
	 * Using `select` **`as`** will bind the result of the `select` expression to the model, but
	 * the value of the `<select>` and `<option>` html elements will be either the index (for array data sources)
	 * or property name (for object data sources) of the value within the collection. If a **`track by`** expression
	 * is used, the result of that expression will be set as the value of the `option` and `select` elements.
	 *
	 *
	 * ### `select` **`as`** and **`track by`**
	 *
	 * <div class="alert alert-warning">
	 * Be careful when using `select` **`as`** and **`track by`** in the same expression.
	 * </div>
	 *
	 * Given this array of items on the $scope:
	 *
	 * ```js
	 * $scope.items = [{
	 *   id: 1,
	 *   label: 'aLabel',
	 *   subItem: { name: 'aSubItem' }
	 * }, {
	 *   id: 2,
	 *   label: 'bLabel',
	 *   subItem: { name: 'bSubItem' }
	 * }];
	 * ```
	 *
	 * This will work:
	 *
	 * ```html
	 * <select ng-options="item as item.label for item in items track by item.id" ng-model="selected"></select>
	 * ```
	 * ```js
	 * $scope.selected = $scope.items[0];
	 * ```
	 *
	 * but this will not work:
	 *
	 * ```html
	 * <select ng-options="item.subItem as item.label for item in items track by item.id" ng-model="selected"></select>
	 * ```
	 * ```js
	 * $scope.selected = $scope.items[0].subItem;
	 * ```
	 *
	 * In both examples, the **`track by`** expression is applied successfully to each `item` in the
	 * `items` array. Because the selected option has been set programmatically in the controller, the
	 * **`track by`** expression is also applied to the `ngModel` value. In the first example, the
	 * `ngModel` value is `items[0]` and the **`track by`** expression evaluates to `items[0].id` with
	 * no issue. In the second example, the `ngModel` value is `items[0].subItem` and the **`track by`**
	 * expression evaluates to `items[0].subItem.id` (which is undefined). As a result, the model value
	 * is not matched against any `<option>` and the `<select>` appears as having no selected value.
	 *
	 *
	 * @param {string} ngModel Assignable angular expression to data-bind to.
	 * @param {string=} name Property name of the form under which the control is published.
	 * @param {string=} required The control is considered valid only if value is entered.
	 * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
	 *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
	 *    `required` when you want to data-bind to the `required` attribute.
	 * @param {comprehension_expression=} ngOptions in one of the following forms:
	 *
	 *   * for array data sources:
	 *     * `label` **`for`** `value` **`in`** `array`
	 *     * `select` **`as`** `label` **`for`** `value` **`in`** `array`
	 *     * `label` **`group by`** `group` **`for`** `value` **`in`** `array`
	 *     * `label` **`disable when`** `disable` **`for`** `value` **`in`** `array`
	 *     * `label` **`group by`** `group` **`for`** `value` **`in`** `array` **`track by`** `trackexpr`
	 *     * `label` **`disable when`** `disable` **`for`** `value` **`in`** `array` **`track by`** `trackexpr`
	 *     * `label` **`for`** `value` **`in`** `array` | orderBy:`orderexpr` **`track by`** `trackexpr`
	 *        (for including a filter with `track by`)
	 *   * for object data sources:
	 *     * `label` **`for (`**`key` **`,`** `value`**`) in`** `object`
	 *     * `select` **`as`** `label` **`for (`**`key` **`,`** `value`**`) in`** `object`
	 *     * `label` **`group by`** `group` **`for (`**`key`**`,`** `value`**`) in`** `object`
	 *     * `label` **`disable when`** `disable` **`for (`**`key`**`,`** `value`**`) in`** `object`
	 *     * `select` **`as`** `label` **`group by`** `group`
	 *         **`for` `(`**`key`**`,`** `value`**`) in`** `object`
	 *     * `select` **`as`** `label` **`disable when`** `disable`
	 *         **`for` `(`**`key`**`,`** `value`**`) in`** `object`
	 *
	 * Where:
	 *
	 *   * `array` / `object`: an expression which evaluates to an array / object to iterate over.
	 *   * `value`: local variable which will refer to each item in the `array` or each property value
	 *      of `object` during iteration.
	 *   * `key`: local variable which will refer to a property name in `object` during iteration.
	 *   * `label`: The result of this expression will be the label for `<option>` element. The
	 *     `expression` will most likely refer to the `value` variable (e.g. `value.propertyName`).
	 *   * `select`: The result of this expression will be bound to the model of the parent `<select>`
	 *      element. If not specified, `select` expression will default to `value`.
	 *   * `group`: The result of this expression will be used to group options using the `<optgroup>`
	 *      DOM element.
	 *   * `disable`: The result of this expression will be used to disable the rendered `<option>`
	 *      element. Return `true` to disable.
	 *   * `trackexpr`: Used when working with an array of objects. The result of this expression will be
	 *      used to identify the objects in the array. The `trackexpr` will most likely refer to the
	 *     `value` variable (e.g. `value.propertyName`). With this the selection is preserved
	 *      even when the options are recreated (e.g. reloaded from the server).
	 *
	 * @example
	    <example module="selectExample" name="select">
	      <file name="index.html">
	        <script>
	        angular.module('selectExample', [])
	          .controller('ExampleController', ['$scope', function($scope) {
	            $scope.colors = [
	              {name:'black', shade:'dark'},
	              {name:'white', shade:'light', notAnOption: true},
	              {name:'red', shade:'dark'},
	              {name:'blue', shade:'dark', notAnOption: true},
	              {name:'yellow', shade:'light', notAnOption: false}
	            ];
	            $scope.myColor = $scope.colors[2]; // red
	          }]);
	        </script>
	        <div ng-controller="ExampleController">
	          <ul>
	            <li ng-repeat="color in colors">
	              <label>Name: <input ng-model="color.name"></label>
	              <label><input type="checkbox" ng-model="color.notAnOption"> Disabled?</label>
	              <button ng-click="colors.splice($index, 1)" aria-label="Remove">X</button>
	            </li>
	            <li>
	              <button ng-click="colors.push({})">add</button>
	            </li>
	          </ul>
	          <hr/>
	          <label>Color (null not allowed):
	            <select ng-model="myColor" ng-options="color.name for color in colors"></select>
	          </label><br/>
	          <label>Color (null allowed):
	          <span  class="nullable">
	            <select ng-model="myColor" ng-options="color.name for color in colors">
	              <option value="">-- choose color --</option>
	            </select>
	          </span></label><br/>
	
	          <label>Color grouped by shade:
	            <select ng-model="myColor" ng-options="color.name group by color.shade for color in colors">
	            </select>
	          </label><br/>
	
	          <label>Color grouped by shade, with some disabled:
	            <select ng-model="myColor"
	                  ng-options="color.name group by color.shade disable when color.notAnOption for color in colors">
	            </select>
	          </label><br/>
	
	
	
	          Select <button ng-click="myColor = { name:'not in list', shade: 'other' }">bogus</button>.
	          <br/>
	          <hr/>
	          Currently selected: {{ {selected_color:myColor} }}
	          <div style="border:solid 1px black; height:20px"
	               ng-style="{'background-color':myColor.name}">
	          </div>
	        </div>
	      </file>
	      <file name="protractor.js" type="protractor">
	         it('should check ng-options', function() {
	           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('red');
	           element.all(by.model('myColor')).first().click();
	           element.all(by.css('select[ng-model="myColor"] option')).first().click();
	           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('black');
	           element(by.css('.nullable select[ng-model="myColor"]')).click();
	           element.all(by.css('.nullable select[ng-model="myColor"] option')).first().click();
	           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('null');
	         });
	      </file>
	    </example>
	 */
	
	/* eslint-disable max-len */
	//                     //00001111111111000000000002222222222000000000000000000000333333333300000000000000000000000004444444444400000000000005555555555555000000000666666666666600000007777777777777000000000000000888888888800000000000000000009999999999
	var NG_OPTIONS_REGEXP = /^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?(?:\s+disable\s+when\s+([\s\S]+?))?\s+for\s+(?:([$\w][$\w]*)|(?:\(\s*([$\w][$\w]*)\s*,\s*([$\w][$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/;
	                        // 1: value expression (valueFn)
	                        // 2: label expression (displayFn)
	                        // 3: group by expression (groupByFn)
	                        // 4: disable when expression (disableWhenFn)
	                        // 5: array item variable name
	                        // 6: object item key variable name
	                        // 7: object item value variable name
	                        // 8: collection expression
	                        // 9: track by expression
	/* eslint-enable */
	
	
	var ngOptionsDirective = ['$compile', '$document', '$parse', function($compile, $document, $parse) {
	
	  function parseOptionsExpression(optionsExp, selectElement, scope) {
	
	    var match = optionsExp.match(NG_OPTIONS_REGEXP);
	    if (!(match)) {
	      throw ngOptionsMinErr('iexp',
	        'Expected expression in form of ' +
	        '\'_select_ (as _label_)? for (_key_,)?_value_ in _collection_\'' +
	        ' but got \'{0}\'. Element: {1}',
	        optionsExp, startingTag(selectElement));
	    }
	
	    // Extract the parts from the ngOptions expression
	
	    // The variable name for the value of the item in the collection
	    var valueName = match[5] || match[7];
	    // The variable name for the key of the item in the collection
	    var keyName = match[6];
	
	    // An expression that generates the viewValue for an option if there is a label expression
	    var selectAs = / as /.test(match[0]) && match[1];
	    // An expression that is used to track the id of each object in the options collection
	    var trackBy = match[9];
	    // An expression that generates the viewValue for an option if there is no label expression
	    var valueFn = $parse(match[2] ? match[1] : valueName);
	    var selectAsFn = selectAs && $parse(selectAs);
	    var viewValueFn = selectAsFn || valueFn;
	    var trackByFn = trackBy && $parse(trackBy);
	
	    // Get the value by which we are going to track the option
	    // if we have a trackFn then use that (passing scope and locals)
	    // otherwise just hash the given viewValue
	    var getTrackByValueFn = trackBy ?
	                              function(value, locals) { return trackByFn(scope, locals); } :
	                              function getHashOfValue(value) { return hashKey(value); };
	    var getTrackByValue = function(value, key) {
	      return getTrackByValueFn(value, getLocals(value, key));
	    };
	
	    var displayFn = $parse(match[2] || match[1]);
	    var groupByFn = $parse(match[3] || '');
	    var disableWhenFn = $parse(match[4] || '');
	    var valuesFn = $parse(match[8]);
	
	    var locals = {};
	    var getLocals = keyName ? function(value, key) {
	      locals[keyName] = key;
	      locals[valueName] = value;
	      return locals;
	    } : function(value) {
	      locals[valueName] = value;
	      return locals;
	    };
	
	
	    function Option(selectValue, viewValue, label, group, disabled) {
	      this.selectValue = selectValue;
	      this.viewValue = viewValue;
	      this.label = label;
	      this.group = group;
	      this.disabled = disabled;
	    }
	
	    function getOptionValuesKeys(optionValues) {
	      var optionValuesKeys;
	
	      if (!keyName && isArrayLike(optionValues)) {
	        optionValuesKeys = optionValues;
	      } else {
	        // if object, extract keys, in enumeration order, unsorted
	        optionValuesKeys = [];
	        for (var itemKey in optionValues) {
	          if (optionValues.hasOwnProperty(itemKey) && itemKey.charAt(0) !== '$') {
	            optionValuesKeys.push(itemKey);
	          }
	        }
	      }
	      return optionValuesKeys;
	    }
	
	    return {
	      trackBy: trackBy,
	      getTrackByValue: getTrackByValue,
	      getWatchables: $parse(valuesFn, function(optionValues) {
	        // Create a collection of things that we would like to watch (watchedArray)
	        // so that they can all be watched using a single $watchCollection
	        // that only runs the handler once if anything changes
	        var watchedArray = [];
	        optionValues = optionValues || [];
	
	        var optionValuesKeys = getOptionValuesKeys(optionValues);
	        var optionValuesLength = optionValuesKeys.length;
	        for (var index = 0; index < optionValuesLength; index++) {
	          var key = (optionValues === optionValuesKeys) ? index : optionValuesKeys[index];
	          var value = optionValues[key];
	
	          var locals = getLocals(value, key);
	          var selectValue = getTrackByValueFn(value, locals);
	          watchedArray.push(selectValue);
	
	          // Only need to watch the displayFn if there is a specific label expression
	          if (match[2] || match[1]) {
	            var label = displayFn(scope, locals);
	            watchedArray.push(label);
	          }
	
	          // Only need to watch the disableWhenFn if there is a specific disable expression
	          if (match[4]) {
	            var disableWhen = disableWhenFn(scope, locals);
	            watchedArray.push(disableWhen);
	          }
	        }
	        return watchedArray;
	      }),
	
	      getOptions: function() {
	
	        var optionItems = [];
	        var selectValueMap = {};
	
	        // The option values were already computed in the `getWatchables` fn,
	        // which must have been called to trigger `getOptions`
	        var optionValues = valuesFn(scope) || [];
	        var optionValuesKeys = getOptionValuesKeys(optionValues);
	        var optionValuesLength = optionValuesKeys.length;
	
	        for (var index = 0; index < optionValuesLength; index++) {
	          var key = (optionValues === optionValuesKeys) ? index : optionValuesKeys[index];
	          var value = optionValues[key];
	          var locals = getLocals(value, key);
	          var viewValue = viewValueFn(scope, locals);
	          var selectValue = getTrackByValueFn(viewValue, locals);
	          var label = displayFn(scope, locals);
	          var group = groupByFn(scope, locals);
	          var disabled = disableWhenFn(scope, locals);
	          var optionItem = new Option(selectValue, viewValue, label, group, disabled);
	
	          optionItems.push(optionItem);
	          selectValueMap[selectValue] = optionItem;
	        }
	
	        return {
	          items: optionItems,
	          selectValueMap: selectValueMap,
	          getOptionFromViewValue: function(value) {
	            return selectValueMap[getTrackByValue(value)];
	          },
	          getViewValueFromOption: function(option) {
	            // If the viewValue could be an object that may be mutated by the application,
	            // we need to make a copy and not return the reference to the value on the option.
	            return trackBy ? copy(option.viewValue) : option.viewValue;
	          }
	        };
	      }
	    };
	  }
	
	
	  // we can't just jqLite('<option>') since jqLite is not smart enough
	  // to create it in <select> and IE barfs otherwise.
	  var optionTemplate = window.document.createElement('option'),
	      optGroupTemplate = window.document.createElement('optgroup');
	
	    function ngOptionsPostLink(scope, selectElement, attr, ctrls) {
	
	      var selectCtrl = ctrls[0];
	      var ngModelCtrl = ctrls[1];
	      var multiple = attr.multiple;
	
	      // The emptyOption allows the application developer to provide their own custom "empty"
	      // option when the viewValue does not match any of the option values.
	      for (var i = 0, children = selectElement.children(), ii = children.length; i < ii; i++) {
	        if (children[i].value === '') {
	          selectCtrl.hasEmptyOption = true;
	          selectCtrl.emptyOption = children.eq(i);
	          break;
	        }
	      }
	
	      var providedEmptyOption = !!selectCtrl.emptyOption;
	
	      var unknownOption = jqLite(optionTemplate.cloneNode(false));
	      unknownOption.val('?');
	
	      var options;
	      var ngOptions = parseOptionsExpression(attr.ngOptions, selectElement, scope);
	      // This stores the newly created options before they are appended to the select.
	      // Since the contents are removed from the fragment when it is appended,
	      // we only need to create it once.
	      var listFragment = $document[0].createDocumentFragment();
	
	      // Overwrite the implementation. ngOptions doesn't use hashes
	      selectCtrl.generateUnknownOptionValue = function(val) {
	        return '?';
	      };
	
	      // Update the controller methods for multiple selectable options
	      if (!multiple) {
	
	        selectCtrl.writeValue = function writeNgOptionsValue(value) {
	          var selectedOption = options.selectValueMap[selectElement.val()];
	          var option = options.getOptionFromViewValue(value);
	
	          // Make sure to remove the selected attribute from the previously selected option
	          // Otherwise, screen readers might get confused
	          if (selectedOption) selectedOption.element.removeAttribute('selected');
	
	          if (option) {
	            // Don't update the option when it is already selected.
	            // For example, the browser will select the first option by default. In that case,
	            // most properties are set automatically - except the `selected` attribute, which we
	            // set always
	
	            if (selectElement[0].value !== option.selectValue) {
	              selectCtrl.removeUnknownOption();
	              selectCtrl.unselectEmptyOption();
	
	              selectElement[0].value = option.selectValue;
	              option.element.selected = true;
	            }
	
	            option.element.setAttribute('selected', 'selected');
	          } else {
	
	            if (providedEmptyOption) {
	              selectCtrl.selectEmptyOption();
	            } else if (selectCtrl.unknownOption.parent().length) {
	              selectCtrl.updateUnknownOption(value);
	            } else {
	              selectCtrl.renderUnknownOption(value);
	            }
	          }
	        };
	
	        selectCtrl.readValue = function readNgOptionsValue() {
	
	          var selectedOption = options.selectValueMap[selectElement.val()];
	
	          if (selectedOption && !selectedOption.disabled) {
	            selectCtrl.unselectEmptyOption();
	            selectCtrl.removeUnknownOption();
	            return options.getViewValueFromOption(selectedOption);
	          }
	          return null;
	        };
	
	        // If we are using `track by` then we must watch the tracked value on the model
	        // since ngModel only watches for object identity change
	        // FIXME: When a user selects an option, this watch will fire needlessly
	        if (ngOptions.trackBy) {
	          scope.$watch(
	            function() { return ngOptions.getTrackByValue(ngModelCtrl.$viewValue); },
	            function() { ngModelCtrl.$render(); }
	          );
	        }
	
	      } else {
	
	        selectCtrl.writeValue = function writeNgOptionsMultiple(values) {
	          // Only set `<option>.selected` if necessary, in order to prevent some browsers from
	          // scrolling to `<option>` elements that are outside the `<select>` element's viewport.
	
	          var selectedOptions = values && values.map(getAndUpdateSelectedOption) || [];
	
	          options.items.forEach(function(option) {
	            if (option.element.selected && !includes(selectedOptions, option)) {
	              option.element.selected = false;
	            }
	          });
	        };
	
	
	        selectCtrl.readValue = function readNgOptionsMultiple() {
	          var selectedValues = selectElement.val() || [],
	              selections = [];
	
	          forEach(selectedValues, function(value) {
	            var option = options.selectValueMap[value];
	            if (option && !option.disabled) selections.push(options.getViewValueFromOption(option));
	          });
	
	          return selections;
	        };
	
	        // If we are using `track by` then we must watch these tracked values on the model
	        // since ngModel only watches for object identity change
	        if (ngOptions.trackBy) {
	
	          scope.$watchCollection(function() {
	            if (isArray(ngModelCtrl.$viewValue)) {
	              return ngModelCtrl.$viewValue.map(function(value) {
	                return ngOptions.getTrackByValue(value);
	              });
	            }
	          }, function() {
	            ngModelCtrl.$render();
	          });
	
	        }
	      }
	
	      if (providedEmptyOption) {
	
	        // we need to remove it before calling selectElement.empty() because otherwise IE will
	        // remove the label from the element. wtf?
	        selectCtrl.emptyOption.remove();
	
	        // compile the element since there might be bindings in it
	        $compile(selectCtrl.emptyOption)(scope);
	
	        if (selectCtrl.emptyOption[0].nodeType === NODE_TYPE_COMMENT) {
	          // This means the empty option has currently no actual DOM node, probably because
	          // it has been modified by a transclusion directive.
	          selectCtrl.hasEmptyOption = false;
	
	          // Redefine the registerOption function, which will catch
	          // options that are added by ngIf etc. (rendering of the node is async because of
	          // lazy transclusion)
	          selectCtrl.registerOption = function(optionScope, optionEl) {
	            if (optionEl.val() === '') {
	              selectCtrl.hasEmptyOption = true;
	              selectCtrl.emptyOption = optionEl;
	              selectCtrl.emptyOption.removeClass('ng-scope');
	              // This ensures the new empty option is selected if previously no option was selected
	              ngModelCtrl.$render();
	
	              optionEl.on('$destroy', function() {
	                selectCtrl.hasEmptyOption = false;
	                selectCtrl.emptyOption = undefined;
	              });
	            }
	          };
	
	        } else {
	          // remove the class, which is added automatically because we recompile the element and it
	          // becomes the compilation root
	          selectCtrl.emptyOption.removeClass('ng-scope');
	        }
	
	      }
	
	      selectElement.empty();
	
	      // We need to do this here to ensure that the options object is defined
	      // when we first hit it in writeNgOptionsValue
	      updateOptions();
	
	      // We will re-render the option elements if the option values or labels change
	      scope.$watchCollection(ngOptions.getWatchables, updateOptions);
	
	      // ------------------------------------------------------------------ //
	
	      function addOptionElement(option, parent) {
	        var optionElement = optionTemplate.cloneNode(false);
	        parent.appendChild(optionElement);
	        updateOptionElement(option, optionElement);
	      }
	
	      function getAndUpdateSelectedOption(viewValue) {
	        var option = options.getOptionFromViewValue(viewValue);
	        var element = option && option.element;
	
	        if (element && !element.selected) element.selected = true;
	
	        return option;
	      }
	
	      function updateOptionElement(option, element) {
	        option.element = element;
	        element.disabled = option.disabled;
	        // NOTE: The label must be set before the value, otherwise IE10/11/EDGE create unresponsive
	        // selects in certain circumstances when multiple selects are next to each other and display
	        // the option list in listbox style, i.e. the select is [multiple], or specifies a [size].
	        // See https://github.com/angular/angular.js/issues/11314 for more info.
	        // This is unfortunately untestable with unit / e2e tests
	        if (option.label !== element.label) {
	          element.label = option.label;
	          element.textContent = option.label;
	        }
	        element.value = option.selectValue;
	      }
	
	      function updateOptions() {
	        var previousValue = options && selectCtrl.readValue();
	
	        // We must remove all current options, but cannot simply set innerHTML = null
	        // since the providedEmptyOption might have an ngIf on it that inserts comments which we
	        // must preserve.
	        // Instead, iterate over the current option elements and remove them or their optgroup
	        // parents
	        if (options) {
	
	          for (var i = options.items.length - 1; i >= 0; i--) {
	            var option = options.items[i];
	            if (isDefined(option.group)) {
	              jqLiteRemove(option.element.parentNode);
	            } else {
	              jqLiteRemove(option.element);
	            }
	          }
	        }
	
	        options = ngOptions.getOptions();
	
	        var groupElementMap = {};
	
	        // Ensure that the empty option is always there if it was explicitly provided
	        if (providedEmptyOption) {
	          selectElement.prepend(selectCtrl.emptyOption);
	        }
	
	        options.items.forEach(function addOption(option) {
	          var groupElement;
	
	          if (isDefined(option.group)) {
	
	            // This option is to live in a group
	            // See if we have already created this group
	            groupElement = groupElementMap[option.group];
	
	            if (!groupElement) {
	
	              groupElement = optGroupTemplate.cloneNode(false);
	              listFragment.appendChild(groupElement);
	
	              // Update the label on the group element
	              // "null" is special cased because of Safari
	              groupElement.label = option.group === null ? 'null' : option.group;
	
	              // Store it for use later
	              groupElementMap[option.group] = groupElement;
	            }
	
	            addOptionElement(option, groupElement);
	
	          } else {
	
	            // This option is not in a group
	            addOptionElement(option, listFragment);
	          }
	        });
	
	        selectElement[0].appendChild(listFragment);
	
	        ngModelCtrl.$render();
	
	        // Check to see if the value has changed due to the update to the options
	        if (!ngModelCtrl.$isEmpty(previousValue)) {
	          var nextValue = selectCtrl.readValue();
	          var isNotPrimitive = ngOptions.trackBy || multiple;
	          if (isNotPrimitive ? !equals(previousValue, nextValue) : previousValue !== nextValue) {
	            ngModelCtrl.$setViewValue(nextValue);
	            ngModelCtrl.$render();
	          }
	        }
	
	      }
	  }
	
	  return {
	    restrict: 'A',
	    terminal: true,
	    require: ['select', 'ngModel'],
	    link: {
	      pre: function ngOptionsPreLink(scope, selectElement, attr, ctrls) {
	        // Deactivate the SelectController.register method to prevent
	        // option directives from accidentally registering themselves
	        // (and unwanted $destroy handlers etc.)
	        ctrls[0].registerOption = noop;
	      },
	      post: ngOptionsPostLink
	    }
	  };
	}];
	
	/**
	 * @ngdoc directive
	 * @name ngPluralize
	 * @restrict EA
	 *
	 * @description
	 * `ngPluralize` is a directive that displays messages according to en-US localization rules.
	 * These rules are bundled with angular.js, but can be overridden
	 * (see {@link guide/i18n Angular i18n} dev guide). You configure ngPluralize directive
	 * by specifying the mappings between
	 * [plural categories](http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html)
	 * and the strings to be displayed.
	 *
	 * # Plural categories and explicit number rules
	 * There are two
	 * [plural categories](http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html)
	 * in Angular's default en-US locale: "one" and "other".
	 *
	 * While a plural category may match many numbers (for example, in en-US locale, "other" can match
	 * any number that is not 1), an explicit number rule can only match one number. For example, the
	 * explicit number rule for "3" matches the number 3. There are examples of plural categories
	 * and explicit number rules throughout the rest of this documentation.
	 *
	 * # Configuring ngPluralize
	 * You configure ngPluralize by providing 2 attributes: `count` and `when`.
	 * You can also provide an optional attribute, `offset`.
	 *
	 * The value of the `count` attribute can be either a string or an {@link guide/expression
	 * Angular expression}; these are evaluated on the current scope for its bound value.
	 *
	 * The `when` attribute specifies the mappings between plural categories and the actual
	 * string to be displayed. The value of the attribute should be a JSON object.
	 *
	 * The following example shows how to configure ngPluralize:
	 *
	 * ```html
	 * <ng-pluralize count="personCount"
	                 when="{'0': 'Nobody is viewing.',
	 *                      'one': '1 person is viewing.',
	 *                      'other': '{} people are viewing.'}">
	 * </ng-pluralize>
	 *```
	 *
	 * In the example, `"0: Nobody is viewing."` is an explicit number rule. If you did not
	 * specify this rule, 0 would be matched to the "other" category and "0 people are viewing"
	 * would be shown instead of "Nobody is viewing". You can specify an explicit number rule for
	 * other numbers, for example 12, so that instead of showing "12 people are viewing", you can
	 * show "a dozen people are viewing".
	 *
	 * You can use a set of closed braces (`{}`) as a placeholder for the number that you want substituted
	 * into pluralized strings. In the previous example, Angular will replace `{}` with
	 * <span ng-non-bindable>`{{personCount}}`</span>. The closed braces `{}` is a placeholder
	 * for <span ng-non-bindable>{{numberExpression}}</span>.
	 *
	 * If no rule is defined for a category, then an empty string is displayed and a warning is generated.
	 * Note that some locales define more categories than `one` and `other`. For example, fr-fr defines `few` and `many`.
	 *
	 * # Configuring ngPluralize with offset
	 * The `offset` attribute allows further customization of pluralized text, which can result in
	 * a better user experience. For example, instead of the message "4 people are viewing this document",
	 * you might display "John, Kate and 2 others are viewing this document".
	 * The offset attribute allows you to offset a number by any desired value.
	 * Let's take a look at an example:
	 *
	 * ```html
	 * <ng-pluralize count="personCount" offset=2
	 *               when="{'0': 'Nobody is viewing.',
	 *                      '1': '{{person1}} is viewing.',
	 *                      '2': '{{person1}} and {{person2}} are viewing.',
	 *                      'one': '{{person1}}, {{person2}} and one other person are viewing.',
	 *                      'other': '{{person1}}, {{person2}} and {} other people are viewing.'}">
	 * </ng-pluralize>
	 * ```
	 *
	 * Notice that we are still using two plural categories(one, other), but we added
	 * three explicit number rules 0, 1 and 2.
	 * When one person, perhaps John, views the document, "John is viewing" will be shown.
	 * When three people view the document, no explicit number rule is found, so
	 * an offset of 2 is taken off 3, and Angular uses 1 to decide the plural category.
	 * In this case, plural category 'one' is matched and "John, Mary and one other person are viewing"
	 * is shown.
	 *
	 * Note that when you specify offsets, you must provide explicit number rules for
	 * numbers from 0 up to and including the offset. If you use an offset of 3, for example,
	 * you must provide explicit number rules for 0, 1, 2 and 3. You must also provide plural strings for
	 * plural categories "one" and "other".
	 *
	 * @param {string|expression} count The variable to be bound to.
	 * @param {string} when The mapping between plural category to its corresponding strings.
	 * @param {number=} offset Offset to deduct from the total number.
	 *
	 * @example
	    <example module="pluralizeExample" name="ng-pluralize">
	      <file name="index.html">
	        <script>
	          angular.module('pluralizeExample', [])
	            .controller('ExampleController', ['$scope', function($scope) {
	              $scope.person1 = 'Igor';
	              $scope.person2 = 'Misko';
	              $scope.personCount = 1;
	            }]);
	        </script>
	        <div ng-controller="ExampleController">
	          <label>Person 1:<input type="text" ng-model="person1" value="Igor" /></label><br/>
	          <label>Person 2:<input type="text" ng-model="person2" value="Misko" /></label><br/>
	          <label>Number of People:<input type="text" ng-model="personCount" value="1" /></label><br/>
	
	          <!--- Example with simple pluralization rules for en locale --->
	          Without Offset:
	          <ng-pluralize count="personCount"
	                        when="{'0': 'Nobody is viewing.',
	                               'one': '1 person is viewing.',
	                               'other': '{} people are viewing.'}">
	          </ng-pluralize><br>
	
	          <!--- Example with offset --->
	          With Offset(2):
	          <ng-pluralize count="personCount" offset=2
	                        when="{'0': 'Nobody is viewing.',
	                               '1': '{{person1}} is viewing.',
	                               '2': '{{person1}} and {{person2}} are viewing.',
	                               'one': '{{person1}}, {{person2}} and one other person are viewing.',
	                               'other': '{{person1}}, {{person2}} and {} other people are viewing.'}">
	          </ng-pluralize>
	        </div>
	      </file>
	      <file name="protractor.js" type="protractor">
	        it('should show correct pluralized string', function() {
	          var withoutOffset = element.all(by.css('ng-pluralize')).get(0);
	          var withOffset = element.all(by.css('ng-pluralize')).get(1);
	          var countInput = element(by.model('personCount'));
	
	          expect(withoutOffset.getText()).toEqual('1 person is viewing.');
	          expect(withOffset.getText()).toEqual('Igor is viewing.');
	
	          countInput.clear();
	          countInput.sendKeys('0');
	
	          expect(withoutOffset.getText()).toEqual('Nobody is viewing.');
	          expect(withOffset.getText()).toEqual('Nobody is viewing.');
	
	          countInput.clear();
	          countInput.sendKeys('2');
	
	          expect(withoutOffset.getText()).toEqual('2 people are viewing.');
	          expect(withOffset.getText()).toEqual('Igor and Misko are viewing.');
	
	          countInput.clear();
	          countInput.sendKeys('3');
	
	          expect(withoutOffset.getText()).toEqual('3 people are viewing.');
	          expect(withOffset.getText()).toEqual('Igor, Misko and one other person are viewing.');
	
	          countInput.clear();
	          countInput.sendKeys('4');
	
	          expect(withoutOffset.getText()).toEqual('4 people are viewing.');
	          expect(withOffset.getText()).toEqual('Igor, Misko and 2 other people are viewing.');
	        });
	        it('should show data-bound names', function() {
	          var withOffset = element.all(by.css('ng-pluralize')).get(1);
	          var personCount = element(by.model('personCount'));
	          var person1 = element(by.model('person1'));
	          var person2 = element(by.model('person2'));
	          personCount.clear();
	          personCount.sendKeys('4');
	          person1.clear();
	          person1.sendKeys('Di');
	          person2.clear();
	          person2.sendKeys('Vojta');
	          expect(withOffset.getText()).toEqual('Di, Vojta and 2 other people are viewing.');
	        });
	      </file>
	    </example>
	 */
	var ngPluralizeDirective = ['$locale', '$interpolate', '$log', function($locale, $interpolate, $log) {
	  var BRACE = /{}/g,
	      IS_WHEN = /^when(Minus)?(.+)$/;
	
	  return {
	    link: function(scope, element, attr) {
	      var numberExp = attr.count,
	          whenExp = attr.$attr.when && element.attr(attr.$attr.when), // we have {{}} in attrs
	          offset = attr.offset || 0,
	          whens = scope.$eval(whenExp) || {},
	          whensExpFns = {},
	          startSymbol = $interpolate.startSymbol(),
	          endSymbol = $interpolate.endSymbol(),
	          braceReplacement = startSymbol + numberExp + '-' + offset + endSymbol,
	          watchRemover = angular.noop,
	          lastCount;
	
	      forEach(attr, function(expression, attributeName) {
	        var tmpMatch = IS_WHEN.exec(attributeName);
	        if (tmpMatch) {
	          var whenKey = (tmpMatch[1] ? '-' : '') + lowercase(tmpMatch[2]);
	          whens[whenKey] = element.attr(attr.$attr[attributeName]);
	        }
	      });
	      forEach(whens, function(expression, key) {
	        whensExpFns[key] = $interpolate(expression.replace(BRACE, braceReplacement));
	
	      });
	
	      scope.$watch(numberExp, function ngPluralizeWatchAction(newVal) {
	        var count = parseFloat(newVal);
	        var countIsNaN = isNumberNaN(count);
	
	        if (!countIsNaN && !(count in whens)) {
	          // If an explicit number rule such as 1, 2, 3... is defined, just use it.
	          // Otherwise, check it against pluralization rules in $locale service.
	          count = $locale.pluralCat(count - offset);
	        }
	
	        // If both `count` and `lastCount` are NaN, we don't need to re-register a watch.
	        // In JS `NaN !== NaN`, so we have to explicitly check.
	        if ((count !== lastCount) && !(countIsNaN && isNumberNaN(lastCount))) {
	          watchRemover();
	          var whenExpFn = whensExpFns[count];
	          if (isUndefined(whenExpFn)) {
	            if (newVal != null) {
	              $log.debug('ngPluralize: no rule defined for \'' + count + '\' in ' + whenExp);
	            }
	            watchRemover = noop;
	            updateElementText();
	          } else {
	            watchRemover = scope.$watch(whenExpFn, updateElementText);
	          }
	          lastCount = count;
	        }
	      });
	
	      function updateElementText(newText) {
	        element.text(newText || '');
	      }
	    }
	  };
	}];
	
	/* exported ngRepeatDirective */
	
	/**
	 * @ngdoc directive
	 * @name ngRepeat
	 * @multiElement
	 *
	 * @description
	 * The `ngRepeat` directive instantiates a template once per item from a collection. Each template
	 * instance gets its own scope, where the given loop variable is set to the current collection item,
	 * and `$index` is set to the item index or key.
	 *
	 * Special properties are exposed on the local scope of each template instance, including:
	 *
	 * | Variable  | Type            | Details                                                                     |
	 * |-----------|-----------------|-----------------------------------------------------------------------------|
	 * | `$index`  | {@type number}  | iterator offset of the repeated element (0..length-1)                       |
	 * | `$first`  | {@type boolean} | true if the repeated element is first in the iterator.                      |
	 * | `$middle` | {@type boolean} | true if the repeated element is between the first and last in the iterator. |
	 * | `$last`   | {@type boolean} | true if the repeated element is last in the iterator.                       |
	 * | `$even`   | {@type boolean} | true if the iterator position `$index` is even (otherwise false).           |
	 * | `$odd`    | {@type boolean} | true if the iterator position `$index` is odd (otherwise false).            |
	 *
	 * <div class="alert alert-info">
	 *   Creating aliases for these properties is possible with {@link ng.directive:ngInit `ngInit`}.
	 *   This may be useful when, for instance, nesting ngRepeats.
	 * </div>
	 *
	 *
	 * # Iterating over object properties
	 *
	 * It is possible to get `ngRepeat` to iterate over the properties of an object using the following
	 * syntax:
	 *
	 * ```js
	 * <div ng-repeat="(key, value) in myObj"> ... </div>
	 * ```
	 *
	 * However, there are a few limitations compared to array iteration:
	 *
	 * - The JavaScript specification does not define the order of keys
	 *   returned for an object, so Angular relies on the order returned by the browser
	 *   when running `for key in myObj`. Browsers generally follow the strategy of providing
	 *   keys in the order in which they were defined, although there are exceptions when keys are deleted
	 *   and reinstated. See the
	 *   [MDN page on `delete` for more info](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete#Cross-browser_notes).
	 *
	 * - `ngRepeat` will silently *ignore* object keys starting with `$`, because
	 *   it's a prefix used by Angular for public (`$`) and private (`$$`) properties.
	 *
	 * - The built-in filters {@link ng.orderBy orderBy} and {@link ng.filter filter} do not work with
	 *   objects, and will throw an error if used with one.
	 *
	 * If you are hitting any of these limitations, the recommended workaround is to convert your object into an array
	 * that is sorted into the order that you prefer before providing it to `ngRepeat`. You could
	 * do this with a filter such as [toArrayFilter](http://ngmodules.org/modules/angular-toArrayFilter)
	 * or implement a `$watch` on the object yourself.
	 *
	 *
	 * # Tracking and Duplicates
	 *
	 * `ngRepeat` uses {@link $rootScope.Scope#$watchCollection $watchCollection} to detect changes in
	 * the collection. When a change happens, `ngRepeat` then makes the corresponding changes to the DOM:
	 *
	 * * When an item is added, a new instance of the template is added to the DOM.
	 * * When an item is removed, its template instance is removed from the DOM.
	 * * When items are reordered, their respective templates are reordered in the DOM.
	 *
	 * To minimize creation of DOM elements, `ngRepeat` uses a function
	 * to "keep track" of all items in the collection and their corresponding DOM elements.
	 * For example, if an item is added to the collection, `ngRepeat` will know that all other items
	 * already have DOM elements, and will not re-render them.
	 *
	 * The default tracking function (which tracks items by their identity) does not allow
	 * duplicate items in arrays. This is because when there are duplicates, it is not possible
	 * to maintain a one-to-one mapping between collection items and DOM elements.
	 *
	 * If you do need to repeat duplicate items, you can substitute the default tracking behavior
	 * with your own using the `track by` expression.
	 *
	 * For example, you may track items by the index of each item in the collection, using the
	 * special scope property `$index`:
	 * ```html
	 *    <div ng-repeat="n in [42, 42, 43, 43] track by $index">
	 *      {{n}}
	 *    </div>
	 * ```
	 *
	 * You may also use arbitrary expressions in `track by`, including references to custom functions
	 * on the scope:
	 * ```html
	 *    <div ng-repeat="n in [42, 42, 43, 43] track by myTrackingFunction(n)">
	 *      {{n}}
	 *    </div>
	 * ```
	 *
	 * <div class="alert alert-success">
	 * If you are working with objects that have a unique identifier property, you should track
	 * by this identifier instead of the object instance. Should you reload your data later, `ngRepeat`
	 * will not have to rebuild the DOM elements for items it has already rendered, even if the
	 * JavaScript objects in the collection have been substituted for new ones. For large collections,
	 * this significantly improves rendering performance. If you don't have a unique identifier,
	 * `track by $index` can also provide a performance boost.
	 * </div>
	 *
	 * ```html
	 *    <div ng-repeat="model in collection track by model.id">
	 *      {{model.name}}
	 *    </div>
	 * ```
	 *
	 * <br />
	 * <div class="alert alert-warning">
	 * Avoid using `track by $index` when the repeated template contains
	 * {@link guide/expression#one-time-binding one-time bindings}. In such cases, the `nth` DOM
	 * element will always be matched with the `nth` item of the array, so the bindings on that element
	 * will not be updated even when the corresponding item changes, essentially causing the view to get
	 * out-of-sync with the underlying data.
	 * </div>
	 *
	 * When no `track by` expression is provided, it is equivalent to tracking by the built-in
	 * `$id` function, which tracks items by their identity:
	 * ```html
	 *    <div ng-repeat="obj in collection track by $id(obj)">
	 *      {{obj.prop}}
	 *    </div>
	 * ```
	 *
	 * <br />
	 * <div class="alert alert-warning">
	 * **Note:** `track by` must always be the last expression:
	 * </div>
	 * ```
	 *    <div ng-repeat="model in collection | orderBy: 'id' as filtered_result track by model.id">
	 *      {{model.name}}
	 *    </div>
	 * ```
	 *
	 *
	 * # Special repeat start and end points
	 * To repeat a series of elements instead of just one parent element, ngRepeat (as well as other ng directives) supports extending
	 * the range of the repeater by defining explicit start and end points by using **ng-repeat-start** and **ng-repeat-end** respectively.
	 * The **ng-repeat-start** directive works the same as **ng-repeat**, but will repeat all the HTML code (including the tag it's defined on)
	 * up to and including the ending HTML tag where **ng-repeat-end** is placed.
	 *
	 * The example below makes use of this feature:
	 * ```html
	 *   <header ng-repeat-start="item in items">
	 *     Header {{ item }}
	 *   </header>
	 *   <div class="body">
	 *     Body {{ item }}
	 *   </div>
	 *   <footer ng-repeat-end>
	 *     Footer {{ item }}
	 *   </footer>
	 * ```
	 *
	 * And with an input of {@type ['A','B']} for the items variable in the example above, the output will evaluate to:
	 * ```html
	 *   <header>
	 *     Header A
	 *   </header>
	 *   <div class="body">
	 *     Body A
	 *   </div>
	 *   <footer>
	 *     Footer A
	 *   </footer>
	 *   <header>
	 *     Header B
	 *   </header>
	 *   <div class="body">
	 *     Body B
	 *   </div>
	 *   <footer>
	 *     Footer B
	 *   </footer>
	 * ```
	 *
	 * The custom start and end points for ngRepeat also support all other HTML directive syntax flavors provided in AngularJS (such
	 * as **data-ng-repeat-start**, **x-ng-repeat-start** and **ng:repeat-start**).
	 *
	 * @animations
	 * | Animation                        | Occurs                              |
	 * |----------------------------------|-------------------------------------|
	 * | {@link ng.$animate#enter enter} | when a new item is added to the list or when an item is revealed after a filter |
	 * | {@link ng.$animate#leave leave} | when an item is removed from the list or when an item is filtered out |
	 * | {@link ng.$animate#move move } | when an adjacent item is filtered out causing a reorder or when the item contents are reordered |
	 *
	 * See the example below for defining CSS animations with ngRepeat.
	 *
	 * @element ANY
	 * @scope
	 * @priority 1000
	 * @param {repeat_expression} ngRepeat The expression indicating how to enumerate a collection. These
	 *   formats are currently supported:
	 *
	 *   * `variable in expression` – where variable is the user defined loop variable and `expression`
	 *     is a scope expression giving the collection to enumerate.
	 *
	 *     For example: `album in artist.albums`.
	 *
	 *   * `(key, value) in expression` – where `key` and `value` can be any user defined identifiers,
	 *     and `expression` is the scope expression giving the collection to enumerate.
	 *
	 *     For example: `(name, age) in {'adam':10, 'amalie':12}`.
	 *
	 *   * `variable in expression track by tracking_expression` – You can also provide an optional tracking expression
	 *     which can be used to associate the objects in the collection with the DOM elements. If no tracking expression
	 *     is specified, ng-repeat associates elements by identity. It is an error to have
	 *     more than one tracking expression value resolve to the same key. (This would mean that two distinct objects are
	 *     mapped to the same DOM element, which is not possible.)
	 *
	 *     Note that the tracking expression must come last, after any filters, and the alias expression.
	 *
	 *     For example: `item in items` is equivalent to `item in items track by $id(item)`. This implies that the DOM elements
	 *     will be associated by item identity in the array.
	 *
	 *     For example: `item in items track by $id(item)`. A built in `$id()` function can be used to assign a unique
	 *     `$$hashKey` property to each item in the array. This property is then used as a key to associated DOM elements
	 *     with the corresponding item in the array by identity. Moving the same object in array would move the DOM
	 *     element in the same way in the DOM.
	 *
	 *     For example: `item in items track by item.id` is a typical pattern when the items come from the database. In this
	 *     case the object identity does not matter. Two objects are considered equivalent as long as their `id`
	 *     property is same.
	 *
	 *     For example: `item in items | filter:searchText track by item.id` is a pattern that might be used to apply a filter
	 *     to items in conjunction with a tracking expression.
	 *
	 *   * `variable in expression as alias_expression` – You can also provide an optional alias expression which will then store the
	 *     intermediate results of the repeater after the filters have been applied. Typically this is used to render a special message
	 *     when a filter is active on the repeater, but the filtered result set is empty.
	 *
	 *     For example: `item in items | filter:x as results` will store the fragment of the repeated items as `results`, but only after
	 *     the items have been processed through the filter.
	 *
	 *     Please note that `as [variable name] is not an operator but rather a part of ngRepeat micro-syntax so it can be used only at the end
	 *     (and not as operator, inside an expression).
	 *
	 *     For example: `item in items | filter : x | orderBy : order | limitTo : limit as results` .
	 *
	 * @example
	 * This example uses `ngRepeat` to display a list of people. A filter is used to restrict the displayed
	 * results by name or by age. New (entering) and removed (leaving) items are animated.
	  <example module="ngRepeat" name="ngRepeat" deps="angular-animate.js" animations="true" name="ng-repeat">
	    <file name="index.html">
	      <div ng-controller="repeatController">
	        I have {{friends.length}} friends. They are:
	        <input type="search" ng-model="q" placeholder="filter friends..." aria-label="filter friends" />
	        <ul class="example-animate-container">
	          <li class="animate-repeat" ng-repeat="friend in friends | filter:q as results">
	            [{{$index + 1}}] {{friend.name}} who is {{friend.age}} years old.
	          </li>
	          <li class="animate-repeat" ng-if="results.length === 0">
	            <strong>No results found...</strong>
	          </li>
	        </ul>
	      </div>
	    </file>
	    <file name="script.js">
	      angular.module('ngRepeat', ['ngAnimate']).controller('repeatController', function($scope) {
	        $scope.friends = [
	          {name:'John', age:25, gender:'boy'},
	          {name:'Jessie', age:30, gender:'girl'},
	          {name:'Johanna', age:28, gender:'girl'},
	          {name:'Joy', age:15, gender:'girl'},
	          {name:'Mary', age:28, gender:'girl'},
	          {name:'Peter', age:95, gender:'boy'},
	          {name:'Sebastian', age:50, gender:'boy'},
	          {name:'Erika', age:27, gender:'girl'},
	          {name:'Patrick', age:40, gender:'boy'},
	          {name:'Samantha', age:60, gender:'girl'}
	        ];
	      });
	    </file>
	    <file name="animations.css">
	      .example-animate-container {
	        background:white;
	        border:1px solid black;
	        list-style:none;
	        margin:0;
	        padding:0 10px;
	      }
	
	      .animate-repeat {
	        line-height:30px;
	        list-style:none;
	        box-sizing:border-box;
	      }
	
	      .animate-repeat.ng-move,
	      .animate-repeat.ng-enter,
	      .animate-repeat.ng-leave {
	        transition:all linear 0.5s;
	      }
	
	      .animate-repeat.ng-leave.ng-leave-active,
	      .animate-repeat.ng-move,
	      .animate-repeat.ng-enter {
	        opacity:0;
	        max-height:0;
	      }
	
	      .animate-repeat.ng-leave,
	      .animate-repeat.ng-move.ng-move-active,
	      .animate-repeat.ng-enter.ng-enter-active {
	        opacity:1;
	        max-height:30px;
	      }
	    </file>
	    <file name="protractor.js" type="protractor">
	      var friends = element.all(by.repeater('friend in friends'));
	
	      it('should render initial data set', function() {
	        expect(friends.count()).toBe(10);
	        expect(friends.get(0).getText()).toEqual('[1] John who is 25 years old.');
	        expect(friends.get(1).getText()).toEqual('[2] Jessie who is 30 years old.');
	        expect(friends.last().getText()).toEqual('[10] Samantha who is 60 years old.');
	        expect(element(by.binding('friends.length')).getText())
	            .toMatch("I have 10 friends. They are:");
	      });
	
	       it('should update repeater when filter predicate changes', function() {
	         expect(friends.count()).toBe(10);
	
	         element(by.model('q')).sendKeys('ma');
	
	         expect(friends.count()).toBe(2);
	         expect(friends.get(0).getText()).toEqual('[1] Mary who is 28 years old.');
	         expect(friends.last().getText()).toEqual('[2] Samantha who is 60 years old.');
	       });
	      </file>
	    </example>
	 */
	var ngRepeatDirective = ['$parse', '$animate', '$compile', function($parse, $animate, $compile) {
	  var NG_REMOVED = '$$NG_REMOVED';
	  var ngRepeatMinErr = minErr('ngRepeat');
	
	  var updateScope = function(scope, index, valueIdentifier, value, keyIdentifier, key, arrayLength) {
	    // TODO(perf): generate setters to shave off ~40ms or 1-1.5%
	    scope[valueIdentifier] = value;
	    if (keyIdentifier) scope[keyIdentifier] = key;
	    scope.$index = index;
	    scope.$first = (index === 0);
	    scope.$last = (index === (arrayLength - 1));
	    scope.$middle = !(scope.$first || scope.$last);
	    // eslint-disable-next-line no-bitwise
	    scope.$odd = !(scope.$even = (index & 1) === 0);
	  };
	
	  var getBlockStart = function(block) {
	    return block.clone[0];
	  };
	
	  var getBlockEnd = function(block) {
	    return block.clone[block.clone.length - 1];
	  };
	
	
	  return {
	    restrict: 'A',
	    multiElement: true,
	    transclude: 'element',
	    priority: 1000,
	    terminal: true,
	    $$tlb: true,
	    compile: function ngRepeatCompile($element, $attr) {
	      var expression = $attr.ngRepeat;
	      var ngRepeatEndComment = $compile.$$createComment('end ngRepeat', expression);
	
	      var match = expression.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/);
	
	      if (!match) {
	        throw ngRepeatMinErr('iexp', 'Expected expression in form of \'_item_ in _collection_[ track by _id_]\' but got \'{0}\'.',
	            expression);
	      }
	
	      var lhs = match[1];
	      var rhs = match[2];
	      var aliasAs = match[3];
	      var trackByExp = match[4];
	
	      match = lhs.match(/^(?:(\s*[$\w]+)|\(\s*([$\w]+)\s*,\s*([$\w]+)\s*\))$/);
	
	      if (!match) {
	        throw ngRepeatMinErr('iidexp', '\'_item_\' in \'_item_ in _collection_\' should be an identifier or \'(_key_, _value_)\' expression, but got \'{0}\'.',
	            lhs);
	      }
	      var valueIdentifier = match[3] || match[1];
	      var keyIdentifier = match[2];
	
	      if (aliasAs && (!/^[$a-zA-Z_][$a-zA-Z0-9_]*$/.test(aliasAs) ||
	          /^(null|undefined|this|\$index|\$first|\$middle|\$last|\$even|\$odd|\$parent|\$root|\$id)$/.test(aliasAs))) {
	        throw ngRepeatMinErr('badident', 'alias \'{0}\' is invalid --- must be a valid JS identifier which is not a reserved name.',
	          aliasAs);
	      }
	
	      var trackByExpGetter, trackByIdExpFn, trackByIdArrayFn, trackByIdObjFn;
	      var hashFnLocals = {$id: hashKey};
	
	      if (trackByExp) {
	        trackByExpGetter = $parse(trackByExp);
	      } else {
	        trackByIdArrayFn = function(key, value) {
	          return hashKey(value);
	        };
	        trackByIdObjFn = function(key) {
	          return key;
	        };
	      }
	
	      return function ngRepeatLink($scope, $element, $attr, ctrl, $transclude) {
	
	        if (trackByExpGetter) {
	          trackByIdExpFn = function(key, value, index) {
	            // assign key, value, and $index to the locals so that they can be used in hash functions
	            if (keyIdentifier) hashFnLocals[keyIdentifier] = key;
	            hashFnLocals[valueIdentifier] = value;
	            hashFnLocals.$index = index;
	            return trackByExpGetter($scope, hashFnLocals);
	          };
	        }
	
	        // Store a list of elements from previous run. This is a hash where key is the item from the
	        // iterator, and the value is objects with following properties.
	        //   - scope: bound scope
	        //   - element: previous element.
	        //   - index: position
	        //
	        // We are using no-proto object so that we don't need to guard against inherited props via
	        // hasOwnProperty.
	        var lastBlockMap = createMap();
	
	        //watch props
	        $scope.$watchCollection(rhs, function ngRepeatAction(collection) {
	          var index, length,
	              previousNode = $element[0],     // node that cloned nodes should be inserted after
	                                              // initialized to the comment node anchor
	              nextNode,
	              // Same as lastBlockMap but it has the current state. It will become the
	              // lastBlockMap on the next iteration.
	              nextBlockMap = createMap(),
	              collectionLength,
	              key, value, // key/value of iteration
	              trackById,
	              trackByIdFn,
	              collectionKeys,
	              block,       // last object information {scope, element, id}
	              nextBlockOrder,
	              elementsToRemove;
	
	          if (aliasAs) {
	            $scope[aliasAs] = collection;
	          }
	
	          if (isArrayLike(collection)) {
	            collectionKeys = collection;
	            trackByIdFn = trackByIdExpFn || trackByIdArrayFn;
	          } else {
	            trackByIdFn = trackByIdExpFn || trackByIdObjFn;
	            // if object, extract keys, in enumeration order, unsorted
	            collectionKeys = [];
	            for (var itemKey in collection) {
	              if (hasOwnProperty.call(collection, itemKey) && itemKey.charAt(0) !== '$') {
	                collectionKeys.push(itemKey);
	              }
	            }
	          }
	
	          collectionLength = collectionKeys.length;
	          nextBlockOrder = new Array(collectionLength);
	
	          // locate existing items
	          for (index = 0; index < collectionLength; index++) {
	            key = (collection === collectionKeys) ? index : collectionKeys[index];
	            value = collection[key];
	            trackById = trackByIdFn(key, value, index);
	            if (lastBlockMap[trackById]) {
	              // found previously seen block
	              block = lastBlockMap[trackById];
	              delete lastBlockMap[trackById];
	              nextBlockMap[trackById] = block;
	              nextBlockOrder[index] = block;
	            } else if (nextBlockMap[trackById]) {
	              // if collision detected. restore lastBlockMap and throw an error
	              forEach(nextBlockOrder, function(block) {
	                if (block && block.scope) lastBlockMap[block.id] = block;
	              });
	              throw ngRepeatMinErr('dupes',
	                  'Duplicates in a repeater are not allowed. Use \'track by\' expression to specify unique keys. Repeater: {0}, Duplicate key: {1}, Duplicate value: {2}',
	                  expression, trackById, value);
	            } else {
	              // new never before seen block
	              nextBlockOrder[index] = {id: trackById, scope: undefined, clone: undefined};
	              nextBlockMap[trackById] = true;
	            }
	          }
	
	          // remove leftover items
	          for (var blockKey in lastBlockMap) {
	            block = lastBlockMap[blockKey];
	            elementsToRemove = getBlockNodes(block.clone);
	            $animate.leave(elementsToRemove);
	            if (elementsToRemove[0].parentNode) {
	              // if the element was not removed yet because of pending animation, mark it as deleted
	              // so that we can ignore it later
	              for (index = 0, length = elementsToRemove.length; index < length; index++) {
	                elementsToRemove[index][NG_REMOVED] = true;
	              }
	            }
	            block.scope.$destroy();
	          }
	
	          // we are not using forEach for perf reasons (trying to avoid #call)
	          for (index = 0; index < collectionLength; index++) {
	            key = (collection === collectionKeys) ? index : collectionKeys[index];
	            value = collection[key];
	            block = nextBlockOrder[index];
	
	            if (block.scope) {
	              // if we have already seen this object, then we need to reuse the
	              // associated scope/element
	
	              nextNode = previousNode;
	
	              // skip nodes that are already pending removal via leave animation
	              do {
	                nextNode = nextNode.nextSibling;
	              } while (nextNode && nextNode[NG_REMOVED]);
	
	              if (getBlockStart(block) !== nextNode) {
	                // existing item which got moved
	                $animate.move(getBlockNodes(block.clone), null, previousNode);
	              }
	              previousNode = getBlockEnd(block);
	              updateScope(block.scope, index, valueIdentifier, value, keyIdentifier, key, collectionLength);
	            } else {
	              // new item which we don't know about
	              $transclude(function ngRepeatTransclude(clone, scope) {
	                block.scope = scope;
	                // http://jsperf.com/clone-vs-createcomment
	                var endNode = ngRepeatEndComment.cloneNode(false);
	                clone[clone.length++] = endNode;
	
	                $animate.enter(clone, null, previousNode);
	                previousNode = endNode;
	                // Note: We only need the first/last node of the cloned nodes.
	                // However, we need to keep the reference to the jqlite wrapper as it might be changed later
	                // by a directive with templateUrl when its template arrives.
	                block.clone = clone;
	                nextBlockMap[block.id] = block;
	                updateScope(block.scope, index, valueIdentifier, value, keyIdentifier, key, collectionLength);
	              });
	            }
	          }
	          lastBlockMap = nextBlockMap;
	        });
	      };
	    }
	  };
	}];
	
	var NG_HIDE_CLASS = 'ng-hide';
	var NG_HIDE_IN_PROGRESS_CLASS = 'ng-hide-animate';
	/**
	 * @ngdoc directive
	 * @name ngShow
	 * @multiElement
	 *
	 * @description
	 * The `ngShow` directive shows or hides the given HTML element based on the expression
	 * provided to the `ngShow` attribute. The element is shown or hidden by removing or adding
	 * the `.ng-hide` CSS class onto the element. The `.ng-hide` CSS class is predefined
	 * in AngularJS and sets the display style to none (using an !important flag).
	 * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).
	 *
	 * ```html
	 * <!-- when $scope.myValue is truthy (element is visible) -->
	 * <div ng-show="myValue"></div>
	 *
	 * <!-- when $scope.myValue is falsy (element is hidden) -->
	 * <div ng-show="myValue" class="ng-hide"></div>
	 * ```
	 *
	 * When the `ngShow` expression evaluates to a falsy value then the `.ng-hide` CSS class is added to the class
	 * attribute on the element causing it to become hidden. When truthy, the `.ng-hide` CSS class is removed
	 * from the element causing the element not to appear hidden.
	 *
	 * ## Why is !important used?
	 *
	 * You may be wondering why !important is used for the `.ng-hide` CSS class. This is because the `.ng-hide` selector
	 * can be easily overridden by heavier selectors. For example, something as simple
	 * as changing the display style on a HTML list item would make hidden elements appear visible.
	 * This also becomes a bigger issue when dealing with CSS frameworks.
	 *
	 * By using !important, the show and hide behavior will work as expected despite any clash between CSS selector
	 * specificity (when !important isn't used with any conflicting styles). If a developer chooses to override the
	 * styling to change how to hide an element then it is just a matter of using !important in their own CSS code.
	 *
	 * ### Overriding `.ng-hide`
	 *
	 * By default, the `.ng-hide` class will style the element with `display: none!important`. If you wish to change
	 * the hide behavior with ngShow/ngHide then this can be achieved by restating the styles for the `.ng-hide`
	 * class CSS. Note that the selector that needs to be used is actually `.ng-hide:not(.ng-hide-animate)` to cope
	 * with extra animation classes that can be added.
	 *
	 * ```css
	 * .ng-hide:not(.ng-hide-animate) {
	 *   /&#42; this is just another form of hiding an element &#42;/
	 *   display: block!important;
	 *   position: absolute;
	 *   top: -9999px;
	 *   left: -9999px;
	 * }
	 * ```
	 *
	 * By default you don't need to override in CSS anything and the animations will work around the display style.
	 *
	 * ## A note about animations with `ngShow`
	 *
	 * Animations in ngShow/ngHide work with the show and hide events that are triggered when the directive expression
	 * is true and false. This system works like the animation system present with ngClass except that
	 * you must also include the !important flag to override the display property
	 * so that you can perform an animation when the element is hidden during the time of the animation.
	 *
	 * ```css
	 * //
	 * //a working example can be found at the bottom of this page
	 * //
	 * .my-element.ng-hide-add, .my-element.ng-hide-remove {
	 *   /&#42; this is required as of 1.3x to properly
	 *      apply all styling in a show/hide animation &#42;/
	 *   transition: 0s linear all;
	 * }
	 *
	 * .my-element.ng-hide-add-active,
	 * .my-element.ng-hide-remove-active {
	 *   /&#42; the transition is defined in the active class &#42;/
	 *   transition: 1s linear all;
	 * }
	 *
	 * .my-element.ng-hide-add { ... }
	 * .my-element.ng-hide-add.ng-hide-add-active { ... }
	 * .my-element.ng-hide-remove { ... }
	 * .my-element.ng-hide-remove.ng-hide-remove-active { ... }
	 * ```
	 *
	 * Keep in mind that, as of AngularJS version 1.3, there is no need to change the display
	 * property to block during animation states--ngAnimate will handle the style toggling automatically for you.
	 *
	 * @animations
	 * | Animation                        | Occurs                              |
	 * |----------------------------------|-------------------------------------|
	 * | {@link $animate#addClass addClass} `.ng-hide`  | after the `ngShow` expression evaluates to a non truthy value and just before the contents are set to hidden |
	 * | {@link $animate#removeClass removeClass}  `.ng-hide`  | after the `ngShow` expression evaluates to a truthy value and just before contents are set to visible |
	 *
	 * @element ANY
	 * @param {expression} ngShow If the {@link guide/expression expression} is truthy
	 *     then the element is shown or hidden respectively.
	 *
	 * @example
	  <example module="ngAnimate" deps="angular-animate.js" animations="true" name="ng-show">
	    <file name="index.html">
	      Click me: <input type="checkbox" ng-model="checked" aria-label="Toggle ngHide"><br/>
	      <div>
	        Show:
	        <div class="check-element animate-show" ng-show="checked">
	          <span class="glyphicon glyphicon-thumbs-up"></span> I show up when your checkbox is checked.
	        </div>
	      </div>
	      <div>
	        Hide:
	        <div class="check-element animate-show" ng-hide="checked">
	          <span class="glyphicon glyphicon-thumbs-down"></span> I hide when your checkbox is checked.
	        </div>
	      </div>
	    </file>
	    <file name="glyphicons.css">
	      @import url(../../components/bootstrap-3.1.1/css/bootstrap.css);
	    </file>
	    <file name="animations.css">
	      .animate-show {
	        line-height: 20px;
	        opacity: 1;
	        padding: 10px;
	        border: 1px solid black;
	        background: white;
	      }
	
	      .animate-show.ng-hide-add, .animate-show.ng-hide-remove {
	        transition: all linear 0.5s;
	      }
	
	      .animate-show.ng-hide {
	        line-height: 0;
	        opacity: 0;
	        padding: 0 10px;
	      }
	
	      .check-element {
	        padding: 10px;
	        border: 1px solid black;
	        background: white;
	      }
	    </file>
	    <file name="protractor.js" type="protractor">
	      var thumbsUp = element(by.css('span.glyphicon-thumbs-up'));
	      var thumbsDown = element(by.css('span.glyphicon-thumbs-down'));
	
	      it('should check ng-show / ng-hide', function() {
	        expect(thumbsUp.isDisplayed()).toBeFalsy();
	        expect(thumbsDown.isDisplayed()).toBeTruthy();
	
	        element(by.model('checked')).click();
	
	        expect(thumbsUp.isDisplayed()).toBeTruthy();
	        expect(thumbsDown.isDisplayed()).toBeFalsy();
	      });
	    </file>
	  </example>
	 */
	var ngShowDirective = ['$animate', function($animate) {
	  return {
	    restrict: 'A',
	    multiElement: true,
	    link: function(scope, element, attr) {
	      scope.$watch(attr.ngShow, function ngShowWatchAction(value) {
	        // we're adding a temporary, animation-specific class for ng-hide since this way
	        // we can control when the element is actually displayed on screen without having
	        // to have a global/greedy CSS selector that breaks when other animations are run.
	        // Read: https://github.com/angular/angular.js/issues/9103#issuecomment-58335845
	        $animate[value ? 'removeClass' : 'addClass'](element, NG_HIDE_CLASS, {
	          tempClasses: NG_HIDE_IN_PROGRESS_CLASS
	        });
	      });
	    }
	  };
	}];
	
	
	/**
	 * @ngdoc directive
	 * @name ngHide
	 * @multiElement
	 *
	 * @description
	 * The `ngHide` directive shows or hides the given HTML element based on the expression
	 * provided to the `ngHide` attribute. The element is shown or hidden by removing or adding
	 * the `ng-hide` CSS class onto the element. The `.ng-hide` CSS class is predefined
	 * in AngularJS and sets the display style to none (using an !important flag).
	 * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).
	 *
	 * ```html
	 * <!-- when $scope.myValue is truthy (element is hidden) -->
	 * <div ng-hide="myValue" class="ng-hide"></div>
	 *
	 * <!-- when $scope.myValue is falsy (element is visible) -->
	 * <div ng-hide="myValue"></div>
	 * ```
	 *
	 * When the `ngHide` expression evaluates to a truthy value then the `.ng-hide` CSS class is added to the class
	 * attribute on the element causing it to become hidden. When falsy, the `.ng-hide` CSS class is removed
	 * from the element causing the element not to appear hidden.
	 *
	 * ## Why is !important used?
	 *
	 * You may be wondering why !important is used for the `.ng-hide` CSS class. This is because the `.ng-hide` selector
	 * can be easily overridden by heavier selectors. For example, something as simple
	 * as changing the display style on a HTML list item would make hidden elements appear visible.
	 * This also becomes a bigger issue when dealing with CSS frameworks.
	 *
	 * By using !important, the show and hide behavior will work as expected despite any clash between CSS selector
	 * specificity (when !important isn't used with any conflicting styles). If a developer chooses to override the
	 * styling to change how to hide an element then it is just a matter of using !important in their own CSS code.
	 *
	 * ### Overriding `.ng-hide`
	 *
	 * By default, the `.ng-hide` class will style the element with `display: none!important`. If you wish to change
	 * the hide behavior with ngShow/ngHide then this can be achieved by restating the styles for the `.ng-hide`
	 * class in CSS:
	 *
	 * ```css
	 * .ng-hide {
	 *   /&#42; this is just another form of hiding an element &#42;/
	 *   display: block!important;
	 *   position: absolute;
	 *   top: -9999px;
	 *   left: -9999px;
	 * }
	 * ```
	 *
	 * By default you don't need to override in CSS anything and the animations will work around the display style.
	 *
	 * ## A note about animations with `ngHide`
	 *
	 * Animations in ngShow/ngHide work with the show and hide events that are triggered when the directive expression
	 * is true and false. This system works like the animation system present with ngClass, except that the `.ng-hide`
	 * CSS class is added and removed for you instead of your own CSS class.
	 *
	 * ```css
	 * //
	 * //a working example can be found at the bottom of this page
	 * //
	 * .my-element.ng-hide-add, .my-element.ng-hide-remove {
	 *   transition: 0.5s linear all;
	 * }
	 *
	 * .my-element.ng-hide-add { ... }
	 * .my-element.ng-hide-add.ng-hide-add-active { ... }
	 * .my-element.ng-hide-remove { ... }
	 * .my-element.ng-hide-remove.ng-hide-remove-active { ... }
	 * ```
	 *
	 * Keep in mind that, as of AngularJS version 1.3, there is no need to change the display
	 * property to block during animation states--ngAnimate will handle the style toggling automatically for you.
	 *
	 * @animations
	 * | Animation                        | Occurs                              |
	 * |----------------------------------|-------------------------------------|
	 * | {@link $animate#addClass addClass} `.ng-hide`  | after the `ngHide` expression evaluates to a truthy value and just before the contents are set to hidden |
	 * | {@link $animate#removeClass removeClass}  `.ng-hide`  | after the `ngHide` expression evaluates to a non truthy value and just before contents are set to visible |
	 *
	 *
	 * @element ANY
	 * @param {expression} ngHide If the {@link guide/expression expression} is truthy then
	 *     the element is shown or hidden respectively.
	 *
	 * @example
	  <example module="ngAnimate" deps="angular-animate.js" animations="true" name="ng-hide">
	    <file name="index.html">
	      Click me: <input type="checkbox" ng-model="checked" aria-label="Toggle ngShow"><br/>
	      <div>
	        Show:
	        <div class="check-element animate-hide" ng-show="checked">
	          <span class="glyphicon glyphicon-thumbs-up"></span> I show up when your checkbox is checked.
	        </div>
	      </div>
	      <div>
	        Hide:
	        <div class="check-element animate-hide" ng-hide="checked">
	          <span class="glyphicon glyphicon-thumbs-down"></span> I hide when your checkbox is checked.
	        </div>
	      </div>
	    </file>
	    <file name="glyphicons.css">
	      @import url(../../components/bootstrap-3.1.1/css/bootstrap.css);
	    </file>
	    <file name="animations.css">
	      .animate-hide {
	        transition: all linear 0.5s;
	        line-height: 20px;
	        opacity: 1;
	        padding: 10px;
	        border: 1px solid black;
	        background: white;
	      }
	
	      .animate-hide.ng-hide {
	        line-height: 0;
	        opacity: 0;
	        padding: 0 10px;
	      }
	
	      .check-element {
	        padding: 10px;
	        border: 1px solid black;
	        background: white;
	      }
	    </file>
	    <file name="protractor.js" type="protractor">
	      var thumbsUp = element(by.css('span.glyphicon-thumbs-up'));
	      var thumbsDown = element(by.css('span.glyphicon-thumbs-down'));
	
	      it('should check ng-show / ng-hide', function() {
	        expect(thumbsUp.isDisplayed()).toBeFalsy();
	        expect(thumbsDown.isDisplayed()).toBeTruthy();
	
	        element(by.model('checked')).click();
	
	        expect(thumbsUp.isDisplayed()).toBeTruthy();
	        expect(thumbsDown.isDisplayed()).toBeFalsy();
	      });
	    </file>
	  </example>
	 */
	var ngHideDirective = ['$animate', function($animate) {
	  return {
	    restrict: 'A',
	    multiElement: true,
	    link: function(scope, element, attr) {
	      scope.$watch(attr.ngHide, function ngHideWatchAction(value) {
	        // The comment inside of the ngShowDirective explains why we add and
	        // remove a temporary class for the show/hide animation
	        $animate[value ? 'addClass' : 'removeClass'](element,NG_HIDE_CLASS, {
	          tempClasses: NG_HIDE_IN_PROGRESS_CLASS
	        });
	      });
	    }
	  };
	}];
	
	/**
	 * @ngdoc directive
	 * @name ngStyle
	 * @restrict AC
	 *
	 * @description
	 * The `ngStyle` directive allows you to set CSS style on an HTML element conditionally.
	 *
	 * @knownIssue
	 * You should not use {@link guide/interpolation interpolation} in the value of the `style`
	 * attribute, when using the `ngStyle` directive on the same element.
	 * See {@link guide/interpolation#known-issues here} for more info.
	 *
	 * @element ANY
	 * @param {expression} ngStyle
	 *
	 * {@link guide/expression Expression} which evals to an
	 * object whose keys are CSS style names and values are corresponding values for those CSS
	 * keys.
	 *
	 * Since some CSS style names are not valid keys for an object, they must be quoted.
	 * See the 'background-color' style in the example below.
	 *
	 * @example
	   <example name="ng-style">
	     <file name="index.html">
	        <input type="button" value="set color" ng-click="myStyle={color:'red'}">
	        <input type="button" value="set background" ng-click="myStyle={'background-color':'blue'}">
	        <input type="button" value="clear" ng-click="myStyle={}">
	        <br/>
	        <span ng-style="myStyle">Sample Text</span>
	        <pre>myStyle={{myStyle}}</pre>
	     </file>
	     <file name="style.css">
	       span {
	         color: black;
	       }
	     </file>
	     <file name="protractor.js" type="protractor">
	       var colorSpan = element(by.css('span'));
	
	       it('should check ng-style', function() {
	         expect(colorSpan.getCssValue('color')).toBe('rgba(0, 0, 0, 1)');
	         element(by.css('input[value=\'set color\']')).click();
	         expect(colorSpan.getCssValue('color')).toBe('rgba(255, 0, 0, 1)');
	         element(by.css('input[value=clear]')).click();
	         expect(colorSpan.getCssValue('color')).toBe('rgba(0, 0, 0, 1)');
	       });
	     </file>
	   </example>
	 */
	var ngStyleDirective = ngDirective(function(scope, element, attr) {
	  scope.$watch(attr.ngStyle, function ngStyleWatchAction(newStyles, oldStyles) {
	    if (oldStyles && (newStyles !== oldStyles)) {
	      forEach(oldStyles, function(val, style) { element.css(style, '');});
	    }
	    if (newStyles) element.css(newStyles);
	  }, true);
	});
	
	/**
	 * @ngdoc directive
	 * @name ngSwitch
	 * @restrict EA
	 *
	 * @description
	 * The `ngSwitch` directive is used to conditionally swap DOM structure on your template based on a scope expression.
	 * Elements within `ngSwitch` but without `ngSwitchWhen` or `ngSwitchDefault` directives will be preserved at the location
	 * as specified in the template.
	 *
	 * The directive itself works similar to ngInclude, however, instead of downloading template code (or loading it
	 * from the template cache), `ngSwitch` simply chooses one of the nested elements and makes it visible based on which element
	 * matches the value obtained from the evaluated expression. In other words, you define a container element
	 * (where you place the directive), place an expression on the **`on="..."` attribute**
	 * (or the **`ng-switch="..."` attribute**), define any inner elements inside of the directive and place
	 * a when attribute per element. The when attribute is used to inform ngSwitch which element to display when the on
	 * expression is evaluated. If a matching expression is not found via a when attribute then an element with the default
	 * attribute is displayed.
	 *
	 * <div class="alert alert-info">
	 * Be aware that the attribute values to match against cannot be expressions. They are interpreted
	 * as literal string values to match against.
	 * For example, **`ng-switch-when="someVal"`** will match against the string `"someVal"` not against the
	 * value of the expression `$scope.someVal`.
	 * </div>
	
	 * @animations
	 * | Animation                        | Occurs                              |
	 * |----------------------------------|-------------------------------------|
	 * | {@link ng.$animate#enter enter}  | after the ngSwitch contents change and the matched child element is placed inside the container |
	 * | {@link ng.$animate#leave leave}  | after the ngSwitch contents change and just before the former contents are removed from the DOM |
	 *
	 * @usage
	 *
	 * ```
	 * <ANY ng-switch="expression">
	 *   <ANY ng-switch-when="matchValue1">...</ANY>
	 *   <ANY ng-switch-when="matchValue2">...</ANY>
	 *   <ANY ng-switch-default>...</ANY>
	 * </ANY>
	 * ```
	 *
	 *
	 * @scope
	 * @priority 1200
	 * @param {*} ngSwitch|on expression to match against <code>ng-switch-when</code>.
	 * On child elements add:
	 *
	 * * `ngSwitchWhen`: the case statement to match against. If match then this
	 *   case will be displayed. If the same match appears multiple times, all the
	 *   elements will be displayed. It is possible to associate multiple values to
	 *   the same `ngSwitchWhen` by defining the optional attribute
	 *   `ngSwitchWhenSeparator`. The separator will be used to split the value of
	 *   the `ngSwitchWhen` attribute into multiple tokens, and the element will show
	 *   if any of the `ngSwitch` evaluates to any of these tokens.
	 * * `ngSwitchDefault`: the default case when no other case match. If there
	 *   are multiple default cases, all of them will be displayed when no other
	 *   case match.
	 *
	 *
	 * @example
	  <example module="switchExample" deps="angular-animate.js" animations="true" name="ng-switch">
	    <file name="index.html">
	      <div ng-controller="ExampleController">
	        <select ng-model="selection" ng-options="item for item in items">
	        </select>
	        <code>selection={{selection}}</code>
	        <hr/>
	        <div class="animate-switch-container"
	          ng-switch on="selection">
	            <div class="animate-switch" ng-switch-when="settings|options" ng-switch-when-separator="|">Settings Div</div>
	            <div class="animate-switch" ng-switch-when="home">Home Span</div>
	            <div class="animate-switch" ng-switch-default>default</div>
	        </div>
	      </div>
	    </file>
	    <file name="script.js">
	      angular.module('switchExample', ['ngAnimate'])
	        .controller('ExampleController', ['$scope', function($scope) {
	          $scope.items = ['settings', 'home', 'options', 'other'];
	          $scope.selection = $scope.items[0];
	        }]);
	    </file>
	    <file name="animations.css">
	      .animate-switch-container {
	        position:relative;
	        background:white;
	        border:1px solid black;
	        height:40px;
	        overflow:hidden;
	      }
	
	      .animate-switch {
	        padding:10px;
	      }
	
	      .animate-switch.ng-animate {
	        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
	
	        position:absolute;
	        top:0;
	        left:0;
	        right:0;
	        bottom:0;
	      }
	
	      .animate-switch.ng-leave.ng-leave-active,
	      .animate-switch.ng-enter {
	        top:-50px;
	      }
	      .animate-switch.ng-leave,
	      .animate-switch.ng-enter.ng-enter-active {
	        top:0;
	      }
	    </file>
	    <file name="protractor.js" type="protractor">
	      var switchElem = element(by.css('[ng-switch]'));
	      var select = element(by.model('selection'));
	
	      it('should start in settings', function() {
	        expect(switchElem.getText()).toMatch(/Settings Div/);
	      });
	      it('should change to home', function() {
	        select.all(by.css('option')).get(1).click();
	        expect(switchElem.getText()).toMatch(/Home Span/);
	      });
	      it('should change to settings via "options"', function() {
	        select.all(by.css('option')).get(2).click();
	        expect(switchElem.getText()).toMatch(/Settings Div/);
	      });
	      it('should select default', function() {
	        select.all(by.css('option')).get(3).click();
	        expect(switchElem.getText()).toMatch(/default/);
	      });
	    </file>
	  </example>
	 */
	var ngSwitchDirective = ['$animate', '$compile', function($animate, $compile) {
	  return {
	    require: 'ngSwitch',
	
	    // asks for $scope to fool the BC controller module
	    controller: ['$scope', function NgSwitchController() {
	     this.cases = {};
	    }],
	    link: function(scope, element, attr, ngSwitchController) {
	      var watchExpr = attr.ngSwitch || attr.on,
	          selectedTranscludes = [],
	          selectedElements = [],
	          previousLeaveAnimations = [],
	          selectedScopes = [];
	
	      var spliceFactory = function(array, index) {
	          return function(response) {
	            if (response !== false) array.splice(index, 1);
	          };
	      };
	
	      scope.$watch(watchExpr, function ngSwitchWatchAction(value) {
	        var i, ii;
	
	        // Start with the last, in case the array is modified during the loop
	        while (previousLeaveAnimations.length) {
	          $animate.cancel(previousLeaveAnimations.pop());
	        }
	
	        for (i = 0, ii = selectedScopes.length; i < ii; ++i) {
	          var selected = getBlockNodes(selectedElements[i].clone);
	          selectedScopes[i].$destroy();
	          var runner = previousLeaveAnimations[i] = $animate.leave(selected);
	          runner.done(spliceFactory(previousLeaveAnimations, i));
	        }
	
	        selectedElements.length = 0;
	        selectedScopes.length = 0;
	
	        if ((selectedTranscludes = ngSwitchController.cases['!' + value] || ngSwitchController.cases['?'])) {
	          forEach(selectedTranscludes, function(selectedTransclude) {
	            selectedTransclude.transclude(function(caseElement, selectedScope) {
	              selectedScopes.push(selectedScope);
	              var anchor = selectedTransclude.element;
	              caseElement[caseElement.length++] = $compile.$$createComment('end ngSwitchWhen');
	              var block = { clone: caseElement };
	
	              selectedElements.push(block);
	              $animate.enter(caseElement, anchor.parent(), anchor);
	            });
	          });
	        }
	      });
	    }
	  };
	}];
	
	var ngSwitchWhenDirective = ngDirective({
	  transclude: 'element',
	  priority: 1200,
	  require: '^ngSwitch',
	  multiElement: true,
	  link: function(scope, element, attrs, ctrl, $transclude) {
	
	    var cases = attrs.ngSwitchWhen.split(attrs.ngSwitchWhenSeparator).sort().filter(
	      // Filter duplicate cases
	      function(element, index, array) { return array[index - 1] !== element; }
	    );
	
	    forEach(cases, function(whenCase) {
	      ctrl.cases['!' + whenCase] = (ctrl.cases['!' + whenCase] || []);
	      ctrl.cases['!' + whenCase].push({ transclude: $transclude, element: element });
	    });
	  }
	});
	
	var ngSwitchDefaultDirective = ngDirective({
	  transclude: 'element',
	  priority: 1200,
	  require: '^ngSwitch',
	  multiElement: true,
	  link: function(scope, element, attr, ctrl, $transclude) {
	    ctrl.cases['?'] = (ctrl.cases['?'] || []);
	    ctrl.cases['?'].push({ transclude: $transclude, element: element });
	   }
	});
	
	/**
	 * @ngdoc directive
	 * @name ngTransclude
	 * @restrict EAC
	 *
	 * @description
	 * Directive that marks the insertion point for the transcluded DOM of the nearest parent directive that uses transclusion.
	 *
	 * You can specify that you want to insert a named transclusion slot, instead of the default slot, by providing the slot name
	 * as the value of the `ng-transclude` or `ng-transclude-slot` attribute.
	 *
	 * If the transcluded content is not empty (i.e. contains one or more DOM nodes, including whitespace text nodes), any existing
	 * content of this element will be removed before the transcluded content is inserted.
	 * If the transcluded content is empty (or only whitespace), the existing content is left intact. This lets you provide fallback
	 * content in the case that no transcluded content is provided.
	 *
	 * @element ANY
	 *
	 * @param {string} ngTransclude|ngTranscludeSlot the name of the slot to insert at this point. If this is not provided, is empty
	 *                                               or its value is the same as the name of the attribute then the default slot is used.
	 *
	 * @example
	 * ### Basic transclusion
	 * This example demonstrates basic transclusion of content into a component directive.
	 * <example name="simpleTranscludeExample" module="transcludeExample">
	 *   <file name="index.html">
	 *     <script>
	 *       angular.module('transcludeExample', [])
	 *        .directive('pane', function(){
	 *           return {
	 *             restrict: 'E',
	 *             transclude: true,
	 *             scope: { title:'@' },
	 *             template: '<div style="border: 1px solid black;">' +
	 *                         '<div style="background-color: gray">{{title}}</div>' +
	 *                         '<ng-transclude></ng-transclude>' +
	 *                       '</div>'
	 *           };
	 *       })
	 *       .controller('ExampleController', ['$scope', function($scope) {
	 *         $scope.title = 'Lorem Ipsum';
	 *         $scope.text = 'Neque porro quisquam est qui dolorem ipsum quia dolor...';
	 *       }]);
	 *     </script>
	 *     <div ng-controller="ExampleController">
	 *       <input ng-model="title" aria-label="title"> <br/>
	 *       <textarea ng-model="text" aria-label="text"></textarea> <br/>
	 *       <pane title="{{title}}"><span>{{text}}</span></pane>
	 *     </div>
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	 *      it('should have transcluded', function() {
	 *        var titleElement = element(by.model('title'));
	 *        titleElement.clear();
	 *        titleElement.sendKeys('TITLE');
	 *        var textElement = element(by.model('text'));
	 *        textElement.clear();
	 *        textElement.sendKeys('TEXT');
	 *        expect(element(by.binding('title')).getText()).toEqual('TITLE');
	 *        expect(element(by.binding('text')).getText()).toEqual('TEXT');
	 *      });
	 *   </file>
	 * </example>
	 *
	 * @example
	 * ### Transclude fallback content
	 * This example shows how to use `NgTransclude` with fallback content, that
	 * is displayed if no transcluded content is provided.
	 *
	 * <example module="transcludeFallbackContentExample" name="ng-transclude">
	 * <file name="index.html">
	 * <script>
	 * angular.module('transcludeFallbackContentExample', [])
	 * .directive('myButton', function(){
	 *             return {
	 *               restrict: 'E',
	 *               transclude: true,
	 *               scope: true,
	 *               template: '<button style="cursor: pointer;">' +
	 *                           '<ng-transclude>' +
	 *                             '<b style="color: red;">Button1</b>' +
	 *                           '</ng-transclude>' +
	 *                         '</button>'
	 *             };
	 *         });
	 * </script>
	 * <!-- fallback button content -->
	 * <my-button id="fallback"></my-button>
	 * <!-- modified button content -->
	 * <my-button id="modified">
	 *   <i style="color: green;">Button2</i>
	 * </my-button>
	 * </file>
	 * <file name="protractor.js" type="protractor">
	 * it('should have different transclude element content', function() {
	 *          expect(element(by.id('fallback')).getText()).toBe('Button1');
	 *          expect(element(by.id('modified')).getText()).toBe('Button2');
	 *        });
	 * </file>
	 * </example>
	 *
	 * @example
	 * ### Multi-slot transclusion
	 * This example demonstrates using multi-slot transclusion in a component directive.
	 * <example name="multiSlotTranscludeExample" module="multiSlotTranscludeExample">
	 *   <file name="index.html">
	 *    <style>
	 *      .title, .footer {
	 *        background-color: gray
	 *      }
	 *    </style>
	 *    <div ng-controller="ExampleController">
	 *      <input ng-model="title" aria-label="title"> <br/>
	 *      <textarea ng-model="text" aria-label="text"></textarea> <br/>
	 *      <pane>
	 *        <pane-title><a ng-href="{{link}}">{{title}}</a></pane-title>
	 *        <pane-body><p>{{text}}</p></pane-body>
	 *      </pane>
	 *    </div>
	 *   </file>
	 *   <file name="app.js">
	 *    angular.module('multiSlotTranscludeExample', [])
	 *     .directive('pane', function() {
	 *        return {
	 *          restrict: 'E',
	 *          transclude: {
	 *            'title': '?paneTitle',
	 *            'body': 'paneBody',
	 *            'footer': '?paneFooter'
	 *          },
	 *          template: '<div style="border: 1px solid black;">' +
	 *                      '<div class="title" ng-transclude="title">Fallback Title</div>' +
	 *                      '<div ng-transclude="body"></div>' +
	 *                      '<div class="footer" ng-transclude="footer">Fallback Footer</div>' +
	 *                    '</div>'
	 *        };
	 *    })
	 *    .controller('ExampleController', ['$scope', function($scope) {
	 *      $scope.title = 'Lorem Ipsum';
	 *      $scope.link = 'https://google.com';
	 *      $scope.text = 'Neque porro quisquam est qui dolorem ipsum quia dolor...';
	 *    }]);
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	 *      it('should have transcluded the title and the body', function() {
	 *        var titleElement = element(by.model('title'));
	 *        titleElement.clear();
	 *        titleElement.sendKeys('TITLE');
	 *        var textElement = element(by.model('text'));
	 *        textElement.clear();
	 *        textElement.sendKeys('TEXT');
	 *        expect(element(by.css('.title')).getText()).toEqual('TITLE');
	 *        expect(element(by.binding('text')).getText()).toEqual('TEXT');
	 *        expect(element(by.css('.footer')).getText()).toEqual('Fallback Footer');
	 *      });
	 *   </file>
	 * </example>
	 */
	var ngTranscludeMinErr = minErr('ngTransclude');
	var ngTranscludeDirective = ['$compile', function($compile) {
	  return {
	    restrict: 'EAC',
	    terminal: true,
	    compile: function ngTranscludeCompile(tElement) {
	
	      // Remove and cache any original content to act as a fallback
	      var fallbackLinkFn = $compile(tElement.contents());
	      tElement.empty();
	
	      return function ngTranscludePostLink($scope, $element, $attrs, controller, $transclude) {
	
	        if (!$transclude) {
	          throw ngTranscludeMinErr('orphan',
	          'Illegal use of ngTransclude directive in the template! ' +
	          'No parent directive that requires a transclusion found. ' +
	          'Element: {0}',
	          startingTag($element));
	        }
	
	
	        // If the attribute is of the form: `ng-transclude="ng-transclude"` then treat it like the default
	        if ($attrs.ngTransclude === $attrs.$attr.ngTransclude) {
	          $attrs.ngTransclude = '';
	        }
	        var slotName = $attrs.ngTransclude || $attrs.ngTranscludeSlot;
	
	        // If the slot is required and no transclusion content is provided then this call will throw an error
	        $transclude(ngTranscludeCloneAttachFn, null, slotName);
	
	        // If the slot is optional and no transclusion content is provided then use the fallback content
	        if (slotName && !$transclude.isSlotFilled(slotName)) {
	          useFallbackContent();
	        }
	
	        function ngTranscludeCloneAttachFn(clone, transcludedScope) {
	          if (clone.length && notWhitespace(clone)) {
	            $element.append(clone);
	          } else {
	            useFallbackContent();
	            // There is nothing linked against the transcluded scope since no content was available,
	            // so it should be safe to clean up the generated scope.
	            transcludedScope.$destroy();
	          }
	        }
	
	        function useFallbackContent() {
	          // Since this is the fallback content rather than the transcluded content,
	          // we link against the scope of this directive rather than the transcluded scope
	          fallbackLinkFn($scope, function(clone) {
	            $element.append(clone);
	          });
	        }
	
	        function notWhitespace(nodes) {
	          for (var i = 0, ii = nodes.length; i < ii; i++) {
	            var node = nodes[i];
	            if (node.nodeType !== NODE_TYPE_TEXT || node.nodeValue.trim()) {
	              return true;
	            }
	          }
	        }
	      };
	    }
	  };
	}];
	
	/**
	 * @ngdoc directive
	 * @name script
	 * @restrict E
	 *
	 * @description
	 * Load the content of a `<script>` element into {@link ng.$templateCache `$templateCache`}, so that the
	 * template can be used by {@link ng.directive:ngInclude `ngInclude`},
	 * {@link ngRoute.directive:ngView `ngView`}, or {@link guide/directive directives}. The type of the
	 * `<script>` element must be specified as `text/ng-template`, and a cache name for the template must be
	 * assigned through the element's `id`, which can then be used as a directive's `templateUrl`.
	 *
	 * @param {string} type Must be set to `'text/ng-template'`.
	 * @param {string} id Cache name of the template.
	 *
	 * @example
	  <example  name="script-tag">
	    <file name="index.html">
	      <script type="text/ng-template" id="/tpl.html">
	        Content of the template.
	      </script>
	
	      <a ng-click="currentTpl='/tpl.html'" id="tpl-link">Load inlined template</a>
	      <div id="tpl-content" ng-include src="currentTpl"></div>
	    </file>
	    <file name="protractor.js" type="protractor">
	      it('should load template defined inside script tag', function() {
	        element(by.css('#tpl-link')).click();
	        expect(element(by.css('#tpl-content')).getText()).toMatch(/Content of the template/);
	      });
	    </file>
	  </example>
	 */
	var scriptDirective = ['$templateCache', function($templateCache) {
	  return {
	    restrict: 'E',
	    terminal: true,
	    compile: function(element, attr) {
	      if (attr.type === 'text/ng-template') {
	        var templateUrl = attr.id,
	            text = element[0].text;
	
	        $templateCache.put(templateUrl, text);
	      }
	    }
	  };
	}];
	
	/* exported selectDirective, optionDirective */
	
	var noopNgModelController = { $setViewValue: noop, $render: noop };
	
	/**
	 * @ngdoc type
	 * @name  select.SelectController
	 * @description
	 * The controller for the `<select>` directive. This provides support for reading
	 * and writing the selected value(s) of the control and also coordinates dynamically
	 * added `<option>` elements, perhaps by an `ngRepeat` directive.
	 */
	var SelectController =
	        ['$element', '$scope', /** @this */ function($element, $scope) {
	
	  var self = this,
	      optionsMap = new HashMap();
	
	  self.selectValueMap = {}; // Keys are the hashed values, values the original values
	
	  // If the ngModel doesn't get provided then provide a dummy noop version to prevent errors
	  self.ngModelCtrl = noopNgModelController;
	  self.multiple = false;
	
	  // The "unknown" option is one that is prepended to the list if the viewValue
	  // does not match any of the options. When it is rendered the value of the unknown
	  // option is '? XXX ?' where XXX is the hashKey of the value that is not known.
	  //
	  // We can't just jqLite('<option>') since jqLite is not smart enough
	  // to create it in <select> and IE barfs otherwise.
	  self.unknownOption = jqLite(window.document.createElement('option'));
	
	  // The empty option is an option with the value '' that te application developer can
	  // provide inside the select. When the model changes to a value that doesn't match an option,
	  // it is selected - so if an empty option is provided, no unknown option is generated.
	  // However, the empty option is not removed when the model matches an option. It is always selectable
	  // and indicates that a "null" selection has been made.
	  self.hasEmptyOption = false;
	  self.emptyOption = undefined;
	
	  self.renderUnknownOption = function(val) {
	    var unknownVal = self.generateUnknownOptionValue(val);
	    self.unknownOption.val(unknownVal);
	    $element.prepend(self.unknownOption);
	    setOptionAsSelected(self.unknownOption);
	    $element.val(unknownVal);
	  };
	
	  self.updateUnknownOption = function(val) {
	    var unknownVal = self.generateUnknownOptionValue(val);
	    self.unknownOption.val(unknownVal);
	    setOptionAsSelected(self.unknownOption);
	    $element.val(unknownVal);
	  };
	
	  self.generateUnknownOptionValue = function(val) {
	    return '? ' + hashKey(val) + ' ?';
	  };
	
	  self.removeUnknownOption = function() {
	    if (self.unknownOption.parent()) self.unknownOption.remove();
	  };
	
	  self.selectEmptyOption = function() {
	    if (self.emptyOption) {
	      $element.val('');
	      setOptionAsSelected(self.emptyOption);
	    }
	  };
	
	  self.unselectEmptyOption = function() {
	    if (self.hasEmptyOption) {
	      self.emptyOption.removeAttr('selected');
	    }
	  };
	
	  $scope.$on('$destroy', function() {
	    // disable unknown option so that we don't do work when the whole select is being destroyed
	    self.renderUnknownOption = noop;
	  });
	
	  // Read the value of the select control, the implementation of this changes depending
	  // upon whether the select can have multiple values and whether ngOptions is at work.
	  self.readValue = function readSingleValue() {
	    var val = $element.val();
	    // ngValue added option values are stored in the selectValueMap, normal interpolations are not
	    var realVal = val in self.selectValueMap ? self.selectValueMap[val] : val;
	
	    if (self.hasOption(realVal)) {
	      return realVal;
	    }
	
	    return null;
	  };
	
	
	  // Write the value to the select control, the implementation of this changes depending
	  // upon whether the select can have multiple values and whether ngOptions is at work.
	  self.writeValue = function writeSingleValue(value) {
	    // Make sure to remove the selected attribute from the previously selected option
	    // Otherwise, screen readers might get confused
	    var currentlySelectedOption = $element[0].options[$element[0].selectedIndex];
	    if (currentlySelectedOption) currentlySelectedOption.removeAttribute('selected');
	
	    if (self.hasOption(value)) {
	      self.removeUnknownOption();
	
	      var hashedVal = hashKey(value);
	      $element.val(hashedVal in self.selectValueMap ? hashedVal : value);
	
	      // Set selected attribute and property on selected option for screen readers
	      var selectedOption = $element[0].options[$element[0].selectedIndex];
	      setOptionAsSelected(jqLite(selectedOption));
	    } else {
	      if (value == null && self.emptyOption) {
	        self.removeUnknownOption();
	        self.selectEmptyOption();
	      } else if (self.unknownOption.parent().length) {
	        self.updateUnknownOption(value);
	      } else {
	        self.renderUnknownOption(value);
	      }
	    }
	  };
	
	
	  // Tell the select control that an option, with the given value, has been added
	  self.addOption = function(value, element) {
	    // Skip comment nodes, as they only pollute the `optionsMap`
	    if (element[0].nodeType === NODE_TYPE_COMMENT) return;
	
	    assertNotHasOwnProperty(value, '"option value"');
	    if (value === '') {
	      self.hasEmptyOption = true;
	      self.emptyOption = element;
	    }
	    var count = optionsMap.get(value) || 0;
	    optionsMap.put(value, count + 1);
	    // Only render at the end of a digest. This improves render performance when many options
	    // are added during a digest and ensures all relevant options are correctly marked as selected
	    scheduleRender();
	  };
	
	  // Tell the select control that an option, with the given value, has been removed
	  self.removeOption = function(value) {
	    var count = optionsMap.get(value);
	    if (count) {
	      if (count === 1) {
	        optionsMap.remove(value);
	        if (value === '') {
	          self.hasEmptyOption = false;
	          self.emptyOption = undefined;
	        }
	      } else {
	        optionsMap.put(value, count - 1);
	      }
	    }
	  };
	
	  // Check whether the select control has an option matching the given value
	  self.hasOption = function(value) {
	    return !!optionsMap.get(value);
	  };
	
	
	  var renderScheduled = false;
	  function scheduleRender() {
	    if (renderScheduled) return;
	    renderScheduled = true;
	    $scope.$$postDigest(function() {
	      renderScheduled = false;
	      self.ngModelCtrl.$render();
	    });
	  }
	
	  var updateScheduled = false;
	  function scheduleViewValueUpdate(renderAfter) {
	    if (updateScheduled) return;
	
	    updateScheduled = true;
	
	    $scope.$$postDigest(function() {
	      if ($scope.$$destroyed) return;
	
	      updateScheduled = false;
	      self.ngModelCtrl.$setViewValue(self.readValue());
	      if (renderAfter) self.ngModelCtrl.$render();
	    });
	  }
	
	
	  self.registerOption = function(optionScope, optionElement, optionAttrs, interpolateValueFn, interpolateTextFn) {
	
	    if (optionAttrs.$attr.ngValue) {
	      // The value attribute is set by ngValue
	      var oldVal, hashedVal = NaN;
	      optionAttrs.$observe('value', function valueAttributeObserveAction(newVal) {
	
	        var removal;
	        var previouslySelected = optionElement.prop('selected');
	
	        if (isDefined(hashedVal)) {
	          self.removeOption(oldVal);
	          delete self.selectValueMap[hashedVal];
	          removal = true;
	        }
	
	        hashedVal = hashKey(newVal);
	        oldVal = newVal;
	        self.selectValueMap[hashedVal] = newVal;
	        self.addOption(newVal, optionElement);
	        // Set the attribute directly instead of using optionAttrs.$set - this stops the observer
	        // from firing a second time. Other $observers on value will also get the result of the
	        // ngValue expression, not the hashed value
	        optionElement.attr('value', hashedVal);
	
	        if (removal && previouslySelected) {
	          scheduleViewValueUpdate();
	        }
	
	      });
	    } else if (interpolateValueFn) {
	      // The value attribute is interpolated
	      optionAttrs.$observe('value', function valueAttributeObserveAction(newVal) {
	        // This method is overwritten in ngOptions and has side-effects!
	        self.readValue();
	
	        var removal;
	        var previouslySelected = optionElement.prop('selected');
	
	        if (isDefined(oldVal)) {
	          self.removeOption(oldVal);
	          removal = true;
	        }
	        oldVal = newVal;
	        self.addOption(newVal, optionElement);
	
	        if (removal && previouslySelected) {
	          scheduleViewValueUpdate();
	        }
	      });
	    } else if (interpolateTextFn) {
	      // The text content is interpolated
	      optionScope.$watch(interpolateTextFn, function interpolateWatchAction(newVal, oldVal) {
	        optionAttrs.$set('value', newVal);
	        var previouslySelected = optionElement.prop('selected');
	        if (oldVal !== newVal) {
	          self.removeOption(oldVal);
	        }
	        self.addOption(newVal, optionElement);
	
	        if (oldVal && previouslySelected) {
	          scheduleViewValueUpdate();
	        }
	      });
	    } else {
	      // The value attribute is static
	      self.addOption(optionAttrs.value, optionElement);
	    }
	
	
	    optionAttrs.$observe('disabled', function(newVal) {
	
	      // Since model updates will also select disabled options (like ngOptions),
	      // we only have to handle options becoming disabled, not enabled
	
	      if (newVal === 'true' || newVal && optionElement.prop('selected')) {
	        if (self.multiple) {
	          scheduleViewValueUpdate(true);
	        } else {
	          self.ngModelCtrl.$setViewValue(null);
	          self.ngModelCtrl.$render();
	        }
	      }
	    });
	
	    optionElement.on('$destroy', function() {
	      var currentValue = self.readValue();
	      var removeValue = optionAttrs.value;
	
	      self.removeOption(removeValue);
	      self.ngModelCtrl.$render();
	
	      if (self.multiple && currentValue && currentValue.indexOf(removeValue) !== -1 ||
	          currentValue === removeValue
	      ) {
	        // When multiple (selected) options are destroyed at the same time, we don't want
	        // to run a model update for each of them. Instead, run a single update in the $$postDigest
	        scheduleViewValueUpdate(true);
	      }
	    });
	  };
	
	  function setOptionAsSelected(optionEl) {
	    optionEl.prop('selected', true); // needed for IE
	    optionEl.attr('selected', true);
	  }
	}];
	
	/**
	 * @ngdoc directive
	 * @name select
	 * @restrict E
	 *
	 * @description
	 * HTML `select` element with angular data-binding.
	 *
	 * The `select` directive is used together with {@link ngModel `ngModel`} to provide data-binding
	 * between the scope and the `<select>` control (including setting default values).
	 * It also handles dynamic `<option>` elements, which can be added using the {@link ngRepeat `ngRepeat}` or
	 * {@link ngOptions `ngOptions`} directives.
	 *
	 * When an item in the `<select>` menu is selected, the value of the selected option will be bound
	 * to the model identified by the `ngModel` directive. With static or repeated options, this is
	 * the content of the `value` attribute or the textContent of the `<option>`, if the value attribute is missing.
	 * Value and textContent can be interpolated.
	 *
	 * ## Matching model and option values
	 *
	 * In general, the match between the model and an option is evaluated by strictly comparing the model
	 * value against the value of the available options.
	 *
	 * If you are setting the option value with the option's `value` attribute, or textContent, the
	 * value will always be a `string` which means that the model value must also be a string.
	 * Otherwise the `select` directive cannot match them correctly.
	 *
	 * To bind the model to a non-string value, you can use one of the following strategies:
	 * - the {@link ng.ngOptions `ngOptions`} directive
	 *   ({@link ng.select#using-select-with-ngoptions-and-setting-a-default-value})
	 * - the {@link ng.ngValue `ngValue`} directive, which allows arbitrary expressions to be
	 *   option values ({@link ng.select#using-ngvalue-to-bind-the-model-to-an-array-of-objects Example})
	 * - model $parsers / $formatters to convert the string value
	 *   ({@link ng.select#binding-select-to-a-non-string-value-via-ngmodel-parsing-formatting Example})
	 *
	 * If the viewValue of `ngModel` does not match any of the options, then the control
	 * will automatically add an "unknown" option, which it then removes when the mismatch is resolved.
	 *
	 * Optionally, a single hard-coded `<option>` element, with the value set to an empty string, can
	 * be nested into the `<select>` element. This element will then represent the `null` or "not selected"
	 * option. See example below for demonstration.
	 *
	 * ## Choosing between `ngRepeat` and `ngOptions`
	 *
	 * In many cases, `ngRepeat` can be used on `<option>` elements instead of {@link ng.directive:ngOptions
	 * ngOptions} to achieve a similar result. However, `ngOptions` provides some benefits:
	 * - more flexibility in how the `<select>`'s model is assigned via the `select` **`as`** part of the
	 * comprehension expression
	 * - reduced memory consumption by not creating a new scope for each repeated instance
	 * - increased render speed by creating the options in a documentFragment instead of individually
	 *
	 * Specifically, select with repeated options slows down significantly starting at 2000 options in
	 * Chrome and Internet Explorer / Edge.
	 *
	 *
	 * @param {string} ngModel Assignable angular expression to data-bind to.
	 * @param {string=} name Property name of the form under which the control is published.
	 * @param {string=} multiple Allows multiple options to be selected. The selected values will be
	 *     bound to the model as an array.
	 * @param {string=} required Sets `required` validation error key if the value is not entered.
	 * @param {string=} ngRequired Adds required attribute and required validation constraint to
	 * the element when the ngRequired expression evaluates to true. Use ngRequired instead of required
	 * when you want to data-bind to the required attribute.
	 * @param {string=} ngChange Angular expression to be executed when selected option(s) changes due to user
	 *    interaction with the select element.
	 * @param {string=} ngOptions sets the options that the select is populated with and defines what is
	 * set on the model on selection. See {@link ngOptions `ngOptions`}.
	 *
	 * @example
	 * ### Simple `select` elements with static options
	 *
	 * <example name="static-select" module="staticSelect">
	 * <file name="index.html">
	 * <div ng-controller="ExampleController">
	 *   <form name="myForm">
	 *     <label for="singleSelect"> Single select: </label><br>
	 *     <select name="singleSelect" ng-model="data.singleSelect">
	 *       <option value="option-1">Option 1</option>
	 *       <option value="option-2">Option 2</option>
	 *     </select><br>
	 *
	 *     <label for="singleSelect"> Single select with "not selected" option and dynamic option values: </label><br>
	 *     <select name="singleSelect" id="singleSelect" ng-model="data.singleSelect">
	 *       <option value="">---Please select---</option> <!-- not selected / blank option -->
	 *       <option value="{{data.option1}}">Option 1</option> <!-- interpolation -->
	 *       <option value="option-2">Option 2</option>
	 *     </select><br>
	 *     <button ng-click="forceUnknownOption()">Force unknown option</button><br>
	 *     <tt>singleSelect = {{data.singleSelect}}</tt>
	 *
	 *     <hr>
	 *     <label for="multipleSelect"> Multiple select: </label><br>
	 *     <select name="multipleSelect" id="multipleSelect" ng-model="data.multipleSelect" multiple>
	 *       <option value="option-1">Option 1</option>
	 *       <option value="option-2">Option 2</option>
	 *       <option value="option-3">Option 3</option>
	 *     </select><br>
	 *     <tt>multipleSelect = {{data.multipleSelect}}</tt><br/>
	 *   </form>
	 * </div>
	 * </file>
	 * <file name="app.js">
	 *  angular.module('staticSelect', [])
	 *    .controller('ExampleController', ['$scope', function($scope) {
	 *      $scope.data = {
	 *       singleSelect: null,
	 *       multipleSelect: [],
	 *       option1: 'option-1'
	 *      };
	 *
	 *      $scope.forceUnknownOption = function() {
	 *        $scope.data.singleSelect = 'nonsense';
	 *      };
	 *   }]);
	 * </file>
	 *</example>
	 *
	 * ### Using `ngRepeat` to generate `select` options
	 * <example name="select-ngrepeat" module="ngrepeatSelect">
	 * <file name="index.html">
	 * <div ng-controller="ExampleController">
	 *   <form name="myForm">
	 *     <label for="repeatSelect"> Repeat select: </label>
	 *     <select name="repeatSelect" id="repeatSelect" ng-model="data.model">
	 *       <option ng-repeat="option in data.availableOptions" value="{{option.id}}">{{option.name}}</option>
	 *     </select>
	 *   </form>
	 *   <hr>
	 *   <tt>model = {{data.model}}</tt><br/>
	 * </div>
	 * </file>
	 * <file name="app.js">
	 *  angular.module('ngrepeatSelect', [])
	 *    .controller('ExampleController', ['$scope', function($scope) {
	 *      $scope.data = {
	 *       model: null,
	 *       availableOptions: [
	 *         {id: '1', name: 'Option A'},
	 *         {id: '2', name: 'Option B'},
	 *         {id: '3', name: 'Option C'}
	 *       ]
	 *      };
	 *   }]);
	 * </file>
	 *</example>
	 *
	 * ### Using `ngValue` to bind the model to an array of objects
	 * <example name="select-ngvalue" module="ngvalueSelect">
	 * <file name="index.html">
	 * <div ng-controller="ExampleController">
	 *   <form name="myForm">
	 *     <label for="ngvalueselect"> ngvalue select: </label>
	 *     <select size="6" name="ngvalueselect" ng-model="data.model" multiple>
	 *       <option ng-repeat="option in data.availableOptions" ng-value="option.value">{{option.name}}</option>
	 *     </select>
	 *   </form>
	 *   <hr>
	 *   <pre>model = {{data.model | json}}</pre><br/>
	 * </div>
	 * </file>
	 * <file name="app.js">
	 *  angular.module('ngvalueSelect', [])
	 *    .controller('ExampleController', ['$scope', function($scope) {
	 *      $scope.data = {
	 *       model: null,
	 *       availableOptions: [
	           {value: 'myString', name: 'string'},
	           {value: 1, name: 'integer'},
	           {value: true, name: 'boolean'},
	           {value: null, name: 'null'},
	           {value: {prop: 'value'}, name: 'object'},
	           {value: ['a'], name: 'array'}
	 *       ]
	 *      };
	 *   }]);
	 * </file>
	 *</example>
	 *
	 * ### Using `select` with `ngOptions` and setting a default value
	 * See the {@link ngOptions ngOptions documentation} for more `ngOptions` usage examples.
	 *
	 * <example name="select-with-default-values" module="defaultValueSelect">
	 * <file name="index.html">
	 * <div ng-controller="ExampleController">
	 *   <form name="myForm">
	 *     <label for="mySelect">Make a choice:</label>
	 *     <select name="mySelect" id="mySelect"
	 *       ng-options="option.name for option in data.availableOptions track by option.id"
	 *       ng-model="data.selectedOption"></select>
	 *   </form>
	 *   <hr>
	 *   <tt>option = {{data.selectedOption}}</tt><br/>
	 * </div>
	 * </file>
	 * <file name="app.js">
	 *  angular.module('defaultValueSelect', [])
	 *    .controller('ExampleController', ['$scope', function($scope) {
	 *      $scope.data = {
	 *       availableOptions: [
	 *         {id: '1', name: 'Option A'},
	 *         {id: '2', name: 'Option B'},
	 *         {id: '3', name: 'Option C'}
	 *       ],
	 *       selectedOption: {id: '3', name: 'Option C'} //This sets the default value of the select in the ui
	 *       };
	 *   }]);
	 * </file>
	 *</example>
	 *
	 *
	 * ### Binding `select` to a non-string value via `ngModel` parsing / formatting
	 *
	 * <example name="select-with-non-string-options" module="nonStringSelect">
	 *   <file name="index.html">
	 *     <select ng-model="model.id" convert-to-number>
	 *       <option value="0">Zero</option>
	 *       <option value="1">One</option>
	 *       <option value="2">Two</option>
	 *     </select>
	 *     {{ model }}
	 *   </file>
	 *   <file name="app.js">
	 *     angular.module('nonStringSelect', [])
	 *       .run(function($rootScope) {
	 *         $rootScope.model = { id: 2 };
	 *       })
	 *       .directive('convertToNumber', function() {
	 *         return {
	 *           require: 'ngModel',
	 *           link: function(scope, element, attrs, ngModel) {
	 *             ngModel.$parsers.push(function(val) {
	 *               return parseInt(val, 10);
	 *             });
	 *             ngModel.$formatters.push(function(val) {
	 *               return '' + val;
	 *             });
	 *           }
	 *         };
	 *       });
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	 *     it('should initialize to model', function() {
	 *       expect(element(by.model('model.id')).$('option:checked').getText()).toEqual('Two');
	 *     });
	 *   </file>
	 * </example>
	 *
	 */
	var selectDirective = function() {
	
	  return {
	    restrict: 'E',
	    require: ['select', '?ngModel'],
	    controller: SelectController,
	    priority: 1,
	    link: {
	      pre: selectPreLink,
	      post: selectPostLink
	    }
	  };
	
	  function selectPreLink(scope, element, attr, ctrls) {
	
	      var selectCtrl = ctrls[0];
	      var ngModelCtrl = ctrls[1];
	
	      // if ngModel is not defined, we don't need to do anything but set the registerOption
	      // function to noop, so options don't get added internally
	      if (!ngModelCtrl) {
	        selectCtrl.registerOption = noop;
	        return;
	      }
	
	
	      selectCtrl.ngModelCtrl = ngModelCtrl;
	
	      // When the selected item(s) changes we delegate getting the value of the select control
	      // to the `readValue` method, which can be changed if the select can have multiple
	      // selected values or if the options are being generated by `ngOptions`
	      element.on('change', function() {
	        selectCtrl.removeUnknownOption();
	        scope.$apply(function() {
	          ngModelCtrl.$setViewValue(selectCtrl.readValue());
	        });
	      });
	
	      // If the select allows multiple values then we need to modify how we read and write
	      // values from and to the control; also what it means for the value to be empty and
	      // we have to add an extra watch since ngModel doesn't work well with arrays - it
	      // doesn't trigger rendering if only an item in the array changes.
	      if (attr.multiple) {
	        selectCtrl.multiple = true;
	
	        // Read value now needs to check each option to see if it is selected
	        selectCtrl.readValue = function readMultipleValue() {
	          var array = [];
	          forEach(element.find('option'), function(option) {
	            if (option.selected && !option.disabled) {
	              var val = option.value;
	              array.push(val in selectCtrl.selectValueMap ? selectCtrl.selectValueMap[val] : val);
	            }
	          });
	          return array;
	        };
	
	        // Write value now needs to set the selected property of each matching option
	        selectCtrl.writeValue = function writeMultipleValue(value) {
	          var items = new HashMap(value);
	          forEach(element.find('option'), function(option) {
	            option.selected = isDefined(items.get(option.value)) || isDefined(items.get(selectCtrl.selectValueMap[option.value]));
	          });
	        };
	
	        // we have to do it on each watch since ngModel watches reference, but
	        // we need to work of an array, so we need to see if anything was inserted/removed
	        var lastView, lastViewRef = NaN;
	        scope.$watch(function selectMultipleWatch() {
	          if (lastViewRef === ngModelCtrl.$viewValue && !equals(lastView, ngModelCtrl.$viewValue)) {
	            lastView = shallowCopy(ngModelCtrl.$viewValue);
	            ngModelCtrl.$render();
	          }
	          lastViewRef = ngModelCtrl.$viewValue;
	        });
	
	        // If we are a multiple select then value is now a collection
	        // so the meaning of $isEmpty changes
	        ngModelCtrl.$isEmpty = function(value) {
	          return !value || value.length === 0;
	        };
	
	      }
	    }
	
	    function selectPostLink(scope, element, attrs, ctrls) {
	      // if ngModel is not defined, we don't need to do anything
	      var ngModelCtrl = ctrls[1];
	      if (!ngModelCtrl) return;
	
	      var selectCtrl = ctrls[0];
	
	      // We delegate rendering to the `writeValue` method, which can be changed
	      // if the select can have multiple selected values or if the options are being
	      // generated by `ngOptions`.
	      // This must be done in the postLink fn to prevent $render to be called before
	      // all nodes have been linked correctly.
	      ngModelCtrl.$render = function() {
	        selectCtrl.writeValue(ngModelCtrl.$viewValue);
	      };
	    }
	};
	
	
	// The option directive is purely designed to communicate the existence (or lack of)
	// of dynamically created (and destroyed) option elements to their containing select
	// directive via its controller.
	var optionDirective = ['$interpolate', function($interpolate) {
	  return {
	    restrict: 'E',
	    priority: 100,
	    compile: function(element, attr) {
	      var interpolateValueFn, interpolateTextFn;
	
	      if (isDefined(attr.ngValue)) {
	        // Will be handled by registerOption
	      } else if (isDefined(attr.value)) {
	        // If the value attribute is defined, check if it contains an interpolation
	        interpolateValueFn = $interpolate(attr.value, true);
	      } else {
	        // If the value attribute is not defined then we fall back to the
	        // text content of the option element, which may be interpolated
	        interpolateTextFn = $interpolate(element.text(), true);
	        if (!interpolateTextFn) {
	          attr.$set('value', element.text());
	        }
	      }
	
	      return function(scope, element, attr) {
	        // This is an optimization over using ^^ since we don't want to have to search
	        // all the way to the root of the DOM for every single option element
	        var selectCtrlName = '$selectController',
	            parent = element.parent(),
	            selectCtrl = parent.data(selectCtrlName) ||
	              parent.parent().data(selectCtrlName); // in case we are in optgroup
	
	        if (selectCtrl) {
	          selectCtrl.registerOption(scope, element, attr, interpolateValueFn, interpolateTextFn);
	        }
	      };
	    }
	  };
	}];
	
	/**
	 * @ngdoc directive
	 * @name ngRequired
	 * @restrict A
	 *
	 * @description
	 *
	 * ngRequired adds the required {@link ngModel.NgModelController#$validators `validator`} to {@link ngModel `ngModel`}.
	 * It is most often used for {@link input `input`} and {@link select `select`} controls, but can also be
	 * applied to custom controls.
	 *
	 * The directive sets the `required` attribute on the element if the Angular expression inside
	 * `ngRequired` evaluates to true. A special directive for setting `required` is necessary because we
	 * cannot use interpolation inside `required`. See the {@link guide/interpolation interpolation guide}
	 * for more info.
	 *
	 * The validator will set the `required` error key to true if the `required` attribute is set and
	 * calling {@link ngModel.NgModelController#$isEmpty `NgModelController.$isEmpty`} with the
	 * {@link ngModel.NgModelController#$viewValue `ngModel.$viewValue`} returns `true`. For example, the
	 * `$isEmpty()` implementation for `input[text]` checks the length of the `$viewValue`. When developing
	 * custom controls, `$isEmpty()` can be overwritten to account for a $viewValue that is not string-based.
	 *
	 * @example
	 * <example name="ngRequiredDirective" module="ngRequiredExample">
	 *   <file name="index.html">
	 *     <script>
	 *       angular.module('ngRequiredExample', [])
	 *         .controller('ExampleController', ['$scope', function($scope) {
	 *           $scope.required = true;
	 *         }]);
	 *     </script>
	 *     <div ng-controller="ExampleController">
	 *       <form name="form">
	 *         <label for="required">Toggle required: </label>
	 *         <input type="checkbox" ng-model="required" id="required" />
	 *         <br>
	 *         <label for="input">This input must be filled if `required` is true: </label>
	 *         <input type="text" ng-model="model" id="input" name="input" ng-required="required" /><br>
	 *         <hr>
	 *         required error set? = <code>{{form.input.$error.required}}</code><br>
	 *         model = <code>{{model}}</code>
	 *       </form>
	 *     </div>
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	       var required = element(by.binding('form.input.$error.required'));
	       var model = element(by.binding('model'));
	       var input = element(by.id('input'));
	
	       it('should set the required error', function() {
	         expect(required.getText()).toContain('true');
	
	         input.sendKeys('123');
	         expect(required.getText()).not.toContain('true');
	         expect(model.getText()).toContain('123');
	       });
	 *   </file>
	 * </example>
	 */
	var requiredDirective = function() {
	  return {
	    restrict: 'A',
	    require: '?ngModel',
	    link: function(scope, elm, attr, ctrl) {
	      if (!ctrl) return;
	      attr.required = true; // force truthy in case we are on non input element
	
	      ctrl.$validators.required = function(modelValue, viewValue) {
	        return !attr.required || !ctrl.$isEmpty(viewValue);
	      };
	
	      attr.$observe('required', function() {
	        ctrl.$validate();
	      });
	    }
	  };
	};
	
	/**
	 * @ngdoc directive
	 * @name ngPattern
	 *
	 * @description
	 *
	 * ngPattern adds the pattern {@link ngModel.NgModelController#$validators `validator`} to {@link ngModel `ngModel`}.
	 * It is most often used for text-based {@link input `input`} controls, but can also be applied to custom text-based controls.
	 *
	 * The validator sets the `pattern` error key if the {@link ngModel.NgModelController#$viewValue `ngModel.$viewValue`}
	 * does not match a RegExp which is obtained by evaluating the Angular expression given in the
	 * `ngPattern` attribute value:
	 * * If the expression evaluates to a RegExp object, then this is used directly.
	 * * If the expression evaluates to a string, then it will be converted to a RegExp after wrapping it
	 * in `^` and `$` characters. For instance, `"abc"` will be converted to `new RegExp('^abc$')`.
	 *
	 * <div class="alert alert-info">
	 * **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to
	 * start at the index of the last search's match, thus not taking the whole input value into
	 * account.
	 * </div>
	 *
	 * <div class="alert alert-info">
	 * **Note:** This directive is also added when the plain `pattern` attribute is used, with two
	 * differences:
	 * <ol>
	 *   <li>
	 *     `ngPattern` does not set the `pattern` attribute and therefore HTML5 constraint validation is
	 *     not available.
	 *   </li>
	 *   <li>
	 *     The `ngPattern` attribute must be an expression, while the `pattern` value must be
	 *     interpolated.
	 *   </li>
	 * </ol>
	 * </div>
	 *
	 * @example
	 * <example name="ngPatternDirective" module="ngPatternExample">
	 *   <file name="index.html">
	 *     <script>
	 *       angular.module('ngPatternExample', [])
	 *         .controller('ExampleController', ['$scope', function($scope) {
	 *           $scope.regex = '\\d+';
	 *         }]);
	 *     </script>
	 *     <div ng-controller="ExampleController">
	 *       <form name="form">
	 *         <label for="regex">Set a pattern (regex string): </label>
	 *         <input type="text" ng-model="regex" id="regex" />
	 *         <br>
	 *         <label for="input">This input is restricted by the current pattern: </label>
	 *         <input type="text" ng-model="model" id="input" name="input" ng-pattern="regex" /><br>
	 *         <hr>
	 *         input valid? = <code>{{form.input.$valid}}</code><br>
	 *         model = <code>{{model}}</code>
	 *       </form>
	 *     </div>
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	       var model = element(by.binding('model'));
	       var input = element(by.id('input'));
	
	       it('should validate the input with the default pattern', function() {
	         input.sendKeys('aaa');
	         expect(model.getText()).not.toContain('aaa');
	
	         input.clear().then(function() {
	           input.sendKeys('123');
	           expect(model.getText()).toContain('123');
	         });
	       });
	 *   </file>
	 * </example>
	 */
	var patternDirective = function() {
	  return {
	    restrict: 'A',
	    require: '?ngModel',
	    link: function(scope, elm, attr, ctrl) {
	      if (!ctrl) return;
	
	      var regexp, patternExp = attr.ngPattern || attr.pattern;
	      attr.$observe('pattern', function(regex) {
	        if (isString(regex) && regex.length > 0) {
	          regex = new RegExp('^' + regex + '$');
	        }
	
	        if (regex && !regex.test) {
	          throw minErr('ngPattern')('noregexp',
	            'Expected {0} to be a RegExp but was {1}. Element: {2}', patternExp,
	            regex, startingTag(elm));
	        }
	
	        regexp = regex || undefined;
	        ctrl.$validate();
	      });
	
	      ctrl.$validators.pattern = function(modelValue, viewValue) {
	        // HTML5 pattern constraint validates the input value, so we validate the viewValue
	        return ctrl.$isEmpty(viewValue) || isUndefined(regexp) || regexp.test(viewValue);
	      };
	    }
	  };
	};
	
	/**
	 * @ngdoc directive
	 * @name ngMaxlength
	 *
	 * @description
	 *
	 * ngMaxlength adds the maxlength {@link ngModel.NgModelController#$validators `validator`} to {@link ngModel `ngModel`}.
	 * It is most often used for text-based {@link input `input`} controls, but can also be applied to custom text-based controls.
	 *
	 * The validator sets the `maxlength` error key if the {@link ngModel.NgModelController#$viewValue `ngModel.$viewValue`}
	 * is longer than the integer obtained by evaluating the Angular expression given in the
	 * `ngMaxlength` attribute value.
	 *
	 * <div class="alert alert-info">
	 * **Note:** This directive is also added when the plain `maxlength` attribute is used, with two
	 * differences:
	 * <ol>
	 *   <li>
	 *     `ngMaxlength` does not set the `maxlength` attribute and therefore HTML5 constraint
	 *     validation is not available.
	 *   </li>
	 *   <li>
	 *     The `ngMaxlength` attribute must be an expression, while the `maxlength` value must be
	 *     interpolated.
	 *   </li>
	 * </ol>
	 * </div>
	 *
	 * @example
	 * <example name="ngMaxlengthDirective" module="ngMaxlengthExample">
	 *   <file name="index.html">
	 *     <script>
	 *       angular.module('ngMaxlengthExample', [])
	 *         .controller('ExampleController', ['$scope', function($scope) {
	 *           $scope.maxlength = 5;
	 *         }]);
	 *     </script>
	 *     <div ng-controller="ExampleController">
	 *       <form name="form">
	 *         <label for="maxlength">Set a maxlength: </label>
	 *         <input type="number" ng-model="maxlength" id="maxlength" />
	 *         <br>
	 *         <label for="input">This input is restricted by the current maxlength: </label>
	 *         <input type="text" ng-model="model" id="input" name="input" ng-maxlength="maxlength" /><br>
	 *         <hr>
	 *         input valid? = <code>{{form.input.$valid}}</code><br>
	 *         model = <code>{{model}}</code>
	 *       </form>
	 *     </div>
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	       var model = element(by.binding('model'));
	       var input = element(by.id('input'));
	
	       it('should validate the input with the default maxlength', function() {
	         input.sendKeys('abcdef');
	         expect(model.getText()).not.toContain('abcdef');
	
	         input.clear().then(function() {
	           input.sendKeys('abcde');
	           expect(model.getText()).toContain('abcde');
	         });
	       });
	 *   </file>
	 * </example>
	 */
	var maxlengthDirective = function() {
	  return {
	    restrict: 'A',
	    require: '?ngModel',
	    link: function(scope, elm, attr, ctrl) {
	      if (!ctrl) return;
	
	      var maxlength = -1;
	      attr.$observe('maxlength', function(value) {
	        var intVal = toInt(value);
	        maxlength = isNumberNaN(intVal) ? -1 : intVal;
	        ctrl.$validate();
	      });
	      ctrl.$validators.maxlength = function(modelValue, viewValue) {
	        return (maxlength < 0) || ctrl.$isEmpty(viewValue) || (viewValue.length <= maxlength);
	      };
	    }
	  };
	};
	
	/**
	 * @ngdoc directive
	 * @name ngMinlength
	 *
	 * @description
	 *
	 * ngMinlength adds the minlength {@link ngModel.NgModelController#$validators `validator`} to {@link ngModel `ngModel`}.
	 * It is most often used for text-based {@link input `input`} controls, but can also be applied to custom text-based controls.
	 *
	 * The validator sets the `minlength` error key if the {@link ngModel.NgModelController#$viewValue `ngModel.$viewValue`}
	 * is shorter than the integer obtained by evaluating the Angular expression given in the
	 * `ngMinlength` attribute value.
	 *
	 * <div class="alert alert-info">
	 * **Note:** This directive is also added when the plain `minlength` attribute is used, with two
	 * differences:
	 * <ol>
	 *   <li>
	 *     `ngMinlength` does not set the `minlength` attribute and therefore HTML5 constraint
	 *     validation is not available.
	 *   </li>
	 *   <li>
	 *     The `ngMinlength` value must be an expression, while the `minlength` value must be
	 *     interpolated.
	 *   </li>
	 * </ol>
	 * </div>
	 *
	 * @example
	 * <example name="ngMinlengthDirective" module="ngMinlengthExample">
	 *   <file name="index.html">
	 *     <script>
	 *       angular.module('ngMinlengthExample', [])
	 *         .controller('ExampleController', ['$scope', function($scope) {
	 *           $scope.minlength = 3;
	 *         }]);
	 *     </script>
	 *     <div ng-controller="ExampleController">
	 *       <form name="form">
	 *         <label for="minlength">Set a minlength: </label>
	 *         <input type="number" ng-model="minlength" id="minlength" />
	 *         <br>
	 *         <label for="input">This input is restricted by the current minlength: </label>
	 *         <input type="text" ng-model="model" id="input" name="input" ng-minlength="minlength" /><br>
	 *         <hr>
	 *         input valid? = <code>{{form.input.$valid}}</code><br>
	 *         model = <code>{{model}}</code>
	 *       </form>
	 *     </div>
	 *   </file>
	 *   <file name="protractor.js" type="protractor">
	       var model = element(by.binding('model'));
	       var input = element(by.id('input'));
	
	       it('should validate the input with the default minlength', function() {
	         input.sendKeys('ab');
	         expect(model.getText()).not.toContain('ab');
	
	         input.sendKeys('abc');
	         expect(model.getText()).toContain('abc');
	       });
	 *   </file>
	 * </example>
	 */
	var minlengthDirective = function() {
	  return {
	    restrict: 'A',
	    require: '?ngModel',
	    link: function(scope, elm, attr, ctrl) {
	      if (!ctrl) return;
	
	      var minlength = 0;
	      attr.$observe('minlength', function(value) {
	        minlength = toInt(value) || 0;
	        ctrl.$validate();
	      });
	      ctrl.$validators.minlength = function(modelValue, viewValue) {
	        return ctrl.$isEmpty(viewValue) || viewValue.length >= minlength;
	      };
	    }
	  };
	};
	
	if (window.angular.bootstrap) {
	  // AngularJS is already loaded, so we can return here...
	  if (window.console) {
	    console.log('WARNING: Tried to load angular more than once.');
	  }
	  return;
	}
	
	// try to bind to jquery now so that one can write jqLite(fn)
	// but we will rebind on bootstrap again.
	bindJQuery();
	
	publishExternalAPI(angular);
	
	angular.module("ngLocale", [], ["$provide", function($provide) {
	var PLURAL_CATEGORY = {ZERO: "zero", ONE: "one", TWO: "two", FEW: "few", MANY: "many", OTHER: "other"};
	function getDecimals(n) {
	  n = n + '';
	  var i = n.indexOf('.');
	  return (i == -1) ? 0 : n.length - i - 1;
	}
	
	function getVF(n, opt_precision) {
	  var v = opt_precision;
	
	  if (undefined === v) {
	    v = Math.min(getDecimals(n), 3);
	  }
	
	  var base = Math.pow(10, v);
	  var f = ((n * base) | 0) % base;
	  return {v: v, f: f};
	}
	
	$provide.value("$locale", {
	  "DATETIME_FORMATS": {
	    "AMPMS": [
	      "AM",
	      "PM"
	    ],
	    "DAY": [
	      "Sunday",
	      "Monday",
	      "Tuesday",
	      "Wednesday",
	      "Thursday",
	      "Friday",
	      "Saturday"
	    ],
	    "ERANAMES": [
	      "Before Christ",
	      "Anno Domini"
	    ],
	    "ERAS": [
	      "BC",
	      "AD"
	    ],
	    "FIRSTDAYOFWEEK": 6,
	    "MONTH": [
	      "January",
	      "February",
	      "March",
	      "April",
	      "May",
	      "June",
	      "July",
	      "August",
	      "September",
	      "October",
	      "November",
	      "December"
	    ],
	    "SHORTDAY": [
	      "Sun",
	      "Mon",
	      "Tue",
	      "Wed",
	      "Thu",
	      "Fri",
	      "Sat"
	    ],
	    "SHORTMONTH": [
	      "Jan",
	      "Feb",
	      "Mar",
	      "Apr",
	      "May",
	      "Jun",
	      "Jul",
	      "Aug",
	      "Sep",
	      "Oct",
	      "Nov",
	      "Dec"
	    ],
	    "STANDALONEMONTH": [
	      "January",
	      "February",
	      "March",
	      "April",
	      "May",
	      "June",
	      "July",
	      "August",
	      "September",
	      "October",
	      "November",
	      "December"
	    ],
	    "WEEKENDRANGE": [
	      5,
	      6
	    ],
	    "fullDate": "EEEE, MMMM d, y",
	    "longDate": "MMMM d, y",
	    "medium": "MMM d, y h:mm:ss a",
	    "mediumDate": "MMM d, y",
	    "mediumTime": "h:mm:ss a",
	    "short": "M/d/yy h:mm a",
	    "shortDate": "M/d/yy",
	    "shortTime": "h:mm a"
	  },
	  "NUMBER_FORMATS": {
	    "CURRENCY_SYM": "$",
	    "DECIMAL_SEP": ".",
	    "GROUP_SEP": ",",
	    "PATTERNS": [
	      {
	        "gSize": 3,
	        "lgSize": 3,
	        "maxFrac": 3,
	        "minFrac": 0,
	        "minInt": 1,
	        "negPre": "-",
	        "negSuf": "",
	        "posPre": "",
	        "posSuf": ""
	      },
	      {
	        "gSize": 3,
	        "lgSize": 3,
	        "maxFrac": 2,
	        "minFrac": 2,
	        "minInt": 1,
	        "negPre": "-\u00a4",
	        "negSuf": "",
	        "posPre": "\u00a4",
	        "posSuf": ""
	      }
	    ]
	  },
	  "id": "en-us",
	  "localeID": "en_US",
	  "pluralCat": function(n, opt_precision) {  var i = n | 0;  var vf = getVF(n, opt_precision);  if (i == 1 && vf.v == 0) {    return PLURAL_CATEGORY.ONE;  }  return PLURAL_CATEGORY.OTHER;}
	});
	}]);
	
	  jqLite(function() {
	    angularInit(window.document, bootstrap);
	  });
	
	})(window);
	
	!window.angular.$$csp().noInlineStyle && window.angular.element(document.head).prepend('<style type="text/css">@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}</style>');

/***/ },
/* 3 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 4 */,
/* 5 */,
/* 6 */,
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _angular = __webpack_require__(1);
	
	var _angular2 = _interopRequireDefault(_angular);
	
	var _camelcase = __webpack_require__(8);
	
	var _camelcase2 = _interopRequireDefault(_camelcase);
	
	var _path = __webpack_require__(9);
	
	var _path2 = _interopRequireDefault(_path);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var context = __webpack_require__(11);
	
	// create the module to put the resources in,
	// in this case directives
	var _module = _angular2.default.module('components', []);
	
	// iterate each of the found required contexts (files)
	context.keys().forEach(function (key) {
	    // convert kabob to camel, eg list-item -> listItem
	    var name = (0, _camelcase2.default)(_path2.default.basename(key, '.js'));
	    // add the component to the components module
	    _module.component(name, context(key).default);
	});
	
	// export the name of the module for 
	// adding as a dependecy at the app level
	exports.default = _module.name;

/***/ },
/* 8 */
/***/ function(module, exports) {

	'use strict';
	
	function preserveCamelCase(str) {
		let isLastCharLower = false;
		let isLastCharUpper = false;
		let isLastLastCharUpper = false;
	
		for (let i = 0; i < str.length; i++) {
			const c = str.charAt(i);
	
			if (isLastCharLower && (/[a-zA-Z]/).test(c) && c.toUpperCase() === c) {
				str = str.substr(0, i) + '-' + str.substr(i);
				isLastCharLower = false;
				isLastLastCharUpper = isLastCharUpper;
				isLastCharUpper = true;
				i++;
			} else if (isLastCharUpper && isLastLastCharUpper && (/[a-zA-Z]/).test(c) && c.toLowerCase() === c) {
				str = str.substr(0, i - 1) + '-' + str.substr(i - 1);
				isLastLastCharUpper = isLastCharUpper;
				isLastCharUpper = false;
				isLastCharLower = true;
			} else {
				isLastCharLower = c.toLowerCase() === c;
				isLastLastCharUpper = isLastCharUpper;
				isLastCharUpper = c.toUpperCase() === c;
			}
		}
	
		return str;
	}
	
	module.exports = function () {
		let str = [].map.call(arguments, x => x.trim()).filter(x => x.length).join('-');
	
		if (str.length === 0) {
			return '';
		}
	
		if (str.length === 1) {
			return str.toLowerCase();
		}
	
		str = preserveCamelCase(str);
	
		return str
			.replace(/^[_.\- ]+/, '')
			.toLowerCase()
			.replace(/[_.\- ]+(\w|$)/g, (m, p1) => p1.toUpperCase());
	};


/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	// resolves . and .. elements in a path array with directory names there
	// must be no slashes, empty elements, or device names (c:\) in the array
	// (so also no leading and trailing slashes - it does not distinguish
	// relative and absolute paths)
	function normalizeArray(parts, allowAboveRoot) {
	  // if the path tries to go above the root, `up` ends up > 0
	  var up = 0;
	  for (var i = parts.length - 1; i >= 0; i--) {
	    var last = parts[i];
	    if (last === '.') {
	      parts.splice(i, 1);
	    } else if (last === '..') {
	      parts.splice(i, 1);
	      up++;
	    } else if (up) {
	      parts.splice(i, 1);
	      up--;
	    }
	  }
	
	  // if the path is allowed to go above the root, restore leading ..s
	  if (allowAboveRoot) {
	    for (; up--; up) {
	      parts.unshift('..');
	    }
	  }
	
	  return parts;
	}
	
	// Split a filename into [root, dir, basename, ext], unix version
	// 'root' is just a slash, or nothing.
	var splitPathRe =
	    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
	var splitPath = function(filename) {
	  return splitPathRe.exec(filename).slice(1);
	};
	
	// path.resolve([from ...], to)
	// posix version
	exports.resolve = function() {
	  var resolvedPath = '',
	      resolvedAbsolute = false;
	
	  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
	    var path = (i >= 0) ? arguments[i] : process.cwd();
	
	    // Skip empty and invalid entries
	    if (typeof path !== 'string') {
	      throw new TypeError('Arguments to path.resolve must be strings');
	    } else if (!path) {
	      continue;
	    }
	
	    resolvedPath = path + '/' + resolvedPath;
	    resolvedAbsolute = path.charAt(0) === '/';
	  }
	
	  // At this point the path should be resolved to a full absolute path, but
	  // handle relative paths to be safe (might happen when process.cwd() fails)
	
	  // Normalize the path
	  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
	    return !!p;
	  }), !resolvedAbsolute).join('/');
	
	  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
	};
	
	// path.normalize(path)
	// posix version
	exports.normalize = function(path) {
	  var isAbsolute = exports.isAbsolute(path),
	      trailingSlash = substr(path, -1) === '/';
	
	  // Normalize the path
	  path = normalizeArray(filter(path.split('/'), function(p) {
	    return !!p;
	  }), !isAbsolute).join('/');
	
	  if (!path && !isAbsolute) {
	    path = '.';
	  }
	  if (path && trailingSlash) {
	    path += '/';
	  }
	
	  return (isAbsolute ? '/' : '') + path;
	};
	
	// posix version
	exports.isAbsolute = function(path) {
	  return path.charAt(0) === '/';
	};
	
	// posix version
	exports.join = function() {
	  var paths = Array.prototype.slice.call(arguments, 0);
	  return exports.normalize(filter(paths, function(p, index) {
	    if (typeof p !== 'string') {
	      throw new TypeError('Arguments to path.join must be strings');
	    }
	    return p;
	  }).join('/'));
	};
	
	
	// path.relative(from, to)
	// posix version
	exports.relative = function(from, to) {
	  from = exports.resolve(from).substr(1);
	  to = exports.resolve(to).substr(1);
	
	  function trim(arr) {
	    var start = 0;
	    for (; start < arr.length; start++) {
	      if (arr[start] !== '') break;
	    }
	
	    var end = arr.length - 1;
	    for (; end >= 0; end--) {
	      if (arr[end] !== '') break;
	    }
	
	    if (start > end) return [];
	    return arr.slice(start, end - start + 1);
	  }
	
	  var fromParts = trim(from.split('/'));
	  var toParts = trim(to.split('/'));
	
	  var length = Math.min(fromParts.length, toParts.length);
	  var samePartsLength = length;
	  for (var i = 0; i < length; i++) {
	    if (fromParts[i] !== toParts[i]) {
	      samePartsLength = i;
	      break;
	    }
	  }
	
	  var outputParts = [];
	  for (var i = samePartsLength; i < fromParts.length; i++) {
	    outputParts.push('..');
	  }
	
	  outputParts = outputParts.concat(toParts.slice(samePartsLength));
	
	  return outputParts.join('/');
	};
	
	exports.sep = '/';
	exports.delimiter = ':';
	
	exports.dirname = function(path) {
	  var result = splitPath(path),
	      root = result[0],
	      dir = result[1];
	
	  if (!root && !dir) {
	    // No dirname whatsoever
	    return '.';
	  }
	
	  if (dir) {
	    // It has a dirname, strip trailing slash
	    dir = dir.substr(0, dir.length - 1);
	  }
	
	  return root + dir;
	};
	
	
	exports.basename = function(path, ext) {
	  var f = splitPath(path)[2];
	  // TODO: make this comparison case-insensitive on windows?
	  if (ext && f.substr(-1 * ext.length) === ext) {
	    f = f.substr(0, f.length - ext.length);
	  }
	  return f;
	};
	
	
	exports.extname = function(path) {
	  return splitPath(path)[3];
	};
	
	function filter (xs, f) {
	    if (xs.filter) return xs.filter(f);
	    var res = [];
	    for (var i = 0; i < xs.length; i++) {
	        if (f(xs[i], i, xs)) res.push(xs[i]);
	    }
	    return res;
	}
	
	// String.prototype.substr - negative index don't work in IE8
	var substr = 'ab'.substr(-1) === 'b'
	    ? function (str, start, len) { return str.substr(start, len) }
	    : function (str, start, len) {
	        if (start < 0) start = str.length + start;
	        return str.substr(start, len);
	    }
	;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ },
/* 10 */
/***/ function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};
	
	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.
	
	var cachedSetTimeout;
	var cachedClearTimeout;
	
	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }
	
	
	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }
	
	
	
	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;
	
	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}
	
	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;
	
	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}
	
	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};
	
	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};
	
	function noop() {}
	
	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	
	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};
	
	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	var map = {
		"./about/about.js": 12,
		"./addIncident/addIncident.js": 14,
		"./app/app.js": 16,
		"./home/home.js": 18,
		"./incident/incident.js": 20,
		"./incidents/incidents.js": 22,
		"./login/login.js": 24,
		"./logout/logout.js": 26,
		"./lynchMap/lynchMap.js": 28,
		"./signup/signup.js": 30,
		"./user/user.js": 32
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;
	webpackContext.id = 11;


/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _about = __webpack_require__(13);
	
	var _about2 = _interopRequireDefault(_about);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = {
	    template: _about2.default,
	    controller: controller
	};
	
	
	function controller() {};

/***/ },
/* 13 */
/***/ function(module, exports) {

	module.exports = "<section class =\"page\" id=\"about-page\">\n\n  <h2>About Section Header</h2>\n  <p>about section text here</p>\n\n</section>";

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _addIncident = __webpack_require__(15);
	
	var _addIncident2 = _interopRequireDefault(_addIncident);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	exports.default = {
	    template: _addIncident2.default,
	    controller: controller
	};
	
	
	controller.$inject = ['$rootScope', 'lynchService', '$state'];
	
	function controller(rootScope, lynchSvc, $state) {
	    var _ref,
	        _source,
	        _this = this;
	
	    this.showFormData = false;
	    this.decimal = 'true';
	    this.incident = {
	        cwIndex: null,
	        gdIndex: null,
	        origDBindex: null,
	        caseNum: null,
	        crossRefNotesCwGd: null,
	
	        year: null,
	        month: null,
	        day: null,
	        dateNotes: null,
	        state: 'California',
	        place: null,
	        county: null,
	        locationNotes: null,
	        latDecimal: null,
	        lonDecimal: null,
	        latNDegrees: null,
	        latNMinutes: null,
	        latNSeconds: null,
	        lonWDegrees: null,
	        lonWMinutes: null,
	        lonWSeconds: null,
	        crowdType: null,
	        crowdSize: null,
	        open: true,
	        authoritiesPresent: null,
	        authoritiesNotes: null,
	        crime: null,
	        punishment: null,
	        lethality: null,
	        otherNamesMentioned: null,
	        suspects: [{
	            suspectNames: [],
	            suspectRace: [],
	            suspectGender: null,
	            confessionOrSpeech: null,
	            confessionNotes: null,
	            attendedByClergy: false,
	            suspectNotes: null
	        }],
	        victims: [{
	            victimNames: [],
	            victimGender: null,
	            victimRace: null,
	            victimNotes: null
	        }],
	        sources: [(_ref = {
	            type: null,
	            publicationDate: null,
	            publicationCity: null
	        }, _defineProperty(_ref, 'publicationDate', null), _defineProperty(_ref, 'author', null), _defineProperty(_ref, 'title', null), _defineProperty(_ref, 'volumeNumber', null), _defineProperty(_ref, 'pageNumbers', null), _defineProperty(_ref, 'sourceNotes', null), _defineProperty(_ref, 'url', null), _ref)],
	        abstract: null
	    };
	
	    this.source = (_source = {
	        type: null,
	        publicationDate: null,
	        publicationCity: null
	    }, _defineProperty(_source, 'publicationDate', null), _defineProperty(_source, 'author', null), _defineProperty(_source, 'title', null), _defineProperty(_source, 'volumeNumber', null), _defineProperty(_source, 'pageNumber', null), _defineProperty(_source, 'notes', null), _defineProperty(_source, 'url', null), _defineProperty(_source, 'day', null), _defineProperty(_source, 'month', null), _defineProperty(_source, 'year', null), _defineProperty(_source, 'pageStart', null), _defineProperty(_source, 'pageEnd', null), _defineProperty(_source, 'state', 'California'), _defineProperty(_source, 'city', null), _source);
	
	    this.sourceTypes = ['book', 'newspaper', 'magazine', 'journal'];
	
	    this.races = ['white', 'asian', 'indian', 'black', 'latino'];
	
	    this.states = ['Alabama', 'Alaska', 'American Samoa', 'Arizona', 'Arkansas', 'California', 'Colorado', 'Connecticut', 'Delaware', 'District of Columbia', 'Federated States of Micronesia', 'Florida', 'Georgia', 'Guam', 'Hawaii', 'Idaho', 'Illinois', 'Indiana', 'Iowa', 'Kansas', 'Kentucky', 'Louisiana', 'Maine', 'Marshall Islands', 'Maryland', 'Massachusetts', 'Michigan', 'Minnesota', 'Mississippi', 'Missouri', 'Montana', 'Nebraska', 'Nevada', 'New Hampshire', 'New Jersey', 'New Mexico', 'New York', 'North Carolina', 'North Dakota', 'Northern Mariana Islands', 'Ohio', 'Oklahoma', 'Oregon', 'Palau', 'Pennsylvania', 'Puerto Rico', 'Rhode Island', 'South Carolina', 'South Dakota', 'Tennessee', 'Texas', 'Utah', 'Vermont', 'Virgin Island', 'Virginia', 'Washington', 'West Virginia', 'Wisconsin', 'Wyoming'];
	
	    this.oldCounties = ['Alameda County', 'Alpine County', 'Amador County', 'Butte County', 'Calaveras County', 'Colusa County', 'Contra Costa County', 'Del Norte County', 'El Dorado County', 'Fresno County', 'Glenn County', 'Humboldt County', 'Imperial County', 'Inyo County', 'Kern County', 'Kings County', 'Lake County', 'Lassen County', 'Los Angeles County', 'Madera County', 'Marin County', 'Mariposa County', 'Mendocino County', 'Merced County', 'Modoc County', 'Mono County', 'Monterey County', 'Napa County', 'Nevada County', 'Orange County', 'Placer County', 'Plumas County', 'Riverside County', 'Sacramento County', 'San Benito County', 'San Bernardino County', 'San Diego County', 'San Francisco County', 'San Joaquin County', 'San Luis Obispo County', 'San Mateo County', 'Santa Barbara County', 'Santa Clara County', 'Santa Cruz County', 'Shasta County', 'Sierra County', 'Siskiyou County', 'Solano County', 'Sonoma County', 'Stanislaus County', 'Sutter County', 'Tehama County', 'Trinity County', 'Tulare County', 'Tuolumne County', 'Ventura County', 'Yolo County', 'Yuba County'];
	
	    this.counties = [];
	
	    this.oldCounties.forEach(function (county) {
	        var arr = county.split(' ');
	        arr.pop();
	        var str = arr.join(' ');
	        _this.counties.push(str);
	    });
	
	    this.addThisIncident = function () {
	        if (_this.decimal === 'false') {
	            //write code to convert here
	            _this.incident.latDecimal = _this.incident.latNDegrees + _this.incident.latNMinutes / 60 + _this.incident.latNSeconds / 3600;;
	            _this.incident.lonDecimal = 0 - (_this.incident.lonWDegrees + _this.incident.lonWMinutes / 60 + _this.incident.lonWSeconds / 3600);
	            console.log(_this.incident.lonDecimal);
	        }
	        console.log('adding this incident ', _this.incident);
	        _this.showFormData = true;
	        // lynchSvc.addIncident(this.incident)
	        //     .then((incident)=>{
	        //         console.log('this incident was added to the DB ', incident);
	        //     });
	    };
	
	    this.addThisSource = function () {
	        console.log('adding this source', _this.source);
	    };
	};

/***/ },
/* 15 */
/***/ function(module, exports) {

	module.exports = "<section>\n    <h1>Add Incident</h1>\n    <form class=\"form-horizontal\">\n            <fieldset>\n              <legend>Enter Lynching Incident Details</legend>\n              \n              <div class =\"form-section\">\n                  <h2> Database Indices </h2>\n                  <div class=\"form-group\">\n\n                      <label for=\"inputCwIndex\" class=\"col-lg-2 control-label\">C-W Index\n                      </label>\n                      <div class=\"col-lg-2\">\n                        <input ng-model=\"$ctrl.incident.cwIndex\" type=\"text\" class=\"form-control\" id=\"inputCwIndex\" placeholder=\"C-W Index\">\n                      </div>\n\n                        <label for=\"inputGdIndex\" class=\"col-lg-1 control-label\">G-D Index\n                        </label>\n                        <div class=\"col-lg-2\">\n                          <input ng-model=\"$ctrl.incident.gdIndex\" type=\"text\" class=\"form-control\" id=\"inputCwIndex\" placeholder=\"G-D Index\">\n                        </div>\n\n                        <label for=\"inputOrigDBIndex\" class=\"col-lg-1 control-label\">Original Database Index\n                          </label>\n                          <div class=\"col-lg-2\">\n                            <input ng-model=\"$ctrl.incident.origDBIndex\" type=\"text\" class=\"form-control\" id=\"inputOrigDBIndex\" placeholder=\"Original DB Index\">\n                          </div>\n\n                      </div>\n                  </div>\n\n              <div class =\"form-section\">\n                <h2> Location </h2>\n                <div class=\"form-group\">\n\n                      <label for=\"inputCounty\" class=\"col-lg-2 control-label\">State</label>\n                      <div class=\"col-lg-2\">\n                        <select ng-model=\"$ctrl.incident.state\" ng-options=\"state for state in $ctrl.states\">\n                            <option value=\"\">California </option>\n                          </select>\n                       </div>\n\n                        <label for=\"inputCounty\" class=\"col-lg-1 control-label\">County</label>\n                        <div class=\"col-lg-2\">\n                          <select ng-model=\"$ctrl.incident.county\" ng-options=\"county for county in $ctrl.counties\">\n                          </select>\n                        </div>\n\n                        <label for=\"inputStartLocation\" class=\"col-lg-1 control-label\">Place</label>\n                        <div class=\"col-lg-2\">\n                          <input ng-model=\"$ctrl.incident.place\" type=\"text\" class=\"form-control\" id=\"inputPlace\" placeholder=\"Place\">\n                        </div>\n\n                        </div>\n                        <label for=\"textArea\" class=\"col-lg-2 control-label\">Location Notes</label>\n                        <div class=\"col-lg-10\">\n                          <textarea ng-model=\"$ctrl.incident.locationNotes\" class=\"form-control\" rows=\"3\" id=\"textArea\"></textarea>\n                          <span class=\"help-block\">Write notes concerning the location here.</span>\n                        </div>\n          \n            <div class =\"form-section\">\n              <h2> Location Coordinates </h2>\n              <div class=\"form-group\">\n\n                <label for=\"inputLatDec\" class=\"col-lg-2 control-label\">Coordinate Units</label>\n                <div class=\"col-lg-2\">\n                  <input ng-model=\"$ctrl.decimal\" type=\"radio\" name=\"decimal\" value=\"true\" checked> Decimal<br>\n                  <input ng-model=\"$ctrl.decimal\" type=\"radio\" name=\"false\" value=\"false\"> Degrees/minutes/seconds<br>\n              </div>\n            </div>\n\n            <div class=\"form-group\" ng-if=\"$ctrl.decimal==='true'\">\n                <label for=\"inputLatDec\" class=\"col-lg-1 control-label\">Latitude</label>\n                <div class=\"col-lg-1\">\n                  <input ng-model=\"$ctrl.incident.latDecimal\" type=\"number\" min=\"-90\" max=\"90\" class=\"form-control\" id=\"inputLatDec\">\n                </div>\n\n                <label for=\"inputLonDec\" class=\"col-lg-1 control-label\">Longitude</label>\n                <div class=\"col-lg-1\">\n                  <input ng-model=\"$ctrl.incident.lonDecimal\" type=\"number\" min=\"-180\" max=\"180\" class=\"form-control\" id=\"inputLonDec\">\n                </div>\n              </div>\n\n              <div class=\"form-group\" ng-if=\"$ctrl.decimal==='false'\">\n                  <label for=\"inputLat\" class=\"col-lg-1 control-label\">Latitude</label>\n\n                  <label for=\"inputLatDeg\" class=\"col-lg-1 control-label\">Degrees</label>\n                  <div class=\"col-lg-1\">\n                    <input ng-model=\"$ctrl.incident.latNDegrees\" type=\"number\" min=\"0\" max=\"90\" class=\"form-control\" id=\"inputLatNDegrees\">\n                  </div>\n                  <label for=\"inputLatDeg\" class=\"col-lg-1 control-label\">Minutes</label>\n                  <div class=\"col-lg-1\">\n                    <input ng-model=\"$ctrl.incident.latNMinutes\" type=\"number\" min=\"0\" max=\"60\" class=\"form-control\" id=\"inputLatNMinutes\">\n                  </div>\n                  <label for=\"inputLatDeg\" class=\"col-lg-1 control-label\">Seconds</label>\n                  <div class=\"col-lg-1\">\n                    <input ng-model=\"$ctrl.incident.latNSeconds\" type=\"number\" min=\"0\" max=\"60\" class=\"form-control\" id=\"inputLatNSeconds\">\n                  </div>\n                </div>\n\n                <div class=\"form-group\" ng-if=\"$ctrl.decimal==='false'\">\n                <label for=\"inputLonDec\" class=\"col-lg-1 control-label\">Longitude</label>\n                <label for=\"inputLatDeg\" class=\"col-lg-1 control-label\">Degrees</label>\n                <div class=\"col-lg-1\">\n                  <input ng-model=\"$ctrl.incident.lonWDegrees\" type=\"number\" min=\"0\" max=\"180\" class=\"form-control\" id=\"inputlonWDegrees\">\n                </div>\n                <label for=\"inputLonDeg\" class=\"col-lg-1 control-label\">Minutes</label>\n                <div class=\"col-lg-1\">\n                  <input ng-model=\"$ctrl.incident.lonWMinutes\" type=\"number\" min=\"0\" max=\"60\" class=\"form-control\" id=\"inputLonWMinutes\">\n                </div>\n                <label for=\"inputlonDeg\" class=\"col-lg-1 control-label\">Seconds</label>\n                <div class=\"col-lg-1\">\n                  <input ng-model=\"$ctrl.incident.lonWSeconds\" type=\"number\" min=\"0\" max=\"60\" class=\"form-control\" id=\"inputLonWSeconds\">\n                </div>\n              </div>\n\n          </div>\n        </div>\n\n              <div class =\"form-section\">\n                <h2> Date </h2>\n                <div class=\"form-group\">\n                      <label for=\"inputYear\" class=\"col-lg-2 control-label\">Year</label>\n                      <div class=\"col-lg-2\">\n                        <input ng-model=\"$ctrl.incident.year\" type=\"number\" min=\"1500\" max=\"2100\" class=\"form-control\" id=\"inputYear\">\n                      </div>\n                          <label for=\"inputMonth\" class=\"col-lg-1 control-label\">Month</label>\n                          <div class=\"col-lg-2\">\n                              <input ng-model=\"$ctrl.incident.month\" type=\"number\" min=\"1\" max=\"12\" class=\"form-control\" id=\"inputMonth\">\n                            </div>\n                          <label for=\"inputDay\" class=\"col-lg-1 control-label\">Day</label>\n                          <div class=\"col-lg-2\">\n                            <input ng-model=\"$ctrl.incident.day\" type=\"number\" min=\"1\" max=\"31\" class=\"form-control\" id=\"inputMonth\">\n                          </div>\n                        </div>\n                          <label for=\"textArea\" class=\"col-lg-2 control-label\">Date Notes</label>\n                          <div class=\"col-lg-10\">\n                            <textarea ng-model=\"$ctrl.incident.dateNotes\" class=\"form-control\" rows=\"3\" id=\"textArea\"></textarea>\n                            <span class=\"help-block\">Write notes concerning the date here.</span>\n                          </div>         \n              </div>\n\n\n              <div class =\"form-section\">\n                  <h2> Lynching </h2>\n                  <div class=\"form-group\">\n                      <label for=\"inputCrowdType\" class=\"col-lg-2 control-label\">Crowd Type</label>\n                      <div class=\"col-lg-2\">\n                        <input ng-model=\"$ctrl.incident.crowdType\" type=\"text\" class=\"form-control\" id=\"inputCrowdType\" placeholder=\"Crowd Type\">\n                      </div>\n\n                      <div class=\"form-group\">\n                          <label for=\"inputCrowdSize\" class=\"col-lg-2 control-label\">Crowd Size</label>\n                          <div class=\"col-lg-2\">\n                            <input ng-model=\"$ctrl.incident.crowdSize\" type=\"text\" class=\"form-control\" id=\"inputCrowdSize\" placeholder=\"Crowd Size\">\n                          </div>\n\n                        <label for=\"inputOpen\" class=\"col-lg-2 control-label\">Open or Closed</label>\n                        <div class=\"col-lg-1\">\n                            <input ng-model=\"$ctrl.incident.open\" type=\"radio\" name=\"open\" value=\"open\" checked> Open<br>\n                            <input ng-model=\"$ctrl.incident.open\" type=\"radio\" name=\"closed\" value=\"closed\"> Closed<br>\n                            <input ng-model=\"$ctrl.incident.open\" type=\"radio\" name=\"unknown\" value=\"unknown\"> Unknown\n                        </div>\n\n                        <label for=\"inputCrime\" class=\"col-lg-2 control-label\">Crime</label>\n                        <div class=\"col-lg-2\">\n                          <input ng-model=\"$ctrl.incident.crime\" type=\"text\" class=\"form-control\" id=\"inputCrime\" placeholder=\"Crime\">\n                        </div>\n\n                        <label for=\"inputPunishment\" class=\"col-lg-2 control-label\">Punishment</label>\n                        <div class=\"col-lg-2\">\n                          <input ng-model=\"$ctrl.incident.punishment\" type=\"text\" class=\"form-control\" id=\"inputPunishment\" placeholder=\"Punishment\">\n                        </div>\n\n                        <label for=\"inputLethality\" class=\"col-lg-2 control-label\">Lethality</label>\n                        <div class=\"col-lg-1\">\n                            <input ng-model=\"$ctrl.incident.lethality\" type=\"radio\" name=\"lethal\" value=\"lethal\" checked> Lethal<br>\n                            <input ng-model=\"$ctrl.incident.lethality\" type=\"radio\" name=\"non-lethal\" value=\"non-lethal\"> Non-Lethal<br>\n                            <input ng-model=\"$ctrl.incident.lethality\" type=\"radio\" name=\"both\" value=\"both\"> Both\n                        </div>\n\n                        <label for=\"inputOtherNamesMentioned\" class=\"col-lg-2 control-label\">Other Names Mentioned</label>\n                        <div class=\"col-lg-2\">\n                          <input ng-model=\"$ctrl.incident.otherNamesMentioned\" type=\"text\" class=\"form-control\" id=\"inputOtherNamesMentioned\" placeholder=\"Other Names Mentioned\">\n                        </div>\n                    \n                        <label for=\"inputAuthorities\" class=\"col-lg-2 control-label\">Authorities Present?</label>\n                        <div class=\"col-lg-1\">\n                            <input ng-model=\"$ctrl.incident.authoritiesPresent\" type=\"radio\" name=\"present\" value=\"present\" checked> Present<br>\n                            <input ng-model=\"$ctrl.incident.authoritiesPresent\" type=\"radio\" name=\"not\" value=\"not\"> Not Present<br>\n                            <input ng-model=\"$ctrl.incident.authoritiesPresent\" type=\"radio\" name=\"unknown\" value=\"unknown\"> Unknown\n                        </div>\n                      </div>\n\n                        <label for=\"textArea\" class=\"col-lg-2 control-label\">Authorities Notes</label>\n                        <div class=\"col-lg-10\">\n                          <textarea ng-model=\"$ctrl.incident.authoritiesNotes\" class=\"form-control\" rows=\"3\" id=\"textArea\"></textarea>\n                          <span class=\"help-block\">Write notes concerning the authorities here.</span>\n                        </div> \n                </div>\n\n\n                <div class =\"form-section\">\n                    <h2> Suspects </h2>\n                    <div class=\"form-group\">\n\n                        <label for=\"inputSuspectNumber\" class=\"col-lg-2 control-label\">Number of Suspects</label>\n                        <div class=\"col-lg-1\">\n                            <input type=\"number\" name=\"quantity\" min=\"1\"> \n                        </div>\n\n                        <label for=\"inputSuspectGender\" class=\"col-lg-2 control-label\">Suspect Gender(s)</label>\n                        <div class=\"col-lg-1\">\n                            <input type=\"radio\" name=\"gender\" value=\"male\" checked>  Male<br>\n                            <input type=\"radio\" name=\"gender\" value=\"female\"> Female<br>\n                            <input type=\"radio\" name=\"gender\" value=\"both\"> both\n                        </div>\n                        <label for=\"inputSuspectRaces\" class=\"col-lg-2 control-label\">Suspect Race(s)</label>\n                        <div class=\"col-lg-1\" ng-repeat=\"race in $ctrl.races\" >\n                            <input type=\"checkbox\" name=\"{{race}}\" value=\"{race}\"> {{race}}<br>\n                        </div>\n                        <br>\n                      </div>\n\n                    \n                      <label for=\"textArea\" class=\"col-lg-2 control-label\">Suspect Notes</label>\n                      <div class=\"col-lg-10\">\n                        <textarea ng-model=\"$ctrl.incident.suspectNotes\" class=\"form-control\" rows=\"3\" id=\"textArea\"></textarea>\n                        <span class=\"help-block\">Write notes concerning the suspect here.</span>\n                      </div>\n                  </div>\n\n                  <div class =\"form-section\">\n                      <div class =\"form-section\">\n                          <h2> Victims </h2>\n                          <div class=\"form-group\">\n      \n                              <label for=\"inputSuspectNumber\" class=\"col-lg-2 control-label\">Number of Victims</label>\n                              <div class=\"col-lg-2\">\n                                  <input type=\"number\" name=\"quantity\" min=\"1\"> \n                                  <span class=\"help-block\">Leave blank if unknown.</span>\n                              </div>\n      \n                              <label for=\"inputVictimGender\" class=\"col-lg-2 control-label\">Victim Gender(s)</label>\n                              <div class=\"col-lg-1\">\n                                  <input type=\"radio\" name=\"gender\" value=\"male\"> Male<br>\n                                  <input type=\"radio\" name=\"gender\" value=\"female\"> Female<br>\n                                  <input type=\"radio\" name=\"gender\" value=\"both\"> both\n                              </div>\n      \n                            <label for=\"inputVictimRaces\" class=\"col-lg-2 control-label\">Victim Race(s)</label>\n                            <div class=\"col-lg-1\" ng-repeat=\"race in $ctrl.races\" >\n                                <input type=\"checkbox\" name=\"{{race}}\" value=\"{race}\"> {{race}}<br>\n                            </div>\n                            <br>\n                        </div>\n\n                        <label for=\"textArea\" class=\"col-lg-2 control-label\">Victim Notes</label>\n                        <div class=\"col-lg-10\">\n                          <textarea ng-model=\"$ctrl.incident.victimNotes\" class=\"form-control\" rows=\"3\" id=\"textArea\"></textarea>\n                          <span class=\"help-block\">Write notes concerning the victim here.</span>\n                        </div>\n                    </div>\n\n                    <div class =\"form-section\">\n                        <h2> Soures and Notes </h2>\n                        <div class=\"form-group\">\n\n                            <label for=\"inputSourceType\" class=\"col-lg-1 control-label\">Source Type</label>\n                            <div class=\"col-lg-1\">\n                              <select ng-model=\"$ctrl.source.type\" ng-options=\"type for type in $ctrl.sourceTypes\">\n                              </select>\n                            </div>\n\n                            <label ng-if=\"$ctrl.source.type === 'book'\" for=\"inputSourceYear\" class=\"col-lg-1 control-label\">Volume #</label>\n                            <div class=\"col-lg-1\" ng-if=\"$ctrl.source.type === 'book'\">\n                              <input ng-model=\"$ctrl.source.volumeNumber\" type=\"number\" min=\"0\" max=\"20000\" class=\"form-control\" id=\"inputVolumeNumber\">\n                            </div>\n\n                            <label ng-if=\"$ctrl.source.type === 'newspaper'\" for=\"inputSourceColumn\" class=\"col-lg-1 control-label\">Column #</label>\n                            <div class=\"col-lg-1\" ng-if=\"$ctrl.source.type === 'newspaper'\">\n                              <input ng-model=\"$ctrl.source.columnNumber\" type=\"number\" min=\"0\" max=\"200\" class=\"form-control\" id=\"inputColumnNumber\">\n                            </div>\n\n                            <label for=\"inputSourcePage\" class=\"col-lg-1 control-label\">Page #</label>\n                            <div class=\"col-lg-1\">\n                              <input ng-model=\"$ctrl.source.pageNumberStart\" type=\"number\" min=\"0\" max=\"200\" class=\"form-control\" id=\"inputPageNumber\">\n                            </div>\n\n                            <!-- <label for=\"inputSourcePage\" class=\"col-lg-1 control-label\">to</label>\n                            <div class=\"col-lg-2\">\n                              <input ng-model=\"$ctrl.source.pageNumberEnd\" type=\"number\" min=\"0\" max=\"200\" class=\"form-control\" id=\"inputPageNumber\">\n                            </div> -->\n                           \n                            <label for=\"inputSourceYear\" class=\"col-lg-1 control-label\">Publication Year</label>\n                            <div class=\"col-lg-1\">\n                              <input ng-model=\"$ctrl.source.year\" type=\"number\" min=\"1500\" max=\"2100\" class=\"form-control\" id=\"inputSourceYear\">\n                            </div>\n\n                                <label for=\"inputSourceMonth\" class=\"col-lg-1 control-label\">Publication Month</label>\n                                <div class=\"col-lg-1\">\n                                    <input ng-model=\"$ctrl.source.month\" type=\"number\" min=\"1\" max=\"12\" class=\"form-control\" id=\"inputsourceMonth\">\n                                  </div>\n\n                                <label for=\"inputSourceDay\" class=\"col-lg-1 control-label\">Publication Day</label>\n                                <div class=\"col-lg-1\">\n                                  <input ng-model=\"$ctrl.source.day\" type=\"number\" min=\"1\" max=\"31\" class=\"form-control\" id=\"inputSourceMonth\">\n                                </div>\n                              </div>\n                                \n                              <div class=\"form-group\">\n                                <label for=\"inputTitle\" class=\"col-lg-1 control-label\">Title</label>\n                                <div class=\"col-lg-2\">\n                                  <input ng-model=\"$ctrl.source.title\" type=\"text\" class=\"form-control\" id=\"inputSourceTitle\" placeholder=\"Source Title\">\n                                </div>\n\n                                <label for=\"inputAuthor\" class=\"col-lg-1 control-label\">Author</label>\n                                <div class=\"col-lg-2\">\n                                  <input ng-model=\"$ctrl.source.author\" type=\"text\" class=\"form-control\" id=\"inputAuthor\" placeholder=\"Source Author\">\n                                </div>\n\n                                <label for=\"inputPublicationState\" class=\"col-lg-2 control-label\">Publication State</label>\n                                <div class=\"col-lg-1\">\n                                  <select ng-model=\"$ctrl.source.state\" ng-options=\"state for state in $ctrl.states\">\n                                      <option value=\"\">California </option>\n                                  </select>\n                                 </div>\n                                </div>\n                                \n                                <div class=\"form-group\">\n                                <label for=\"inputPublicationCity\" class=\"col-lg-1 control-label\">Publication City</label>\n                                <div class=\"col-lg-2\">\n                                  <input ng-model=\"$ctrl.source.city\" type=\"text\" class=\"form-control\" id=\"inputAuthor\" placeholder=\"Publication City\">\n                                </div>\n\n                                <label for=\"inputUrl\" class=\"col-lg-1 control-label\">URL</label>\n                                <div class=\"col-lg-2\">\n                                  <input ng-model=\"$ctrl.source.url\" type=\"url\" class=\"form-control\" id=\"inputUrl\" placeholder=\"source location URL\">\n                                </div>\n\n                              </div>\n\n                              <div class=\"form-group\">\n                                <label for=\"textArea\" class=\"col-lg-2 control-label\"> Source Notes</label>\n                                <div class=\"col-lg-10\">\n                                  <textarea ng-model=\"$ctrl.source.notes\" class=\"form-control\" rows=\"3\" id=\"textArea\"></textarea>\n                                  <span class=\"help-block\">Write notes concerning this source here.</span>\n                                </div>\n\n                            <div class=\"col-lg-10 col-lg-offset-2\">\n                                <button ng-click=\"$ctrl.addThisSource()\" type=\"submit\" class=\"btn btn-primary\">Add Source</button>\n                              </div>\n                          </div>\n                  \n\n                      <div class=\"form-group\">\n                       <label for=\"textArea\" class=\"col-lg-2 control-label\">Abstract</label>\n                              <div class=\"col-lg-10\">\n                                <textarea ng-model=\"$ctrl.incident.abstract\" class=\"form-control\" rows=\"3\" id=\"textArea\"></textarea>\n                                <span class=\"help-block\">Write a brief abstract of the Incident here.</span>\n                              </div>\n                      </div>\n\n\n             \n\n              <div class=\"form-group\">\n                <div class=\"col-lg-10 col-lg-offset-2\">\n                  <button type=\"reset\" class=\"btn btn-default\">Cancel</button>\n                  <button ng-click=\"$ctrl.addThisIncident()\" type=\"submit\" class=\"btn btn-primary\">Submit</button>\n                </div>\n              </div>\n            </fieldset>\n          </form>\n               \n          <div ng-if=\"$ctrl.showFormData===true\">\n            <h2>Data Check</h2>\n            <p>{{$ctrl.incident}}</p>\n          </div>\n\n\n\n\n</section>";

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _app = __webpack_require__(17);
	
	var _app2 = _interopRequireDefault(_app);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = {
	    template: _app2.default,
	    controller: controller
	};
	
	
	controller.$inject = ['$state', '$rootScope'];
	
	function controller($state, rootScope) {
	    var _this = this;
	
	    this.state = $state;
	
	    this.searchQuery = '';
	    this.searchFor = function () {
	        console.log('searching for this town: ', _this.searchQuery);
	        rootScope.query = _this.searchQuery;
	        $state.go('incidents');
	        console.log('state is ', $state);
	        console.log('statename is ', $state.current.name);
	    };
	
	    this.loggedIn = false;
	
	    // rootScope.$on('login', (event, user)=>{
	    //     // console.log('after Logged in, useris ', user.user);
	    //     rootScope.user = user.user;
	    //     console.log('user logged in as ', user);
	    //     this.loggedIn = true;
	    //     $state.go('user');
	    // });
	
	    // rootScope.$on('logout', (event)=>{
	    //     this.user = null;
	    //     this.loggedIn = false;
	    //     $state.go('home');
	    //     // console.log('Logged out, useris ', user.user);
	    //     // this.updateMenu();
	    // });
	
	    // rootScope.$on('updateUser', (event, user)=>{
	    //     // no code here yet
	    // });
	};

/***/ },
/* 17 */
/***/ function(module, exports) {

	module.exports = " <section>        \n       \n        <nav class=\"navbar navbar-default navbar-dark bg-primary\">\n                <div class=\"container-fluid\">\n                  <div class=\"navbar-header\">\n                    <a class=\"navbar-brand\" ui-sref=\"home\">CaLynchDB</a>\n                  </div>\n                  <ul class=\"nav navbar-nav\">\n                    <li><a ui-sref=\"home\" class=\"active\"><span class=\"glyphicon glyphicon-home\"></span>Home</a></li>\n                    <li ng-if=\"$ctrl.loggedIn===true\"><a ui-sref=\"user\"><span class=\"glyphicon glyphicon-user\"></span>My Account</a></li>\n                    <li><a ui-sref=\"lynchMap\"><span class=\"glyphicon glyphicon-globe\"></span>Lynching Map</a></li>\n                    <li><a ui-sref=\"incidents\"><span class=\"glyphicon glyphicon-list\"></span>Browse Lynchings</a></li>\n                    <li ng-if=\"$ctrl.loggedIn===true\"><a ui-sref=\"addIncident\"><span class=\"glyphicon glyphicon-plus\"></span>Add Lynching</a></li>\n                    <li><a ui-sref=\"about\"><span class=\"glyphicon glyphicon-apple\"></span>About</a></li>\n                    <form class=\"navbar-form navbar-left\">\n                        <div class=\"input-group\" ng-hide=\"$ctrl.state.current.name==='incidents'\">\n                            <input type=\"text\" class=\"form-control\" placeholder=\"Search Lynchings by Location\" ng-model=\"$ctrl.searchQuery\">\n                                <div class=\"input-group-btn\">\n                                    <button ng-click=\"$ctrl.searchFor()\" class=\"btn btn-default\" type=\"submit\">\n                                        <i class=\"glyphicon glyphicon-search\"></i>\n                                    </button>\n                                </div>\n                        </div>\n                    </form>\n                    <li ng-if=\"$ctrl.loggedIn===false\"><a ui-sref=\"login\"><span class=\"glyphicon glyphicon-log-in\"></span>Login</a></li> \n                    <li ng-if=\"$ctrl.loggedIn===true\"><a ui-sref=\"logout\"><span class=\"glyphicon glyphicon-log-out\"></span>Log Out</a></li>   \n                    <li ng-if=\"$ctrl.loggedIn===false\"><a ui-sref=\"signup\"><span class=\"glyphicon glyphicon-edit\"></span>Sign Up</a></li>    \n                  </ul>\n                </div>\n              </nav>\n\n\n\n  \n    <div class=\"container-fluid\">\n        <ui-view></ui-view>\n    </div>\n\n    <div class=\"container-fluid\">\n        <p class=\"footer-text\"><span class=\"branding\">&copy; David A. Johnson, 2018 </span></p>\n    </div>\n  </section>";

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _home = __webpack_require__(19);
	
	var _home2 = _interopRequireDefault(_home);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = {
	    template: _home2.default,
	    controller: controller
	};
	
	
	controller.$inject = ['$timeout'];
	
	function controller($timeout) {
	
	    //     this.letters=[];
	    //     this.letterOptions = [['I', 'E'],['N', 'S'],['T','F'],['J','P']];
	
	    //     this.letters = [];
	    //     this.count = 0;
	
	
	    //     this.update = ()=>{
	    //         if (this.count < 1000){
	    //             for(let i=0;i<this.letterOptions.length; i++){
	    //                 this.letters[i]= {letter: this.letterOptions[i][Math.round(Math.random())]};
	    //             }
	    //             this.count ++;
	    //             $timeout(this.update, 1000);
	    //         }
	    //     };
	
	    //     this.update(); fun
	
	};

/***/ },
/* 19 */
/***/ function(module, exports) {

	module.exports = "\n<section class =\"page\" id=\"home-page\">\n\n  <div class=\"jumbotron\">\n    <h1 class=\"display-3\">California Lynching Database</h1>\n    <p class=\"lead\">Subtitle here?</p>\n    <hr class=\"my-4\">\n    <p>Some basic info here?</p>\n    <p class=\"lead\">\n      <a class=\"btn btn-primary btn-lg\" ui-sref=\"login\" role=\"button\">Login</a>\n      <a class=\"btn btn-primary btn-lg\" ui-sref=\"signup\" role=\"button\">Sign Up</a>\n    </p>\n  </div>\n\n</section>\n";

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _incident = __webpack_require__(21);
	
	var _incident2 = _interopRequireDefault(_incident);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = {
	    template: _incident2.default,
	    controller: controller
	};
	
	
	controller.$inject = ['$timeout', '$rootScope'];
	
	function controller(timeout) {
	    this.options = {};
	}

/***/ },
/* 21 */
/***/ function(module, exports) {

	module.exports = "\n <section>\n         <h1> Single Incident Page</h1>\n                                        <!-- <div class=\"panel panel-primary col-lg-11\" id=\"incident-panel\">\n                                                <div  class=\"panel-header\">\n                                                        <h3>{{incident.suspectNames}}</h3>\n                                                </div>\n        \n                                                <div ng-if=\"incident.fullView===true\" class=\"lynchMap\" map-lazy-load=\"https://maps.google.com/maps/api/js\" map-lazy-load-params=\"{{$ctrl.mapURL}}\" >\n                                                        <ng-map ng-if=\"incident.fullView===true\" class=\"small-map\" center=\"{{incident.latDecimal}},{{incident.lonDecimal}} \" zoom=\"8\">\n                                                                <marker  ng-if=\"incident.fullView===true\" position=“{{incident.latDecimal}},{{incident.lonDecimal}}”/> \n                                                        </ng-map>\n                                                </div>\n        \n                                                <div class=\"panel-body\" ng-if=\"incident.fullView===true\">\n                                                        <button class=\"btn btn-secondary\" id=\"show-incident-button\" ng-click=\"$ctrl.hideIncident(incident)\" ><span class=\"glyphicon glyphicon-view\"><h6>Show Less</h6></span></button>\n                                                        <h3>{{incident.year}}</h3>\n                                                        <h4>{{incident.place}}, {{incident.county}} County {{incident.state}}</h4>\n                                                        <p>{{incident.summary}} summary will go here</p>\n        \n                                                        <div class=\"panel-body\">\n                                                                <h4>Accused</h4>\n                                                                <p>Number: {{incident.numberSuspects}}</p>\n                                                                <p>Names: {{incident.suspectNames}}</p>\n                                                                <p>Races: {{incident.suspectRaces}}</p>\n                                                                <p>Confession or Speech at Gallows: {{incident.confession}}</p>\n                                                                <p>Accused Notes: {{incident.suspectNotes}}</p>\n                                                        </div>\n                                                    \n                                                        <div class=\"panel-body\">\n                                                                <h4>Victims</h4>\n                                                                <p>Number:  <em>{{incident.victimNumber}}</em></p>\n                                                                <p>Names: {{incident.victimNames}}</p>\n                                                                <p>Genders: {{incident.victimGenders}}</p>\n                                                                <p>Races: {{incident.victimRaces}}</p>\n                                                                <p>Victim Notes: {{incident.victimNotes}}</p>\n                                                        </div>\n        \n                                                        <div class=\"panel-body\">\n                                                                <h4>Lynching</h4>\n                                                                <p>Type of Crowd:  <em>{{incident.crowdType}}</em></p>\n                                                                <p>Size of Crowd: {{incident.crowdSize}}</p>\n                                                                <p>Open or Closed?: {{incident.open}}</p>\n                                                                <p>Authorities Present: {{incident.oldAuthorities}}</p>\n                                                                <p>Crime: {{incident.crime}}</p>\n                                                                <p>Punishment: {{incident.punishment}}</p>\n                                                                <p>Lethality: {{incident.Lethality}}</p>\n                                                                <p>Other Names Mentioned: {{incident.otherNamesMentioned}}</p>\n                                                        </div>\n                                            \n                                                        <div class=\"panel-body\">\n                                                                <h4>Database Indices</h4>\n                                                                <p>Case Number:  <em>{{incident.caseNum}}</em></p>\n                                                                <p>Current Database ID:  <em>{{incident._id}}</em></p>\n                                                                <p>Original Database Index: {{incident.origDBIndex}}</p>\n                                                                <p>cwIndex: {{incident.cwIndex}}</p>\n                                                                <p>gdIndex: {{incident.gdIndex}}</p>\n                                                                <p>Index Notes: {{incident.crossRefNotesCwGd}}</p>\n                                                        </div>\n        \n                                                        <div class=\"panel-body\">\n                                                                <h4>Sources</h4>\n                                                                <p>Sources:  <em>{{incident.oldSources}}</em></p>\n                                                                <p>Notes:  <em>{{incident.oldNotes}}</em></p>\n                                                        </div>\n                                                      </div>\n                                        </div>\n                                </li>\n                        </ul>\n                </div>\n        </div> \n        \n                <div id=\"search-results-footer\" class=\"jumbotron\" ng-if=\"$ctrl.incidents.length>0\">\n                        <div class=\"panel-md-10\">\n                                <button class=\"btn btn-info\" ng-if=\"$ctrl.minResult>9\" ng-click=\"$ctrl.previousResults()\"><span class=\"glyphicon glyphicon-arrow-left\"><h6>Previous</h6></button>\n                                <button class=\"btn btn-info\" ng-if=\"$ctrl.maxResult<$ctrl.incidentNumber\" ng-click=\"$ctrl.nextResults()\"><span class=\"glyphicon glyphicon-arrow-right\"><h6>Next</h6></button>\n                                <span>Results {{$ctrl.minResult}}-{{$ctrl.maxResult}}</span>\n                                <span> (of {{$ctrl.incidentNumber}})</h3>\n                        </div>\n                </div> -->\n</section>\n";

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';Object.defineProperty(exports,"__esModule",{value:true});var _incidents=__webpack_require__(23);var _incidents2=_interopRequireDefault(_incidents);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}exports.default={template:_incidents2.default,controller:controller};controller.$inject=['lynchService','$timeout','$rootScope','googleMapsUrl'];function controller(lynchSvc,timeout,rootScope,googleMapsUrl){var _this=this;console.log('root scoped query is ',rootScope.query);this.mapURL=googleMapsUrl;this.minResult=0;this.maxResult=10;this.nuke=false;this.newFilter=false;this.activeFilter=null;this.queryNumber=-1;this.incidents=[];this.activeIncidents=[];this.newQuery={category:null,target:null,number:null};this.queries=[];this.filters=[{name:'year',value:'year'},{name:'county',value:'county'},{name:'place',value:'place'}];this.oldCounties=['Alameda County','Alpine County','Amador County','Butte County','Calaveras County','Colusa County','Contra Costa County','Del Norte County','El Dorado County','Fresno County','Glenn County','Humboldt County','Imperial County','Inyo County','Kern County','Kings County','Lake County','Lassen County','Los Angeles County','Madera County','Marin County','Mariposa County','Mendocino County','Merced County','Modoc County','Mono County','Monterey County','Napa County','Nevada County','Orange County','Placer County','Plumas County','Riverside County','Sacramento County','San Benito County','San Bernardino County','San Diego County','San Francisco County','San Joaquin County','San Luis Obispo County','San Mateo County','Santa Barbara County','Santa Clara County','Santa Cruz County','Shasta County','Sierra County','Siskiyou County','Solano County','Sonoma County','Stanislaus County','Sutter County','Tehama County','Trinity County','Tulare County','Tuolumne County','Ventura County','Yolo County','Yuba County'];this.counties=[];this.months=['none','January','February','March','April','May','June','July','August','September','October','November','December'];this.oldCounties.forEach(function(county){var arr=county.split(' ');arr.pop();var str=arr.join(' ');_this.counties.push(str);});this.classes=['btn btn-primary','btn btn-secondary','btn btn-warning','btn btn-danger'];this.buttonClass='btn btn-outline-primary';this.addFilter=function(){_this.newFilter=true;if(_this.newQuery.category!==null&&_this.newQuery.target!==null){_this.queryNumber++;if(_this.queryNumber>3){_this.queryNumber=0;}_this.newQuery.number=_this.queryNumber;_this.queries.push(_this.newQuery);var index=_this.filters.findIndex(function(filter){return filter.name===_this.newQuery.category.name;});_this.filters.splice(index,1);_this.newQuery={catergory:null,target:null,number:null};console.log('filters are ',_this.filters);}};this.removeFilter=function(filter){console.log('removing this filter ',filter);_this.filters.push(filter.category);var index=_this.queries.findIndex(function(query){console.log('query name is '+query.category.name+' and filter name is '+filter.category.name);return query.category.name===filter.category.name;});_this.queries.splice(index,1);};this.showIncident=function(incident){incident.fullView=true;};this.hideIncident=function(incident){incident.fullView=false;};this.deleteIncident=function(incident){console.log('deleting this incident ',incident);lynchSvc.deleteIncident(incident).then(function(incident){console.log(incident+'was deleted');_this.searchIncidents();});};this.updateActiveIncidents=function(){console.log('updating active incidents');_this.activeIncidents=[];for(var i=_this.minResult-1;i<_this.maxResult;i++){_this.activeIncidents.push(_this.incidents[i]);}};this.nextResults=function(){_this.minResult+=10;_this.maxResult+=10;if(_this.maxResult>_this.incidents.length){_this.maxResult=_this.incidents.length;}_this.updateActiveIncidents();};this.previousResults=function(){if(_this.maxResult%10!==0){_this.maxResult-=_this.maxResult%10;}else{_this.maxResult-=10;}_this.minResult-=10;_this.updateActiveIncidents();};this.searchIncidents=function(){console.log('searching incidents with these queries ',_this.queries);var queryString='';if(_this.queries.length>0){queryString+='?'+_this.queries[0].category.value+'='+_this.queries[0].target;for(var i=1;i<_this.queries.length;i++){queryString+='&'+_this.queries[i].category.value+'='+_this.queries[i].target;}}console.log(queryString);lynchSvc.getByQuery(queryString).then(function(incidents){_this.incidents=incidents;console.log(_this.incidents);_this.incidentNumber=_this.incidents.length;_this.incidents.sort(function(a,b){return a.year>b.year;});_this.minResult=1;_this.maxResult=_this.incidents.length;if(_this.incidents.length>9){_this.maxResult=10;}_this.updateActiveIncidents();});};if(rootScope.query){console.log('query found: ',rootScope.query);this.newQuery={category:{name:'place',value:'place'},target:rootScope.query,number:null};this.addFilter();}else{console.log('no rootscope query found');// lynchSvc.get()
	//     .then((incident) => {
	//         this.incidents = incident;
	//     });
	}this.searchIncidents();this.deleteIncident=function(incident){console.log('deleting this incident ',incident);lynchSvc.deleteIncident(incident).then(function(incident){console.log(incident+'was deleted');_this.searchIncidents();});};//this is the nuclear option to totally wipe the database of incident entries
	//BE CAREFUL!
	this.deleteIncidents=function(){console.log('nuking this incidents: ',_this.incidents);for(var i=0;i<_this.incidents.length;i++){lynchSvc.deleteIncident(_this.incidents[i]).then(function(incident){console.log(incident+'was deleted');});}};// this code populates the DB
	this.populateDatabase=function(){console.log(_this.oldJSON);_this.oldJSON.forEach(function(entry){if(entry.yearMonthDay!==null){var splitDate=entry.yearMonthDay.split('/');console.log('split date is ',splitDate);entry.month=parseInt(splitDate[1]);entry.day=parseInt(splitDate[2]);if(entry.month===0){entry.month=null;entry.day=null;entry.dateString=entry.year;}else if(entry.day===0){entry.day=null;entry.dateString=_this.months[entry.month]+' '+entry.year;}else{var suffix='th';if(entry.day===1){suffix='st';}else if(entry.day===2){suffix='nd';}else if(entry.day===3){suffix='rd';}entry.dateString=_this.months[entry.month]+' '+entry.day+suffix+', '+entry.year;}}else if(entry.yearMonth!==null){var _splitDate=entry.yearMonthDay.split('/');console.log('split date is ',_splitDate);entry.month=parseInt(_splitDate[1]);entry.dateString=_this.months[entry.month]+' '+entry.year;}else{entry.dateString=entry.year;}lynchSvc.addIncident(entry).then(function(incident){console.log('posted ',incident);});console.log(entry);});};this.oldJSON=[{"caseNum":1,"cwIndex":"C-W 001","gdIndex":null,"crossRefNotesCwGd":"5","latDecimal":"38.7296252","lonDecimal":-120.798546,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1849,"yearMonth":"1849/02","yearMonthDay":"1849/02/20","dateNotes":null,"state":"California","place":"Placerville","county":"El Dorado","locationNotes":"aka Dry Diggings","crowdType":"Informal Court with three judges and twelve jurymen","crowdSize":"A large party of armed citizens","open":"Open","oldAuthorities":"No officers present","crime":"Robbery","punishment":"39 lashes and banishment","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":4,"suspectNames":"Montreuil\nPepi\nAntoine\nTchal","suspectRaces":"Canadian Frenchman (Montreuil); Italian (Pepi);\nSpaniard (Antoine);\nFrenchman (Tchal)","confession":null,"suspectNotes":null,"victimNumber":"2","victimNames":null,"victimGenders":"Male","victimRaces":"Frenchmen","victimNotes":null,"oldSources":"HHB, PT, I:, PT, I: 144-145; WAC 2/8/49, p. 2; WAC 2/15/49 p2c2\nSDU, 3/16/75, p. 1c7 (not found)","oldNotes":"Bancroft (incorectly, it seems) names suspects as Garcia, Bissi, and Manuel, from Buffum, Six Months in the Gold Mines (1850); using names from AC; Note--three of the men punished in this case were later captured and hanged on suspicion of murders at Weaver Creek (Pepi, Antoine, and Tchal). Their execution is recorded here as Case 027,","origDBindex":"1"},{"caseNum":2,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"SHOULD LOCATION BE PORTSMOUTH SQUARE?","latDecimal":"37.7935535","lonDecimal":-122.40002,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1849,"yearMonth":"1849/07","yearMonthDay":"1849/07/16","dateNotes":null,"state":"California","place":"San Francisco","county":"San Francisco","locationNotes":"Committee Rooms Location set  near intersection of Battery and California","crowdType":"Citizen's Meeting","crowdSize":"230","open":"Open","oldAuthorities":"Alcalde participated","crime":"Attempted murder/ assault and robbery-other","punishment":"Banished","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":19,"suspectNames":"Samuel Roberts and 18 others","suspectRaces":"White","confession":null,"suspectNotes":null,"victimNumber":"unknown","victimNames":null,"victimGenders":null,"victimRaces":"Chilean, Peruvian, Mexican","victimNotes":null,"oldSources":"WAC 8/2/49 p 1 and 4","oldNotes":"the \"Hounds\". ","origDBindex":"2"},{"caseNum":3,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"1","latDecimal":"39.1309","lonDecimal":-121.1759,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1849,"yearMonth":"1849/10","yearMonthDay":"1849/10/00","dateNotes":null,"state":"California","place":"Rose Bar","county":"Yuba","locationNotes":null,"crowdType":"Spontaneous Assembly","crowdSize":"Community","open":"Open","oldAuthorities":null,"crime":"Robbery--money","punishment":"Whipped and banished","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Wooly Mike","suspectRaces":"White","confession":null,"suspectNotes":null,"victimNumber":"unknown","victimNames":null,"victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"HHB, PT, I:, 145-146","oldNotes":"Apochryphal?","origDBindex":"3"},{"caseNum":4,"cwIndex":"C-W 5","gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"37.98333333","lonDecimal":-120.3805556,"latNDegrees":37,"latNMinutes":59,"latNSeconds":null,"lonWDegrees":120,"lonWMinutes":22,"lonWSeconds":50,"year":1850,"yearMonth":"1850/07","yearMonthDay":"1850/07/10","dateNotes":null,"state":"California","place":"Sonora","county":"Tuolumne","locationNotes":"LOCATION CHANGED TO SONORA, using Durham p 830\n\nOn July 10, 1850— a little more than a month after the Foreign Miners Tax had gone into effect—a mob gathered at the Sonora home of Justice Barry, demanding action on reports that two murders had been committed at Green Flat Diggings, about eight miles from Sonora;\n\nAlso called \"Green's Flat.\"\nSee Hittell, 3: 281\n\nAC says Sonora and Sac Transcript says Sonoriian Camp","crowdType":"Judge Lynch","crowdSize":"Unknown","open":"Open","oldAuthorities":"Rescued by officers; placed in jail (AC). Rescued by escaped from authorities (Sac Transcript)","crime":"Murder--circumstanial evidence","punishment":"Remanded to authorities","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":5,"suspectNames":"Pablo Martinez\nDionisio Ocho\nGabino Casias\nRinz Molina\n1 unnamed","suspectRaces":"Mexican","confession":null,"suspectNotes":null,"victimNumber":"2","victimNames":null,"victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"HHB, PT, I: 152-155;\nAC, 7/17/50, p. 2;\nSac Transcript 7/18/50","oldNotes":"contradictory reports on outcome, AC and Sac Transcript","origDBindex":"4"},{"caseNum":5,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"39.03888889","lonDecimal":-121.3416667,"latNDegrees":39,"latNMinutes":2,"latNSeconds":20,"lonWDegrees":121,"lonWMinutes":20,"lonWSeconds":30,"year":1850,"yearMonth":"1850/10","yearMonthDay":"1850/10/00","dateNotes":null,"state":"California","place":"Johnson's Ranch","county":"Yuba","locationNotes":"Using coords for Camp Far WEst, Durham, p. 460\n\nKearney House; News is from Johnson's Ranch, 45 miles north of Sacramento per Sac Times (CHECK). Gudde, CGC lists Kearney a(p 182) as on the Bear River, near Johnson's Crossing, a short distance above present day Wheatland, convenient depot for Yuba River Diggings\n\nUpdate Location","crowdType":"Crowd of inhabitants","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Robbery--money","punishment":"Whipped-100 lashes","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":2,"suspectNames":"Hewster","suspectRaces":"White","confession":"Insisted on innocence","suspectNotes":"Hewster and wife employed as cooks at Kearney House; wife not punished","victimNumber":"2-5","victimNames":"Man named Yeldell and Curtis, Pledge & Co.","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"HHB, PT, I: 157;\nAC 10/18/50), p2c4","oldNotes":null,"origDBindex":"5"},{"caseNum":6,"cwIndex":null,"gdIndex":"G-D 1","crossRefNotesCwGd":"3","latDecimal":"38.7296252","lonDecimal":-120.798546,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1850,"yearMonth":"1850/09","yearMonthDay":"1850/09/00","dateNotes":null,"state":"California","place":"Placerville","county":"El Dorado","locationNotes":null,"crowdType":"Yhe populace","crowdSize":"1200-1500","open":"Open","oldAuthorities":"Seized from sheriff","crime":"Murder--witnessed by onlookers","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Richard Crone alias Irish Dick ","suspectRaces":"White","confession":"Given freely;\n\nIntransigent gallows speech","suspectNotes":null,"victimNumber":"1","victimNames":null,"victimGenders":"Male","victimRaces":"White","victimNotes":"Friend of suspect","oldSources":"HHB, PT, I: 155-156;\nAC 2/8/49\nAC 2/15/49 (same case?)\nSDU 1850-04-21 p2\nSDU 1851-03-27 p3\nSDU 3/27/75, p. 3c2;\nSDU 5/12/80, p. 2c5;\nJackson, Bad Company, 283-284","oldNotes":"Gonzalez-Day excludes this incident without explanation","origDBindex":"6"},{"caseNum":7,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"1","latDecimal":"39.7383486","lonDecimal":-121.7019975,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1850,"yearMonth":"1850/10","yearMonthDay":"1850/10/17","dateNotes":null,"state":"California","place":"Feather River, West Branch","county":"Plumas","locationNotes":"MH reports: Crime occurred \"near Kellen's old trading post.\" Lynching occurred 2-3 miles from the post, in a canyon. Estimating with coordinates for Buttee Creek Canyon. Needs more research into location of trading post","crowdType":"Party of about 20 men","crowdSize":"20 men","open":"Open","oldAuthorities":"No officers present","crime":"Murder","punishment":"Killed (shot?)","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":8,"suspectNames":null,"suspectRaces":"Indian","confession":null,"suspectNotes":"Party killed 7 or 8 Indians, including two or three squaws","victimNumber":"1","victimNames":null,"victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"MH 10/22/1850, p.2","oldNotes":"Is this a lynching or an Indian massacre?","origDBindex":"7"},{"caseNum":8,"cwIndex":null,"gdIndex":"G-D- 3","crossRefNotesCwGd":"4","latDecimal":"38.8968431","lonDecimal":-121.0760567,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1850,"yearMonth":"1850/12","yearMonthDay":"1850/12/25","dateNotes":null,"state":"California","place":"Auburn","county":"Placer","locationNotes":null,"crowdType":"Hands of the people","crowdSize":"unknown","open":"Open","oldAuthorities":"captured from the authorities","crime":"Murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":null,"suspectRaces":"White (englishman)","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":null,"victimGenders":"Male","victimRaces":"White (Scothman)","victimNotes":null,"oldSources":"HHB, PT, I: 155;\nAC 12/30/50, p. 2","oldNotes":"Checked","origDBindex":"8"},{"caseNum":9,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"HHB only","latDecimal":"38.5806777","lonDecimal":-121.4992404,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1850,"yearMonth":"1850/00","yearMonthDay":"1850/00/00","dateNotes":null,"state":"California","place":"Sacramento","county":"Sacramento","locationNotes":"LOCATION CHANGED TO SACRAMENTO PER HHB","crowdType":"People's Court","crowdSize":"Community","open":"Open","oldAuthorities":null,"crime":"Murder--witnessed by onlookers","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Jim","suspectRaces":"White","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":null,"victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"HHB, PT, I: 147-150","oldNotes":"Apochryphal?","origDBindex":"9"},{"caseNum":10,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"2","latDecimal":"39.2048905","lonDecimal":-122.0095752,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1850,"yearMonth":"1850/00","yearMonthDay":"1850/00/00","dateNotes":null,"state":"California","place":"Colusa","county":"Colusa","locationNotes":null,"crowdType":"Mob","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Robbery--money","punishment":"Whipped","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Johnson","suspectRaces":"White","confession":"Extorted--successful","suspectNotes":null,"victimNumber":"1","victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":"Hotel cash","oldSources":"HHB, PT, I: 155","oldNotes":null,"origDBindex":"10"},{"caseNum":11,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"38.004957","lonDecimal":-121.342674,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/01","yearMonthDay":"1851/01/10","dateNotes":"Friday last; newspaper report 1-16","state":"California","place":"40 miles from Sacramento in the direction of Stockton","county":"San Joaquin","locationNotes":"Almost to Stockton, which is about 45 miles as crow flies from Sacramento. Locatin estimated with Google maps","crowdType":"No Trial; seized and punished","crowdSize":null,"open":"Open","oldAuthorities":"One of three suspects had been acquitted for horse theft","crime":"horse theft","punishment":"150 lashes for each, heads shaved on one side, and \"R\" branded on one cheek","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":3,"suspectNames":null,"suspectRaces":"White","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":null,"victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"MH 1/21/1851, p. 2","oldNotes":"check location","origDBindex":"11"},{"caseNum":12,"cwIndex":null,"gdIndex":"G-D-5 ","crossRefNotesCwGd":"4","latDecimal":"38.1247","lonDecimal":-120.4627,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/01","yearMonthDay":"1851/01/20","dateNotes":null,"state":"California","place":"Double Springs, on the Calaveras","county":"Calaveras","locationNotes":"Double Springs Ranch","crowdType":"Jury of 12 Americans and 12 Mexicans","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Murder","punishment":"unknown","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":null,"suspectRaces":"Mexican","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":null,"victimGenders":"Male","victimRaces":"Mexican","victimNotes":null,"oldSources":"AC 1/20/51, p. 2","oldNotes":"Checked; jury consisted of 12 \"Americans\" and 12 Mexicans; Mexicans according to AC were asked to return the verdict","origDBindex":"12"},{"caseNum":13,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"5","latDecimal":"39.1517792","lonDecimal":-121.5834912,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/01","yearMonthDay":"1851/01/19","dateNotes":null,"state":"California","place":"Marysville","county":"Yuba","locationNotes":null,"crowdType":"unknown","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Robbery--Other","punishment":"Whipped, 40 lashes","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":null,"suspectRaces":"Black","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":"Store of Messrs. Eaton Babb & Co.","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"MH 1/21/51, p. 2","oldNotes":null,"origDBindex":"13"},{"caseNum":14,"cwIndex":null,"gdIndex":"G-D 4","crossRefNotesCwGd":"4","latDecimal":"38.9032305","lonDecimal":-121.5777385,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/01","yearMonthDay":"1851/01/00","dateNotes":null,"state":"California","place":"Nicolaus","county":"Sutter","locationNotes":null,"crowdType":"Individual Retribution","crowdSize":"1","open":"Open","oldAuthorities":null,"crime":"Horse theft","punishment":"Shot","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":null,"suspectRaces":"unknown","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":null,"victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"MH 1/21/1851, p. 2","oldNotes":null,"origDBindex":"14"},{"caseNum":15,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"4","latDecimal":"39.5602894","lonDecimal":-120.8280559,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/01","yearMonthDay":"1851/01/23","dateNotes":null,"state":"California","place":"Downieville","county":"Sierra","locationNotes":null,"crowdType":"Taken by the Great Unwashed","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Robbery--money \"Caught 'flagrante derelicto' with his partner's 'tin'\"","punishment":"Whipped and banished","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"William Hepel Robinson","suspectRaces":"White","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":null,"victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"MH 1/31/51, p. 2","oldNotes":null,"origDBindex":"15"},{"caseNum":16,"cwIndex":null,"gdIndex":"G-D-7 has it as Curtis's Diggings/Southern Mines","crossRefNotesCwGd":null,"latDecimal":"37.91111111","lonDecimal":-120.4041667,"latNDegrees":37,"latNMinutes":54,"latNSeconds":40,"lonWDegrees":120,"lonWMinutes":24,"lonWSeconds":15,"year":1851,"yearMonth":"1851/01","yearMonthDay":"1851/01/26","dateNotes":null,"state":"California","place":"Curtis Creek/ Curtis Diggings","county":"Tuolumne","locationNotes":"using coordinates for Curtis Creek (Curtisville) from Durham p 764","crowdType":"Several persons present","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Murder--witnessed by onlookers","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Mr. Bowen","suspectRaces":"White","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":"Alexander Boggs","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"AC, 2/3/51, p. 2","oldNotes":null,"origDBindex":"16"},{"caseNum":17,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"39.3715577","lonDecimal":-121.2060694,"latNDegrees":39,"latNMinutes":22,"latNSeconds":15,"lonWDegrees":121,"lonWMinutes":12,"lonWSeconds":20,"year":1851,"yearMonth":"1851/01","yearMonthDay":"1851/01/30","dateNotes":null,"state":"California","place":"Dobbins' Ranch","county":"Yuba","locationNotes":"Using cooreindates for Dobbins","crowdType":null,"crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Stealing a calf","punishment":"Severely horsewhipped","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":null,"suspectRaces":"Indian","confession":null,"suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"MH 2/14/51, p. 2;\nAC 2/16/51, p. 2","oldNotes":"AC places at Dobbin's Rancho near the Yuba","origDBindex":"17"},{"caseNum":18,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"4","latDecimal":"38.1771468","lonDecimal":-121.1654801,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/01","yearMonthDay":"1851/01/00","dateNotes":null,"state":"California","place":"Staple & Co. Ranch","county":"San Joaquin","locationNotes":"On the Mokelumne; Coordinates estimated near Lockeford on road Sacramento to Stockton, per Illustrated History of San Joaquin County p. 681","crowdType":"the citizens assembled","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Robbery--Stock","punishment":"50 lashes, H.T. branded on right arm, head shaved, and banished","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Jessie Dinwiddie ","suspectRaces":"White","confession":null,"suspectNotes":null,"victimNumber":"unknown","victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"Sac Trancript, 1/8/51 p2c4\nMH 1/10/51 p. 2","oldNotes":null,"origDBindex":"18"},{"caseNum":19,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"4","latDecimal":"38.0126993","lonDecimal":-122.1202428,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/07","yearMonthDay":"1851/07/08","dateNotes":null,"state":"California","place":"Martinez","county":"Contra Costa","locationNotes":"HHB  and SDU say crime occured at the Kennebec House, a hotel, in Antioch, formerly New York of the Pacific. Using Martinez, same side of San joaquin River as NY of the Pacific/Antioch","crowdType":"tried by the citizens","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Robbery","punishment":"Whipped and branded","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":3,"suspectNames":null,"suspectRaces":"White","confession":null,"suspectNotes":null,"victimNumber":"unknown","victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"HHB, PT, I: 157\nAC 1851-07-17 p2c4 (2 stories)\nSDU 1851-07-11 p2c4","oldNotes":"In same report as Case 071","origDBindex":"19"},{"caseNum":20,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"4","latDecimal":"39.436002","lonDecimal":-121.1299567,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/02","yearMonthDay":"1851/02/00","dateNotes":null,"state":"California","place":"Foster's Bar","county":"Yuba","locationNotes":null,"crowdType":"The miners","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Robbery--Stock","punishment":"One shot\nTwo hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":3,"suspectNames":null,"suspectRaces":"White","confession":null,"suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":"Male","victimRaces":null,"victimNotes":null,"oldSources":"HHB, PT, I: 161","oldNotes":null,"origDBindex":"20"},{"caseNum":21,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"2","latDecimal":"34.0726866","lonDecimal":-118.2130443,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1852,"yearMonth":"1852/02","yearMonthDay":"1852/02/02","dateNotes":null,"state":"California","place":"Los Angeles","county":"Los Angeles","locationNotes":null,"crowdType":"the people","crowdSize":null,"open":"Open","oldAuthorities":"Seized from jail","crime":"Robbery--Stock","punishment":"Whipped--78 lashes","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Smith","suspectRaces":"White","confession":null,"suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"HHB, PT, I: 521","oldNotes":null,"origDBindex":"21"},{"caseNum":22,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"4","latDecimal":"38.0170867","lonDecimal":-122.1362729,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/02","yearMonthDay":"1851/02/17","dateNotes":null,"state":"California","place":"Martinez","county":"Contra Costa","locationNotes":null,"crowdType":"the people","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Robbery--boots from store","punishment":"Whipped-100 lashes","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Son of Antonio Pacheco","suspectRaces":"Mexican (Californio)","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":"Store of Boram and Denny","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"HHB, PT, I: 163;\nAC 2/24/51, p. 2","oldNotes":"Checked; suspect sone of Antonio Pacheco. Seized for stealing boots. Escaped, caught, given 100 lashes. Father tried to pay to avoid punishment.Pacheco suspected of heading up a band of horse thieves","origDBindex":"22"},{"caseNum":23,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"4","latDecimal":"37.9595012","lonDecimal":-121.2927574,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/02","yearMonthDay":"1851/02/23","dateNotes":null,"state":"California","place":"Stockton","county":"San Joaquin","locationNotes":"using coordinates for intersection of Center and Park Street","crowdType":"the populace","crowdSize":null,"open":"Open","oldAuthorities":"Sheriff seized suspect before crowd could hang him","crime":"Atempted to steal a mule","punishment":"Dragged across the slough to be hanged","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":null,"suspectRaces":"White","confession":null,"suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"AC 2/26/51, p. 2","oldNotes":null,"origDBindex":"23"},{"caseNum":25,"cwIndex":null,"gdIndex":"G-D-9","crossRefNotesCwGd":"ADD REPORTS","latDecimal":"38.5806777","lonDecimal":-121.4992404,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/02","yearMonthDay":"1851/02/26","dateNotes":null,"state":"California","place":"Sacramento","county":"Sacramento","locationNotes":"Using coordinates per HHB--Hanged at corner of sixth and K Streets","crowdType":"The people, following trial by Committee of Investigation","crowdSize":"5000","open":"Open","oldAuthorities":"Crowd seized suspect from jail; Sheriff resisted","crime":"Murder--witnessed by onlookers","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Frederick J. Roe","suspectRaces":"Englishman","confession":"Attended by clergy; declared lost senses in killing. Myers","suspectNotes":null,"victimNumber":"1","victimNames":"Charles Humphrey Myers, from Pennsylvania","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"HHB, PT, I: 161;\nAC 2/27/51, p. 2;\nAC 1851-03-15 p5\nSDU 11/21/85, p. 2","oldNotes":null,"origDBindex":"25"},{"caseNum":26,"cwIndex":null,"gdIndex":"G-D-14","crossRefNotesCwGd":null,"latDecimal":"38.2817383","lonDecimal":-121.3895197,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/03","yearMonthDay":"1851/03/07","dateNotes":null,"state":"California","place":"Rancho of Gage and Almond ","county":"Sacramento","locationNotes":"opposite the ranch of Rhoades, on the Cosumnes River; estimated across Cosumnes River from Galt, CA, site of Rhodes Ranch.","crowdType":"Incensed crowd","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Robbery--Stock","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":2,"suspectNames":"James Baxter of Maine\nCharles  Simmons of Massachusetts","suspectRaces":"White","confession":"Begged to live a little longer","suspectNotes":"(Sac Transcript says names may have been assumed)","victimNumber":"2","victimNames":"Gage and Almond","victimGenders":"male","victimRaces":"white","victimNotes":null,"oldSources":"HHB, PT, I: 162;\nMH 3/11/51, p. 2;\nAC 3/15/51, p 2\nAC 1851-02-27 p2c4\nAC 1851-03-11\nMH 1851-03-11 p2\nAC 1851-03-15 p4 ","oldNotes":"Original cases 26 and 27 the same. Case 27 changed to followup of case 1","origDBindex":"26"},{"caseNum":27,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"5","latDecimal":"38.7296252","lonDecimal":-120.798546,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/01","yearMonthDay":"1851/01/23","dateNotes":null,"state":"California","place":"Placerville","county":"El Dorado","locationNotes":"aka Dry Diggings","crowdType":"unknown","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"murder, suspected murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":3,"suspectNames":"Pepi\nAntoine\nTchal","suspectRaces":"Italian (Pepi)\nSpaniard (Antoine)\nFrenchman (Tchal)","confession":null,"suspectNotes":null,"victimNumber":"2","victimNames":null,"victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"Weekly alta California 2/15/1849 p2c2","oldNotes":"This case follows Case 001; three of four suspects whipped and banished in Case 001 later caught and exceuted for murder/attempted murder","origDBindex":"1"},{"caseNum":28,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"37.6119811","lonDecimal":-120.7998513,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/03","yearMonthDay":"1851/03/15","dateNotes":null,"state":"California","place":"Tuolumne River","county":"Tuolumne","locationNotes":"Coordinates estimated, along Tuolumne river in SJ Valley a bit east o of (current) Modesto); NOT near Hicksville? Durham 498 Lat 38˚19'40\"; Long 121˚19'30\"","crowdType":"crowd","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Robbery--Stock","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":5,"suspectNames":null,"suspectRaces":"White","confession":null,"suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"AC 3/20/51, p. 2","oldNotes":null,"origDBindex":"28"},{"caseNum":29,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"4","latDecimal":"40.6860908","lonDecimal":-122.9358438,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/03","yearMonthDay":"1851/03/20","dateNotes":null,"state":"California","place":"Weaverville","county":"Trinity","locationNotes":"45 miles north of Redding's Springs","crowdType":"Called court.","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Robbery -mule","punishment":"50 lashes and head shaved","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":2,"suspectNames":"Mr. Jackson\nUnknown","suspectRaces":"White","confession":null,"suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"AC 3/27/51, p. 2\nSac Transcript 1851-03-26 p2c2","oldNotes":null,"origDBindex":"29"},{"caseNum":30,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"38.1489821","lonDecimal":-121.224902,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/03","yearMonthDay":"1851/03/21","dateNotes":null,"state":"California","place":"Banedict's Ranch","county":"San Joaquin","locationNotes":"Estimated between Staples and Wood's ferries.\n\nStaples Ferry-- see Lockeford, San Joaquin County; 7 miles east, northeast of Lodi; Staples Ferry 2 miles west of Lockeford on Mokelumne (38.0950, -121.0855)\nWoods Ferry, see Woodbridge, San Joaquin County; two miles ne downtown Lodi (38.0915; -121.1815)\n\nOn the Mokelumne, about half way between Wood's and Staple's Ferries\n\nWood's Ferry over Mokelumne at lower Sacramento Road, Woodbridge;\nStaple's Ferry over Mokelumne, near Lockeford, CA;\nNorth and East of Lodi","crowdType":"jury empaneled, 6 for hanging, 6 for whipping.","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"horse thief","punishment":"Whipped and banished","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":null,"suspectRaces":"White","confession":null,"suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"AC 1851-03-21 p2\nAC 5/21/51, p. 2 (COULD BE MISREAD OF ABOVE CITE)","oldNotes":null,"origDBindex":"30"},{"caseNum":31,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"4","latDecimal":"39.2301715","lonDecimal":-121.1360642,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/03","yearMonthDay":"1851/03/21","dateNotes":null,"state":"California","place":"Rough & Ready","county":"Nevada","locationNotes":null,"crowdType":"takend and tried","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Murder--circumstanial evidence","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":null,"suspectRaces":"Indian","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":null,"victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"AC 3/21/51, p. 2","oldNotes":null,"origDBindex":"31"},{"caseNum":32,"cwIndex":null,"gdIndex":"G-D- 10 has location as Shasta City/Redding's springs","crossRefNotesCwGd":"5","latDecimal":"40.5992568","lonDecimal":-122.4919142,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/03","yearMonthDay":"1851/03/16","dateNotes":null,"state":"California","place":"Redding's Springs","county":"Shasta","locationNotes":"Now known as Shasta City (west of Redding)","crowdType":"court of the people","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"S. S. Easterbrooks, of Wisconsin","suspectRaces":"White","confession":"At hanging declared the murder was the result of drinking and warned against it","suspectNotes":null,"victimNumber":"1","victimNames":"Josiah Price, of Philadelphia","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"HHB, PT, I: 164;\nAC 3/27/51, p. 2;\nMH 4/10/51\nSac Transcript 1851-03-26 p2c2","oldNotes":null,"origDBindex":"32"},{"caseNum":33,"cwIndex":null,"gdIndex":"G-D- 11 has location as Long Bar","crossRefNotesCwGd":null,"latDecimal":"39.2185035","lonDecimal":-121.3699613,"latNDegrees":39,"latNMinutes":13,"latNSeconds":5,"lonWDegrees":121,"lonWMinutes":22,"lonWSeconds":10,"year":1851,"yearMonth":"1851/03","yearMonthDay":"1851/03/00","dateNotes":null,"state":"California","place":"Yuba River, Middle Fork, near Long Bar","county":"Yuba","locationNotes":"Long bar on main yuba river (Gudde 197) above confluence with Dry Creek, near Parks Bar\ng-d- 11 has location as Long Bar; Durhm, p 515, has two locations for Long Bar (1) 39,27,15; 121,09,05 SW side of Yuba; Texas Bar directly across the river; (2) 39,13,05; 121,22,10, near smartsville; using second, most likely","crowdType":"The miners on the middle fork of the Yuba River","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Stealing mules","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Evans, from Rhode Island ","suspectRaces":"White","confession":null,"suspectNotes":null,"victimNumber":"\"community\"","victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"HHB, PT, I: 162;\nMH 3/6/51, p. 2\nAC 1851--3-15 p2","oldNotes":null,"origDBindex":"33"},{"caseNum":34,"cwIndex":null,"gdIndex":"G-D-16 has date as 4/12","crossRefNotesCwGd":"4","latDecimal":"38.71944444","lonDecimal":-120.6769444,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/04","yearMonthDay":"1851/04/05","dateNotes":null,"state":"California","place":"Brown's Bar, Weber Creek, Pinchemtight","county":"El Dorado","locationNotes":"Using location of Sailor Jack's mine, referred to as another name for Pinch em tight\nhttps://www.mindat.org/maps.php?id=78165","crowdType":"People's Court","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Murder, \"without provocation\"","punishment":"Hanged, immediately after verdict","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Andrew R. Scott, of Genevieve MO","suspectRaces":"White","confession":"At gallows requested to be shot, as it would pain his father to learn he had been hanged. Very cool at execution","suspectNotes":"described as a \"most ferocious villain\" this being the third or fourth murder he committed, including Dr. McManus of St. Genevieve. 23 years old. Sac Transcript states he had killed 2 white men and one \"negro,\" one in NY and the other in Missouri, but had been cleared. Father a former Congressman from Missouri","victimNumber":"1","victimNames":"Charles O. Baker, from Mass.","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"HHB, PT, I: 165;\nMH 4/8/51, p. 2;\nOregonian 4/26/51, p. 1\nAC 1851-04-28","oldNotes":null,"origDBindex":"34"},{"caseNum":35,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"4","latDecimal":"36.6012792","lonDecimal":-121.8829442,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/04","yearMonthDay":"1851/04/15","dateNotes":null,"state":"California","place":"Monterey","county":"Monterey","locationNotes":null,"crowdType":"Tried by \"Code Lynch\"","crowdSize":null,"open":"Open","oldAuthorities":"Civil authorities rescued prisoners","crime":"Horse thieves","punishment":"Jailed","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":3,"suspectNames":"William Otis, alias Hall, alias Woods\nSolomon Pico\nCecilia Mesa","suspectRaces":"American/White (Otis/Hall/Woods)\nCalifornian (Pico)\nSonorian (Mesa)","confession":null,"suspectNotes":"Solomon Pico brother of Antonio Pico.\nOtil/Hall later lynched; see Case 081","victimNumber":"1","victimNames":null,"victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"HHB, PT, I: 516-517;\nAC 8/16/51, p. 2;\nshould also be a report in SDU.","oldNotes":null,"origDBindex":"35"},{"caseNum":36,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"4","latDecimal":"38.7999014","lonDecimal":-120.8899382,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/04","yearMonthDay":"1851/04/29","dateNotes":null,"state":"California","place":"Coloma","county":"El Dorado","locationNotes":null,"crowdType":"jury of 12 cirtizens","crowdSize":null,"open":"Open","oldAuthorities":"Sheriff, deputy, and a number of citizens took the prisoner from mob","crime":"Robbery--money","punishment":"jailed","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Jones, an  Englishman","suspectRaces":"White","confession":"Allen confessed to people's court","suspectNotes":null,"victimNumber":"1","victimNames":"Mr. Ridgeney of Greenwood Valley","victimGenders":"male","victimRaces":"white","victimNotes":null,"oldSources":"AC 5/3/51, p. 2","oldNotes":null,"origDBindex":"36"},{"caseNum":37,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"4","latDecimal":"39.2607347","lonDecimal":-121.023063,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/04","yearMonthDay":"1851/04/08","dateNotes":null,"state":"California","place":"Nevada City","county":"Nevada","locationNotes":null,"crowdType":"People's Court","crowdSize":"several hundred","open":"Open","oldAuthorities":"Suspects seized from the court.","crime":"Robbery--$2,500","punishment":"Whipped. Allen and Miller 20 lashes each; Rigler 39.","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":3,"suspectNames":"Henry Rigler\nJohn Allen\nGeorge Miller","suspectRaces":"White","confession":"Allen Confessed; Rigler denied involvement; Miller also denied the charge","suspectNotes":null,"victimNumber":"1","victimNames":"Mr. Napper of Nevada City","victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"AC 4/8/51, p. 2","oldNotes":null,"origDBindex":"37"},{"caseNum":38,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"New info from NY DT, Check","latDecimal":"38.3004709","lonDecimal":-120.7063219,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/04","yearMonthDay":"1851/04/00","dateNotes":null,"state":"California","place":"Mokelumne Hill","county":"Calaveras","locationNotes":null,"crowdType":"Individual Retribution","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Robbery--money","punishment":"Whipped, 250 lashes","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":null,"suspectRaces":"White","confession":null,"suspectNotes":null,"victimNumber":"2","victimNames":"W. McMurtrie and brother","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"HHB, PT, I: 165-166\nAC 1851-04-18 p2c6","oldNotes":null,"origDBindex":"38"},{"caseNum":39,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"4","latDecimal":"40.4428","lonDecimal":-123.1521,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/04","yearMonthDay":"1851/04/27","dateNotes":null,"state":"California","place":"forks of Antelope creek, a few miles below Ide's Ranch","county":"Trinity","locationNotes":"near mouth of Weaver Creek (MH says lynching occurred \"in the forks of Antelope creek, a few miles below Ide's Ranch)\n\n(MH says the mules were stolen from Trinity Diggings, Near the mouth of Weaver Creek, but the lynching occurred elseware)","crowdType":"5 (originally 11) pursuers tracked thieves)","crowdSize":null,"open":"open","oldAuthorities":null,"crime":"Horse and Mule (50) thieves","punishment":"Shot and scalped","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":15,"suspectNames":"John Emory (aka Sailor Tom)\nSpafford, stock trader\n13 unnamed Indians","suspectRaces":"White (Emory and Spofford)\nIndian (13 unnamed)\n","confession":null,"suspectNotes":null,"victimNumber":"2","victimNames":"Peasley and Lockhart","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"MH 5/10/51, p. 2","oldNotes":"George M. Holliday escaped","origDBindex":"39"},{"caseNum":40,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"2","latDecimal":"40.0118","lonDecimal":-122.0737,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/05","yearMonthDay":"1851/05/03","dateNotes":null,"state":"California","place":"Leonard's Ranch, on the Sacramento River","county":"Tehama","locationNotes":"The site of Leonard's Ranch was integral with the developing town of Tehama, about which is written, \"The Spring of 1850 found the town of Tehama without a rival in this section of the State. It boasted a hotel of no inferior order. I believe a man by the name of Leonard was the first hotel-keeper in the then embryo city, which was kept in the old adobe erected by [Robert H.] Thomes in 1846.\" An article in the Apr 18, 1851 issue of the Sacramento Union mentioned that, “Mr. C. [Curtis] camped at Leonard's Ranch...After about one year of an apparent contiguous existence, the town of \"Tehama\" enveloped the adobe way station known as \"Leonard's Ranch,\" and further references to Leonard's Ranch ceased altogether during the Spring of 1851.","crowdType":"Individual Retribution","crowdSize":"Party of 25 whites","open":"Open","oldAuthorities":null,"crime":"Robbery--Stock","punishment":"Shot","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":40,"suspectNames":null,"suspectRaces":"Indian","confession":null,"suspectNotes":null,"victimNumber":"2","victimNames":"Toomes and Dye","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"MH 5/3/51, p. 3","oldNotes":"Lynching or retributive massacre?","origDBindex":"40"},{"caseNum":41,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"37.7513888889","lonDecimal":-121.3083333,"latNDegrees":37,"latNMinutes":45,"latNSeconds":5,"lonWDegrees":121,"lonWMinutes":18,"lonWSeconds":30,"year":1851,"yearMonth":"1851/05","yearMonthDay":"1851/05/06","dateNotes":null,"state":"California","place":"Bonsell and Scott's Ferry on the San Joaquin River","county":"Tuolumne","locationNotes":"See Durham, p. 806; using coordinates for Mossdale","crowdType":"jury of 20 citizens","crowdSize":"50","open":"Open","oldAuthorities":null,"crime":"Stealing Cattle","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":5,"suspectNames":"Ramon Dias, of Hermosilla\nTimoteo Sandoval\nLuis Cracia, of Mazatlan\nFancisco Galvez, of Mazatlan\nJesus Moreno, O Mazatlan","suspectRaces":"Mexican","confession":"Each of the suspects made a confession, \"acknowledged their sentence to be just.\"","suspectNotes":"Confeesions stated that the band was employed by white men; one claimed to work for \"notorious 'Jim Beckwith.'\"","victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":"White","victimNotes":null,"oldSources":"MH 5/6/51, p. 2;\nSac Transcript 5/2/51 p2c6\nnote: Doten journal incorrectly included in this case","oldNotes":null,"origDBindex":"41"},{"caseNum":42,"cwIndex":null,"gdIndex":"G-D-17","crossRefNotesCwGd":"4","latDecimal":"38.2982254","lonDecimal":-122.3011527,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/05","yearMonthDay":"1851/05/16","dateNotes":null,"state":"California","place":"Napa","county":"Napa","locationNotes":"coordinates for City of Napa","crowdType":"Execution by a mob in hs cell","crowdSize":"\"a few of the citizens of Napa\"","open":"secret","oldAuthorities":"Hung in cell after Governor commuted sentence","crime":"Murder. Convicted by court but governor commuted to life","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Hamilton McCauley, from New Franklin, Howard Co. Missouri","suspectRaces":"White","confession":null,"suspectNotes":"had been constable in Missouri","victimNumber":"1","victimNames":null,"victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"HHB, PT, I: 166-170;\nSacramento Transcript 1851-03-17\nSacramento Transcript 1851-05-19\nAC 1851-05-17\nAC 1851-05-18\nLA Star 5/24/51, p. 2;\nSan Diego Herald 5/29/51","oldNotes":null,"origDBindex":"42"},{"caseNum":43,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"4","latDecimal":"37.9595012","lonDecimal":-121.2927574,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/05","yearMonthDay":"1851/05/20","dateNotes":null,"state":"California","place":"Stockton","county":"San Joaquin","locationNotes":"using coordinates for intersection of Center and Park Street","crowdType":"Taken out on the plains by the crowd","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"horse stealing at Moquelumne Hill","punishment":"Whipped, 25 lashes","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"William McEvoy","suspectRaces":"White","confession":"Extorted--successful","suspectNotes":"in league with a -- Williams, who was being pursued","victimNumber":"1","victimNames":"Mr. Horseley","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"MH 5/20/51, p. 2\nAC 1851-05-17","oldNotes":null,"origDBindex":"43"},{"caseNum":44,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"4","latDecimal":"39.2607347","lonDecimal":-121.023063,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/05","yearMonthDay":"1851/04/15","dateNotes":null,"state":"California","place":"Nevada City","county":"Nevada","locationNotes":null,"crowdType":"Jury of the people","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"horse and mule stealing","punishment":"Whipped--39 lashes","lethality":"Not Lethal","otherNamesMentioned":"George Frank, member of gang\nJennings, member of gang","numberSuspects":1,"suspectNames":"Gatson, or Gaston","suspectRaces":"White","confession":"Confessed","suspectNotes":"two others, George Frank and Jennings, escaped","victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"HHB, PT, I: 166\nSDU 5/23/51 p2c4\nAC 1851-05-24 p2c4","oldNotes":null,"origDBindex":"44"},{"caseNum":45,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"3","latDecimal":"39.5602894","lonDecimal":-120.8280559,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/05","yearMonthDay":"1851/05/00","dateNotes":null,"state":"California","place":"Downieville","county":"Sierra","locationNotes":"Using coordinates for Main Street and Hwy 49","crowdType":"jury of the miners","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Murder","punishment":"Banished, mitigating circumstances","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"O'Brien","suspectRaces":"White","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":"Cameron","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"MH 5/31/51, p. 2","oldNotes":"Notes say Downieville","origDBindex":"45"},{"caseNum":46,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"39.2210038","lonDecimal":-121.3313492,"latNDegrees":39,"latNMinutes":13,"latNSeconds":15,"lonWDegrees":121,"lonWMinutes":19,"lonWSeconds":55,"year":1851,"yearMonth":"1851/05","yearMonthDay":"1851/05/29","dateNotes":null,"state":"California","place":"Park's Bar","county":"Yuba","locationNotes":"Where Yuba river enters the Valley; in late 60s Park's Bar buried under mining debris","crowdType":"jury of twelve men","crowdSize":"10-100","open":"Open","oldAuthorities":"\"regular trial\"; jury of 12 men","crime":"Assault\nAttempted murder\nAttempted theft","punishment":"45Lashes (de la Cruz)\n35 lashes (Lopez)","lethality":"Not Lethal","otherNamesMentioned":"Mr McAdams\nMr. Smith\nH.C. Hodge, of Nevada City, elected prosecutor\nC.N. Mamison, for defense","numberSuspects":2,"suspectNames":"Alberto dela Cruz\nMartia Lopez","suspectRaces":"Mexican","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":"Squire Barnard","victimGenders":"Male","victimRaces":"White","victimNotes":"Squire Barnard, holding court in which two suspoets accused of mule theft, attacked by suspects and wounded when he called for a continuance","oldSources":"MH 5/31/51, p. 2","oldNotes":null,"origDBindex":"46"},{"caseNum":48,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"3","latDecimal":"39.677778","lonDecimal":-121.9775,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/05","yearMonthDay":"1851/05/00","dateNotes":null,"state":"California","place":"Monroe's Rancho","county":"Colusa","locationNotes":"Using coordinates for Monroeville, (now glenn county) later name for Monroe's Ranch. At time in Colusa County; after 1893 in Glenn County. Note massacre took place 20 miles from ranch; need estimated coordinates","crowdType":"Party of 16","crowdSize":"Band of 16 exterminated Indians","open":"Open","oldAuthorities":null,"crime":"Murder","punishment":"Shot","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":44,"suspectNames":null,"suspectRaces":"Indian","confession":null,"suspectNotes":null,"victimNumber":"3","victimNames":null,"victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"AC 6/19/51, p. 2","oldNotes":null,"origDBindex":"48"},{"caseNum":49,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"38.5582205","lonDecimal":-121.416737,"latNDegrees":38,"latNMinutes":33,"latNSeconds":null,"lonWDegrees":121,"lonWMinutes":25,"lonWSeconds":null,"year":1851,"yearMonth":"1851/05","yearMonthDay":"1851/05/00","dateNotes":null,"state":"California","place":"St. Louis House","county":"Sacramento","locationNotes":"Coordinates estimated north of Brighton on American River, site of St. Louis House. Estimated from coordinates for Brighton GNIS. See, also, Durham coordinates for Brighton  p 454","crowdType":"A large corwd tied him to a tree","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Cattle and horse thief","punishment":"Whipped, 100 lashes; R branded \"R\"  and \"S\" on cheeks, standing for \"rogue\" and \"Scoundrel\"; turned over to officers in Sacramento","lethality":"Not Lethal","otherNamesMentioned":"Turned over to Justice Fake [sic]. ","numberSuspects":1,"suspectNames":"Thomas Jenkins","suspectRaces":"White","confession":null,"suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"HHB, PT, I: 166\nAC 1851-05-31 p2c4\nSac Transcript 1851-05-27 p2c2","oldNotes":"Check location (Sacramento?)","origDBindex":"49"},{"caseNum":51,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"37.9590275","lonDecimal":-121.2607426,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/04","yearMonthDay":"1851/04/00","dateNotes":null,"state":"California","place":"Stockton","county":"San Joaquin","locationNotes":"\"taken out to the plains\"; Coordinates estimated to east of center of Stockton","crowdType":"The crowd","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Horse stealing","punishment":"Whipped, 25 lashes","lethality":"Not Lethal","otherNamesMentioned":"Williams, stole horse and hired McEvoy to sell it in stockton\nCampbell, horse sold to him","numberSuspects":1,"suspectNames":"William McEvoy","suspectRaces":"White","confession":null,"suspectNotes":"Stole horse with a Williams, who was not caught","victimNumber":"1","victimNames":"Horseley","victimGenders":"Male","victimRaces":null,"victimNotes":null,"oldSources":"HHB, PT, I: 165-?\nAC 1851-05-17 p2c3\nMDH 1851-05-20\nSac Transcript 1851-05-21 p2c2","oldNotes":null,"origDBindex":"51"},{"caseNum":52,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"1--Only HHB","latDecimal":"37.9595012","lonDecimal":-121.2927574,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/06","yearMonthDay":"1851/06/01","dateNotes":null,"state":"California","place":"Stockton","county":"San Joaquin","locationNotes":"using coordinates for intersection of Center and Park Street","crowdType":"People's Court","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Horse thieves","punishment":"1 hanged to extort confession;\nOther doused in water, whipped, and banished","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":2,"suspectNames":null,"suspectRaces":"Mexican, \"part of Murieta's band\"","confession":null,"suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"HHB, PT, I: 449-451","oldNotes":null,"origDBindex":"52"},{"caseNum":53,"cwIndex":null,"gdIndex":"G-D-21 has date as 6/11","crossRefNotesCwGd":null,"latDecimal":"37.7949288","lonDecimal":-122.4055265,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/06","yearMonthDay":"1851/06/10","dateNotes":null,"state":"California","place":"San Francisco","county":"San Francisco","locationNotes":"Using coordinates for Portsmouth Square","crowdType":"Vigilance Committee, also knonw as the Regulating Committee, approximately 80 men, who secretly tried Jenkins; Regulating Committee a  secret society organized a day or two previous","crowdSize":"probably 1000 persons","open":"Open","oldAuthorities":"Officers opposed proceedings;  stopped by the crowd, although many in the crowd opposed the hanging. Stepped back after lynchers pulled out pistols","crime":"Robbery--a safe containing $1500","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"John Jenkins. Real name asserted to be Simpton","suspectRaces":"Sydney","confession":"Attended by clergy","suspectNotes":null,"victimNumber":"1","victimNames":"Mr. Virgin. His office was in the Washington Block on Long Wharf","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"HHB, PT, I: 200-239;\nMH 6/12/51, p. 2;\nSan Diego Herald 6/19/51, p. 2","oldNotes":null,"origDBindex":"53"},{"caseNum":54,"cwIndex":"C-W 9","gdIndex":null,"crossRefNotesCwGd":"4 check SF Herald 6-28-51 and 7-1-51; cite from C-W","latDecimal":"38.007702","lonDecimal":-120.409361,"latNDegrees":38,"latNMinutes":0,"latNSeconds":25,"lonWDegrees":120,"lonWMinutes":24,"lonWSeconds":30,"year":1851,"yearMonth":"1851/06","yearMonthDay":"1851/06/15","dateNotes":null,"state":"California","place":"Shaw's Flat","county":"Tuolumne","locationNotes":"Shaw's Flat coordinates from http://roadsidethoughts.com/ca/shaws-flat-xx-tuolumne-map.htm. Durham coords p 826. \"about two miles out of town (Sonora).","crowdType":"\"a regular trial\"; jury of 12 men","crowdSize":"3,000 men; \"An immense concourse of the people\"","open":"Open","oldAuthorities":"Taken from the officers in Sonora and hanged at Shaw's flat","crime":"Murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":2,"suspectNames":"Antonio Cruz\nPatricio Janori\n","suspectRaces":"Mexican","confession":null,"suspectNotes":"Names from Carrigan and Webb and Gonzalez-Day. C-W cite SF Herald 6-28 and 7-1, 1851. [Names not found in these issues of SF Herald]","victimNumber":"1","victimNames":"Captain George W. Snow","victimGenders":"Male","victimRaces":"White","victimNotes":"from North Frankfort, Maine; age about 31","oldSources":"HHB, PT, I: 171-174;\nAC 6/18 (20?)/51, p. 2;\nMH 6/19/51, p. ?","oldNotes":"Check date of event; different locations; is this one or a series of connected events?\n\nHHB has it as Shaw flat; suspects HHB Chilenos; perhaps confusing shooting of Chilenos metnioned in same report AC and MH","origDBindex":"54"},{"caseNum":55,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"38.0124236","lonDecimal":-120.4985314,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/06","yearMonthDay":"1851/06/16","dateNotes":null,"state":"California","place":"Melones","county":"Calaveras","locationNotes":"aka Santa Cruz (AC 6-16-1851(?)","crowdType":"Spontaneous Assembly","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Robbery--money","punishment":"1 hanged to extort confession\n1 given 100 lashes","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":2,"suspectNames":null,"suspectRaces":"White","confession":null,"suspectNotes":"No mention of suspects' race; assuming white","victimNumber":"1","victimNames":"Chinese","victimGenders":"Male","victimRaces":"Asian","victimNotes":null,"oldSources":"HHB, PT, I: 170;\nAC 6/20/51, p. 2","oldNotes":null,"origDBindex":"55"},{"caseNum":56,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"Did this happen?","latDecimal":"37.7935535","lonDecimal":-122.40002,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/06","yearMonthDay":"1851/06/20","dateNotes":null,"state":"California","place":"San Francisco","county":"San Francisco","locationNotes":"Committee Rooms Location set  near intersection of Battery and California","crowdType":"Formal VC","crowdSize":null,"open":"Secret","oldAuthorities":null,"crime":"Unspecific crime against the \"community\"","punishment":"Banished","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Hetherington","suspectRaces":"White","confession":null,"suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"HHB, PT, I: 375;\nAC 6/21/51, p. 2;\nMH 6/24/51, p. 2","oldNotes":null,"origDBindex":"56"},{"caseNum":57,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"39.2210038","lonDecimal":-121.3313492,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/06","yearMonthDay":"1851/06/21","dateNotes":null,"state":"California","place":"Park's Bar","county":"Yuba","locationNotes":null,"crowdType":null,"crowdSize":null,"open":null,"oldAuthorities":null,"crime":"Robbery--money","punishment":"Released/ Acquitted","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":null,"suspectRaces":"White","confession":"Extorted--unsuccessful","suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"AC 6/21/51, p. 2","oldNotes":null,"origDBindex":"57"},{"caseNum":58,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"37.794835","lonDecimal":-122.404642,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/06","yearMonthDay":"1851/06/23","dateNotes":null,"state":"California","place":"San Francisco","county":"San Francisco","locationNotes":"Coordinates placed at Merchant street towards bay from Portsmouth Square","crowdType":"Formal VC","crowdSize":null,"open":"open","oldAuthorities":null,"crime":"Murder","punishment":"Remanded to authorities","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Samuel Gallagher","suspectRaces":"White","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":"Lewis Pollock","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"HHB, PT, I: 376;\nAC 6/23/51, p. 2\n6/24/1851, p. 2\nAC 1851-06-25 p2","oldNotes":null,"origDBindex":"58"},{"caseNum":59,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"37.7935535","lonDecimal":-122.40002,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/06","yearMonthDay":"1851/06/24","dateNotes":null,"state":"California","place":"San Francisco","county":"San Francisco","locationNotes":"Committee Rooms Location set  near intersection of Battery and California","crowdType":"Formal VC","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Robbery clothing","punishment":"Whipped, 24 lashes, and banished","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Juan","suspectRaces":"Mexican","confession":null,"suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"HHBPT I:  377;\nAC 6/25/51, p. 2;\nMH 6/26/51, p. 2","oldNotes":null,"origDBindex":"59"},{"caseNum":60,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"38.5806777","lonDecimal":-121.4992404,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/06","yearMonthDay":"1851/06/25","dateNotes":null,"state":"California","place":"Sacramento","county":"Sacramento","locationNotes":"Using coordinates corner of sixth and K streets (Plaza)","crowdType":"Formal VC","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Attempted murder","punishment":"Remanded to authorities","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":2,"suspectNames":null,"suspectRaces":"Mexican","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":null,"victimGenders":"Male","victimRaces":"Mexican","victimNotes":null,"oldSources":"AC 6/28/51, p. 2;\nMH 6/26/51, p. 2","oldNotes":null,"origDBindex":"60"},{"caseNum":61,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"39.3141","lonDecimal":-121.1651,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/06","yearMonthDay":"1851/06/25","dateNotes":null,"state":"California","place":"Tolle's Dry Diggings","county":"Butte","locationNotes":"aka Toll's Dry Diggings or Forbestown, on the Feather River; mention of sendinghim to Hamilton for trial. Gudde, CGC, 351-352 places Toll's Dry Diggings in Yuba Co, 6 miles SW of Fosters Bar","crowdType":"Jury of twelve impartial men","crowdSize":null,"open":"Open","oldAuthorities":"No officers present","crime":"Robbery--$662 in gold dust","punishment":"Whipped and banished","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Pitcher, from Maine","suspectRaces":"White","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":null,"victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"MH 6/28/51, p. 2","oldNotes":null,"origDBindex":"61"},{"caseNum":62,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"37.7959104","lonDecimal":-122.4005136,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/06","yearMonthDay":"1851/06/26","dateNotes":null,"state":"California","place":"San Francisco","county":"San Francisco","locationNotes":"Coordinates for intersection of  Washington and Battery","crowdType":"Spontaneous mob","crowdSize":"a number of persons","open":"Open","oldAuthorities":"No officers present","crime":"Robbery--Other","punishment":"Beaten to death","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":null,"suspectRaces":"Mexican","confession":null,"suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"MH 6/26/51, p. 2","oldNotes":null,"origDBindex":"62"},{"caseNum":63,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"38.3338088","lonDecimal":-120.6206289,"latNDegrees":38,"latNMinutes":19,"latNSeconds":50,"lonWDegrees":120,"lonWMinutes":37,"lonWSeconds":30,"year":1851,"yearMonth":"1851/06","yearMonthDay":"1851/06/27","dateNotes":null,"state":"California","place":"Pleasant Springs","county":"Calaveras","locationNotes":"aka Rich Gulch per Durham; using coordinates for Rich Gulch, Calaveras Co.","crowdType":"Spontaneous mob","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"passing counterfeit gold","punishment":"Whipped, 25 lashes, and banished","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":null,"suspectRaces":"Chileno","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":"Mr. Angre","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"HHB, PT, I: 170;\nAC 6/27/51, p. 2","oldNotes":null,"origDBindex":"63"},{"caseNum":64,"cwIndex":null,"gdIndex":"G-D 25","crossRefNotesCwGd":null,"latDecimal":"37.983516","lonDecimal":-120.381581,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/06","yearMonthDay":"1851/06/29","dateNotes":null,"state":"California","place":"Sonora","county":"Tuolumne","locationNotes":"Seized from sheriff in Sonora and hanged behind the El Dorado Hotel, later City Hotel; Coords estimated behind current location of City Hotel","crowdType":"Meeting of the People","crowdSize":"a large crowd","open":"Open","oldAuthorities":"Suspect taken from jail; returned to authorities; retaken from jail after conviction","crime":"Arson; Horse thief and robber","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"David Hill (SDU and HHB), aka \"Jim Hill,\" aka  May, from Courtland Co., NY","suspectRaces":"White","confession":"Confessed, Implicated others;\n\nPrayed/ attended by clergy at gallows","suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"HHB, PT, I: 175-178;\nAC 7/3/51, p. 2\nAC 1851-06-18\nAC 1851-07-02","oldNotes":null,"origDBindex":"64"},{"caseNum":65,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"37.3499414","lonDecimal":-121.9441241,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/06","yearMonthDay":"1851/06/27","dateNotes":null,"state":"California","place":"Santa Clara","county":"Santa Clara","locationNotes":"What are best coordinates? Using coordinates for Sta Clara Mission","crowdType":"tried by the people","crowdSize":null,"open":"Open","oldAuthorities":"1 (elderly father) turned over to authorities","crime":"stealing beef","punishment":"2 fined $25;\n1 turned over to authorities;\n1 whipped, 25 lashes","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":4,"suspectNames":null,"suspectRaces":"White","confession":null,"suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"HHB, PT, I: 474-475","oldNotes":null,"origDBindex":"65"},{"caseNum":66,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"38.3004709","lonDecimal":-120.7063219,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/07","yearMonthDay":"1851/07/03","dateNotes":null,"state":"California","place":"Mokelumne Hill","county":"Calaveras","locationNotes":null,"crowdType":"jury of 12 intelligent miners","crowdSize":"Citizens at large","open":"Open","oldAuthorities":"Officer abetted proceedings","crime":"murder","punishment":"Unknown","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"John Nelson","suspectRaces":"White","confession":null,"suspectNotes":"Attempted suicide by stabbing self when captured ","victimNumber":"1","victimNames":"Hall","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"HHB, PT, I: 465\nAC 1851-07-07\nSDU 1851-07-08 p2c2","oldNotes":"Last report is that miners waiting to see if Nelson died of slef inflicted wound before sentenceing; no ore information","origDBindex":"66"},{"caseNum":67,"cwIndex":"C-W10","gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"39.5602894","lonDecimal":-120.8280559,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/07","yearMonthDay":"1851/07/05","dateNotes":null,"state":"California","place":"Downieville","county":"Sierra","locationNotes":null,"crowdType":"Lynch Court","crowdSize":"2,500","open":"Open","oldAuthorities":"none present","crime":"Murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Josefa Loaiza","suspectRaces":"Mexican/Latino","confession":"Given freely;\n\nIntransigent at gallows","suspectNotes":null,"victimNumber":"1","victimNames":"Frederick Cannon","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"HHB, PT, I: 577-592;\nMH 7/8/51, p. 2 and 7/12/51, p. 2","oldNotes":null,"origDBindex":"67"},{"caseNum":68,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"38.5806777","lonDecimal":-121.4992404,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/07","yearMonthDay":"1851/07/09","dateNotes":null,"state":"California","place":"Sacramento","county":"Sacramento","locationNotes":"Using coordinates corner of sixth and K streets (Plaza)","crowdType":"Committee 11 to investigate appointed; 6 selected to guard prisoners","crowdSize":"over a thousand people","open":"Open","oldAuthorities":"Officers opposed proceedings; received suspects from crowd","crime":"Robbery and Assault","punishment":"Remanded to authorities","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":4,"suspectNames":"William Benjamin Robinson (New York)\nJohn Thompson (England)\nJames Gibson (Scotland)\nOwen Crauthers (Ireland)","suspectRaces":"1 American\n3 Other European","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":"James Wilson","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"HHB, PT, I: 442-443;\nAC 7/11/51, p. 2","oldNotes":null,"origDBindex":"68"},{"caseNum":69,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"37.795058","lonDecimal":-122.394185,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/07","yearMonthDay":"1851/07/11","dateNotes":null,"state":"California","place":"San Francisco","county":"San Francisco","locationNotes":"Hanging took place on Market Street Wharf. Estimated at end of Market Street","crowdType":"Vigilance Committee","crowdSize":"2,000-3,000","open":"open","oldAuthorities":"Officers acquiesced to proceedings","crime":"Murder, assault, robbery","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"James Stuart\naka English Jim\naka William Stephens\naka William Stevens","suspectRaces":"White (English)","confession":"Extended conffession AC 7/11/51","suspectNotes":null,"victimNumber":null,"victimNames":"C.J. Jansen","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"HHB, PT, I: 266-298;\nAC 7/12/51, p. 2;\nMH 7/15/51, p. 2","oldNotes":null,"origDBindex":"69"},{"caseNum":70,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"4","latDecimal":"37.9840911","lonDecimal":-120.3821381,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/07","yearMonthDay":"1851/07/05","dateNotes":null,"state":"California","place":"Sonora","county":"Tuolumne","locationNotes":null,"crowdType":"Vigilance Committee","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Horse thief","punishment":"Sentenced to 150 lashes and H.T. brand on the cheek and banishment; After confessing, only 100 lashes and no brand","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":null,"suspectRaces":"Mexican","confession":"Confessed","suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"HHB, PT, I: 468-469\nAC 1850-07-11 p2c6","oldNotes":null,"origDBindex":"70"},{"caseNum":71,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"3","latDecimal":"38.0258","lonDecimal":-122.0931,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/07","yearMonthDay":"1851/07/10","dateNotes":null,"state":"California","place":"Benecia","county":"Solano","locationNotes":null,"crowdType":"The citizens","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Horse stealing","punishment":"Whipped severely","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":2,"suspectNames":null,"suspectRaces":"Indian","confession":null,"suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"HHB, PT, I: 515\nAC 1851-07-17 p2c4\nAC 1851-07-22 p2c4\nSDU 1851-07-11 p2c4","oldNotes":"In same reports aas Case 019","origDBindex":"71"},{"caseNum":73,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"3","latDecimal":"40.4355","lonDecimal":-123.0325,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/07","yearMonthDay":"1851/07/00","dateNotes":null,"state":"California","place":"Canon Creek","county":"Trinity","locationNotes":"?","crowdType":"Victim and Friends","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Robbery--money","punishment":"Hanged to extort confession","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Hill","suspectRaces":"White","confession":"Extorted--successful","suspectNotes":null,"victimNumber":"1","victimNames":"Cropsey","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"AC 7/31/51, p. 2","oldNotes":null,"origDBindex":"73"},{"caseNum":75,"cwIndex":"C-W 47","gdIndex":null,"crossRefNotesCwGd":"HHB report implies 1851; actual date 1854/08/25","latDecimal":"38.4410213","lonDecimal":-120.8543816,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1854,"yearMonth":"1854/08","yearMonthDay":"1854/08/25","dateNotes":null,"state":"California","place":"Drytown","county":"Amador","locationNotes":null,"crowdType":null,"crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Murder","punishment":"Hanged with log chain","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":null,"suspectRaces":"Mexican/Latino","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":null,"victimGenders":"Male","victimRaces":"Chinese","victimNotes":null,"oldSources":"HHB, PT, I: 170-171","oldNotes":null,"origDBindex":"75"},{"caseNum":76,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"4","latDecimal":"39.0298944","lonDecimal":-121.4302363,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/08","yearMonthDay":"1851/08/01","dateNotes":null,"state":"California","place":"Johnson's Rancho","county":"Yuba","locationNotes":"Six miles above johnson's Rancho; Using coordinates for Wheatland","crowdType":"Jury of Citizens","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Attempted murder/ assault","punishment":"Whipped, 36 Lashes","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":null,"suspectRaces":"Indian","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":"Verro\nLinck","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"HHB, PT, I: 516;\nAC 8/5/51, p. 2","oldNotes":null,"origDBindex":"76"},{"caseNum":77,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"3","latDecimal":"39.2607347","lonDecimal":-121.023063,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/08","yearMonthDay":"1851/08/04","dateNotes":null,"state":"California","place":"Nevada City","county":"Nevada","locationNotes":null,"crowdType":"the populace","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Attempted murder","punishment":"Lynching not carried out; suspect gave self up to sheriff and held for trial","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Alexander Brown","suspectRaces":"White","confession":null,"suspectNotes":"About 25; Musician","victimNumber":"1","victimNames":"Daniel Smith","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"AC 8/5/51, p. 2","oldNotes":null,"origDBindex":"77"},{"caseNum":78,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"3","latDecimal":"38.5328","lonDecimal":-121.0725,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/08","yearMonthDay":"1851/08/05","dateNotes":null,"state":"California","place":"Ophir","county":"Placer","locationNotes":null,"crowdType":"\"Crowd,\" \"Committee of the Whole\"; trial lasted all day","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Attempted robbery of $400;","punishment":"Hanged to extort confession; released","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Haynes, from Ohio","suspectRaces":"White","confession":"Failed to get confession; suspect insisted on innocence, prayed","suspectNotes":null,"victimNumber":"1","victimNames":null,"victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"HHB, PT, I: 516;\nAC 8/10/51, p. 2","oldNotes":null,"origDBindex":"78"},{"caseNum":79,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"CHECK LOCATION","latDecimal":"37.7935535","lonDecimal":-122.40002,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/08","yearMonthDay":"1851/08/06","dateNotes":null,"state":"California","place":"San Francisco","county":"San Francisco","locationNotes":"Committee Rooms Location set  near intersection of Battery and California","crowdType":"Formal VC","crowdSize":"small attendance","open":"Secret","oldAuthorities":null,"crime":"Burglary and theft; no particulars","punishment":"Remanded to authorities","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"George Adams","suspectRaces":"White","confession":null,"suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"HHB, PT, I: 372-373;\nAC 8/7/51, p. 2","oldNotes":null,"origDBindex":"79"},{"caseNum":80,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"39.22083333","lonDecimal":-121.4069444,"latNDegrees":39,"latNMinutes":13,"latNSeconds":15,"lonWDegrees":121,"lonWMinutes":24,"lonWSeconds":25,"year":1851,"yearMonth":"1851/08","yearMonthDay":"1851/08/07","dateNotes":null,"state":"California","place":"Rose's/Brophy's Ranch","county":"Yuba","locationNotes":"Using coordinates for Dry Creek, aka Ousley's bar, on which rose's Ranch was located. See Histoory of Yuba County and Durham, p478","crowdType":"Mob","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Stealing watermelles","punishment":"flogged and thrown in river","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":2,"suspectNames":null,"suspectRaces":"Indian","confession":null,"suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"AC 8/13/51, p. 2","oldNotes":null,"origDBindex":"80"},{"caseNum":81,"cwIndex":null,"gdIndex":"G-D-26?","crossRefNotesCwGd":"4","latDecimal":"36.6012792","lonDecimal":-121.8829442,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/08","yearMonthDay":"1851/08/10","dateNotes":null,"state":"California","place":"Monterey","county":"Monterey","locationNotes":null,"crowdType":"Party of Masked men","crowdSize":"5-7","open":"Secret","oldAuthorities":"Marshall Clapp gagged, blindfolded, and tied up. Coroner's jury verdict \"killed by a person or persons unknown.\"","crime":"Horse stealing and suspected murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"William Otis Hall\nBill Wood alias Otis","suspectRaces":"White","confession":null,"suspectNotes":"See Case 035; Otis/Hall had been convincted in April in Monterey of horse stealing. Escaped from jail; recaptured in LA and returned to Monterey, where he was lynched in the jail","victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"AC 8/16/51, p. 2","oldNotes":null,"origDBindex":"81"},{"caseNum":82,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"4","latDecimal":"39.4745","lonDecimal":-120.5255,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/08","yearMonthDay":"1851/08/10","dateNotes":null,"state":"California","place":"Onion Valley","county":"Plumas","locationNotes":"described as the \"rancho\"","crowdType":null,"crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Robbery $130 from drunken minor","punishment":"whipeed and banished","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":3,"suspectNames":null,"suspectRaces":"White","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":null,"victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"AC 8/15/51, p. 2","oldNotes":null,"origDBindex":"82"},{"caseNum":83,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"CHECK LOCATION","latDecimal":null,"lonDecimal":null,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/08","yearMonthDay":"1851/08/11","dateNotes":null,"state":"California","place":"On board the Jenny Lind","county":"San Francisco","locationNotes":"Report from AC; seems likely at dock in SF","crowdType":"Vigilance Committee","crowdSize":null,"open":"Open","oldAuthorities":"Turned over to the authorities; suspect an escapee from Tuolomne County jail; $500 reward for his capture","crime":"Unknown","punishment":"Remanded to authorities","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"John Thornpen","suspectRaces":"White","confession":null,"suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"AC 8/14/51, p. 2","oldNotes":"Escaped from tuolumne Co. Jail; captured and remanded to authorities, from Stockton paper; probably not Yuba Co.","origDBindex":"83"},{"caseNum":84,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"4","latDecimal":"38.8965664","lonDecimal":-120.9127166,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/08","yearMonthDay":"1851/08/13","dateNotes":null,"state":"California","place":"Greenwood Valley","county":"El Dorado","locationNotes":"Gudde, CGC 145","crowdType":"Jury empaneled","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Murder and robbery","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"James Graham of Baltimore","suspectRaces":"White","confession":"Confessed","suspectNotes":null,"victimNumber":"1","victimNames":"Alexander Leslie of NC","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"HHB, PT, I: 517;\nAC 8/15/51, p. 2","oldNotes":null,"origDBindex":"84"},{"caseNum":85,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"1 Lynching or Indian \"hunt\"","latDecimal":"38.650182","lonDecimal":-121.2030033,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/08","yearMonthDay":"1851/08/14","dateNotes":null,"state":"California","place":"Mississippi Bar","county":"Sacramento","locationNotes":null,"crowdType":"Party raised to hunt threatening Indians","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Attempted murder/ assault","punishment":"One shot, assumed dead; other escaped","lethality":"Both","otherNamesMentioned":null,"numberSuspects":2,"suspectNames":null,"suspectRaces":"Indian","confession":null,"suspectNotes":null,"victimNumber":"2","victimNames":"Gates and Murray attacked at latter's ranch, 10 miles from Sacramento","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"AC 8/19/51, p. 2","oldNotes":"Could have been a shooting… double check","origDBindex":"85"},{"caseNum":86,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"37.8","lonDecimal":-120.4097222,"latNDegrees":37,"latNMinutes":48,"latNSeconds":null,"lonWDegrees":120,"lonWMinutes":24,"lonWSeconds":35,"year":1851,"yearMonth":"1851/08","yearMonthDay":"1851/08/00","dateNotes":null,"state":"California","place":"Red Mountain Bar","county":"Tuolumne","locationNotes":"Durham p819","crowdType":null,"crowdSize":null,"open":null,"oldAuthorities":null,"crime":"Robbery","punishment":"Whipped, 25 lashes, and banished","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Hugh Morgan","suspectRaces":null,"confession":null,"suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"HHB, PT, I: 517","oldNotes":null,"origDBindex":"86"},{"caseNum":87,"cwIndex":null,"gdIndex":"G-D-27","crossRefNotesCwGd":"4","latDecimal":"38.5806777","lonDecimal":-121.4992404,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/08","yearMonthDay":"1851/08/22","dateNotes":null,"state":"California","place":"Sacramento","county":"Sacramento","locationNotes":"Using coordinates corner of sixth and K streets (Plaza)","crowdType":"meeting organized and jury impaneled; declared posse comitatus ready to act","crowdSize":"1000 men","open":"Open","oldAuthorities":"Three men convicted of assault and robbery; sentenced to hang. Heppard/Robinson (real name Heppard)\n\nSheriff and officers \"retired from the scene\" when crowd rushed the station house to seize Robinson following the (legal) execution of his two confederates\n\nSuspect had been convicted; granted reprieve by Governor McDougal","crime":"Robbery and Assault; Wilson knocked down and robbed on L Street, between fourth and fifth.","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"William Heppard alias Robinson, of New York","suspectRaces":"White","confession":"Confessed to crimes, \"alleging the grossest and most undounded charges against men who stand high in this community…\" prayed and \"invoked Heaven to have mercy on hs soul\"","suspectNotes":null,"victimNumber":"1","victimNames":"James Wilson, \"a man from the Cosumnes\"","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"HHB, PT, I: 444-447;\nAC 8/23/51, p. 2 and 8/25/51, p. 2;\nSDU 12/26/85, p. 8c1","oldNotes":null,"origDBindex":"87"},{"caseNum":88,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"39.2210038","lonDecimal":-121.3313492,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/08","yearMonthDay":"1851/08/22","dateNotes":null,"state":"California","place":"Park's Bar","county":"Yuba","locationNotes":"SDU places at Barton's Bar on Yuba; AC places at Native American Bar; estimating coordinates midway between Park's Bar and Rose Bar on Yuba, per Gudde, CGC, 28, on location of Park's Bar","crowdType":"citizens organized a court","crowdSize":null,"open":"open","oldAuthorities":null,"crime":"theft of a gun","punishment":"whipped, 20 lashes","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Frank Reynolds","suspectRaces":"White","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":"theft occurred at the house of Cordell, Barton's Bar","victimGenders":"male","victimRaces":"White","victimNotes":null,"oldSources":"AC 8/22/51, p. 2","oldNotes":null,"origDBindex":"88"},{"caseNum":89,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"3","latDecimal":"37.3499414","lonDecimal":-121.9441241,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/08","yearMonthDay":"1851/08/24","dateNotes":null,"state":"California","place":"Santa Clara","county":"Santa Clara","locationNotes":"Using coordinates for Sta Clara Mission; check coordinates","crowdType":"suspects arrested by the people","crowdSize":null,"open":"open","oldAuthorities":null,"crime":"theft of beef for food","punishment":null,"lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":4,"suspectNames":null,"suspectRaces":"Hispano-Californians","confession":null,"suspectNotes":"AC doesn't mention race of suspects; HHB refers to the father and son as Hispano-Californios","victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"HHB, PT, I: 475;\nAC 8/30/51, p. 2","oldNotes":null,"origDBindex":"89"},{"caseNum":90,"cwIndex":null,"gdIndex":"G-D-28","crossRefNotesCwGd":"4","latDecimal":"37.7935535","lonDecimal":-122.40002,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/08","yearMonthDay":"1851/08/24","dateNotes":null,"state":"California","place":"San Francisco","county":"San Francisco","locationNotes":"Committee Rooms Location set  near intersection of Battery and California","crowdType":"Vigilance Committee","crowdSize":"10,000","open":"open","oldAuthorities":"Whittaker and McKenzie seized (\"rescued\") from the jail by 36 members of the vigilance committee","crime":"Robbery--money","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":2,"suspectNames":"Robert McKenzie (claims reall name McKinney)\nSamuel Whittaker","suspectRaces":"Sydney (Whittaker)\nEnglish (Mckenzie)","confession":"Lengthy confessions in AC","suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"HHB, PT, I: ?;\nAC 8/25/51, p. 2","oldNotes":"Hanging of Whittaker and MacKenzie","origDBindex":"90"},{"caseNum":91,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"3","latDecimal":"37.9840911","lonDecimal":-120.3821381,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/08","yearMonthDay":"1851/08/25","dateNotes":null,"state":"California","place":"Sonora","county":"Tuolumne","locationNotes":null,"crowdType":"Vigilance Committee","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Stealing a mule","punishment":"Whipped, 25 lashes","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":null,"suspectRaces":"Mexican","confession":null,"suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"AC 8/29/51, p. 2","oldNotes":null,"origDBindex":"91"},{"caseNum":92,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"3","latDecimal":"37.3107158","lonDecimal":-121.9206516,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/09","yearMonthDay":"1851/09/13","dateNotes":null,"state":"California","place":"San Jose","county":"Santa Clara","locationNotes":"Using coordinates for San Jose West","crowdType":null,"crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Cattle Stealing","punishment":"Whipped","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":null,"suspectRaces":"Mexican","confession":"suspect states he knew who had stolen the cattle; crowd took that as evidence of his guilt","suspectNotes":null,"victimNumber":"1","victimNames":"C.P. Hester","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"AC 9/13/51, p. 2","oldNotes":null,"origDBindex":"92"},{"caseNum":93,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"3","latDecimal":"37.9840911","lonDecimal":-120.3821381,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/09","yearMonthDay":"1851/09/15","dateNotes":null,"state":"California","place":"Sonora","county":"Tuolumne","locationNotes":null,"crowdType":"Vigilance Committee","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Stealing a mule","punishment":"Whipped, 75 lashes (sentenced to 100, last 25 remitted), head shaved, and banished","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":null,"suspectRaces":"Man from Sydney","confession":null,"suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"HHB, PT, I: 469;\nAC 9/19/51, p. 2\nAC 1851-09-23 p2c2","oldNotes":null,"origDBindex":"93"},{"caseNum":94,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"3","latDecimal":"37.9840911","lonDecimal":-120.3821381,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/09","yearMonthDay":"1851/09/15","dateNotes":null,"state":"California","place":"Sonora","county":"Tuolumne","locationNotes":null,"crowdType":"Vigilance Committee","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Stealing a pistol","punishment":"Whipped, 50 lashes, head shaved, and banished","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":null,"suspectRaces":"Mexican","confession":null,"suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"HHB, PT, I: 469;\nAC 9/19/51, p2\nAC 1851-09-23 p2c2","oldNotes":null,"origDBindex":"94"},{"caseNum":95,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"CHECK LOCATION","latDecimal":"40.6000725","lonDecimal":-122.4924721,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/09","yearMonthDay":"1851/09/18","dateNotes":null,"state":"California","place":"Shasta","county":"Shasta","locationNotes":"Using coordinates for City of Shasta Lake, but check against Redding Springs; Shasta from HHB; SDU just says \"Upper Sacramento\"","crowdType":"Vigilance Committee","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Robbery--money","punishment":"Whipped, 12 lashes. Originally sentenced to 35, but \"evident from the severity with which they were applied,\" he would have died","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":null,"suspectRaces":"White","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":null,"victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"HHB, PT, I: 457\nSDU 1851-09-26 p2c4","oldNotes":null,"origDBindex":"95"},{"caseNum":96,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"1","latDecimal":"39.4953","lonDecimal":-121.1658,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/09","yearMonthDay":"1851/09/00","dateNotes":null,"state":"California","place":"Granite Basin","county":"Plumas","locationNotes":null,"crowdType":"Crowd","crowdSize":"20","open":"Open","oldAuthorities":null,"crime":"Assault of man who accused him of \"improper intimacy with a married woman\"","punishment":"Beaten, hanging began; three men stopped the crowd and releasing the suspect","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Aaron Bradbury","suspectRaces":"White","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":null,"victimGenders":"male","victimRaces":"White","victimNotes":"HHB reports that Bradbury stabbed one or two men","oldSources":"HHB, PT, I: 518","oldNotes":null,"origDBindex":"96"},{"caseNum":97,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"3","latDecimal":"39.2035","lonDecimal":-121.0713,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/10","yearMonthDay":"1851/10/04","dateNotes":null,"state":"California","place":"Sweetlands","county":"Nevada","locationNotes":"Near Nevada City","crowdType":"The miners","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Assault","punishment":"Whipped, 50 lashes","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":null,"suspectRaces":"Kanaka","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":null,"victimGenders":"Male","victimRaces":"Kanaka Boy","victimNotes":null,"oldSources":"AC 10/11/51, p. 2","oldNotes":null,"origDBindex":"97"},{"caseNum":98,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"3","latDecimal":"38.3004709","lonDecimal":-120.7063219,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/10","yearMonthDay":"1851/10/12","dateNotes":null,"state":"California","place":"Mokelumne Hill","county":"Tuolumne","locationNotes":null,"crowdType":"large crowd","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Assaultl and attempted murder","punishment":"Kept under guard and remanded to authorities","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Constable John Donahue (early reports Donahoe)","suspectRaces":"White","confession":null,"suspectNotes":"later indicted for first degree murder","victimNumber":"1","victimNames":"Joseph Alexander","victimGenders":"Male","victimRaces":"Polish Jew","victimNotes":null,"oldSources":"HHB, PT, I: 519-520;\nAC 10/17/51, p. 2","oldNotes":null,"origDBindex":"98"},{"caseNum":99,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"1. Lynching or regular court?","latDecimal":"38.4803","lonDecimal":-120.5446,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/10","yearMonthDay":"1851/10/14","dateNotes":null,"state":"California","place":"Shingle Creek","county":"El Dorado","locationNotes":"also latitude 383715N longitude 1205554W (stream)","crowdType":"Arrested; taken before Esq. Duden and sentenced to receive 20 lashes","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Robbery $100","punishment":"Whipped; 20 lashes","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":null,"suspectRaces":"Indian","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":null,"victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"AC 10/19/51, p. 2","oldNotes":null,"origDBindex":"99"},{"caseNum":100,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"3","latDecimal":"32.7092182","lonDecimal":-117.1711445,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/10","yearMonthDay":"1851/10/21","dateNotes":null,"state":"California","place":"San Diego","county":"San Diego","locationNotes":"Using GNIS Seaport Village(?). Takenb to Dr. Painter's Office","crowdType":"\"ab body of men styling themselves the Vigilance Committee\"","crowdSize":null,"open":"Open","oldAuthorities":"Seized from officers enroute to Old Town","crime":"Robbery, $400 to $500","punishment":"Released after examination","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Paddy Welsh, a soldier","suspectRaces":"Irish (name?)","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":"keeper of New Orleans Hotel","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"AC 10/26/51, p. 2","oldNotes":null,"origDBindex":"100"},{"caseNum":101,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"estimated coordinates","latDecimal":"38.8941574","lonDecimal":-121.5968273,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/10","yearMonthDay":"1851/10/21","dateNotes":null,"state":"California","place":"Steamer, Marysville to San Francisco","county":null,"locationNotes":"Steamer en route to SF from Marysville--location estimated about half way between Marysville and Sacramento on Sacramento River","crowdType":"Court of the people","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Theft of a Colt revolver","punishment":"Fined $100","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Griffin","suspectRaces":"Sydney","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":null,"victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"HHB, PT, I: 519;\nAC 10/22/51","oldNotes":null,"origDBindex":"101"},{"caseNum":102,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"2","latDecimal":"40.0109982","lonDecimal":-121.1930184,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/10","yearMonthDay":"1851/10/29","dateNotes":null,"state":"California","place":"Rich Bar","county":"Plumas","locationNotes":null,"crowdType":"large crowd organized as court","crowdSize":null,"open":null,"oldAuthorities":null,"crime":"Robbery $500","punishment":"Whipped and banished","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Little John","suspectRaces":"Swede","confession":"Insisted on innocence","suspectNotes":null,"victimNumber":"1","victimNames":"Mr. B[ancroft], proprietor of Empire House","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"Shirley Letters, Letter 9, 10-29-51, pp. 117-132","oldNotes":null,"origDBindex":"102"},{"caseNum":103,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"1","latDecimal":"38.0207567","lonDecimal":-120.4124173,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/10","yearMonthDay":"1851/10/00","dateNotes":null,"state":"California","place":"Tim's Garden","county":"Tuolumne","locationNotes":"Tim's Garden one mile from Columbia; coordinates are for Springfield, later name for same location","crowdType":"Vigilance Committee","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Robbery $600","punishment":"Whipped, 75 lashes","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"W.E. Conkling","suspectRaces":"White","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":"Crowning (HHB: \"honest old miner\")","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"HHB, PT, I: 469-470","oldNotes":null,"origDBindex":"103"},{"caseNum":104,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"1","latDecimal":"40.6860908","lonDecimal":-122.9358438,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/00","yearMonthDay":"1851/00/00","dateNotes":null,"state":"Nevada","place":"Weaverville","county":"Trinity","locationNotes":null,"crowdType":null,"crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Robbery $1000","punishment":"Hanged to extort confewssion; failed","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Seymour","suspectRaces":"Sydney","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":"Hardgreaves","victimGenders":"Male","victimRaces":"Sydney","victimNotes":null,"oldSources":"HHB, PT, I: 519","oldNotes":null,"origDBindex":"104"},{"caseNum":106,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"3","latDecimal":"37.7935535","lonDecimal":-122.40002,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/11","yearMonthDay":"1851/11/00","dateNotes":null,"state":"California","place":"San Francisco","county":"San Francisco","locationNotes":"Committee Rooms Location set  near intersection of Battery and California","crowdType":"Vigilance Committee","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Murder I Panama City","punishment":"Captured by SF VC and returned to Panama and jailed there","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"W.G. Hance","suspectRaces":"White","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":null,"victimGenders":"male","victimRaces":"white","victimNotes":null,"oldSources":"HHB, PT, I: ?;\nAC 11/5/51, p. 2","oldNotes":"Apparently not in HHB. From AC report include or drop from DB?","origDBindex":"106"},{"caseNum":107,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"3","latDecimal":"37.8691989","lonDecimal":-121.4440209,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/11","yearMonthDay":"1851/11/06","dateNotes":null,"state":"California","place":"Stockton","county":"San Joaquin","locationNotes":"\"hanging took place \"not far from Stockton.\" Estimated location outside of Stockton about half way to Mountain House, where alleged crime took place","crowdType":"Carried off at midnight","crowdSize":null,"open":"Secret","oldAuthorities":null,"crime":"theft of a pistol at Mountain Inn","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Toby","suspectRaces":"Black","confession":null,"suspectNotes":"\"belonging to Mr. T. Hale\"; \"above named boy\" apparently a slave","victimNumber":"1","victimNames":null,"victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"AC 11/7/51, p. 2","oldNotes":null,"origDBindex":"107"},{"caseNum":108,"cwIndex":null,"gdIndex":"G-D- 29 has date as 11/8/51","crossRefNotesCwGd":"4","latDecimal":"38.682552","lonDecimal":-120.848518,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/11","yearMonthDay":"1851/11/09","dateNotes":null,"state":"California","place":"Mud Springs","county":"El Dorado","locationNotes":"Mud Springs original name of El Dorado, El Dorado County. See http://www.sierranevadageotourism.org/content/el-dorado-originally-mud-springs-no-486-california-historic-landmark/sie8962F6E24D988A588","crowdType":"Jury of the people","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Robbery $200 and attempted murder of an old miner with a hatchet. Victim alive at time of execution, but not expected to live","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Abner J. Dixon","suspectRaces":"White","confession":"protested innocence ot the last","suspectNotes":" from Wisconsin, about 19 years old","victimNumber":"1","victimNames":"old miner name unknown; HHB says \"Clark\" was his name","victimGenders":"Male","victimRaces":"white","victimNotes":null,"oldSources":"HHB, PT, I: 520;\nAC 11/12/51, p. 2","oldNotes":null,"origDBindex":"108"},{"caseNum":109,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"4","latDecimal":"37.7935535","lonDecimal":-122.40002,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/11","yearMonthDay":"1851/11/11","dateNotes":null,"state":"California","place":"San Francisco","county":"San Francisco","locationNotes":"Committee Rooms Location set  near intersection of Battery and California","crowdType":"Vigilance Committee","crowdSize":"one or two members","open":"open","oldAuthorities":null,"crime":"Attempted murder/ assault. Stabbed white man who attacked him","punishment":"Remanded to authorities and later released by Recorder's Court","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Antonio Gonzales","suspectRaces":"Mexican","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":"Malcolm McLane","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"HHB, PT, I: 389;\nAC 11/12/51, p. 2","oldNotes":"Victim Malcolm McLane; suspect Antonio Gonzalez","origDBindex":"109"},{"caseNum":110,"cwIndex":"C-W 11","gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"38.22714","lonDecimal":-120.8532709,"latNDegrees":38,"latNMinutes":13,"latNSeconds":40,"lonWDegrees":120,"lonWMinutes":51,"lonWSeconds":10,"year":1851,"yearMonth":"1851/11","yearMonthDay":"1851/11/14","dateNotes":null,"state":"California","place":"Turnersville","county":"Calaveras","locationNotes":"Later known as Campo Seco; coordinates from latter","crowdType":"Citizens turned out in a body","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Murder and robbery","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Domingo","suspectRaces":"Mexican","confession":"Implicated others","suspectNotes":null,"victimNumber":"4","victimNames":"Jerome Steward\nbrother Charles Steward, both from east\nChristopher Olin, also from eastern states\nW.H. Boose, from Tennessee","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"HHB, PT, I: 520-521;\nAC 11/24/51, p. 2\nNYT 1852-01-06 CHECK DATE","oldNotes":"Domingo hanged; others sought","origDBindex":"110"},{"caseNum":112,"cwIndex":null,"gdIndex":"G-D- 32","crossRefNotesCwGd":"4","latDecimal":"40.0109982","lonDecimal":-121.1930184,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/12","yearMonthDay":"1851/12/15","dateNotes":null,"state":"California","place":"Rich Bar","county":"Plumas","locationNotes":"Forks of Feather River","crowdType":"Court of the People; Jury of 12 and judge elected","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Robbery, $16,000","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"David Brown in newspapers\nWilliam Brown in Shirley Letters","suspectRaces":"Swede","confession":"confesed fully; drunk at hanging","suspectNotes":null,"victimNumber":"2","victimNames":"two Germans who had nursed Brown to health","victimGenders":"male","victimRaces":"German","victimNotes":null,"oldSources":"Shirley Letters,Letter 11, 12-15-51; pp. 152-159;\nAC 12/18/51, p. 2;\nAC 1/1/52, p. 6\nSDU 1851-12-18","oldNotes":"Date is approximate (date of Shirley letter). Check against newspapers.","origDBindex":"112"},{"caseNum":113,"cwIndex":null,"gdIndex":"G-D- 30? Has date as 11/12","crossRefNotesCwGd":"4","latDecimal":"38.3004709","lonDecimal":-120.7063219,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/12","yearMonthDay":"1851/12/24","dateNotes":null,"state":"California","place":"Mokelumne Hill","county":"Calaveras","locationNotes":null,"crowdType":"Court of the people","crowdSize":"large crowd of persons","open":"open","oldAuthorities":null,"crime":"Murder","punishment":"Released after convicted of murder","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"James Campbell","suspectRaces":"White","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":"Esteban Naides","victimGenders":"Male","victimRaces":"Chilean","victimNotes":null,"oldSources":"HHB, PT, I: 465-466\nAC 1851-12-29 p2c2\nSDU 1851-12-31 p2c4","oldNotes":null,"origDBindex":"113"},{"caseNum":114,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"3","latDecimal":"38.3004709","lonDecimal":-120.7063219,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1852,"yearMonth":"1852/02","yearMonthDay":"1852/02/13","dateNotes":null,"state":"California","place":"Mokelumne Hill","county":"Calaveras","locationNotes":"Report from Calaveras Chronicle, published in Mokelumne Hill. From context, therefore, incident appears to have taken place in Mokelumne Hill.","crowdType":"Vigilance Committee","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Robbery $800 from partner","punishment":"Whipped, fifty lashes","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Silvermann","suspectRaces":"Jew","confession":null,"suspectNotes":"identified as a \"jew\"","victimNumber":"1","victimNames":"Burghermann","victimGenders":"Male","victimRaces":"Jew?","victimNotes":"partner of Silvermann","oldSources":"AC 2/9/52, p. 2","oldNotes":"Check; Yuba River not in Calaveras County","origDBindex":"114"},{"caseNum":115,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"3","latDecimal":"37.9595012","lonDecimal":-121.2927574,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1852,"yearMonth":"1852/02","yearMonthDay":"1852/02/07","dateNotes":null,"state":"California","place":"Stockton","county":"San Joaquin","locationNotes":"using coordinates for intersection of Center and Park Street","crowdType":"Proprietor and some others (HHB)","crowdSize":null,"open":null,"oldAuthorities":null,"crime":"Arson at small pox hospital","punishment":"Whipped (HHB) and died","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"\"negro woman\"","suspectRaces":"Black","confession":"Confessed and begged for her life","suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"HHB, PT, I: 522-523\nSDU 1852-06-11 p2c4","oldNotes":null,"origDBindex":"115"},{"caseNum":116,"cwIndex":null,"gdIndex":"G-D 8? Has date as 2/0/51. More likely G-D 36, dated 2/11/52.","crossRefNotesCwGd":"4","latDecimal":"38.1446994","lonDecimal":-120.4347513,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1852,"yearMonth":"1852/02","yearMonthDay":"1852/02/12","dateNotes":null,"state":"California","place":"Murphy's Diggings","county":"Calaveras","locationNotes":"CA historical landmark; spelled Murphy's","crowdType":"Jury of the miners","crowdSize":null,"open":"Open","oldAuthorities":"Sheriff captured the thieves, appears to have handed over to miners' court","crime":"Robbery","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":2,"suspectNames":"John Bucroft\nCharley Bucroft","suspectRaces":"Sydney","confession":"refused to confess","suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"HHB, PT, I: 521-522;\nAC 2/16/52, p. 2","oldNotes":null,"origDBindex":"116"},{"caseNum":117,"cwIndex":null,"gdIndex":"G-D- 37","crossRefNotesCwGd":"3","latDecimal":"38.7043483","lonDecimal":-120.6790971,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1852,"yearMonth":"1852/03","yearMonthDay":"1852/03/06","dateNotes":null,"state":"California","place":"Newton","county":"El Dorado","locationNotes":"g-d 37 has it as Newtown, Nevada Co.; using GNIS Newtown El Dorado. Check further","crowdType":"the populace","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Grand larceny","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Brown (from Gonzalez-Day, Check)","suspectRaces":"Black","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"HHB, PT, I: 521;\nAC 3/14/52, p. 2","oldNotes":null,"origDBindex":"117"},{"caseNum":118,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"4","latDecimal":"39.1517792","lonDecimal":-121.5834912,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1852,"yearMonth":"1852/03","yearMonthDay":"1852/03/20","dateNotes":null,"state":"California","place":"Marysville","county":"Yuba","locationNotes":null,"crowdType":"Vigilance Committee","crowdSize":null,"open":"Open","oldAuthorities":"VC turned suspect over to authorities","crime":"Theft, provisions","punishment":"Remanded to authorities; eventually convicted and hanged (9/23/52)","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"George Tanner, alias Tom Grigg","suspectRaces":"Sydney","confession":null,"suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"HHB, PT, I: 523\nAC 1852-03-24 p2c2\nAC 1852-04-05 p2c1\nAC 1852-04-18 p2c4\nAC 1852-05-08 p2c4\nAC 1852-05-15 p1c1\nAC 1852-05-15 p2c4\nAC 1852-05-26 p2c2\nAC 1852-07-17 p2c3\nAC 1852-07-17 p2c4\nSDU 1852-03-22 p2c4\nSDU 1852-03-23 p2c3\nSDU 1852-03-24 p2c1\nSDU 1852-04-21 p2c4\nSDU 1852-05-14 p2c1\nSDU 1852-05-26 p2c4\nSDU 1852-07-24 p2c5\nSDU 1852-07-25 p2c4\nSDU 1852-07-27 p3c1\nSDU 1852-07-30 p2c5","oldNotes":"Arresed and arraigned in court for grand larceny; relased under bond of $2000","origDBindex":"118"},{"caseNum":119,"cwIndex":"C-W 13 ","gdIndex":"G-D 39","crossRefNotesCwGd":"4","latDecimal":"38.3004709","lonDecimal":-120.7063219,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1852,"yearMonth":"1852/03","yearMonthDay":"1852/03/31","dateNotes":null,"state":"California","place":"Mokelumne Hill","county":"Calaveras","locationNotes":null,"crowdType":"Vigilance Committee","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Robbery","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Carlos Esclava","suspectRaces":"Sonorian","confession":"Confessed at gallows","suspectNotes":null,"victimNumber":"1","victimNames":"Geroge Perkins of Corral Flat","victimGenders":"Male","victimRaces":"White","victimNotes":"Esclava accused of many thefts around Mokelumne Hill and San Andres","oldSources":"HHB, PT, I: 466\nAC 1852-04-03\nAC 1852-04-05 p2c1\nSDU 1852-04-05 p3c1","oldNotes":null,"origDBindex":"119"},{"caseNum":120,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"3","latDecimal":"38.6107388","lonDecimal":-120.9057723,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1852,"yearMonth":"1852/03","yearMonthDay":"1852/03/00","dateNotes":null,"state":"California","place":"Big Canon","county":"El Dorado","locationNotes":"Two miles from Weber Creek bridge. Report notes that suspect escorted there. Using coordinates for Big Canyon Mine (GNIS)","crowdType":"Tried by miners","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Robbery","punishment":"Whipped and banished","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":null,"suspectRaces":"White (default)","confession":null,"suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"HHB, PT, I: 523\nAC 1852-03-28 p2c2","oldNotes":null,"origDBindex":"120"},{"caseNum":121,"cwIndex":null,"gdIndex":"G-D has date as 3/3/52","crossRefNotesCwGd":"4","latDecimal":"34.0948334","lonDecimal":-118.0990757,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1852,"yearMonth":"1852/04","yearMonthDay":"1852/04/03","dateNotes":null,"state":"California","place":"San Gabriel","county":"Los Angeles","locationNotes":null,"crowdType":"Hung by the citizens","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":null,"suspectRaces":"Indian","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":null,"victimGenders":"Male","victimRaces":"Indian","victimNotes":null,"oldSources":"LA Star, 4/3/52, p. 2;\nAC 4/12/52, p. 2","oldNotes":null,"origDBindex":"121"},{"caseNum":122,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"4","latDecimal":"38.7999014","lonDecimal":-120.8899382,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1852,"yearMonth":"1852/04","yearMonthDay":"1852/04/15","dateNotes":null,"state":"California","place":"Coloma","county":"El Dorado","locationNotes":null,"crowdType":"Mob","crowdSize":"200-300","open":"Open","oldAuthorities":"Both suspects indicted for Grand larceny and held in jail; mob demanded, jailor resisted but eventually gave suspects up","crime":"Robbery\nGeorge $2500\nMiller $4600","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":2,"suspectNames":"Henry George\nWilliam Miller","suspectRaces":"Sydney (George)\n\"Negro\" (Miller)","confession":null,"suspectNotes":null,"victimNumber":"2","victimNames":"Miner at Crater Creek (George)\nDavid Martin, Columbia (Miller)","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"HHB, PT, I: 523-524;\nAC 4/18/52, p. 2\nAC 1852-05-01 p2c1","oldNotes":null,"origDBindex":"122"},{"caseNum":123,"cwIndex":null,"gdIndex":"G-D 40? ","crossRefNotesCwGd":"3","latDecimal":"38.5037966","lonDecimal":-120.7554891,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1852,"yearMonth":"1852/04","yearMonthDay":"1852/04/20","dateNotes":null,"state":"California","place":"Fiddletown","county":"Amador","locationNotes":"near Drytown. g-d 40 has location as Dry Diggings","crowdType":"jury of miners","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"horse stealing","punishment":"Miners determined lack of evidence for conviction, then banished suspect","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"AC gives name Mills;\n[G-D ? Gives name as James Edmundson aka Jim Ugly. No, This is case 172, Ugly Jim]","suspectRaces":"White","confession":null,"suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"AC 4/26/52, p. 2","oldNotes":null,"origDBindex":"123"},{"caseNum":124,"cwIndex":null,"gdIndex":"G-D- 42","crossRefNotesCwGd":"3","latDecimal":"38.7115697","lonDecimal":-120.9513297,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1852,"yearMonth":"1852/04","yearMonthDay":"1852/04/29","dateNotes":null,"state":"California","place":"White Oak Springs","county":"El Dorado","locationNotes":"Using GNIS coordinates for Rescue, California. According to Cross, Early Inns of California, p. 230, White Oak Springs and Rescue close by.","crowdType":"jury of assembled citizens","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"James Hughlett, also Hewlett, from Missouri; employee of White Oak Springs Hotel","suspectRaces":"White","confession":null,"suspectNotes":null,"victimNumber":null,"victimNames":"Abner Spencer, from Ohio","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"HHB, PT, I: 524\nAC 1852-05-08 p4c1\nSDU 1852-05-03 p3c1\nSDU 1852-05-04 p3c3","oldNotes":null,"origDBindex":"124"},{"caseNum":125,"cwIndex":"C-W 16? Has date as 5/15/52","gdIndex":null,"crossRefNotesCwGd":"3","latDecimal":"41.83381","lonDecimal":-122.58373,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1852,"yearMonth":"1852/05","yearMonthDay":"1852/05/12","dateNotes":null,"state":"California","place":"On the Klamath River","county":"Siskiyou","locationNotes":"c-w 16 has location as Klamath River near Yreka; selected GNIS coord north of Yreka on Klamath.","crowdType":"Tried by the miners","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Robbery $800 gold dust","punishment":"Shot and killed","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"John Bathus","suspectRaces":"half breed Mexican","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":"S.B. Star","victimGenders":"male","victimRaces":"white","victimNotes":null,"oldSources":"AC 5/18/52, p. 2","oldNotes":null,"origDBindex":"125"},{"caseNum":126,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"3","latDecimal":"38.376024","lonDecimal":-120.668264,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1852,"yearMonth":"1852/04","yearMonthDay":"1852/04/25","dateNotes":null,"state":"California","place":"Clinton","county":"Amador","locationNotes":"See http://www.sierranevadageotourism.org/content/clinton-no-37-california-historical-landmark/sieAF561D6A360EA2C7A","crowdType":"Citizens Citizens of Clinton","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Attempted murder","punishment":"whipped, 50 lashes, head shaved, banished","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Hensley","suspectRaces":"Irish","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":"Russell","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"AC 5/31/52, p. 2;\nAC 6/15/1852\nAC 1852-06-05 p1","oldNotes":null,"origDBindex":"126"},{"caseNum":127,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"3","latDecimal":"39.6146222","lonDecimal":-120.5927155,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1852,"yearMonth":"1852/05","yearMonthDay":"1852/05/30","dateNotes":null,"state":"California","place":"Bridgeport","county":"Sierra","locationNotes":null,"crowdType":"jury of miners","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Murder","punishment":"3 Hanged; 1 released","lethality":"Both","otherNamesMentioned":null,"numberSuspects":4,"suspectNames":null,"suspectRaces":"Indian","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":"Daniel Hopkins","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"HHB, PT, I: 525\nAC 1852-06-04 p2c4\nAC 1852-06-05 p2c3\nSDU 1852-06-04 p2c2","oldNotes":null,"origDBindex":"127"},{"caseNum":128,"cwIndex":null,"gdIndex":"G-D 52 has date as 6/12","crossRefNotesCwGd":"4","latDecimal":"38.9032305","lonDecimal":-121.5777385,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1852,"yearMonth":"1852/06","yearMonthDay":"1852/06/03","dateNotes":null,"state":"California","place":"Nicolaus","county":"Sutter","locationNotes":null,"crowdType":"jury of the people","crowdSize":null,"open":"Open","oldAuthorities":"taken from officers after arrest","crime":"Murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Page Rideout, from Marysville. Elsewhere Washington Rideout","suspectRaces":"Black","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":"W.F, Hoories, fronm Missouri","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"HHB, PT, I: 526\nAC 1852-06-13 p2c3\nAC 1852-06-15 p2c4\nSDU 1852-06-12 p3c4","oldNotes":null,"origDBindex":"128"},{"caseNum":129,"cwIndex":null,"gdIndex":"G-D 48","crossRefNotesCwGd":"3","latDecimal":"39.3060036","lonDecimal":-121.1613445,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1852,"yearMonth":"1852/06","yearMonthDay":"1852/06/08","dateNotes":null,"state":"California","place":"French Corral","county":"Nevada","locationNotes":"Using coordinates for French Corral; one report plaes incident at Rough and Ready…","crowdType":"Judge and jury appointed by the people. Whiteside prosecutor; Lyons atty for prisoners","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":2,"suspectNames":"unnamed","suspectRaces":"Indian","confession":null,"suspectNotes":"Brought in by Indian chief","victimNumber":"1","victimNames":"Emanuel Comstock, from Mineral Point, Wisc.","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"AC 6/11/52, p. 2","oldNotes":null,"origDBindex":"129"},{"caseNum":130,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"NEW REPORTS","latDecimal":"38.9360589","lonDecimal":-121.58409,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1852,"yearMonth":"1852/06","yearMonthDay":"1852/06/10","dateNotes":null,"state":"California","place":"Nicolaus","county":"Sutter","locationNotes":"Location changed to estimated (guessed) 5 miles above Nicolaus on west bank of Sacramento River","crowdType":"People turned out, arrested the murderer near Yuba City, and tried him before a jury","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"John Jackson","suspectRaces":"White","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":"Mrs. Baden","victimGenders":"Female","victimRaces":"German","victimNotes":null,"oldSources":"HHB, PT, I: 526;\nAC 6/13/52, p. 2\nSDU 1852-06-12 p2c2","oldNotes":null,"origDBindex":"130"},{"caseNum":131,"cwIndex":"C-W 17","gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"38.3484545","lonDecimal":-120.7723673,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1852,"yearMonth":"1852/06","yearMonthDay":"1852/06/10","dateNotes":null,"state":"California","place":"Jackson","county":"Amador","locationNotes":"Hung from oak tree oppostie of the Astor House on Main Street","crowdType":"mob","crowdSize":null,"open":"Open","oldAuthorities":"taken from jail","crime":"Murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Jose Cheverino","suspectRaces":"Mexican/Latino","confession":"Confessed his guilt","suspectNotes":null,"victimNumber":"2","victimNames":"Pontanier\nunnamed","victimGenders":"Male","victimRaces":"French","victimNotes":null,"oldSources":"HHB, PT, I: 524-525;\nSDU, 6/12/52, p.2;\nSDU 6/13/52 p2c4\nSDU 1852-06-14 p2\nAC 6-13-52 p 2\nAC 6/15/52 p2c4","oldNotes":null,"origDBindex":"131"},{"caseNum":132,"cwIndex":"C-W 18","gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"38.3484545","lonDecimal":-120.7723673,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1852,"yearMonth":"1852/06","yearMonthDay":"1852/06/11","dateNotes":null,"state":"California","place":"Jackson","county":"Amador","locationNotes":"Hanged from same tree as Cheverino","crowdType":"jury of 12 chosen from crowd; jry decided to turn over to authorities, when crowd of Frenchmen seized Cruz and hanged him; later report claims that Americans agreed with execution","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Murder","punishment":"1 Hanged\n1 remanded","lethality":"Both","otherNamesMentioned":null,"numberSuspects":2,"suspectNames":"Cruz Flores (executed)\nMariano (remanded)","suspectRaces":"Mexican","confession":null,"suspectNotes":null,"victimNumber":"2","victimNames":"Pontanier\nunnamed","victimGenders":"Male","victimRaces":"French","victimNotes":null,"oldSources":"HHB, PT, I: 526\nAC 1852-06-15 p2","oldNotes":"Check CA newspapers","origDBindex":"132"},{"caseNum":134,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"3","latDecimal":"38.7296252","lonDecimal":-120.798546,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1852,"yearMonth":"1852/06","yearMonthDay":"1852/06/15","dateNotes":null,"state":"California","place":"Placerville","county":"El Dorado","locationNotes":null,"crowdType":"Taken by citizens (there being no magistrate to be had) and tried","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Robbery","punishment":"Whipped and banished","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Williams","suspectRaces":"White","confession":null,"suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"HHB, PT, I: 527","oldNotes":"Check CA newspapers","origDBindex":"134"},{"caseNum":136,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"3","latDecimal":"38.9157312","lonDecimal":-122.323587,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1852,"yearMonth":"1852/06","yearMonthDay":"1852/06/17","dateNotes":null,"state":"California","place":"Cache Creek","county":"Yolo","locationNotes":"Using coords for Madison","crowdType":"Arrested","crowdSize":null,"open":null,"oldAuthorities":null,"crime":"Robbery $25,000","punishment":"Hung to extort confession--failed","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Dunn","suspectRaces":"White","confession":null,"suspectNotes":null,"victimNumber":"2","victimNames":"Diggs and Anderson","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"HHB, PT, I: 527","oldNotes":"Check CA newspapers","origDBindex":"136"},{"caseNum":138,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"2. only HHB. Race of suspect unclear","latDecimal":"40.6512565","lonDecimal":-122.940025,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1852,"yearMonth":"1852/06","yearMonthDay":"1852/06/00","dateNotes":null,"state":"California","place":"Weaver Creek","county":"Trinity","locationNotes":"Gudde CMC 365=366; CPN 419; using mouth","crowdType":"Jury chosen from among the citizens","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Robbery--rifled victim's trunk","punishment":"Whipped, 39 lashes each","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":5,"suspectNames":null,"suspectRaces":"Mexicans (from context?)","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":null,"victimGenders":"Male","victimRaces":"Mexican","victimNotes":null,"oldSources":"HHB, PT, I: 526","oldNotes":"Check CA newspapers","origDBindex":"138"},{"caseNum":139,"cwIndex":null,"gdIndex":"G-D-47","crossRefNotesCwGd":null,"latDecimal":"38.51527778","lonDecimal":-120.9236111,"latNDegrees":38,"latNMinutes":30,"latNSeconds":55,"lonWDegrees":120,"lonWMinutes":55,"lonWSeconds":25,"year":1852,"yearMonth":"1852/06","yearMonthDay":"1852/06/27","dateNotes":null,"state":"California","place":"Big Bar, on the Cosumnes","county":"El Dorado","locationNotes":"Using coordinates for Grapevine Ravine, per Durham p 493","crowdType":"jury of 12","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Raymond aka Roger","suspectRaces":"French","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":null,"victimGenders":"Male","victimRaces":"Chinese","victimNotes":null,"oldSources":"HHB, PT, I: 527","oldNotes":"Check CA newspapers","origDBindex":"139"},{"caseNum":140,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"40.6771722","lonDecimal":-122.3593086,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1852,"yearMonth":"1852/07","yearMonthDay":"1852/07/06","dateNotes":null,"state":"California","place":"Shasta City","county":"Shasta","locationNotes":"Using coordinates for City of Shasta Lake, but check against Redding Springs","crowdType":"Jury of twelve","crowdSize":null,"open":"Open","oldAuthorities":"Arrested by the people and delivered to the sheriff. After victim died, citizens called a meeting and took the prisoner from the sheriff and hung on a tree in sull sight of the town","crime":"Murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Kit Shannon, from Texas","suspectRaces":"White","confession":"declined hearing the clergyman talking to him and made no confession","suspectNotes":"gambler, hardened villain; reportedly had killed two men in California","victimNumber":"1","victimNames":"{Richard, in SDU 7-9-52)Touzalin, from Quincy, Ill.","victimGenders":"Male","victimRaces":"White","victimNotes":"previouslhy clerk of El Dorado County and a clerk to a committee of previous state legislatre","oldSources":"AC 7/10/52 p 2","oldNotes":null,"origDBindex":"140"},{"caseNum":141,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"39.4443661","lonDecimal":-120.7360289,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1852,"yearMonth":"1852/07","yearMonthDay":"1852/07/05","dateNotes":null,"state":"California","place":"Eureka","county":"Nevada","locationNotes":"California Gazeteer identifies Graniteville as name for Eureka, Nevada County. Report is from Mountain Echo, sierra County. http://tools.wmflabs.org/geohack/geohack.php?pagename=Eureka%2C_Nevada_County%2C_California&params=39_25.6_N_120_54.2_W_region:US-CA_type:city(0)","crowdType":"Lynched","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Stealing barley","punishment":"Whipped and banished","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Francis Boyd","suspectRaces":"White","confession":null,"suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"HHB, PT, I: 527","oldNotes":"Check CA newspapers","origDBindex":"141"},{"caseNum":142,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"38.0352009","lonDecimal":-120.4007505,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1852,"yearMonth":"1852/07","yearMonthDay":"1852/07/07","dateNotes":null,"state":"California","place":"Columbia","county":"Tuolumne","locationNotes":null,"crowdType":"Vigilance Committee","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Stealing $1200","punishment":"Whipped, 100 lashes and \"followed this up with other outrages.\" Later discovered that the poor woman was innoecent","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"unnamed woman","suspectRaces":"White","confession":null,"suspectNotes":"said to be crazy. about 70 years of age","victimNumber":"1","victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"HHB, PT, I: 527-528","oldNotes":"Check CA newspapers","origDBindex":"142"},{"caseNum":143,"cwIndex":"C-W 21","gdIndex":null,"crossRefNotesCwGd":"Multiple punishments","latDecimal":"38.390748","lonDecimal":-120.8032717,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1852,"yearMonth":"1852/07","yearMonthDay":"1852/07/21","dateNotes":null,"state":"California","place":"Sutter Creek","county":"Amador","locationNotes":"Gudde CPN 380","crowdType":"jury of miners","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Murder","punishment":"Whipped, 75 lashes; when victim died, hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Pablo Panso, aka Pansa","suspectRaces":"Mexican","confession":null,"suspectNotes":"gambler, 20-25 years","victimNumber":"1","victimNames":"Henry Zurich","victimGenders":"Male","victimRaces":"German","victimNotes":"20-25 years","oldSources":"HHB, PT, I: 560;\nAC 7-24-52 p 2","oldNotes":null,"origDBindex":"143"},{"caseNum":144,"cwIndex":null,"gdIndex":"G-D-35","crossRefNotesCwGd":null,"latDecimal":"40.0109982","lonDecimal":-121.1930184,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1852,"yearMonth":"1852/07","yearMonthDay":"1852/07/18","dateNotes":null,"state":"California","place":"Rich Bar","county":"Plumas","locationNotes":"Check County in Source; See Gudde CGC 290-291\ng-d 35 has in Sacramento Valley; check data sheets","crowdType":"Vigilance Committee","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Murder and robbery","punishment":"Hanged; brought back to Rich Bar in chains by men sent by Vigilance Committee","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Joshua Robertson","suspectRaces":"Black","confession":"refused with calm endurance; whether innocent or guilty they were going to hnng him","suspectNotes":"servant of man killed","victimNumber":"1","victimNames":"R. H. Bacon","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"AC 7-28-52 p 2;\nShirley Letters, Letter 19, 8-4-52, pp. 272-273","oldNotes":null,"origDBindex":"144"},{"caseNum":145,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"38.5132414","lonDecimal":-121.0127204,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1852,"yearMonth":"1852/07","yearMonthDay":"1852/07/00","dateNotes":null,"state":"California","place":"Indian Creek","county":"El Dorado","locationNotes":"Gudde CGC 167; narrow down choices GNIS; check co","crowdType":"party detained four or five Mexicans as hostages while hunting Mexicans who stole an oxen","crowdSize":null,"open":"Open","oldAuthorities":"Sheriff sought release of hostages; scare away; returned with posse; seiqzed two or three in pursuit of others","crime":"Theft of an oxen","punishment":"Whipped","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":2,"suspectNames":null,"suspectRaces":"Mexican","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"AC 7-29-52 p 2","oldNotes":null,"origDBindex":"145"},{"caseNum":146,"cwIndex":"C-W 19","gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"36.973381","lonDecimal":-122.0355319,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1852,"yearMonth":"1852/07","yearMonthDay":"1852/07/21","dateNotes":null,"state":"California","place":"Santa Cruz","county":"Santa Cruz","locationNotes":null,"crowdType":"Hung by the citizens; most prominent citizens of the wotn\";","crowdSize":null,"open":"Secret","oldAuthorities":null,"crime":"nototious outlaw, theft of stock, and suspected of murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Hernandez; in HHB Mariano Hernandez; in LA Star Dominguez Hernandez","suspectRaces":"Mexican","confession":null,"suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"HHB, PT, I: 476;\nLA Star 8-7-52 p 1","oldNotes":null,"origDBindex":"146"},{"caseNum":147,"cwIndex":"See C-W 22","gdIndex":"G-D 54 7/21","crossRefNotesCwGd":null,"latDecimal":"36.973381","lonDecimal":-122.0355319,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1852,"yearMonth":"1852/07","yearMonthDay":"1852/07/22","dateNotes":null,"state":"California","place":"Santa Cruz","county":"Santa Cruz","locationNotes":null,"crowdType":"jury of twleve, taken from the surrounding crowd. ","crowdSize":null,"open":"Open","oldAuthorities":"Unnamed Mexican taken from jail by \"self constituted authorities\"","crime":"Stealing 4 horses","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Unnamed","suspectRaces":"Spaniard","confession":"Confessed and implicated 5 or 6 others","suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"HHB, PT, I: 477;\nLA Star 8-7-52 p 1;\nAC 7-28-52 p 2","oldNotes":null,"origDBindex":"147"},{"caseNum":148,"cwIndex":"C-W 23 7/24","gdIndex":" G-D 56 7/31","crossRefNotesCwGd":null,"latDecimal":"34.0726866","lonDecimal":-118.2130443,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1852,"yearMonth":"1852/07","yearMonthDay":"1852/07/21","dateNotes":null,"state":"California","place":"Los Angeles","county":"Los Angeles","locationNotes":"hung on summit of Fort Hilll","crowdType":"Committee of citizens","crowdSize":null,"open":"Open","oldAuthorities":"Officer abetted proceedings","crime":"Murder and Robbery","punishment":null,"lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":2,"suspectNames":"Jesus Rivas\nDoroteo Zavaleta, aka Savaleta, Zabaleta","suspectRaces":"Mexican","confession":"Prayed/ attended by clergy; Insisted on innocence","suspectNotes":null,"victimNumber":"2","victimNames":"Later identified as B.F. McCoy, or Portsmouth, Ohio, and -- Ludwig, German by birth","victimGenders":"Male","victimRaces":"White","victimNotes":"two Americans murdered at  Jaboneria, on the San Gabriel","oldSources":"HHB, PT, I: 489-91; \"Vigilantism in Los Angeles,\" Southern California Quarterly, LIV (1972) ca 16.\nLA Star 7/21/52 p2c1","oldNotes":null,"origDBindex":"148"},{"caseNum":149,"cwIndex":"C-W 20","gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"36.973381","lonDecimal":-122.0355319,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1852,"yearMonth":"1852/07","yearMonthDay":"1852/07/22","dateNotes":null,"state":"California","place":"Santa Cruz","county":"Santa Cruz","locationNotes":null,"crowdType":"Citizen's committee; selected from surrounding crowd","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Horse stealing","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Capistrano (Lopez?)","suspectRaces":"Spaniard","confession":"Refused","suspectNotes":"\"chief man in the gang\"","victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"LA Star 8-7-52 p 1","oldNotes":null,"origDBindex":"149"},{"caseNum":150,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"40.0109982","lonDecimal":-121.1930184,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1852,"yearMonth":"1852/07","yearMonthDay":"1852/07/15","dateNotes":null,"state":"California","place":"Rich Bar","county":"Plumas","locationNotes":null,"crowdType":"Vigilance Committee","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Assault","punishment":"Whipped and banished","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":6,"suspectNames":null,"suspectRaces":"Mexican","confession":null,"suspectNotes":"1 woman, 5 men","victimNumber":"1","victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"Shirley Letters, Letter 19, 262-272","oldNotes":null,"origDBindex":"150"},{"caseNum":151,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"37.5977115","lonDecimal":-120.0710146,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1852,"yearMonth":"1852/08","yearMonthDay":"1852/08/00","dateNotes":null,"state":"California","place":"Sherlock Creek","county":"Mariposa","locationNotes":"seven miles from Mariposa; Gudde CGC 317; using mouth","crowdType":"Arrested by the mob","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Robbery $900","punishment":"Hanged to extort confession; whipped in \"most cruel manner, then set free","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Johnson","suspectRaces":"White","confession":null,"suspectNotes":"old man","victimNumber":"1","victimNames":"Moore & Co.","victimGenders":"Male","victimRaces":"white","victimNotes":null,"oldSources":"HHB, PT, I: 528","oldNotes":null,"origDBindex":"151"},{"caseNum":152,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"38.6293543","lonDecimal":-120.2774159,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1852,"yearMonth":"1852/08","yearMonthDay":"1852/08/23","dateNotes":null,"state":"California","place":"Leak Springs","county":"Amador","locationNotes":"Durham--El Dorado Co. Leek Springs. Named by Mormons for wild onions near spring.\n(38.38, -120.1445)\n\nUsing coordinates for Leek Spring Hill\n\nGudde CGC 192-193 as Leek Springs. AC 7-9-52 p2c4 describes Leak Springs as on the emigrant road, a few miles from Johnson's Rancho and about 15 miles from Placerville.","crowdType":"tried by a party of emigrants","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Ross","suspectRaces":"White","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":"James Doan","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"AC 8-30-52 p 2","oldNotes":null,"origDBindex":"152"},{"caseNum":153,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"38.7199452","lonDecimal":-121.1384269,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1852,"yearMonth":"1852/09","yearMonthDay":"1852/09/06","dateNotes":null,"state":"California","place":"Beall's Bar","county":"Placer","locationNotes":"now under folsom lake; estimated coords from GNIS map of Folsom Lake out from Beals Point","crowdType":"People's jury","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Stealing a watch","punishment":"whipped 39 lashes","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":null,"suspectRaces":"Black","confession":null,"suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"AC 9-14-52 p 2","oldNotes":null,"origDBindex":"153"},{"caseNum":154,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"38.3596355","lonDecimal":-120.9927195,"latNDegrees":38,"latNMinutes":21,"latNSeconds":15,"lonWDegrees":120,"lonWMinutes":58,"lonWSeconds":null,"year":1852,"yearMonth":"1852/09","yearMonthDay":"1852/09/15","dateNotes":null,"state":"California","place":"Ione Valley","county":"Amador","locationNotes":"Gudde CGC 169; using mouth GNIS (check). AC 9-19-52 says Ione Valley is in Calaveras County. (Amador created 1854)","crowdType":"party from valley","crowdSize":null,"open":"Open","oldAuthorities":"party from the Valley rescued the culprits from custody of sheriff","crime":"Stealing horses","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":2,"suspectNames":"Antonio Duarto\nJesus Brisano","suspectRaces":"Mexican","confession":null,"suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"AC 9-19-52 p 2;\nSDU also?","oldNotes":null,"origDBindex":"154"},{"caseNum":155,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"37.3499414","lonDecimal":-121.9441241,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1852,"yearMonth":"1852/09","yearMonthDay":"1852/09/16","dateNotes":null,"state":"California","place":"Santa Clara","county":"Santa Clara","locationNotes":"Using coordinates for Sta Clara Mission; check coordinates","crowdType":"spontaneous vigilance committee","crowdSize":null,"open":"Open","oldAuthorities":"Suspect had been discharged by Justice Worthen","crime":"horse stealing","punishment":"Hanged to extort confession; remanded to authorities","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Dolores Pico","suspectRaces":"Mexican","confession":"Extorted--successful","suspectNotes":null,"victimNumber":"1","victimNames":"Bruno Bernal","victimGenders":"Male","victimRaces":"Mexican","victimNotes":null,"oldSources":"AC 9-18-52 p 1","oldNotes":null,"origDBindex":"155"},{"caseNum":156,"cwIndex":null,"gdIndex":"G-D 57 has date as 10/5/52","crossRefNotesCwGd":null,"latDecimal":"40.6860908","lonDecimal":-122.9358438,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1852,"yearMonth":"1852/10","yearMonthDay":"1852/10/05","dateNotes":null,"state":"California","place":"Weaverville","county":"Trinity","locationNotes":null,"crowdType":"jury empaneled and judge appointed","crowdSize":null,"open":"Open","oldAuthorities":"crowd debated turning suspect over to sheriff and decided to have people try him","crime":"Murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Michael Grant","suspectRaces":"Irish","confession":"Insisted on innocence","suspectNotes":null,"victimNumber":"1","victimNames":"William Holt, from Missouri","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"HHB, PT, I: 457-58","oldNotes":null,"origDBindex":"156"},{"caseNum":157,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"37.8196499","lonDecimal":-120.6721494,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1852,"yearMonth":"1852/09","yearMonthDay":"1852/09/30","dateNotes":null,"state":"California","place":"Knight's Ferry","county":"Stanislaus","locationNotes":null,"crowdType":"a large company of Americans","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Murder","punishment":"Shot","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":null,"suspectRaces":"Indian","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":"Suspect's wife","victimGenders":"Female","victimRaces":"Indian","victimNotes":null,"oldSources":"AC 10-3-52 p 1","oldNotes":null,"origDBindex":"157"},{"caseNum":158,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"37.9595012","lonDecimal":-121.2927574,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1852,"yearMonth":"1852/09","yearMonthDay":"1852/09/00","dateNotes":null,"state":"California","place":"Stockton","county":"San Joaquin","locationNotes":"using coordinates for intersection of Center and Park Street","crowdType":"unceremoniusly kicked out","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"robbery $110","punishment":"Banished","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":null,"suspectRaces":"Frenchman","confession":null,"suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"AC 9-16-52 p 2","oldNotes":null,"origDBindex":"158"},{"caseNum":159,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"38.390748","lonDecimal":-120.8032717,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1852,"yearMonth":"1852/09","yearMonthDay":"1852/09/00","dateNotes":null,"state":"California","place":"Sutter Creek","county":"Amador","locationNotes":"8 miles from Mokelumne Hill; elsewhere described as 4 miles from Jackson","crowdType":"Jury of 8 Americans and 4 Chileans","crowdSize":null,"open":"Open","oldAuthorities":"When officer attempted to take suspect into custody, Chileans shot and killed him","crime":"Murder","punishment":"Shot in melee","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":null,"suspectRaces":"Italian","confession":null,"suspectNotes":"shopkeeper","victimNumber":"1","victimNames":null,"victimGenders":"Male","victimRaces":"Chilean","victimNotes":null,"oldSources":"AC 9-17-52 p 2","oldNotes":"Chilean Domingo arrested for killing suspect and held for trial","origDBindex":"159"},{"caseNum":160,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"38.8968431","lonDecimal":-121.0760567,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1852,"yearMonth":"1852/09","yearMonthDay":"1852/09/00","dateNotes":null,"state":"California","place":"Auburn","county":"Placer","locationNotes":"Using GNIS Old Auburn Historic District","crowdType":"Turned over to his countrymen","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"robbing a store","punishment":"Whipped","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":null,"suspectRaces":"Chinese (\"Celestial\")","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":null,"victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"AC 9-19-52 p 2","oldNotes":null,"origDBindex":"160"},{"caseNum":161,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"37.9595012","lonDecimal":-121.2927574,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1852,"yearMonth":"1852/10","yearMonthDay":"1852/10/12","dateNotes":null,"state":"California","place":"Stockton","county":"San Joaquin","locationNotes":"using coordinates for intersection of Center and Park Street","crowdType":"Boys around the neighborhood","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Robbery","punishment":"Hanged to extort confession; eventually remanded","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":null,"suspectRaces":"Black","confession":"confessed","suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"AC 10-17-52 p 1","oldNotes":null,"origDBindex":"161"},{"caseNum":162,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"39.0054554","lonDecimal":-120.7535407,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1852,"yearMonth":"1852/09","yearMonthDay":"1852/09/28","dateNotes":null,"state":"California","place":"American Bar","county":"El Dorado","locationNotes":"Newspaper report is from Americanville; Trial took place at American Bar in El Dorado County, across the American River from Placer County","crowdType":"People's Jury appointedCourt","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Assault and battery","punishment":"Acquitted","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":null,"suspectRaces":"White","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":null,"victimGenders":"Male","victimRaces":"Chinese","victimNotes":null,"oldSources":"SDU 10-9-52 p2c5","oldNotes":null,"origDBindex":"162"},{"caseNum":163,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"38.8637883","lonDecimal":-121.0566115,"latNDegrees":38,"latNMinutes":51,"latNSeconds":50,"lonWDegrees":120,"lonWMinutes":3,"lonWSeconds":20,"year":1852,"yearMonth":"1852/10","yearMonthDay":"1852/10/14","dateNotes":null,"state":"California","place":"Oregon Bar","county":"El Dorado","locationNotes":"from report near Pilot Hill; thus El Dorado Co location selected","crowdType":"Crowd","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Robbing a cabin of $200","punishment":"Hanged to extort confession; eventually released","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Walden, from Virginia","suspectRaces":"White","confession":"hanging did not succeed","suspectNotes":null,"victimNumber":"1","victimNames":"Dr. Parker","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"AC 10-19-52 p 2\nHHB, PT, I: 174;\nSDU 10-30-52 p 3","oldNotes":null,"origDBindex":"163"},{"caseNum":164,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"38.7199452","lonDecimal":-121.1384269,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1852,"yearMonth":"1852/10","yearMonthDay":"1852/10/28","dateNotes":null,"state":"California","place":"Beall's Bar","county":"Placer","locationNotes":"now under folsom lake; estimated coords from GNIS map of Folsom Lake out from Beals Point","crowdType":"Arrested, tried and convicted","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"stealing money","punishment":"Whipped and banished","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":null,"suspectRaces":"Sydney Duck","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":"Mr. Arnold","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"SDU 10-30-52 p 3","oldNotes":null,"origDBindex":"164"},{"caseNum":165,"cwIndex":"C-W 24","gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"34.0948334","lonDecimal":-118.0990757,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1852/12","yearMonthDay":"1852/12/05","dateNotes":null,"state":"California","place":"Los Angeles","county":"Los Angeles","locationNotes":"CHECK LOCATION COORDINATES; SHOULD BE gallows on Fort Hill aka Prospect Hill","crowdType":"Committee appointed by the people","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Reyes Feliz","suspectRaces":"Mexican","confession":"Confessed to crimes at execution but denied involvement in murder of Gen. Bean. Attended by priest","suspectNotes":"16 years old","victimNumber":"1","victimNames":"Major General Joshua H. Bean; Feliz insised innocent of Bean's murder; admitted to murdering Anselmo Marias a year earlier at Sonora","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":null,"oldNotes":null,"origDBindex":"165"},{"caseNum":166,"cwIndex":"C-W 25","gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"34.0948334","lonDecimal":-118.0990757,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1852,"yearMonth":"1852/11","yearMonthDay":"1852/11/27","dateNotes":null,"state":"California","place":"Los Angeles","county":"Los Angeles","locationNotes":"CHECK LOCATION COORDINATES; SHOULD BE gallows on Fort Hill aka Prospect Hill","crowdType":"Jury of 12 men appointed by the people","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":3,"suspectNames":"Cipriano Sandoval\nBenito Lopez\nBarumas","suspectRaces":"Mexicans (Sandoval and Lopez)\nSonorian (Barumas)","confession":"Insisted on innocence; Barumas criticized summary justice and advised all Mexicans to leave for Sonora","suspectNotes":null,"victimNumber":"4","victimNames":"Major General Joshua H. Bean (Sandoval);\nSoas and Mary (Lopez)\nCountryman (Unnamed/Barumas)","victimGenders":"3 Males\n1 Female","victimRaces":"White (Bean, killed by Sandoval):\nIndian (Soas, killed by Lopez);\nMulatto (Mary, killed by Lopez);","victimNotes":"Bean brother of Judge Roy Bean;\nMary (mulatto) property of Mr. Thompson ","oldSources":"HHB, PT, I: 491-493; \"Vigilantism in Los Angeles,\" Southern California Quarterly, LIV (1972) 16-17\nLA Star 11/27/52 p2c2\nBell, Rem Ranger, 27-29","oldNotes":null,"origDBindex":"166"},{"caseNum":167,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"38.6765706","lonDecimal":-121.6349597,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1852,"yearMonth":"1852/11","yearMonthDay":"1852/11/27","dateNotes":null,"state":"California","place":"Fremont","county":"Yolo","locationNotes":"at mouth of Feather River","crowdType":"Trial of man captured immediately held","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Attempted murder/ assault","punishment":"Escaped","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":null,"suspectRaces":"White","confession":null,"suspectNotes":null,"victimNumber":"8 or 9","victimNames":"Dr. Covell and Mr. Crow named as assaulted","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"AC 12-1-52 p 1","oldNotes":null,"origDBindex":"167"},{"caseNum":168,"cwIndex":"check date","gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"41.7292557","lonDecimal":-122.6311481,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1853,"yearMonth":"1853/12","yearMonthDay":"1853/12/00","dateNotes":null,"state":"California","place":"Yreka","county":"Siskiyou","locationNotes":null,"crowdType":"Some parties from Greenhorn Creek","crowdSize":null,"open":"Open","oldAuthorities":"Took suspect from prison","crime":"Murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":null,"suspectRaces":"Frenchman","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":"citizen","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"HHB, PT, I: 533-34;\nAC 12-5-53","oldNotes":"HHB Oct 53; AC early December 53 (?)","origDBindex":"168"},{"caseNum":169,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"38.2229735","lonDecimal":-120.8910497,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1852,"yearMonth":"1852/12","yearMonthDay":"1852/12/23","dateNotes":null,"state":"California","place":"Winter's Bar","county":"Calaveras","locationNotes":"Gudde CMC 373-374 aka Winter Bar","crowdType":"doesn't say","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"swindle sale of gold duest","punishment":"Whipped","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":null,"suspectRaces":"Chinese","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":null,"victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"AC 12-23-52 p?","oldNotes":null,"origDBindex":"169"},{"caseNum":170,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"32.7092182","lonDecimal":-117.1711445,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1852,"yearMonth":"1852/12","yearMonthDay":"1852/12/00","dateNotes":null,"state":"California","place":"San Diego","county":"San Diego","locationNotes":"Using GNIS Seaport Village(?)","crowdType":"Brought before the \"people\"","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"prowling around the mission","punishment":"Whipped, 75 lashes; head shaved; remanded but escaped","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Jose Delores Velaszuez","suspectRaces":"Mexican","confession":null,"suspectNotes":"Had been accused of attempted rape of 90 year old woman a year earlier","victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"AC 12-31-52 p 2","oldNotes":null,"origDBindex":"170"},{"caseNum":171,"cwIndex":null,"gdIndex":"G-D- 62 has date as 12/25/52","crossRefNotesCwGd":null,"latDecimal":"38.6729595","lonDecimal":-121.6266261,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1852,"yearMonth":"1852/12","yearMonthDay":"1852/12/21","dateNotes":null,"state":"California","place":"Sacramento","county":"Sacramento","locationNotes":"estimated/guessed to be 12 MILES ABOVE SACRAMENTO ON THE RIVER","crowdType":"Respectiable citizens of that portion of the country","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"William K. Jones","suspectRaces":"White","confession":"Protested informal proceedings","suspectNotes":null,"victimNumber":"1","victimNames":"Peter McGaffigan, of Pennsylvania","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"AC 1-1-53 p 2","oldNotes":null,"origDBindex":"171"},{"caseNum":172,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"39.0293428","lonDecimal":-120.8616029,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1852,"yearMonth":"1852/03","yearMonthDay":"1852/03/25","dateNotes":null,"state":"California","place":"Yankee Jim","county":"Placer","locationNotes":"between the middle and north fork of American River","crowdType":"Populace excited; crowd assembled","crowdSize":"300-400","open":"Open","oldAuthorities":"Seiozed injured Edmonson from Vigilance Committee","crime":"Murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"James Edmonson, aka \"Jim Ugly,\" from Hopkins County, Kentucky","suspectRaces":"White","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":"Samuel Chamberlain, from New Hampshire","victimGenders":"Male","victimRaces":"White","victimNotes":"kept Bar at Indian Queen, \"house of ill fame\"","oldSources":"HHB, PT, I: 525","oldNotes":null,"origDBindex":"172"},{"caseNum":173,"cwIndex":"C-W 27 Mexican suspect","gdIndex":"G-D 66? Mexican suspect","crossRefNotesCwGd":null,"latDecimal":"38.1446994","lonDecimal":-120.4347513,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1853,"yearMonth":"1853/01","yearMonthDay":"1853/01/08","dateNotes":null,"state":"California","place":"Murphey's Gulch","county":"Calaveras","locationNotes":"Using Murphys for Calaveras Co","crowdType":"Miners of Murphy's Gulch assembled","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"robbery--tools and other property","punishment":"Whipped, 25 lashes, and banished","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Christopher Ferril","suspectRaces":"Sydney Duck","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":"Mr. Williams","victimGenders":"male","victimRaces":"white","victimNotes":null,"oldSources":"HHB, PT, I: 529","oldNotes":null,"origDBindex":"173"},{"caseNum":174,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"36.973381","lonDecimal":-122.0355319,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1853,"yearMonth":"1853/01","yearMonthDay":"1853/01/11","dateNotes":null,"state":"California","place":"Santa Cruz","county":"Santa Cruz","locationNotes":null,"crowdType":"Vigilance Committee","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"theft, a watch and other items","punishment":"Whipped, 1 20 lashes, other 25 lashes, and banished","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":2,"suspectNames":null,"suspectRaces":"White","confession":"one confessed and implicated his comrad","suspectNotes":"sailors","victimNumber":"1","victimNames":null,"victimGenders":"male","victimRaces":"white","victimNotes":null,"oldSources":"HHB, PT, I: 477;\nAC 1-18-53 p 2","oldNotes":null,"origDBindex":"174"},{"caseNum":175,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"36.973381","lonDecimal":-122.0355319,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1853,"yearMonth":"1853/01","yearMonthDay":"1853/01/11","dateNotes":null,"state":"California","place":"Santa Cruz","county":"Santa Cruz","locationNotes":null,"crowdType":"Vigilance Committee","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"stealing money","punishment":"Whipped, 48 lashes, and banished","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":null,"suspectRaces":"White","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":null,"victimGenders":"male","victimRaces":"white","victimNotes":null,"oldSources":"AC 1-18-53 p 2","oldNotes":null,"origDBindex":"175"},{"caseNum":176,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"39.3879458","lonDecimal":-121.2549603,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1853,"yearMonth":"1853/01","yearMonthDay":"1853/01/15","dateNotes":null,"state":"California","place":"Lyon's Ranch","county":"Yuba","locationNotes":"Estimated/Guessed LOCATION; using coordinates for Frenchtown, nearby according to reports","crowdType":"Party of 8","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Threatening vengeance upon whites for raid that had killed 18-20 Indians","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":null,"suspectRaces":"Indian","confession":null,"suspectNotes":"Old Chief","victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"AC 1-22-53 p?","oldNotes":null,"origDBindex":"176"},{"caseNum":177,"cwIndex":"C-W 31 has date as 2/15/53; Antonio Valencia","gdIndex":"G-D 70 has date as 2/15/53; Antonio Valencia","crossRefNotesCwGd":null,"latDecimal":"38.3484545","lonDecimal":-120.7723673,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1853,"yearMonth":"1853/02","yearMonthDay":"1853/02/15","dateNotes":null,"state":"California","place":"Jackson","county":"Amador","locationNotes":null,"crowdType":"Citizens of the place","crowdSize":null,"open":"Open","oldAuthorities":"people broke into jail and seized suspect","crime":"one of a party of robbers","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Antonio Valencia","suspectRaces":"Mexican","confession":"refused to confess","suspectNotes":"part of Joaquin's banc","victimNumber":null,"victimNames":"Chinese","victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"AC 2-18-53 p 2","oldNotes":null,"origDBindex":"177"},{"caseNum":178,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"38.3479691","lonDecimal":-120.7007658,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1853,"yearMonth":"1853/01","yearMonthDay":"1853/01/15","dateNotes":null,"state":"California","place":"Secreto Diggings","county":"Amador","locationNotes":"See http://www.amadorgold.net/tours/oldschools/milliganschool/\nUsing Milligan District (Historical) for coordinates","crowdType":"The Americans in the vicinity","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Murder","punishment":"Banished","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":6,"suspectNames":null,"suspectRaces":"Italians","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":null,"victimGenders":"Male","victimRaces":"Italism","victimNotes":null,"oldSources":"AC 1-26-53 p 2","oldNotes":null,"origDBindex":"178"},{"caseNum":179,"cwIndex":"C-W 26","gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"38.1621419","lonDecimal":-120.648541,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1853,"yearMonth":"1853/01","yearMonthDay":"1853/01/27","dateNotes":null,"state":"California","place":"Yankee Camp or Yankeeville","county":"Calaveras","locationNotes":"also known as Yaqui Camp; estimating coordinates from Dunham p824, which places Yaqui Camp near San Andreas","crowdType":"Armed party","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"horse stealing","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":2,"suspectNames":"Big Bill? (C-W Sac Daily Democratic State Journal, 1-31-53)","suspectRaces":"Mexican","confession":null,"suspectNotes":"C-W list only one suspect; Doten writes that 2 were hanged","victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"AC 1-29-53 p 2","oldNotes":null,"origDBindex":"179"},{"caseNum":180,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"38.575697","lonDecimal":-121.509073,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1853,"yearMonth":"1853/01","yearMonthDay":"1853/01/27","dateNotes":null,"state":"California","place":"Sacramento","county":"Sacramento","locationNotes":"Using coordinates for intersection of Q and Front St.","crowdType":"Jury selected from crowd","crowdSize":"2000","open":"Open","oldAuthorities":null,"crime":"Abuse of a corpse (actual offense unstated; described as \"unnatural\" and \"profane\")","punishment":"Whipped, 104 lashes","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Conrad Sacksin","suspectRaces":"Swiss","confession":null,"suspectNotes":"Cook in a German Boardinghouse","victimNumber":"1","victimNames":"unnamed","victimGenders":"Female","victimRaces":"White","victimNotes":"wife of proprietor of Boardinghouse where Sacksin worked as cook","oldSources":"HHB, PT, I: 448;\nAC 1-30-53 p 2\nWAC 1853-02-05 p3","oldNotes":null,"origDBindex":"180"},{"caseNum":181,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"37.75138889","lonDecimal":-121.3083333,"latNDegrees":37,"latNMinutes":45,"latNSeconds":5,"lonWDegrees":121,"lonWMinutes":18,"lonWSeconds":30,"year":1853,"yearMonth":"1853/02","yearMonthDay":"1853/02/02","dateNotes":null,"state":"California","place":"Harding's Rancho","county":"San Joaquin","locationNotes":"narrow down; from San Joaquin News in AC; Harding's ranch two miles \"this side\" of Bonsell's Ferry; estimated 2 miles (Google Maps) nort--towards Stockton, from Bonsell's Ferry","crowdType":"jury of citizens","crowdSize":null,"open":"Open","oldAuthorities":"Harding's ranch, about 1 mile \"this side of\" Bonsell's Ferry, meaning towards Stockton presumably.","crime":"Murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":null,"suspectRaces":"Mexican","confession":"Confessed; said that Indian victim had killed his brother","suspectNotes":null,"victimNumber":"1","victimNames":null,"victimGenders":"Male","victimRaces":"Indian","victimNotes":null,"oldSources":"AC 2-5-53 p 2","oldNotes":null,"origDBindex":"181"},{"caseNum":182,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"34.0948334","lonDecimal":-118.0990757,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1853,"yearMonth":"1853/02","yearMonthDay":"1853/02/08","dateNotes":null,"state":"California","place":"San Gabriel","county":"Los Angeles","locationNotes":null,"crowdType":"small number of persons investigated the evidence against the suspect","crowdSize":null,"open":"Open","oldAuthorities":"taken from jail","crime":"horse stealing","punishment":"Whipped, 78 lashes","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Smith, \"real name Isaac D. Martin\"","suspectRaces":"White","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":"Hildreth","victimGenders":"male","victimRaces":"white","victimNotes":null,"oldSources":"LA Star 2/12/53 p 2","oldNotes":null,"origDBindex":"182"},{"caseNum":183,"cwIndex":"C-W 30","gdIndex":"G-D 68?","crossRefNotesCwGd":null,"latDecimal":"36.8455963","lonDecimal":-121.5382382,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1853,"yearMonth":"1853/04","yearMonthDay":"1853/04/08","dateNotes":null,"state":"California","place":"San Juan","county":"Monterey","locationNotes":"Using San Juan Bautista","crowdType":"By the people","crowdSize":null,"open":"Open","oldAuthorities":"Suspect seized from Jail in Monterey according to HHB","crime":"horse stealing","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":2,"suspectNames":null,"suspectRaces":"Mexican","confession":null,"suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"HHB, PT, I: 529-530","oldNotes":null,"origDBindex":"183"},{"caseNum":184,"cwIndex":"C-W 69","gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"38.682552","lonDecimal":-120.848518,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1853,"yearMonth":"1853/02","yearMonthDay":"1853/02/11","dateNotes":null,"state":"California","place":"Mud Springs","county":"El Dorado","locationNotes":"Gudde CGC 230 El Dorado since 1855; Mud Springs original name of El Dorado, El Dorado County. See http://www.sierranevadageotourism.org/content/el-dorado-originally-mud-springs-no-486-california-historic-landmark/sie8962F6E24D988A588","crowdType":"mob","crowdSize":null,"open":"Open","oldAuthorities":"Seized from the authorities","crime":"Robbery $900","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":3,"suspectNames":null,"suspectRaces":"Chinese","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":"shopkeeper","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"HHB, PT, I: 530","oldNotes":null,"origDBindex":"184"},{"caseNum":186,"cwIndex":"C-W 32","gdIndex":"G-D 71","crossRefNotesCwGd":null,"latDecimal":"38.1960298","lonDecimal":-120.6804872,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1853,"yearMonth":"1853/02","yearMonthDay":"1853/02/20","dateNotes":null,"state":"California","place":"San Andreas","county":"Calaveras","locationNotes":"Gudde CGC 303-304","crowdType":"gave a full confession","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"part of Joaquin's party","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Juan Sanchez C-W 2/20/53; citingPlacer Herald 3/5/53)","suspectRaces":"Mexican/Latino","confession":"gave a full confession","suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"AC 2-24-53 p 2","oldNotes":null,"origDBindex":"186"},{"caseNum":187,"cwIndex":null,"gdIndex":"G-D 73","crossRefNotesCwGd":null,"latDecimal":"39.2048905","lonDecimal":-122.0095752,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1853,"yearMonth":"1853/03","yearMonthDay":"1853/03/00","dateNotes":null,"state":"California","place":"Colusa","county":"Colusa","locationNotes":null,"crowdType":null,"crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"John Boyd","suspectRaces":"White","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":"Jo Gauthreaux","victimGenders":"Male","victimRaces":"White","victimNotes":"keeper of ten-pin alley","oldSources":"AC 3-9-53 p 2","oldNotes":null,"origDBindex":"187"},{"caseNum":188,"cwIndex":"C-W 74?","gdIndex":"G-D 63?","crossRefNotesCwGd":null,"latDecimal":"40.7941276","lonDecimal":-124.1568562,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1853,"yearMonth":"1853/03","yearMonthDay":"1853/03/10","dateNotes":null,"state":"California","place":"Eureka","county":"Humboldt","locationNotes":null,"crowdType":"full court and jury","crowdSize":"large concourse of miners and citizens","open":"Open","oldAuthorities":null,"crime":"Murder and robbery","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":2,"suspectNames":"George McDonald\nC Kanaska (or Canosky (HHB))","suspectRaces":"White","confession":"McDonald confessed fully","suspectNotes":null,"victimNumber":"2","victimNames":"Mitchell (or Litchele) and nephew","victimGenders":"Male","victimRaces":"White","victimNotes":"HHB: Jews age 40 and 17","oldSources":"AC 3-14-53 p 2","oldNotes":null,"origDBindex":"188"},{"caseNum":189,"cwIndex":null,"gdIndex":"G-D 75","crossRefNotesCwGd":null,"latDecimal":"40.6000725","lonDecimal":-122.4924721,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1853,"yearMonth":"1853/04","yearMonthDay":"1853/04/06","dateNotes":null,"state":"California","place":"Shasta","county":"Shasta","locationNotes":null,"crowdType":"Jury formed and trial held","crowdSize":null,"open":"Open","oldAuthorities":"Sheriff relinquished suspect to crowd","crime":"Murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"James Noland or Knolan","suspectRaces":"White","confession":null,"suspectNotes":"Gambler","victimNumber":"1","victimNames":"Alexander Murdock","victimGenders":"Male","victimRaces":"White","victimNotes":"Trader","oldSources":"HHB, PT, I: 530;\nAC 4-10-53 p 2","oldNotes":null,"origDBindex":"189"},{"caseNum":190,"cwIndex":"C-W 33","gdIndex":null,"crossRefNotesCwGd":"1; only HHB","latDecimal":"38.0170867","lonDecimal":-122.1362729,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1853,"yearMonth":"1853/04","yearMonthDay":"1853/04/00","dateNotes":null,"state":"California","place":"Martinez","county":"Contra Costa","locationNotes":null,"crowdType":null,"crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Horse theft","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":2,"suspectNames":null,"suspectRaces":"Mexican","confession":null,"suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"HHB, PT, I: 530","oldNotes":null,"origDBindex":"190"},{"caseNum":191,"cwIndex":null,"gdIndex":"G-D 76","crossRefNotesCwGd":null,"latDecimal":"38.8343457","lonDecimal":-120.8157679,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1853,"yearMonth":"1853/05","yearMonthDay":"1853/05/23","dateNotes":null,"state":"California","place":"American Flat","county":"El Dorado","locationNotes":"3 or 4 miles from Coloma","crowdType":"Large number of miners","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Instigating a murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":null,"suspectRaces":"Mexican","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":"Jefferey Lewis, from Missouri","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"HHB, PT, I: 531","oldNotes":null,"origDBindex":"191"},{"caseNum":192,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"2 incidents?","latDecimal":"38.4410213","lonDecimal":-120.8543816,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1853,"yearMonth":"1853/06","yearMonthDay":"1853/06/18","dateNotes":null,"state":"California","place":"Drytown","county":"Calaveras","locationNotes":"shouldn't this be amador co? ","crowdType":"was sentenced","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Robbery, $400","punishment":"Whipped, 25 lashes and have his queue cut off, then turned over to countrymen, who again whipped him, cut off his ear, and shot him","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":null,"suspectRaces":"Chinese","confession":null,"suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"LA Star 6-18-53 p 2","oldNotes":null,"origDBindex":"192"},{"caseNum":193,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"38.3004709","lonDecimal":-120.7063219,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1853,"yearMonth":"1853/06","yearMonthDay":"1853/06/00","dateNotes":null,"state":"California","place":"Mokelumne Hill","county":"Calaveras","locationNotes":null,"crowdType":"4 men, McKee Raney, Joseph Kirk, and 2 member of Kirk family","crowdSize":"4","open":"Open","oldAuthorities":null,"crime":"Stock theft","punishment":"Whipped","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":null,"suspectRaces":"Mexican","confession":null,"suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"HHB, PT, I: 531-532","oldNotes":null,"origDBindex":"193"},{"caseNum":194,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"39.3293363","lonDecimal":-121.1966241,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1853,"yearMonth":"1853/07","yearMonthDay":"1853/07/06","dateNotes":null,"state":"California","place":"Condemned Bar","county":"Yuba","locationNotes":"Condemned Bar historical place in GNIS is French Corral","crowdType":"Tried by a jury","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Antonio Marto","suspectRaces":"Mexican","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":"Vivian","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"HHB, PT, I: 532","oldNotes":null,"origDBindex":"194"},{"caseNum":195,"cwIndex":"C-W 37","gdIndex":"G-D 77 or G-D 78?","crossRefNotesCwGd":null,"latDecimal":"38.3484545","lonDecimal":-120.7723673,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1853,"yearMonth":"1853/07","yearMonthDay":"1853/07/25","dateNotes":null,"state":"California","place":"Jackson","county":"Amador","locationNotes":null,"crowdType":"Judge Lynch and a goodly number of his b'hoys","crowdSize":null,"open":"Open","oldAuthorities":"taken from legal officer","crime":"theft of two horses and a mule","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Polonia Sanchez","suspectRaces":"Chilian","confession":"Partial confession; attended by Catholic clergy","suspectNotes":null,"victimNumber":"2-5","victimNames":null,"victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"HHB, PT, I: 530;\nAC 7-28-53 p 2","oldNotes":null,"origDBindex":"195"},{"caseNum":196,"cwIndex":null,"gdIndex":"G-D 80","crossRefNotesCwGd":null,"latDecimal":"36.973381","lonDecimal":-122.0355319,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1853,"yearMonth":"1853/08","yearMonthDay":"1853/08/17","dateNotes":null,"state":"California","place":"Santa Cruz","county":"Santa Cruz","locationNotes":null,"crowdType":"Citizens","crowdSize":null,"open":"Open","oldAuthorities":"proceeded to jail, tookhm out, and hung him on the spot","crime":"Murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"John Clare","suspectRaces":"Scotsman","confession":"acknowledged the crime","suspectNotes":null,"victimNumber":"1","victimNames":"Andrew Cracovitch","victimGenders":"Male","victimRaces":"Hungarian","victimNotes":"fisherman","oldSources":"SF Daily Evening Herald 8-22-53 p 2","oldNotes":null,"origDBindex":"196"},{"caseNum":197,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"estimated location\n\nLynching or Indian massacre?","latDecimal":"40.666604","lonDecimal":-122.9292619,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1853,"yearMonth":"1853/08","yearMonthDay":"1853/08/22","dateNotes":null,"state":"California","place":"Trinity River","county":"Shasta","locationNotes":"CHANGE LOCATION. Party of 20-25 whites pursued Indians to Trinity River. Location roughly estimated near Trinity River NW of Potato Hill, Tehama County","crowdType":"Party of 20-25 whites","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Murder","punishment":"Shot","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":null,"suspectRaces":"Indian","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":"M. Nicholson","victimGenders":"Male","victimRaces":"White","victimNotes":"trader","oldSources":"SF Daily Evening Herald, 8-24-53 p 2","oldNotes":null,"origDBindex":"197"},{"caseNum":198,"cwIndex":"C-W 38 has date as 8/12/53 ","gdIndex":"G-D 79 has date as 8/12/53","crossRefNotesCwGd":null,"latDecimal":"39.7401714","lonDecimal":-120.9088398,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1853,"yearMonth":"1853/08","yearMonthDay":"1853/08/12","dateNotes":null,"state":"California","place":"Gibsonville","county":"Sierra","locationNotes":null,"crowdType":"Jury, prosecutor, counsel for defense","crowdSize":"1500-2000","open":"Open","oldAuthorities":"taken from jail","crime":"Murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Jesus Evarra, aka \"Spanish Charley\" or \"Charley the Bullfighter\"","suspectRaces":"Spaniard","confession":"Insisted on innocence","suspectNotes":null,"victimNumber":"1","victimNames":"Jacob Mariner","victimGenders":"Male","victimRaces":"White","victimNotes":"citizen butcher","oldSources":"HHB, PT, I: 533\nLA Star 1853-08-20","oldNotes":null,"origDBindex":"198"},{"caseNum":199,"cwIndex":"C-W 41 Has date a 10/13/53 ","gdIndex":"G-D 83? Has date a 10/13/53","crossRefNotesCwGd":null,"latDecimal":"35.2670731","lonDecimal":-120.6689034,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1853,"yearMonth":"1853/10","yearMonthDay":"1853/10/04","dateNotes":null,"state":"California","place":"San Luis Obispo","county":"San Luis Obispo","locationNotes":null,"crowdType":"Citizens of that place took suspects from ship carrying them from LA and hung them.","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Murder and Horse thieving","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":3,"suspectNames":"Anastacio Higuerre, aka Ignacio Ygarra, aka Juan Higuera\nManuel Olivas, aka Manuel Olibas, aka Manuel Verdez\nRamon Espinosa, aka Ramon Espagnol","suspectRaces":"Mexican","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":"Juan Ignacio Valdenado","victimGenders":"Male","victimRaces":"Mexican/ Latino","victimNotes":null,"oldSources":"LA Star 10-22-53 p 2;\nLA Star 12-10-53 p 2;\nAC 10-11-53 p 3","oldNotes":null,"origDBindex":"199"},{"caseNum":200,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"40.0109982","lonDecimal":-121.1930184,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1853,"yearMonth":"1853/10","yearMonthDay":"1853/10/09","dateNotes":null,"state":"California","place":"Rich Bar","county":"Plumas","locationNotes":null,"crowdType":"Jury of 12 men","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Murder","punishment":"Banished","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Prasey","suspectRaces":"White","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":"Hiildreth","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"SF Daily Evening Herald, 10-14-53 p 2","oldNotes":null,"origDBindex":"200"},{"caseNum":201,"cwIndex":"C-W 39? 7 Mexicans hanged in SLO 9/0/53","gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"35.2670731","lonDecimal":-120.6689034,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1853,"yearMonth":"1853/10","yearMonthDay":"1853/10/00","dateNotes":null,"state":"California","place":"San Luis Obispo","county":"San Luis Obispo","locationNotes":null,"crowdType":null,"crowdSize":null,"open":"Open","oldAuthorities":"Hung in the jail","crime":"Horse stealingand murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":null,"suspectRaces":"Mexican","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":"Juan Ignacio Valdenado","victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"LA Star 12-10-53 p 2","oldNotes":null,"origDBindex":"201"},{"caseNum":202,"cwIndex":null,"gdIndex":"G-D 82","crossRefNotesCwGd":null,"latDecimal":"41.7292557","lonDecimal":-122.6311481,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1853,"yearMonth":"1853/11","yearMonthDay":"1853/11/00","dateNotes":null,"state":"California","place":"Yreka","county":"Siskiyou","locationNotes":null,"crowdType":null,"crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"forced wife into prostitution","punishment":"tarred and feathered","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":null,"suspectRaces":"White","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":null,"victimGenders":"Female","victimRaces":"White","victimNotes":null,"oldSources":"LA Star 11-12-53 p 1","oldNotes":null,"origDBindex":"202"},{"caseNum":203,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"38.0352009","lonDecimal":-120.4007505,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1853,"yearMonth":"1853/10","yearMonthDay":"1853/10/12","dateNotes":null,"state":"California","place":"Columbia","county":"Tuolumne","locationNotes":null,"crowdType":"Crowd of 60-70","crowdSize":null,"open":"Open","oldAuthorities":"Assemblage took criminals from constable","crime":"Robbery $1200","punishment":"Remanded to authorities after hanging to extort confession; countrymen offered bail and compensation for theft","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":2,"suspectNames":null,"suspectRaces":"Frenchmen","confession":"brief hanging by American miners failed; suspects insisted on innocence","suspectNotes":null,"victimNumber":"2","victimNames":null,"victimGenders":"Male","victimRaces":"Irish","victimNotes":null,"oldSources":"HHB, PT, I: 533","oldNotes":null,"origDBindex":"203"},{"caseNum":205,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"HHB Only","latDecimal":"38.3004709","lonDecimal":-120.7063219,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1853,"yearMonth":"1853/11","yearMonthDay":"1853/11/00","dateNotes":null,"state":"California","place":"Mokelumne Hill","county":"Calaveras","locationNotes":null,"crowdType":null,"crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"theft of gold from sluice","punishment":"Whipped, 50 lashes each; queues cut off","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":2,"suspectNames":null,"suspectRaces":"Chinese","confession":null,"suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"HHB, PT, I: 534-535","oldNotes":null,"origDBindex":"205"},{"caseNum":207,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"37.349104","lonDecimal":-120.9754833,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1855,"yearMonth":"1855/01","yearMonthDay":"1855/01/22","dateNotes":null,"state":"California","place":"Turners Ferry","county":"Merced","locationNotes":"coordinates for intersection of San Joaquin and Merced Rivers, per History of Merced County, p 208: \"crossing the Merced River at Turner's Ferry,Turner's ferry on the San Joaquin.\"  Originally in Contra Costa County; currently in Stnislaus County","crowdType":"Tried by 27 men","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Horse stealing","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":3,"suspectNames":"Salvador Valdez\nJose Arode (or Stode)\nJuan P. Gonzalez","suspectRaces":"Californian (Valdez)\nChileno (Arode [Stode] and Gonzalez)","confession":"Valdez confessed  numerous crimes, including murder of 7 menb; Chilenos \"begged hard for life, but in vain\"","suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"HHB, PT, I: 542-543","oldNotes":null,"origDBindex":"207"},{"caseNum":208,"cwIndex":"C-W 43","gdIndex":"G-D 89 or G-D 90, dated 2/17/54","crossRefNotesCwGd":null,"latDecimal":"37.56805556","lonDecimal":120.1180556,"latNDegrees":37,"latNMinutes":34,"latNSeconds":5,"lonWDegrees":120,"lonWMinutes":7,"lonWSeconds":5,"year":1854,"yearMonth":"1854/02","yearMonthDay":"1854/02/18","dateNotes":null,"state":"California","place":"Bear Valley","county":"Mariposa","locationNotes":"Near Quartzburg (Hornitos); using coordinates for village of Bear Valley (Durham p744)","crowdType":"Lynch party, tried, convicted, and hanged suspects","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":2,"suspectNames":null,"suspectRaces":"Mexican and Chilian","confession":"1 (mexican) confessed","suspectNotes":null,"victimNumber":"1","victimNames":"Nathan Pratt, native of Maine who had lived in New Hampshire","victimGenders":"Male","victimRaces":"White","victimNotes":"old man 50-60 years of age","oldSources":"HHB, PT, I: 540;\nAC 2-19-54 p 2","oldNotes":null,"origDBindex":"208"},{"caseNum":209,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"38.0352009","lonDecimal":-120.4007505,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1853,"yearMonth":"1853/11","yearMonthDay":"1853/11/13","dateNotes":null,"state":"California","place":"Columbia","county":"Tuolumne","locationNotes":null,"crowdType":"excited multitude","crowdSize":null,"open":"Open","oldAuthorities":"Seized from jaill and tried by people; remanded because victim still lived","crime":"Assault/attempted murder","punishment":"Remanded to authorities","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Peter Nicolas","suspectRaces":"Austrian","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":"John Parrott","victimGenders":"Male","victimRaces":"Other \"foreigner\"","victimNotes":null,"oldSources":"HHB, PT, I: 535-540","oldNotes":null,"origDBindex":"209"},{"caseNum":211,"cwIndex":null,"gdIndex":"G-D 91 dated as 3/15","crossRefNotesCwGd":null,"latDecimal":"38.3484545","lonDecimal":-120.7723673,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1854,"yearMonth":"1854/03","yearMonthDay":"1854/03/23","dateNotes":null,"state":"California","place":"Jackson","county":"Amador","locationNotes":null,"crowdType":"Party of citizens","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Robbery--Stock","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Swarz or Schwartz, aka Christopher Bennett (SDU says he was a Dutchman), about 30 years old","suspectRaces":"Swiss (HHB); Dutch (SDU)","confession":null,"suspectNotes":null,"victimNumber":"2","victimNames":"Evans, White & Co.(AC); Evans and Askey (SDU)","victimGenders":"male","victimRaces":"white","victimNotes":null,"oldSources":"HHB, PT, I: 540\nAC 3-25-54 p 2","oldNotes":null,"origDBindex":"211"},{"caseNum":212,"cwIndex":null,"gdIndex":"G-D 92","crossRefNotesCwGd":null,"latDecimal":"38.291859","lonDecimal":-122.4580356,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1854,"yearMonth":"1854/05","yearMonthDay":"1854/05/30","dateNotes":null,"state":"California","place":"Sonoma","county":"Sonoma","locationNotes":"5 miles from Sonoma","crowdType":"Disguised horsemen","crowdSize":"25-30","open":"Secrret","oldAuthorities":"Suspect seized men taking him to jail in Sonoma","crime":"Robbery--3 mules","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"William Ritchie or Richie","suspectRaces":"White","confession":null,"suspectNotes":"about 25-30, a resident of Napa Valley, where his parents lived","victimNumber":"2","victimNames":"Hereford and Tarwater","victimGenders":"male","victimRaces":"white","victimNotes":null,"oldSources":"HHB, PT, I: 540-541","oldNotes":null,"origDBindex":"212"},{"caseNum":213,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"38.4607427","lonDecimal":-120.7029875,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1854,"yearMonth":"1854/06","yearMonthDay":"1854/06/29","dateNotes":null,"state":"California","place":"Upper Rancheria","county":"Amador","locationNotes":"Gudde CMC 283; using coords for rancheria. Check further","crowdType":"Hung by the people","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":2,"suspectNames":"Isaac and Henry","suspectRaces":"Indian","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":"W.B. Sumpton, from Ohio","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"SDU 7-15-54 p 2","oldNotes":null,"origDBindex":"213"},{"caseNum":214,"cwIndex":"C-W 46 and ","gdIndex":"G-D 93? Dates as 7/21/ 6/21;  san vicente rancho in santa clara county","crossRefNotesCwGd":null,"latDecimal":"37.3107158","lonDecimal":-121.9206516,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1854,"yearMonth":"1854/07","yearMonthDay":"1854/07/14","dateNotes":null,"state":"California","place":"San Jose","county":"Santa Clara","locationNotes":"Using coordinates for San Jose West; check coordinates for all Sta Clara","crowdType":"by persons unknown","crowdSize":null,"open":"Secret","oldAuthorities":null,"crime":"Murder (HHB--horse theft)","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Demasio Berriessa (SDU); Nemesio Berreyesa (HHB)","suspectRaces":"Californian","confession":null,"suspectNotes":"about 30 years old; lived on large and valuable tract near New Almaden mine; left wife and 3 children","victimNumber":"1","victimNames":"Alexander W. McClure","victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"HHB, PT, I: 476","oldNotes":null,"origDBindex":"214"},{"caseNum":215,"cwIndex":"C-W 44","gdIndex":null,"crossRefNotesCwGd":"2 (HHB only)","latDecimal":"38.3484545","lonDecimal":-120.7723673,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1854,"yearMonth":"1854/07","yearMonthDay":"1854/07/00","dateNotes":null,"state":"California","place":"Jackson","county":"Amador","locationNotes":null,"crowdType":null,"crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Horse stealing","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":null,"suspectRaces":"Mexican","confession":null,"suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"HHB, PT, I: 540","oldNotes":null,"origDBindex":"215"},{"caseNum":216,"cwIndex":"C-W 45","gdIndex":null,"crossRefNotesCwGd":"2 (HHB only)","latDecimal":"38.3484545","lonDecimal":-120.7723673,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1854,"yearMonth":"1854/07","yearMonthDay":"1854/07/00","dateNotes":null,"state":"California","place":"Jackson","county":"Amador","locationNotes":null,"crowdType":"Hung by the people","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Murder (killed brother in law","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":null,"suspectRaces":"Mexican","confession":"Asked to be shot but crowd hanged him","suspectNotes":"Killed his prother in law","victimNumber":"1","victimNames":null,"victimGenders":"Male","victimRaces":"Mexican","victimNotes":"brother in law of man who killed him","oldSources":"HHB, PT, I: 540","oldNotes":null,"origDBindex":"216"},{"caseNum":217,"cwIndex":null,"gdIndex":"G-D 94","crossRefNotesCwGd":null,"latDecimal":"37.857704","lonDecimal":-122.2555245,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1854,"yearMonth":"1854/08","yearMonthDay":"1854/08/23","dateNotes":null,"state":"California","place":"San Antonio","county":"Alameda","locationNotes":"check county in source; using Oakland West, which (among others) GNIS returns when entering San Antonio, Alameda Co; hanged at rear of Mansion House","crowdType":"Large body of men","crowdSize":null,"open":"Open","oldAuthorities":"Suspects seized from guards","crime":"Cattle stealing","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":2,"suspectNames":"Amadee Canu\nPierre Archambault","suspectRaces":"Beltian (Canu)\nFrench (Archambault)","confession":null,"suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"HHB, PT, I: 541-542\nAC 1854-09-01 p4\nAC 1854-09-01 p5\nCHECK AC 1854-09-01 p5","oldNotes":null,"origDBindex":"217"},{"caseNum":218,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"38.33325","lonDecimal":-123.0480571,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1854,"yearMonth":"1854/09","yearMonthDay":"1854/09/05","dateNotes":null,"state":"California","place":"Bodega","county":"Sonoma","locationNotes":"Changed Location from Russian River Ranch to Bodega","crowdType":"Citizens","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":3,"suspectNames":"Demas","suspectRaces":"Indian","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":"James Phenix","victimGenders":"Male","victimRaces":null,"victimNotes":null,"oldSources":"LA Star 9-21-54 p 2","oldNotes":null,"origDBindex":"218"},{"caseNum":219,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"37.4849377","lonDecimal":-119.9662843,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1854,"yearMonth":"1854/11","yearMonthDay":"1854/11/26","dateNotes":null,"state":"California","place":"Mariposa","county":"Mariposa","locationNotes":null,"crowdType":"Crowd","crowdSize":null,"open":"Open","oldAuthorities":"Seized from jail against efforts of sheriff","crime":"Murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Jack Roark","suspectRaces":"White","confession":"Confessed at hanging","suspectNotes":null,"victimNumber":"1","victimNames":"Horing","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"SDU 12-1-54 p 3;\nSDU 12-2-54 p 1;\nAC12-3-54 p 2","oldNotes":null,"origDBindex":"219"},{"caseNum":220,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"38.390748","lonDecimal":-120.8032717,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1854,"yearMonth":"1854/12","yearMonthDay":"1854/12/00","dateNotes":null,"state":"California","place":"Sutter Creek","county":"Amador","locationNotes":"Gudde CPN 381","crowdType":null,"crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"stealing $45","punishment":"Whipped, 25 lashes","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":null,"suspectRaces":"Chinese","confession":null,"suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"SDU 12-11-54 p 3","oldNotes":null,"origDBindex":"220"},{"caseNum":221,"cwIndex":null,"gdIndex":"G-D 96","crossRefNotesCwGd":null,"latDecimal":"38.4429658","lonDecimal":-120.6307628,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1854,"yearMonth":"1854/12","yearMonthDay":"1854/12/00","dateNotes":null,"state":"California","place":"Volcano","county":"Amador","locationNotes":"Gudde CMC 360-362; letter is from Jackson","crowdType":"crowd pursued murderer","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Macy","suspectRaces":"White","confession":null,"suspectNotes":"drunk","victimNumber":"1","victimNames":"McAllister, old man","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"HHB, PT, I: 542","oldNotes":null,"origDBindex":"221"},{"caseNum":222,"cwIndex":null,"gdIndex":"G-D 98","crossRefNotesCwGd":null,"latDecimal":"34.0726866","lonDecimal":-118.2130443,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1855,"yearMonth":"1855/01","yearMonthDay":"1855/01/12","dateNotes":null,"state":"California","place":"Los Angeles","county":"Los Angeles","locationNotes":null,"crowdType":"Mob","crowdSize":null,"open":"Open","oldAuthorities":"Suspect taken from jail by force, sheriff resisted. Brown had been granted stay of execution","crime":"Murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"David Brown","suspectRaces":"White","confession":null,"suspectNotes":"Brown convicted with Alvitre for murder; Brown granted stay while Alvitre was hanged (not a lynching). Brown convicted for killing Pinkney Clifford; Alvitre convicted for killing James Ellington.","victimNumber":"1","victimNames":"Pinkney Clifford (killed by Borwn);\n","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"HHB, PT, I: 494-496;\nLA Star 1-18-55 p 2;\n\"Vigilantism in Los Angeles,\" Southern California Quarterly, LIV (1972) 20-21\nLA Star 1/11/55 p2c1\nLA Star 1/18/55 p2c1\nNewmark, 60 Years, 139, 140, 141, 147\nBell Rem Ranger, 279","oldNotes":"Both Brown and Alvitre convicted of murder; Brown received a stay of execution, Alvitre did not. Crowd aregued both should die; Sheriff executed Alvitre. Crowd seized Brown and executed him\n\nWas Alvitre lynched?","origDBindex":"222"},{"caseNum":223,"cwIndex":null,"gdIndex":"G-D 101, dates as 1/20/55","crossRefNotesCwGd":null,"latDecimal":"37.9840911","lonDecimal":-120.3824381,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1855,"yearMonth":"1855/01","yearMonthDay":"1855/01/10","dateNotes":null,"state":"California","place":"Sonora","county":"Tuolumne","locationNotes":null,"crowdType":"enraged citizenry","crowdSize":null,"open":null,"oldAuthorities":"Suspect seized from sheriff after confessing to coroner's jury","crime":"Murder and robbery","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Edward Crane Griffiths","suspectRaces":"Englishman who arrived from Australia","confession":"Given freely; in AC report plus letters to wife","suspectNotes":null,"victimNumber":"1","victimNames":"Joseph Heslep, Treasurer of Tuolumne County","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"HHB, PT, I: 542;\nAC 1-21-55 p 2;\nLA Star 1-25-55 p 2","oldNotes":null,"origDBindex":"223"},{"caseNum":225,"cwIndex":null,"gdIndex":"G-D 103","crossRefNotesCwGd":null,"latDecimal":"40.1784886","lonDecimal":-122.2358302,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1855,"yearMonth":"1855/01","yearMonthDay":"1855/01/30","dateNotes":null,"state":"California","place":"Red Bluff","county":"Tehama","locationNotes":null,"crowdType":"ex parte examination by some citizens","crowdSize":null,"open":"open","oldAuthorities":null,"crime":"stealing a mule (later discovered he had purchased is)","punishment":"Hanged (asked to be shot)","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Williams, fro Rome NY, about 30 years old","suspectRaces":"White","confession":"insisted on innocence of the theft but admitted he had escaped from the penitentiary and had committed other crimse","suspectNotes":null,"victimNumber":"2","victimNames":"Connell, of Connell's Ranch in Colusi County, near Tehama","victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"AC 2-3-55 p 2","oldNotes":null,"origDBindex":"225"},{"caseNum":226,"cwIndex":null,"gdIndex":"G-D 100, dates as 1/3/55","crossRefNotesCwGd":null,"latDecimal":"37.8043722","lonDecimal":-122.2708026,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1855,"yearMonth":"1855/01","yearMonthDay":"1855/01/31","dateNotes":null,"state":"California","place":"Oakland","county":"Alameda","locationNotes":null,"crowdType":"crowd","crowdSize":null,"open":"Open","oldAuthorities":"crowd broke upen the jail and seized suspects","crime":"horse and cattle stealing","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"George Seldon (elsewhere Sheldon)","suspectRaces":"White","confession":"one of the two seized named others and was released by crowd","suspectNotes":null,"victimNumber":"1","victimNames":"Alderman Kelsey","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"HHB, PT, I: 544;\nLA Star 2-8-55 p 2 (2 articles?)\nAC 2-1-55 p 2","oldNotes":null,"origDBindex":"226"},{"caseNum":227,"cwIndex":null,"gdIndex":"G-D 97, dates as 12/24/54","crossRefNotesCwGd":"ADDITIONAL REPORTS; RECHECK","latDecimal":"39.1085091","lonDecimal":-120.8593823,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1854,"yearMonth":"1854/12","yearMonthDay":"1854/12/23","dateNotes":null,"state":"California","place":"Iowa Hill","county":"Placer","locationNotes":null,"crowdType":"Jury of the people; mob","crowdSize":"1500","open":"Open","oldAuthorities":null,"crime":"Assault with intent to kill","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"William M. Johnson","suspectRaces":"White","confession":"denounced mob law at gallows","suspectNotes":"Age 24; in CA 5 years, from NYC","victimNumber":"1","victimNames":"Thomas Montgomery","victimGenders":"Male","victimRaces":"White","victimNotes":"survived the attack","oldSources":"AC 1-27-55 p 2","oldNotes":null,"origDBindex":"227"},{"caseNum":228,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"41.3006916","lonDecimal":-123.1430986,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1855,"yearMonth":"1855/01","yearMonthDay":"1855/01/00","dateNotes":null,"state":"California","place":"Sawyers Bar","county":"Siskiyou","locationNotes":"CHANGE LOCATION; taken from jail at Bestville and hanged at Sawyer's Bar","crowdType":"Jury of twelve","crowdSize":null,"open":"Open","oldAuthorities":"\"populace rescued him\"  or \"violently wrested\" suspect from jail in Bestville; after \"people\" convicted him of manslaughter the \"mob\" took him and hanged him,","crime":"Manslaughter in the first degree","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"James Moran","suspectRaces":"White","confession":"attended by Rve. Mr. Register","suspectNotes":"young man from NYC","victimNumber":"1","victimNames":"Robert Craig","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"HHB, PT, I: 543;\nAC 2-3-55 p 2","oldNotes":null,"origDBindex":"228"},{"caseNum":229,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"1 HHB ONLY","latDecimal":"38.3484545","lonDecimal":-120.7723673,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1855,"yearMonth":"1855/01","yearMonthDay":"1855/01/00","dateNotes":null,"state":"California","place":"Jackson","county":"Amador","locationNotes":null,"crowdType":"Without aid of judge or jury","crowdSize":null,"open":null,"oldAuthorities":null,"crime":"Murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":null,"suspectRaces":"White","confession":null,"suspectNotes":"Young man","victimNumber":"1","victimNames":null,"victimGenders":"Male","victimRaces":"White","victimNotes":"Old man","oldSources":"HHB, PT, I: 542","oldNotes":null,"origDBindex":"229"},{"caseNum":231,"cwIndex":"C-W 51 has date as 2/0/55","gdIndex":null,"crossRefNotesCwGd":"1 HHB Only","latDecimal":"37.7042901","lonDecimal":-120.3628055,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1855,"yearMonth":"1855/01","yearMonthDay":"1855/01/00","dateNotes":null,"state":"California","place":"Hawkin's Bar","county":"Tuolumne","locationNotes":"now under water Don Pedro Reservoir See Gudde, CGC 153-154; narrow down GNIS","crowdType":null,"crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":null,"suspectRaces":"Mexican","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":null,"victimGenders":"Male","victimRaces":"Mexican","victimNotes":null,"oldSources":"HHB, PT, I: 543-544","oldNotes":null,"origDBindex":"231"},{"caseNum":232,"cwIndex":null,"gdIndex":"G-D 104?","crossRefNotesCwGd":null,"latDecimal":"37.9840911","lonDecimal":-120.3821381,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1855,"yearMonth":"1855/03","yearMonthDay":"1855/03/04","dateNotes":null,"state":"California","place":"Sonora","county":"Tuolumne","locationNotes":"g-d 104 places at Tuttletown, Tuolumne Co.(231 ?)","crowdType":"Crowd","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Robbery $47,000 from Adams and Company (fear of insolvency)`","punishment":"Other","lethality":"ERROR","otherNamesMentioned":null,"numberSuspects":null,"suspectNames":"Adams and Company (Bank)","suspectRaces":null,"confession":null,"suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"HHB, PT, I: 546","oldNotes":null,"origDBindex":"232"},{"caseNum":233,"cwIndex":"C-W 52 dates as 4/22/55","gdIndex":null,"crossRefNotesCwGd":"New Report","latDecimal":"38.2854714","lonDecimal":-120.6474309,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1855,"yearMonth":"1855/04","yearMonthDay":"1855/04/22","dateNotes":null,"state":"California","place":"Jesus Maria","county":"Calaveras","locationNotes":"Gudde, CGC 177; five miles from Mokelumne Hill","crowdType":"the populace","crowdSize":null,"open":"Open","oldAuthorities":"constables took suspect from crowd; crowd then retook suspect form constables","crime":"Murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Justo Betancour","suspectRaces":"Mexican","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":"William (Billy) Joyce","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"SDU 5-1-55p p 1\nSac Daily Democratic State Journal 1855-04-27 p2","oldNotes":null,"origDBindex":"233"},{"caseNum":234,"cwIndex":null,"gdIndex":"G-D 105","crossRefNotesCwGd":"3. Have to add escape category to punishment","latDecimal":"34.0739197","lonDecimal":-118.029072,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1855,"yearMonth":"1855/05","yearMonthDay":"1855/05/12","dateNotes":null,"state":"California","place":"Monte","county":"Los Angeles","locationNotes":"Tentatively using coordinates for el Monte. Hanging took place at the Monte (El Monte?), aka Lexington. Suspects seized at Turner's Pass, 12 miles north of LA. \"In the neighborhood of Tejon.\"","crowdType":"mob","crowdSize":"10-Jun","open":"secret","oldAuthorities":"seized from jail","crime":"general robbing and killing","punishment":"1 released/acquitted (Garretson)\n2 escaped (Hand and Wilkerson)\n2 shot (Moore and Watson)","lethality":"Both","otherNamesMentioned":null,"numberSuspects":5,"suspectNames":"William Watson\nWilliam Hand\nAdolpheus E. Moore\nPole Wilkerson\nGarretson","suspectRaces":"White","confession":"3 suspects (Hand, Watson, Moore) made statements confessing their role in various crimes","suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"HHB, PT, I: 544-545;\nAC 5-28-55 p?","oldNotes":null,"origDBindex":"234"},{"caseNum":235,"cwIndex":null,"gdIndex":"G-D 107 has date as 6/31/55","crossRefNotesCwGd":null,"latDecimal":"37.857704","lonDecimal":-122.2555245,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1855,"yearMonth":"1855/06","yearMonthDay":"1855/06/31","dateNotes":null,"state":"California","place":"San Antonio","county":"Alameda","locationNotes":"check county in source; AC 7-4-55 says contra costa co; using Oakland West, which (among others) GNIS returns when entering San Antonio, Alameda Co","crowdType":"secret group of 50-55 men","crowdSize":null,"open":"Secrret","oldAuthorities":null,"crime":"considered a suspecious character","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"John Fenning","suspectRaces":"Irish","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":null,"victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"AC 7-4-55 p 2;\nLA Star 7-28-55 p 4 (or 3)?\nSac Daily Democratic State Journal 1855-07-06 p3","oldNotes":null,"origDBindex":"235"},{"caseNum":236,"cwIndex":"C-W 53","gdIndex":"G-D 111?","crossRefNotesCwGd":"Correct location to Rancheria\nGet Empire County Argus (coloma), 8-11-55, for further reports on Rancheria lynchings\n","latDecimal":"38.4379659","lonDecimal":-120.8193805,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1855,"yearMonth":"1855/08","yearMonthDay":"1855/08/08","dateNotes":null,"state":"California","place":"Rancheria","county":"Amador","locationNotes":"c-w 53 and g-d 111? Have place as Gopher Flat c-w 55 and g-d 114 have place as \"Drytown\" and Chili Town (Rancheria) ; using lower rancheria. Check further","crowdType":"mob, citizens","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":3,"suspectNames":"Pertervine\nTrancolino (Francolino)\nJose","suspectRaces":"Mexican","confession":null,"suspectNotes":null,"victimNumber":"11","victimNames":"Mr. (injured) and Mrs. (Killed) Dimon, or Diamond, or Dymond, or Dynan\nEugene Francis, or French, from Ohio\nHutchins, or Hutchings, Francis's clerk\nJames Wilson\nUriah Michener\nunnamed Indian\n4 Frenchmen","victimGenders":"10 males\n1 femail","victimRaces":"6 whites (\"citizens\")\n1 Indian\n4 Frenchmen","victimNotes":null,"oldSources":"HHB, PT, I: 546;\nAC 8-9-55 p 2;\nAC 8-11-55 p 2\nAC 1855-08-10 p2\nMDH 1855-09-13 p2c2 CHECK IF SAME EVENT\nSDU 1855-08-16 p2","oldNotes":"is Marysville Herald report 9-3-55 p 2 same incident? AC 8-10-55?","origDBindex":"236"},{"caseNum":237,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"37.6626392","lonDecimal":-120.2099076,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1855,"yearMonth":"1855/08","yearMonthDay":"1855/08/23","dateNotes":null,"state":"California","place":"Horse Shoe Bend","county":"Mariposa","locationNotes":"On Merced River in Mariposa Co; now under water Lake McClure Reservoir See Gudde, CGC 160; narrow choies GNIS","crowdType":"Miners assembled full and fair jury trial","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Peter Carnes","suspectRaces":"White","confession":"Freely confessed","suspectNotes":null,"victimNumber":"1","victimNames":"Frank Clark","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"MDH 9-6-55 p 3","oldNotes":null,"origDBindex":"237"},{"caseNum":238,"cwIndex":null,"gdIndex":"G-D 116","crossRefNotesCwGd":null,"latDecimal":"40.9384828","lonDecimal":-122.4186241,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1855,"yearMonth":"1855/09","yearMonthDay":"1855/09/10","dateNotes":null,"state":"California","place":"Dog Creek","county":"Shasta","locationNotes":"From Shasta Courier","crowdType":"People of Dog Creek","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Robbery and suspected of murders in past","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":null,"suspectRaces":"Indian","confession":null,"suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"MDH 9-13-55 p 2","oldNotes":null,"origDBindex":"238"},{"caseNum":239,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"37.710486","lonDecimal":-120.1979658,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1855,"yearMonth":"1855/10","yearMonthDay":"1855/10/07","dateNotes":null,"state":"California","place":"Coulterville","county":"Mariposa","locationNotes":null,"crowdType":"People's jury","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Murder","punishment":"Released/ Acquitted","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Shimer","suspectRaces":"White","confession":"Immediately confessed to killing","suspectNotes":null,"victimNumber":"1","victimNames":"Decatur Powell","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"MDH 10-18-55 p 2","oldNotes":null,"origDBindex":"239"},{"caseNum":240,"cwIndex":null,"gdIndex":"G-D 117","crossRefNotesCwGd":null,"latDecimal":"38.0352009","lonDecimal":-120.4007505,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1855,"yearMonth":"1855/10","yearMonthDay":"1855/10/10","dateNotes":null,"state":"California","place":"Columbia","county":"Tuolumne","locationNotes":"Citizens of \"Chinese Camp\" passed resolutions denouncing the participators in Barclay's lynching. Half a mikle outside of town on the road to Gold Spring","crowdType":"mob, people, elected jury of twelve and judg; mock trial; hung without trial when sheriff arrived","crowdSize":null,"open":"Open","oldAuthorities":"Suspect seized from Jail; sheriff tried to stop hanging, failed","crime":"Murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":"James W. Coffroth (sroked crowd)\nSheeriff Stewart\nJ.O. Oxley\nT. r. Taylor\nGrand jury indicted lynchers:\nWilliam Caulfield\nCharles Lambert\n--Terry\nAccessories:\nJames W. Coffroth\nO.P. Rogers\nB.C. Northrup\nJ. Heckendorn\n--Fletcher","numberSuspects":1,"suspectNames":"John S. Barclay","suspectRaces":"White","confession":"Insisted on innocence","suspectNotes":"from Chinese Camp; man of, husband of, \"fancy man\" of owner of house of prostitution where murder occurred, Marth Carlos (Carloss)","victimNumber":"1","victimNames":"John H., \"Jack\" Smith","victimGenders":"Male","victimRaces":"White","victimNotes":"From Knickerbocker Flat. Barclay shot Smith while Smith fought with Barclay's wife, Martha, over \"broken pitcher\" [?]. -HHB","oldSources":"HHB, PT, I: 547-553","oldNotes":null,"origDBindex":"240"},{"caseNum":241,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"38.4410213","lonDecimal":-120.8543816,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1855,"yearMonth":"1855/10","yearMonthDay":"1855/10/20","dateNotes":null,"state":"California","place":"Drytown","county":"Amador","locationNotes":null,"crowdType":"Spontaneous Assembly","crowdSize":"Community en masse","open":"Open","oldAuthorities":"Suspect seized from Jail\n\nSuspect had been convicted; granted pardon of stay of execution","crime":"Rape","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"John Thompson","suspectRaces":"Black","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":null,"victimGenders":"Female","victimRaces":"White","victimNotes":"\"a little orphan girl\"","oldSources":"MDH 10-23-55 p 2\nSF Evening Bulletin 1855-10-22 p2\nSJ Republican 1855-10-27 p2","oldNotes":null,"origDBindex":"241"},{"caseNum":242,"cwIndex":"C-W 58 has date as 10/19/55","gdIndex":"G-D 118 has suspect as 4 unknown; has date as 10/19/55","crossRefNotesCwGd":null,"latDecimal":"37.3488262","lonDecimal":-120.9796501,"latNDegrees":31,"latNMinutes":21,"latNSeconds":null,"lonWDegrees":120,"lonWMinutes":58,"lonWSeconds":45,"year":1855,"yearMonth":"1855/10","yearMonthDay":"1855/10/19","dateNotes":"Report from Hills Ferry in NYT dated 10/20 dates hanging as sunset 10/19","state":"California","place":"Hills Ferry","county":"Stanislaus","locationNotes":"aka Hill's Ferry; Durham 782; Using GNIS for Hill's Ferry","crowdType":"People's Court","crowdSize":"10-100","open":"Open","oldAuthorities":null,"crime":"Robbery--Stock","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":4,"suspectNames":"Francisco Tapia\nJesus Pino\nFrancisco Sanchez\nJames G. Lackner","suspectRaces":"Mesican (Tpia, Pino, Sanchez)\nGerman (Lackner)","confession":"Lackner Implicated others;\nMexicans did not confess\nLackner eventually admitted he deserved his fate","suspectNotes":null,"victimNumber":"5","victimNames":"Mr. Stone\nMr. Stevenson\nMr. Gould\nMr.. Wilson\nMr. Montgomery","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"MDH 10-25-55 p 2;\nLA Star 11-10-55 p 2;\nAC 10-25-55 p 1","oldNotes":null,"origDBindex":"242"},{"caseNum":243,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"39.9571139","lonDecimal":-120.9563435,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1855,"yearMonth":"1855/11","yearMonthDay":"1855/11/12","dateNotes":null,"state":"California","place":"Elizabethtown","county":"Plumas","locationNotes":"Qunicy in GNIS","crowdType":"Spontaneous Assembly","crowdSize":"Community en masse","open":"Open","oldAuthorities":null,"crime":"Other","punishment":"Whipped, branded, and banished","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":null,"suspectRaces":"White","confession":null,"suspectNotes":"\"a brute inhuman shape\"","victimNumber":"1","victimNames":null,"victimGenders":"Female","victimRaces":"White","victimNotes":null,"oldSources":"MDH 11-15-55 p 2:\nLA Star 12-15-55 p 2","oldNotes":null,"origDBindex":"243"},{"caseNum":244,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"37.9840911","lonDecimal":-120.3821381,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1855,"yearMonth":"1855/11","yearMonthDay":"1855/11/22","dateNotes":null,"state":"California","place":"Sonora","county":"Tuolumne","locationNotes":null,"crowdType":"Individual Retribution","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Other","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":null,"suspectRaces":"Indian","confession":null,"suspectNotes":null,"victimNumber":"2-5","victimNames":null,"victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"MDH 12-9-55 p 2","oldNotes":null,"origDBindex":"244"},{"caseNum":245,"cwIndex":null,"gdIndex":"G-D 120 and 121, dated12/0/55? 3 others (2 Mexicans and Steven Jacques) escaped","crossRefNotesCwGd":null,"latDecimal":"37.5958333","lonDecimal":-122.0191667,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1855,"yearMonth":"1855/11","yearMonthDay":"1855/11/20","dateNotes":null,"state":"California","place":"Union City","county":"Alameda","locationNotes":"Gudde CPN 407","crowdType":"Spontaneous Assembly","crowdSize":"Community en masse","open":"Open","oldAuthorities":"Suspect seized from Jail","crime":"Robbery--Stock","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":2,"suspectNames":"Hill (Illinois or Michigan)\nHarris (Michigan)","suspectRaces":"White","confession":null,"suspectNotes":"Hill and Harris suspected to be in a gang that also included Stephen Jacques (of St. Joseph's, Michigan) and Thomas Gear, \"one of the leaders,\" as well as two Mexicans who were arrested alongside H and H but subsequently escaped. The Mexicans' escape prompted the quick execution of H and H. One report also says ringleaders of the band were named James and Beamer. Some reports suggest as many as 15 suspected cattle thieves. Two early reports claimed that suspects are \"all Spaniards,\" but this seems to be disproven by later reports with more detail.","victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"MDH 12-7-55 p 3;\nAC 11-3-55 p 2\n1855-11-28 p2c1\n1855-12-06 AC p2c5\nAC 1855-11-30 p2c1\nSan Joaquin Republican 1855-12-01 p3\nSan Joaquin Republican 1855-12-08 p1","oldNotes":null,"origDBindex":"245"},{"caseNum":246,"cwIndex":"C-W 59","gdIndex":"G-D 122","crossRefNotesCwGd":null,"latDecimal":"37.5191028","lonDecimal":-120.4374151,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1855,"yearMonth":"1855/12","yearMonthDay":"1855/12/24","dateNotes":null,"state":"California","place":"Snellings","county":"Merced","locationNotes":"Gudde CPN, 367; aka Snelling's","crowdType":"Spontaneous Assembly","crowdSize":"Community en masse","open":"Open","oldAuthorities":"Suspect escaped from jail; officers opposed proceedings; restrained by crowd","crime":"Robbery--Stock","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":null,"suspectRaces":"Mexican/Latino","confession":null,"suspectNotes":"HHB claims 2 suspects, both Mexicans. One hanged, one shot.","victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"HHB, PT, I: 546-547;\nLA Star 1-12-56 p2;\nMDH 1-1-56 p 2\nSac Daily Democratic State Journal 1855-12-29 p2\nSFEB 1855-12-29 p3c1-2","oldNotes":null,"origDBindex":"246"},{"caseNum":247,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"39.1085091","lonDecimal":-120.8593823,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1855,"yearMonth":"1855/12","yearMonthDay":"1855/12/25","dateNotes":null,"state":"California","place":"Iowa Hill","county":"Placer","locationNotes":null,"crowdType":"People's Court","crowdSize":"10-100","open":"Open","oldAuthorities":"Suspect seized from jail; officers acquiesced to proceedings","crime":"Attempted murder/assault","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Johnson","suspectRaces":"White","confession":"Intransigent at gallows","suspectNotes":"Article from Old Notes gives first name as \"Wm. M.\"","victimNumber":"1","victimNames":"Montgomery","victimGenders":"Male","victimRaces":"White","victimNotes":"Victim did not die, despite multiple stab wounds. Article from Old Notes gives first name as \"Thos.[?]\"","oldSources":"HHB, PT, I: 542;\nAC 1-13-55 p 2;\nSDU 12-27-54 p 3;\nLA Star 1-4-55 p 2","oldNotes":null,"origDBindex":"247"},{"caseNum":248,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"37.9595012","lonDecimal":-121.2927574,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1855,"yearMonth":"1855/12","yearMonthDay":"1855/12/06","dateNotes":null,"state":"California","place":"Stockton","county":"San Joaquin","locationNotes":"using coordinates for intersection of Center and Park Street; \"the opposite side of the San Joaquin river, near Slocum's Ferry;\" \"about a mile above Slocum's Ferry\"","crowdType":"Spontaneous Assembly","crowdSize":null,"open":"Secrret","oldAuthorities":null,"crime":"Robbery--Stock","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"William A. Mann aka Jones","suspectRaces":"White","confession":"When first attempt failed, \"he begged 'in the name of God, that if they intended to hang him, to do it decently!'\"","suspectNotes":"Arrested two years prior for stealing a mule and a horse, caught in the act, escaped while his case was under consideration; also had been previously publicly whipped in Sacramento for horse stealing","victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"AC 12-6-55 p 1","oldNotes":null,"origDBindex":"248"},{"caseNum":249,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"36.8455963","lonDecimal":-121.5382382,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1855,"yearMonth":"1855/12","yearMonthDay":"1855/12/20","dateNotes":null,"state":"California","place":"San Juan Bautista","county":"Monterey","locationNotes":"San Benito Co? Gudde CPN 338; Monterey County (San Benito Co. not formed until 1874)","crowdType":"Spontaneous Assembly","crowdSize":"Community en masse","open":"Open","oldAuthorities":"Suspect an escapee","crime":"Robbery--Other","punishment":"Remanded to authorities","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Charles Osborne","suspectRaces":"White","confession":"\"declared that he hoped for nothing more than to get back to Marshal North's palace.\"","suspectNotes":"Robbed Abell of unknown possessions; escaped from station-house morning after arrest, \"was caught a few days since at San Juan, in Monterey county, with a horse and buggy stolen in this city.\"","victimNumber":"1","victimNames":"Alex G. Abell","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"MDH 12-20-55 p2","oldNotes":null,"origDBindex":"249"},{"caseNum":250,"cwIndex":null,"gdIndex":"G-D 123","crossRefNotesCwGd":null,"latDecimal":"36.9996702","lonDecimal":-121.5263287,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1856,"yearMonth":"1856/02","yearMonthDay":"1856/02/00","dateNotes":null,"state":"California","place":"San Isidro","county":"Santa Clara","locationNotes":"Using coordinates for \"Old Gilroy,\" aka San Isidro; reports are from Monterey. The fact that it's from the Monterey Sentinel leads me to believe it's Monterey or Santa Clara County","crowdType":null,"crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Robbery--Stock","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Isadoro Soto","suspectRaces":"Mexican/Latino","confession":null,"suspectNotes":"\"a Californian\"","victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"LA Star 2-16-56 p 2","oldNotes":null,"origDBindex":"250"},{"caseNum":251,"cwIndex":null,"gdIndex":"G-D 124","crossRefNotesCwGd":null,"latDecimal":"37.7110415","lonDecimal":-120.1974103,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1856,"yearMonth":"1856/03","yearMonthDay":"1856/03/16","dateNotes":null,"state":"California","place":"Coulterville","county":"Mariposa","locationNotes":null,"crowdType":"People's Court","crowdSize":"Community en masse","open":"Open","oldAuthorities":null,"crime":"Murder, circumstantial evidence, and robbery-other","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":null,"suspectRaces":"Chilean","confession":"Given freely","suspectNotes":null,"victimNumber":"2","victimNames":null,"victimGenders":"Male","victimRaces":"Chinese","victimNotes":"\"confessed to the crime of robbing and murdering two Chinamen at Bear Valley on the 7th.\"","oldSources":"HHB, PT, I: 553;\nLA Star 4-5-56 p2","oldNotes":null,"origDBindex":"251"},{"caseNum":252,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"38.3004709","lonDecimal":-120.7063219,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1856,"yearMonth":"1856/04","yearMonthDay":"1856/04/22","dateNotes":null,"state":"California","place":"Mokelumne Hill","county":"Calaveras","locationNotes":null,"crowdType":"Spontaneous Assembly","crowdSize":"Community en masse","open":"Open","oldAuthorities":"Justice A.C. Lewis, Esq. attempted to prevent lynching","crime":"Attempted murder/ assault","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Justo Betancour","suspectRaces":"Mexican/Latino","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":"William Joyce, aka Joice","victimGenders":"Male","victimRaces":"White","victimNotes":"\"provocation\" was \"a demand against Joyce for $7, which was promised [Betancour] on the evening of the same day. After asking his victim for the money, the Mexican plunged a knife into his back and fled.\" Joyce did not die reportedly.","oldSources":"AC 4-26-55 p 3","oldNotes":null,"origDBindex":"252"},{"caseNum":253,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"36.6012792","lonDecimal":-121.8829442,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1856,"yearMonth":"1856/05","yearMonthDay":"1856/05/11","dateNotes":null,"state":"California","place":"Monterey","county":"Monterey","locationNotes":null,"crowdType":"Spontaneous Assembly","crowdSize":null,"open":"Open","oldAuthorities":"Suspect seized from Jail","crime":"Murder--circumstanial evidence","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":4,"suspectNames":"Juan Lopez\nR. Soto (Puaiz[?])\nR. Zuniga (Padre)\nunnamed Indian","suspectRaces":"3 Latino (Lopez, Soto, Zuniga)\n1 Indian","confession":null,"suspectNotes":"Indian implicated in murder of F. Mellen; 3 Latinos implicated in murder of storeowner David Picart","victimNumber":"2","victimNames":"F. Mellen\nDavid Picart or Picard","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"HHB, PT, I: 554\nSFEB 1856-05-22 p1","oldNotes":null,"origDBindex":"253"},{"caseNum":254,"cwIndex":null,"gdIndex":"G-D 127","crossRefNotesCwGd":null,"latDecimal":"37.794612","lonDecimal":-122.39667,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1856,"yearMonth":"1856/05","yearMonthDay":"1856/05/22","dateNotes":null,"state":"California","place":"San Francisco","county":"San Francisco","locationNotes":"Coordinates for intersection of Geary and Market; 39 Sacramento Street","crowdType":"Formal Vigilance Committee","crowdSize":"\"few were present\"","open":"Open","oldAuthorities":"Suspect seized from jail; officers acquiesced to proceedings","crime":"Murder--circumstanial evidence","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":2,"suspectNames":"James P. Casey\nCharles Cora","suspectRaces":"New York, Italian [could not verify]","confession":"Given freely;\n\nInsisted on innocence at gallows","suspectNotes":null,"victimNumber":"1","victimNames":"Mr. King","victimGenders":"Male","victimRaces":"White","victimNotes":"Seems to be an important man because huge funeral procession and burial","oldSources":"MDH 5-23-56 p2","oldNotes":"check whether there are more than one article in this issue; article suggests that there was a planned execution for the next day at 12, but that members of the Vigilance Committee executed Cora and Casey prematurely; fewer people were present at the lynching than were expected because most were at King's funeral procession, which was going on at the same time","origDBindex":"254"},{"caseNum":255,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"37.7935535","lonDecimal":-122.40002,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1856,"yearMonth":"1856/06","yearMonthDay":"1856/06/00","dateNotes":null,"state":"California","place":"San Francisco","county":"San Francisco","locationNotes":"Committee Rooms Location set  near intersection of Battery and California","crowdType":"Formal Vigilance Committee","crowdSize":null,"open":"Secrret","oldAuthorities":"Officers acquiesced to proceedings","crime":"Does not say","punishment":"Banished","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":8,"suspectNames":"John Crowe\nJames Hennessey[?]\nJohn Lawler\nJames Castor[?]\nJ.W. Bagley\nWm. Hamilton\nWm alias Jack M'Guire\nTerrence Kelly","suspectRaces":"White","confession":null,"suspectNotes":"\"names are those that every one will recognize, and hope to never see again.\"","victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":"Attack on Camptonville stage; \"object was to take all the treasure from the Express houses at Downieville and Camptonville\"","oldSources":"MDH 6-11-56 p 2","oldNotes":null,"origDBindex":"255"},{"caseNum":256,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"41.8932233","lonDecimal":-120.1838401,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1856,"yearMonth":"1856/06","yearMonthDay":"1856/06/23","dateNotes":null,"state":"California","place":"Mill Creek","county":"Modoc","locationNotes":"Changed location to Mill Creek, Modoc County; Murder is in Deep Creek; lynching is in Mill Creek; locations in Sunrise Valley region","crowdType":"People's Court","crowdSize":"about 50","open":"Open","oldAuthorities":"Suspect seized from Jail","crime":"Murder--possibly self defense","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"A. J. Goff","suspectRaces":"White","confession":"Given freely;\n\nIntransigent at gallows","suspectNotes":null,"victimNumber":"1","victimNames":"Solomon Brundridge","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"HHB, PT, I: 554-","oldNotes":null,"origDBindex":"256"},{"caseNum":257,"cwIndex":null,"gdIndex":"G-D 129 date as 7/29/56","crossRefNotesCwGd":null,"latDecimal":"37.7935535","lonDecimal":-122.40002,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1856,"yearMonth":"1856/07","yearMonthDay":"1856/07/30","dateNotes":null,"state":"California","place":"San Francisco","county":"San Francisco","locationNotes":"Committee Rooms Location set  near intersection of Battery and California","crowdType":"Formal Vigilance Committee","crowdSize":null,"open":"Secrret","oldAuthorities":"Officers acquiesced to proceedings","crime":"Murder","punishment":"Possible Lynching*","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":2,"suspectNames":"Philander Brace\nJoseph Hetherington","suspectRaces":"White","confession":null,"suspectNotes":"Each is suspected in separate murder; Hetherington is a \"subject of Great Britain\"","victimNumber":"3","victimNames":"Hetherington murdered Dr. Randall and Dr. Baldwin; Brace murdered Col. West","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"MDH 7-30-56 p 2","oldNotes":"Only article I looked at was one that preceded the possible lynching, but Old Notes suggests there are more sources.","origDBindex":"257"},{"caseNum":258,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"39.2168373","lonDecimal":-121.3185709,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1856,"yearMonth":"1856/08","yearMonthDay":"1856/08/22","dateNotes":null,"state":"California","place":"Timbuctoo","county":"Yuba","locationNotes":"Gudde CPN 394; CGC 349","crowdType":"Formal Vigilance Committee","crowdSize":"Community en masse","open":"Open","oldAuthorities":null,"crime":"Robbery--money","punishment":"Whipped","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":null,"suspectRaces":"French","confession":"Given freely","suspectNotes":"\"a poor idiot Frenchman who has but one arm.\" One article takes issue with label of \"idiot.\" Says \"the criminal was and is more 'knave than fool,' having before this, in another portion of the State, been whipped for stealing money\"","victimNumber":"several","victimNames":null,"victimGenders":"Male","victimRaces":"White","victimNotes":"\"During the past two weeks several cabins… have been robbed of their entire furniture…\"","oldSources":"MDH 8-22-56 p 2","oldNotes":"Articles include contradictory letters from witnesses; each argues about the nature of the lynching--particularly whether the Vigilance Com. of San Francisco was involved.","origDBindex":"258"},{"caseNum":260,"cwIndex":"C-W 29 has date 2-1-53. ","gdIndex":"G-D 67? Has date as 2-1-53; Correctly this is G-D 130.","crossRefNotesCwGd":null,"latDecimal":"38.0682554","lonDecimal":-120.5396457,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1856,"yearMonth":"1856/09","yearMonthDay":"1856/09/26","dateNotes":null,"state":"California","place":"Angel's Camp","county":"Calaveras","locationNotes":"\"a short distance from town\"","crowdType":"Spontaneous Assembly","crowdSize":null,"open":"Open","oldAuthorities":"Suspect seized from examination before Justice of the Peace","crime":"Murder--witnessed by onlookers","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"C. Colebrook","suspectRaces":"English","confession":null,"suspectNotes":"\"an English sailor\" and \"was a brother of the Colebrook who shot a Chileno near Campo Seco last year, was bailed out, absconded, and has never been seen since.\"","victimNumber":"1","victimNames":"Dr. Armstong","victimGenders":"Male","victimRaces":"White","victimNotes":"Armstrong accused Colebrook of stealing hogs","oldSources":"HHB, PT, I: 555","oldNotes":null,"origDBindex":"260"},{"caseNum":261,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"37.81944444","lonDecimal":-120.6708333,"latNDegrees":37,"latNMinutes":49,"latNSeconds":10,"lonWDegrees":120,"lonWMinutes":40,"lonWSeconds":15,"year":1856,"yearMonth":"1856/09","yearMonthDay":"1856/09/00","dateNotes":null,"state":"California","place":"Knight's Ferry","county":"Stanislaus","locationNotes":"Using coordinates from Durham p 790","crowdType":"People's Court","crowdSize":"Community en masse","open":"Open","oldAuthorities":null,"crime":"Robbery--Stock","punishment":"Remanded to authorities","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":7,"suspectNames":"Bill Cristy alias Bill White\nThomas J. Hodges alias Tom Bell\nNed Convery alias Ned Connor\nMontague Lyon alias Monte Jack\nJim Smith\nBob Carr alias English Bob\nJuan Rocher alias Juan Fernandez","suspectRaces":"German (Smith)\nMexican (Rocher)\nEnglish (Carr)\nIrish (Connor)\n3 White (Cristy, Hodges, Convery)","confession":null,"suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"HHB PT, I: 558-559","oldNotes":null,"origDBindex":"261"},{"caseNum":262,"cwIndex":"C-W 63 C-W 108  They have both 1856 and 1872 dates. See also C-W 64","gdIndex":" G-D 187 check against this.","crossRefNotesCwGd":null,"latDecimal":"36.9151584","lonDecimal":-121.7512298,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1856,"yearMonth":"1856/10","yearMonthDay":"1856/10/27","dateNotes":null,"state":"California","place":"Watsonville","county":"Santa Cruz","locationNotes":"report written from Pajaro, Santa Cruz County","crowdType":"\"excited mob\"","crowdSize":null,"open":"Open","oldAuthorities":"Held in jail overnight; no charges brought against him, released; \"As soon as this became known, a crowd led on by those who had first made the arrest, seized upon him and were arranging again for his trial, when he broke away from his captors and ran.\" Citizens shot at suspect without hitting him; chased after and caught him before hanging him.","crime":"Suspicion of being connected with a band of horse thieves","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":"Mr. White (owned ranch where suspect allegedly had lives)","numberSuspects":1,"suspectNames":"Jose Castro (C-W only; no other sources give name)","suspectRaces":"Mexican/Latino","confession":null,"suspectNotes":"Suspect is one in a band of native Californian stock thieves said to be under the command of \"the celebrated robber chieftain,\" Joaquin Murietta. Suspect was \"a Californian who had been living on Mr. White's Ranch, about four miles from Watsonville.\"","victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"HHB PT, I: 555-556\n1856-11-2 MDH p3c1\n1856-11-05 Daily Democratic State Journal-Sacramento p1\n1856-11-06 SDU p1c5-6\n1856-11-08 LA Star p1c5","oldNotes":"date 10-27-56? Yes, seized on Sunday 10-26, held overnight, released on 10-27 and then lynched by mob","origDBindex":"262"},{"caseNum":263,"cwIndex":"C-W 63 C-W 108  They have both 1856 and 1872 dates. See also C-W 65","gdIndex":" G-D 187 check against this.","crossRefNotesCwGd":null,"latDecimal":"36.9151584","lonDecimal":-121.7512298,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1856,"yearMonth":"1856/10","yearMonthDay":"1856/10/00","dateNotes":null,"state":"California","place":"Monterey","county":"Monterey","locationNotes":"a little below the Tom Blanco crossing","crowdType":"company of men","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Suspicion of role in murder of Wall and Williamson;\nallegedly had shot a man in Monterey and stolen a saddle and a mule","punishment":"1 shot\n1 hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":2,"suspectNames":null,"suspectRaces":"Mexican/Latino","confession":null,"suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"HHB PT, I: 556\n1856-11-01 SFEB p2\nSac Daily Democratic State Journal 1856-11-05 p1","oldNotes":null,"origDBindex":"263"},{"caseNum":264,"cwIndex":null,"gdIndex":"G-D 131","crossRefNotesCwGd":null,"latDecimal":"41.7931797","lonDecimal":-123.3794996,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1856,"yearMonth":"1856/06","yearMonthDay":"1856/06/04","dateNotes":null,"state":"California","place":"Happy Camp","county":"Del Norte","locationNotes":"On the former grounds of H. Gasquet's shop, Camp & Co.;\n\nHappy camp location became part of Siskiyou County 1888; see\nhttp://historyandhappenings.squarespace.com/del-norte-county/\n; gallows constructed at the scene of the crime","crowdType":"Inhabitatns crried out investigation ","crowdSize":"\"perhaps seventy\"","open":"Open","oldAuthorities":null,"crime":"Murder, robbery, and arson","punishment":"Hanged two (Sam Wau and Chung Yeu)\nBanished 3 (Tom Buc, Low sick, Huey)","lethality":"Both","otherNamesMentioned":"Horace Basquet, owner of store burned and robbed","numberSuspects":5,"suspectNames":"Sam Wau (hanged)\nChung Yew (hanged)\nTom Buc (banished)\nLow Sick (banished)\nHuey (banished)","suspectRaces":"Chinese","confession":"Given freely","suspectNotes":"First 2 were hanged; other 3 banished","victimNumber":"2","victimNames":"Horace Gasquet, M. H. O'Meara","victimGenders":"Male","victimRaces":"White","victimNotes":"Gasquet owned the store; O'Meara was a shopkeeper whow as murdered. Store was burned after O'Meara murdered.","oldSources":"HHB PT, I: 556-567","oldNotes":"Compare to case 356--same place and victim 18 years apart!","origDBindex":"264"},{"caseNum":265,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"ONLY SOURCE IS BANCROFT:\nApochryphal?","latDecimal":"38.1968631","lonDecimal":-120.6804872,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1856,"yearMonth":"1856/10","yearMonthDay":"1856/10/00","dateNotes":null,"state":"California","place":"Calaveras","county":"Calaveras","locationNotes":"Narrow down; using Calaveras County Historical Museum (in San Andreas)","crowdType":"People's Court","crowdSize":null,"open":"Open","oldAuthorities":"Officer abetted proceedings","crime":"Robbery--Stock","punishment":"Shot","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":null,"suspectRaces":"White","confession":"Given freely","suspectNotes":null,"victimNumber":"1","victimNames":null,"victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"HHB PT, I: 557-558","oldNotes":null,"origDBindex":"265"},{"caseNum":266,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"Calaveras Diggings not Yuba river ONLY SOURCE IS BANCROFT;\nseems apochryphal","latDecimal":null,"lonDecimal":null,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1856,"yearMonth":"1856/10","yearMonthDay":"1856/10/00","dateNotes":null,"state":"California","place":"Yuba River, Middle Fork","county":"Calaveras","locationNotes":"County?","crowdType":"People's Court","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Robbery--money","punishment":"Whipped--100 lashes\nears cut off\nhead shaved","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":null,"suspectRaces":"White","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":null,"victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"HHB PT, I: 558","oldNotes":"Calaveras Diggings not Yuba river","origDBindex":"266"},{"caseNum":267,"cwIndex":"C-W 65","gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"34.0948334","lonDecimal":-118.0990757,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1857,"yearMonth":"1857/01","yearMonthDay":"1857/01/29","dateNotes":null,"state":"California","place":"San Gabriel","county":"Los Angeles","locationNotes":null,"crowdType":"People's Court","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Suspected Murder","punishment":"Shot","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Miguel Soto","suspectRaces":"Latino","confession":null,"suspectNotes":null,"victimNumber":"5","victimNames":"George Pflugardt\nJames R. Barton (Sherriff)\nWilliam H. Little (Sonstable)\nCharles Baker (Constable)\nCharles Daley (Constable)","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"HHB PT, I: 504;\nAC 2-15-57 p 2\nLA Star 1-31-57 p 2\nNYT 1857-03-17","oldNotes":null,"origDBindex":"267"},{"caseNum":268,"cwIndex":"C-W 65","gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"34.0972312","lonDecimal":-118.1078472,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1857,"yearMonth":"1857/01","yearMonthDay":"1857/01/29","dateNotes":null,"state":"California","place":"Mission San Gabriel","county":"Los Angeles","locationNotes":null,"crowdType":"People's Court","crowdSize":"Community en masse","open":"Open","oldAuthorities":"Officers acquiesced to proceedings","crime":"Suspected Murder, Robbery","punishment":"2 hanged, 2 shot","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":4,"suspectNames":"Diego Navarro\nJuan Valenzuela\nPedro Lopez\nJose Santos","suspectRaces":"Latino","confession":null,"suspectNotes":"Part of Flores-Daniel Band","victimNumber":"5","victimNames":"George Pflugardt\nJames R. Barton (Sherriff)\nWilliam H. Little (Sonstable)\nCharles Baker (Constable)\nCharles Daley (Constable)","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"AC 2-15-57 p 2","oldNotes":"Not Yuba river North fork\nCheck location in AC and\nCheck names in HHB","origDBindex":"268"},{"caseNum":269,"cwIndex":"C-W 67","gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"34.2675291","lonDecimal":-119.2544461,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1857,"yearMonth":"1857/02","yearMonthDay":"1857/02/03","dateNotes":null,"state":"California","place":"Santiago Canyon ","county":"Orange","locationNotes":"near present day Irvine Lake; Check with Irvine Conservancy for coordinates","crowdType":"Summary Lynching","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Suspected Murder, Robbery","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":2,"suspectNames":"Francisco Ardillero\nJuan Silvas, aka Juan Cataba","suspectRaces":"Latino","confession":null,"suspectNotes":"Part of Flores-Daniel Band","victimNumber":"5","victimNames":"George Pflugardt\nJames R. Barton (Sherriff)\nWilliam H. Little (Sonstable)\nCharles Baker (Constable)\nCharles Daley (Constable)","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"HHB PT, I: 503-504;\nAC 2-15-57 p 2;\nMDH 2-17-57 p 2","oldNotes":null,"origDBindex":"269"},{"caseNum":270,"cwIndex":"C-W 65","gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"34.4208305","lonDecimal":-119.6981901,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1857,"yearMonth":"1857/02","yearMonthDay":"1857/02/02","dateNotes":null,"state":"California","place":"Mission San Buenaventura","county":"Ventura","locationNotes":null,"crowdType":"Summary Lynching","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Suspected Murder, Robbery","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Jose Jesus Espinosa","suspectRaces":"Latino","confession":"Confession","suspectNotes":"Part of Flores-Daniel Band","victimNumber":"5","victimNames":"George Pflugardt\nJames R. Barton (Sherriff)\nWilliam H. Little (Sonstable)\nCharles Baker (Constable)\nCharles Daley (Constable)","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"AC 2-15-57 p 2;\nCheck in HHB PT, I: 503-504?","oldNotes":null,"origDBindex":"270"},{"caseNum":271,"cwIndex":"C-W 70 and   or C-W 69","gdIndex":"G-D 137or G-D 138","crossRefNotesCwGd":null,"latDecimal":"34.2675291","lonDecimal":-119.2544461,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1857,"yearMonth":"1857/02","yearMonthDay":"1857/02/04","dateNotes":null,"state":"California","place":"Ventura","county":"Ventura","locationNotes":null,"crowdType":"Summary lyncing","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Suspected Murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Encarnacion Berreyessa","suspectRaces":"Latino","confession":null,"suspectNotes":"Swept up in search for Flores gang","victimNumber":null,"victimNames":null,"victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"AC 2-15-57 p 2;\nSan Diego Herald, 2-7-57 p 2","oldNotes":null,"origDBindex":"271"},{"caseNum":272,"cwIndex":"C-W 71 lists 2 or 3 Mexican suspects","gdIndex":" G-D 139?  lists 2 or 3 Mexican suspects","crossRefNotesCwGd":null,"latDecimal":"33.5008969","lonDecimal":-117.6543984,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1857,"yearMonth":"1857/02","yearMonthDay":"1857/02/07","dateNotes":null,"state":"California","place":"Los Nietos","county":"Los Angales","locationNotes":" West Whittier","crowdType":"Summary execution","crowdSize":null,"open":null,"oldAuthorities":null,"crime":null,"punishment":"2 hanged\n1 shot","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":3,"suspectNames":"Unknown","suspectRaces":"Latino","confession":null,"suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"San Diego Herald 2-7-57 p2","oldNotes":null,"origDBindex":"272"},{"caseNum":273,"cwIndex":"C-W 71 lists 2 or 3 Mexican suspects","gdIndex":" G-D 139?  lists 2 or 3 Mexican suspects","crossRefNotesCwGd":null,"latDecimal":"34.0726866","lonDecimal":-118.2130443,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1857,"yearMonth":"1857/02","yearMonthDay":"1857/02/14","dateNotes":null,"state":"California","place":"Los Angeles","county":"Los Angeles","locationNotes":"Fort Hill","crowdType":"Lynch Court","crowdSize":"Community en masse","open":"Open","oldAuthorities":null,"crime":"Suspected Murder, Robbery","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Juan Flores","suspectRaces":"Latino","confession":"Confessed","suspectNotes":"Part of Flores-Daniel Band","victimNumber":"5","victimNames":"George Pflugardt\nJames R. Barton (Sherriff)\nWilliam H. Little (Sonstable)\nCharles Baker (Constable)\nCharles Daley (Constable)","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"AC 3-2-57 p 2;\nLA Star 2-21-57 p 2","oldNotes":null,"origDBindex":"273"},{"caseNum":274,"cwIndex":"C-W 72 ","gdIndex":"G-D 140","crossRefNotesCwGd":null,"latDecimal":"36.6012792","lonDecimal":-121.8829442,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1857,"yearMonth":"1857/02","yearMonthDay":"1857/02/16","dateNotes":null,"state":"California","place":"Monterey","county":"Monterey","locationNotes":null,"crowdType":"Spontaneous Assembly","crowdSize":"1-10","open":"Open","oldAuthorities":"Suspect seized from Jail","crime":"Murder--witnessed by onlookers","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Anastacio Garcia (C-W gives name as Jose Anastacio)","suspectRaces":"native Californian","confession":null,"suspectNotes":"AC article gives thorough description of suspect","victimNumber":"5","victimNames":"Constable Hardmount; Wall and Williamson; Joaquin De la Torre; \"an American named Layton\"","victimGenders":"Male","victimRaces":"White","victimNotes":"Suspected to have killed Hardmount three years prior at a fandango; Wall and Williamson the previous September; murdered De la Torre and \"mortally wound[ed]\" Layton while they pursued him for W and W's murder.","oldSources":"AC 2-21-57 p 1","oldNotes":null,"origDBindex":"274"},{"caseNum":275,"cwIndex":"C-W 73 or C-W 74?","gdIndex":"G-D 145?","crossRefNotesCwGd":null,"latDecimal":"37.560358","lonDecimal":-122.3110542,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1857,"yearMonth":"1857/03","yearMonthDay":"1857/03/00","dateNotes":null,"state":"California","place":"San Mateo","county":"San Mateo","locationNotes":null,"crowdType":"Spontaneous Assembly","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Murder--witnessed by onlookers","punishment":"Hanged* (\"it was thought that they would hang him\")","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Wm. Harrington","suspectRaces":"White","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":"Carles Brannagan","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"MDH 3-20-51 p 3","oldNotes":"Harrington murdered Brannagan at the fence of Harrington's property. \"The dispute arose about some land which Brannagan had heretofore had possession of.\"","origDBindex":"275"},{"caseNum":276,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"40.5543106","lonDecimal":-123.1830839,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1857,"yearMonth":"1857/03","yearMonthDay":"1857/03/23","dateNotes":null,"state":"California","place":"Hay Fork","county":"Trinity","locationNotes":"Hay Fork of Trinity River","crowdType":"Spontaneous Assembly","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Other, rape? \"went to a tent where a lady resided and drove her from home.\"","punishment":"Other","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":15,"suspectNames":"Unnamed Indians","suspectRaces":"Indian","confession":null,"suspectNotes":"15 were hung, but more were involved in the crime; suspects were supposedly intoxicated \"upon liquor furnished them by some villainous white men\"","victimNumber":"1","victimNames":null,"victimGenders":"Female","victimRaces":"White","victimNotes":null,"oldSources":"MDH 4-9-57 p 3","oldNotes":null,"origDBindex":"276"},{"caseNum":277,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"36.85833333","lonDecimal":-120.4541667,"latNDegrees":36,"latNMinutes":51,"latNSeconds":30,"lonWDegrees":120,"lonWMinutes":27,"lonWSeconds":15,"year":1857,"yearMonth":"1857/03","yearMonthDay":"1857/03/27","dateNotes":null,"state":"California","place":"Firebaugh's Ferry","county":"Fresno","locationNotes":"San Joaquin River. Durham p1035","crowdType":"Spontaneous Assembly","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Robbery--Stock","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Jose Maria Egare","suspectRaces":"Mexican/Latino","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":"Mr. Peter Cook","victimGenders":"Male","victimRaces":"White","victimNotes":"\"resides upon the Tuolumne River\"","oldSources":"MDH 4-9-57 p 2","oldNotes":null,"origDBindex":"277"},{"caseNum":278,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"39.3885002","lonDecimal":-121.4052424,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1857,"yearMonth":"1857/04","yearMonthDay":"1857/04/01","dateNotes":null,"state":"California","place":"Bangor","county":"Butte","locationNotes":null,"crowdType":"Spontaneous Assembly","crowdSize":"Community en masse","open":"Open","oldAuthorities":"Suspect seized from Jail","crime":"Murder and robbery","punishment":"Hanged (3)\nRemanded to authorities (1)","lethality":"Both","otherNamesMentioned":null,"numberSuspects":4,"suspectNames":"Ringgold\nJohnson\nLake\nJones","suspectRaces":"White","confession":"Jones confessed against his companions and was spared","suspectNotes":"Ringgold, Johnson, and Lake hanged. Jones confessed and was spared.","victimNumber":"Multiple unspecified","victimNames":"Unnamed","victimGenders":"Male","victimRaces":"Asian","victimNotes":"\"Chinamen\"","oldSources":"HHB PT, I: 561;\nMDH 4-3-57 p 2","oldNotes":"MDH article notes that \"the present law indirectly upholds the murder and robbery of Chinamen and all other persons, other than white.\" Also notes suspects always committed crimes against Chinese in a way that no whites were witness, so they couldn't get in legal trouble for it without credible witnesses.","origDBindex":"278"},{"caseNum":279,"cwIndex":null,"gdIndex":"G-D 141 says 3 suspects","crossRefNotesCwGd":null,"latDecimal":"38.7346252","lonDecimal":-120.755211,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1857,"yearMonth":"1857/04","yearMonthDay":"1857/04/20","dateNotes":null,"state":"California","place":"Smith's Flat","county":"El Dorado","locationNotes":null,"crowdType":"People's Court","crowdSize":"Community en masse","open":"Open","oldAuthorities":null,"crime":"Attempted murder/ assault","punishment":"Banished","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Mrs. C.","suspectRaces":"White","confession":null,"suspectNotes":"Mrs. C. and her family were banished as a result of the incident where she threw a woman \"into a ditch.\" Article notes Mrs. C. \"appears to be somewhat of a virago.\"","victimNumber":"1","victimNames":"Unnamed","victimGenders":"Female","victimRaces":"White","victimNotes":null,"oldSources":"MDH 4-28-57 p 3","oldNotes":null,"origDBindex":"279"},{"caseNum":280,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"36.9151584","lonDecimal":-121.7512298,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1857,"yearMonth":"1857/05","yearMonthDay":"1857/05/16","dateNotes":null,"state":"California","place":"Watsonville","county":"Santa Cruz","locationNotes":"Hung \"on a sign that extended across an alley\" near jail. Was Watsonville part of Monterey Co. at the time? Authorities planned to bring suspect to Monterey for trial.","crowdType":"\"a party of men\"","crowdSize":null,"open":"Open","oldAuthorities":"Suspect seized from Jail","crime":"Murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Dean","suspectRaces":"White","confession":null,"suspectNotes":"Article notes that Dean was acting in self-defense","victimNumber":"1","victimNames":"Unnamed \"Californian,\" boy of 17 years old","victimGenders":"Male","victimRaces":"Latino","victimNotes":"One of a group of Californians confronting Dean over an incident involving Dean's \"Spanish wife,\" who was doing laundry","oldSources":"AC 5-29-57 p?","oldNotes":"Happened shortly after midnight at the end of May 15.","origDBindex":"280"},{"caseNum":282,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"38.345194","lonDecimal":-122.9738878,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1857,"yearMonth":"1857/06","yearMonthDay":"1857/06/01","dateNotes":null,"state":"California","place":"Bodega","county":"Sonoma","locationNotes":"Held and executed at a warehouse \"overlooking a precipice of some twenty feet, from which there is a spout to a wharf on the beach, for the purpose of shipping produce\"","crowdType":"Spontaneous Assembly","crowdSize":"Small group","open":"Secrret","oldAuthorities":"Suspect seized from ad hoc Jail","crime":"Murder--circumstanial evidence","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Julian","suspectRaces":"Indian","confession":null,"suspectNotes":"Suspected to be \"notorious for the last six years as a murderer and bravo--he having committed during that time no less than eight murders, besides killing his own wife and child.\"","victimNumber":"1","victimNames":"Alexandro","victimGenders":"Male","victimRaces":"Indian","victimNotes":null,"oldSources":"MDH 6-11-57 p 3","oldNotes":"Lynch mob composed of relatives/tribe members of Alexandro.","origDBindex":"282"},{"caseNum":283,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"38.009091","lonDecimal":-121.249674,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1857,"yearMonth":"1857/06","yearMonthDay":"1857/06/16","dateNotes":null,"state":"California","place":"Calaveras River","county":"Tuolumne","locationNotes":"Changed location to estimated place on Calaveras River east of Stockton; better estimate should be possible; Hoskins's house was \"upon the Calaveras, about four miles from Stockton\" Now located about 4 miles east of Stockton on Calaveras per Google Maps","crowdType":"Spontaneous Assembly","crowdSize":"30","open":"Open","oldAuthorities":"Suspect taken prisoner at his house. \"A number [of lynchmob] were in favor of executing the wretch on the spot, while others gave more temperate counsels to deliver him over to the proper officers. This caused delay, during which time he was placed in custody of a watch, from whose care he managed to make his escape.\"","crime":"Incest","punishment":"Escaped","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Hoskins","suspectRaces":"White","confession":null,"suspectNotes":"Suspected of having a baby with his daughter","victimNumber":"1","victimNames":"Daughter of Hoskins","victimGenders":"Female","victimRaces":"White","victimNotes":"\"The daughter is also missing and it is feared she has committed suicide.\"","oldSources":"MDH 6-21-57 p 2","oldNotes":null,"origDBindex":"283"},{"caseNum":284,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"38.5663021","lonDecimal":-123.3327865,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1857,"yearMonth":"1857/09","yearMonthDay":"1857/09/08","dateNotes":null,"state":"California","place":"Salt Point","county":"Sonoma","locationNotes":"In the vicinity of Fort Ross","crowdType":"Spontaneous Assembly","crowdSize":"Community en masse","open":"Open","oldAuthorities":null,"crime":"Murder, robbery, \"etc.\"","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":3,"suspectNames":"Unnamed","suspectRaces":"Indian","confession":null,"suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":"Crimes \"committed at various times and places during the last two years\"","oldSources":"MDH 9-20-57 p 2","oldNotes":null,"origDBindex":"284"},{"caseNum":285,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"38.6750494","lonDecimal":-121.1476057,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1857,"yearMonth":"1857/09","yearMonthDay":"1857/09/21","dateNotes":null,"state":"California","place":"Folsom","county":"Sacramento","locationNotes":"\"taken out of his place of confinement\"","crowdType":"Vigilance Committee","crowdSize":null,"open":"Open","oldAuthorities":"tried before a Justice after being lashed","crime":"Attempted rape of children","punishment":"Whipped","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Robinson","suspectRaces":"Black","confession":null,"suspectNotes":null,"victimNumber":"3","victimNames":"unnamed \"little white girls\"","victimGenders":"Female","victimRaces":"White","victimNotes":null,"oldSources":"MDH 9-23-57 p 2","oldNotes":null,"origDBindex":"285"},{"caseNum":286,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"further on coordinates","latDecimal":"39.5137752","lonDecimal":-121.556359,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1857,"yearMonth":"1857/10","yearMonthDay":"1857/10/05","dateNotes":null,"state":"California","place":"Live Oak Flat","county":"Butte","locationNotes":"\"taken from a drift in Live Oak Flat\"\nUsing coordinates for Oroville. Check Durham; near Oroville; see http://www.buttecountychinese.net/osd_miningclaims.html. Check also with co histo society","crowdType":"Spontaneous Assembly","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Robbery--Other; \"various petty thefts\"","punishment":"Whipped","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":4,"suspectNames":"Unnamed","suspectRaces":"Chinese","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":"Mr. Day","victimGenders":"Male","victimRaces":"White","victimNotes":"Proprietor of Empie Saloon","oldSources":"MDH 10-7-57 p 2","oldNotes":null,"origDBindex":"286"},{"caseNum":287,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"Multiple punishments","latDecimal":"38.3004709","lonDecimal":-120.7063219,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1857,"yearMonth":"1857/10","yearMonthDay":"1857/10/04","dateNotes":null,"state":"California","place":"Mokelumne Hill","county":"Calaveras","locationNotes":"\"about half a mile from Campo Seco,\" on the road toward Mokelumne Hill","crowdType":"Organized Group; had been lying in wait","crowdSize":"3","open":"Secret","oldAuthorities":"\"Lorenz had been previously arrested on suspicion of having taken Hopkins' money, but was discharged witout an examination, there being no testimony against him.\"","crime":"Robbery--money","punishment":"stripped and tied him, whipped 50 lashes and hanged to extort confesion; fiinally relased him","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Henry Lorenz","suspectRaces":"White","confession":"Extorted--unsuccessful","suspectNotes":null,"victimNumber":"1","victimNames":"Hopkins","victimGenders":"Male","victimRaces":"White","victimNotes":"Hopkins not present in lynchmob","oldSources":"HHB PT, I: 559","oldNotes":null,"origDBindex":"287"},{"caseNum":288,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"Multiple punishments","latDecimal":"38.3751879","lonDecimal":-122.0008006,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1857,"yearMonth":"1857/10","yearMonthDay":"1857/10/00","dateNotes":null,"state":"California","place":"Vaca Valley","county":"Solano","locationNotes":"on Puta [or Putah] Creek; taken from Wolfskill's down the road toward the judge (in Contra Costa?) before they left the road \"at a desert place\" \"and started toward a place in the mountain where there is a thick wood.\"","crowdType":"Spontaneous Assembly","crowdSize":"Between 4 and 20 at diff. times","open":"Open","oldAuthorities":"on their way to a judge","crime":"Robbery--Stock","punishment":"Hanged and beaten","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":null,"suspectRaces":"Mexican/Latino","confession":null,"suspectNotes":"Aged man of spanish blood","victimNumber":"1","victimNames":"Wolfskill","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"HHB PT, I: 559","oldNotes":null,"origDBindex":"288"},{"caseNum":289,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"32.6064494","lonDecimal":-116.4689053,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1857,"yearMonth":"1857/12","yearMonthDay":"1857/12/25","dateNotes":null,"state":"California","place":"Milquetay Valley","county":"San Diego","locationNotes":"Robert Barr Smith, Tough Towns: True Tales from the Gritty Streets of the Old West, p. 26, states that Milquetay was renamed Campo (using GNIS for Campo, SD County); near Steel's ranch; \"taken across the Lower California line to be shot.\"","crowdType":"Vigilance Committee","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Murder and stock stealing","punishment":"Shot","lethality":"Lethal","otherNamesMentioned":"Guero, Aguerra's brother, who excpaed","numberSuspects":1,"suspectNames":"Aguerra","suspectRaces":"Mexican/Latino","confession":"Implicated others;  (his brother, Guero); confessed to robbery","suspectNotes":"brother to the notorioius Gero","victimNumber":null,"victimNames":"unnamed \"companion\" of Steel","victimGenders":null,"victimRaces":"Indian","victimNotes":"Race is inferred from the fact that the Vig. Committee formed to avenge his murder was composed of Indians.","oldSources":"San Diego Herald 1-2-58 p 2","oldNotes":null,"origDBindex":"289"},{"caseNum":290,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"HHB only","latDecimal":"39.1517792","lonDecimal":-121.5834912,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1858,"yearMonth":"1858/01","yearMonthDay":"1858/01/08","dateNotes":null,"state":"California","place":"Marysville","county":"Yuba","locationNotes":null,"crowdType":"Formal Vigilance Committee","crowdSize":"10-100","open":"Open","oldAuthorities":"Officer abetted proceedings","crime":"\"Desperadoes\"","punishment":"Banished","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":6,"suspectNames":null,"suspectRaces":"White","confession":null,"suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"HHB PT, I: 456","oldNotes":null,"origDBindex":"290"},{"caseNum":291,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"Multiple punishments;\nCHECK DATE","latDecimal":"38.5037966","lonDecimal":-120.7554891,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1857,"yearMonth":"1857/02","yearMonthDay":"1857/02/01","dateNotes":"Check day of incident","state":"California","place":"Fiddletown","county":"Amador","locationNotes":null,"crowdType":"Spontaneous Assembly","crowdSize":null,"open":"Open","oldAuthorities":"It seems the man who actually committed the robbery, Squire Kendall, was a Justice of the Peace of Fiddletown township","crime":"Robbery, $9,000","punishment":"\"severe means\" and released (2)\nReescued by authorities (1)\n","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":3,"suspectNames":"Stepplefield\n2 unnamed","suspectRaces":"White","confession":"Extorted--unsuccessful","suspectNotes":"Two unnamed \"were arrested, on suspicion, by the mob, and severe means resorted to in order to make them confess. Failing to make them do so, the mob liberated them, and arrested a third party, named Steppfield, who was subsequently rescued by the Sheriff.\" Passing reference is made to Steppfield as \"one of the men whom Squire Kendall was pretending to have Lynched, as a blind.\" Not sure what this means.","victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":"Victims had money, gold, etc. deposited in a safe, and the safe was robbed. One of themn, known as \"Drunken Joe,\" lost $750 and was sleeping in the room next to the safe when it happened. He recalled seeing Squire Kendall \"stoop down by the safe, which was unlocked, and take out several bags of dust, which he handed to a man, (whose name Joe did not learn) who passed it to a third party.","oldSources":"HHB PT, I: 561","oldNotes":"Eventually, authorities take into custody Steppfield, Squire Kendall, and a man called Big Bob. Kendall confessed and showed where money had been stashed.","origDBindex":"291"},{"caseNum":292,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"36.6012792","lonDecimal":-121.8829442,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1858,"yearMonth":"1858/02","yearMonthDay":"1858/02/12","dateNotes":null,"state":"California","place":"Monterey","county":"Monterey","locationNotes":null,"crowdType":"Formal Vigilance Committee","crowdSize":null,"open":"Open","oldAuthorities":"Officer abetted proceedings\n\nSuspect had been convicted; granted pardon of stay of execution; stay of execution had been given by Gov. Weller, but it was erroneously given for Anastasia Jesus. Sheriff De Gro deliberated before the Court directed Jose Anastasia to be hung.  Sheriff refused to carry out the order, so Deputy Sheriff did it.","crime":"Murder and robbery","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":"Confessed to murder for which he was sentenced, as well as another from years prior.","numberSuspects":1,"suspectNames":"Jesus Anastasia","suspectRaces":"Mexican/Latino","confession":null,"suspectNotes":"Gov. Weller mistakenly wrote stay of execution for \"Anastasia Jesus.\"","victimNumber":"2-5","victimNames":null,"victimGenders":"Male","victimRaces":"Mexican/ Latino","victimNotes":"The murder \"was an aggravated one\"","oldSources":"HHB PT, I: 477-478","oldNotes":null,"origDBindex":"292"},{"caseNum":293,"cwIndex":"C-W 74","gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"38.8968431","lonDecimal":-121.0760567,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1858,"yearMonth":"1858/02","yearMonthDay":"1858/02/19","dateNotes":null,"state":"California","place":"Auburn","county":"Placer","locationNotes":"Using GNIS Old Auburn Historic District","crowdType":"Spontaneous Assembly","crowdSize":"Over 100 men at first; many more arrived shortly thereafter","open":"Open","oldAuthorities":"Sheriff tried to protect suspect, begged for citizens to respect the law, but was overpowered","crime":"Murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Aaron Bracey","suspectRaces":"Black","confession":"Remorseful ","suspectNotes":null,"victimNumber":"1","victimNames":"Murphy","victimGenders":"Male","victimRaces":"White","victimNotes":"Murphy was \"a brick mason and worthy citizen.\" ","oldSources":"HHB PT, I: 562;\nAC 2-20-58 p 1\nAC 1856-02-23","oldNotes":null,"origDBindex":"293"},{"caseNum":294,"cwIndex":null,"gdIndex":"G-D 144","crossRefNotesCwGd":null,"latDecimal":"33.1992068","lonDecimal":-116.5986298,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1858,"yearMonth":"1858/02","yearMonthDay":"1858/02/20","dateNotes":null,"state":"California","place":"San Felipe","county":"San Diego","locationNotes":null,"crowdType":"Small organized group","crowdSize":null,"open":null,"oldAuthorities":"The men who were engaged in the hanging were arrainged but discharged because lack of evidence \"that they had committed any offence against the public peace!\" Squire Maxey sentenced the Chief, Francisco, to 50 lashes for lending a horse to the thieves.","crime":"horse stealing","punishment":"3 Hanged; 1 whipped and lived","lethality":"Both","otherNamesMentioned":null,"numberSuspects":4,"suspectNames":"Three unnamed Indians were the thieves; Chief Francisco lent his horse for the crime.","suspectRaces":"Indian","confession":null,"suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":"18-20 head of cattle stolen from San Felipe, and one hundred from Warner's.","oldSources":"San Diego Herald 2-27-58 p 2","oldNotes":"San Diego Herald in favor of the lynching","origDBindex":"294"},{"caseNum":295,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"33.1092099","lonDecimal":-116.6730763,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1858,"yearMonth":"1858/03","yearMonthDay":"1858/03/30","dateNotes":null,"state":"California","place":"Santa Ysabel","county":"San Diego","locationNotes":null,"crowdType":"Spontaneous Assembly","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Cattle stealing","punishment":"Whipped, 200 lashes; died","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":null,"suspectRaces":"Indian","confession":null,"suspectNotes":"unclear whether suspect died from whipping","victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"San Diego Herald 4-10-58 p 1","oldNotes":"Passing reference made to whipping death for cattle theft. \"One fellow whom they whipped, out near San Ysabel, the other day, got so mad about it that he just walked off about a hundred yards and laid down and died!\" Few details. San Diego Herald recommends hanging as a more \"delectable and efficacious remedy\" than mere whipping.","origDBindex":"295"},{"caseNum":296,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"Added report, recheck","latDecimal":"34.0739197","lonDecimal":-118.029072,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1858,"yearMonth":"1858/04","yearMonthDay":"1858/04/26","dateNotes":"Check day of incident","state":"California","place":"El Monte","county":"Los Angeles","locationNotes":null,"crowdType":"Individual Retribution","crowdSize":"5","open":"Secret","oldAuthorities":"Handed over to the authorities after being tortured","crime":"Robbery--money","punishment":"Hanged and remanded","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"James E. Carter","suspectRaces":"White","confession":"Extorted--successful","suspectNotes":null,"victimNumber":"1","victimNames":"Perkins","victimGenders":"Male","victimRaces":"White","victimNotes":"Perkins buried some money he had from purchasing cattle; Carter observed him; Perkins told what he was doing in confidence. When Perkins came back to the spot a couple days later and found the money gone, he accused Carter. He then hired four unnamed men to assist in capturing and hanging Carter in order to get a confession of where his money had been stashed.","oldSources":"LA Star 5-1-58 p 2;\n1858-05-11 AC p1c4\n1859-07-30 LA Star p1c3","oldNotes":"same person LA Star 7-30-59 p 2?","origDBindex":"296"},{"caseNum":298,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"36.973381","lonDecimal":-122.0355319,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1858,"yearMonth":"1858/05","yearMonthDay":"1858/05/13","dateNotes":"Check day of incident","state":"California","place":"Santa Cruz","county":"Santa Cruz","locationNotes":null,"crowdType":"Spontaneous Assembly","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Murder--circumstanial evidence","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Ysidro Silvas","suspectRaces":"Mexican/Latino","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":null,"victimGenders":"Male","victimRaces":"Mexican/ Latino","victimNotes":null,"oldSources":"AC 6-3-58 p 1","oldNotes":null,"origDBindex":"298"},{"caseNum":299,"cwIndex":null,"gdIndex":"G-D 146","crossRefNotesCwGd":"is latter art in LA Star about a different incident? [seems like it might be, though it is connected to Frank Lane's murder]","latDecimal":"37.6616708","lonDecimal":-120.4612046,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1858,"yearMonth":"1858/05","yearMonthDay":"1858/05/28","dateNotes":null,"state":"California","place":"La Grange","county":"Stanislaus","locationNotes":"Using lagrange po stanislaus co; hanging took place 30 yards from the jail","crowdType":"Spontaneous Assembly","crowdSize":"61","open":"Secrret","oldAuthorities":"Suspect take from jail after mob locked up the sheriff; inquest held, determining that hanging was committed by person unknown to the jury","crime":"Murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Anderson","suspectRaces":"White","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":"Frank Lane","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"AC 6-2-58 p 1;\ncheck LA Star 6-12-58 p 2\n1858-05-31 SDU p3c2\n1858-06-01 SDU p3c2\n1858-06-10 Sonoma Democrat p2c3\n1858-06-12 LA Star p1c5","oldNotes":"is latter art in LA Star about a different incident?","origDBindex":"299"},{"caseNum":300,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"DELETE? may HAVE OCCURRED IN NEVADA (RATHER, UTAH TERR.) REPORT, HOWEVER, SAYS PLUMAS COUNTY; Check Taylor's notes","latDecimal":"40.1290677","lonDecimal":-120.3182682,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1858,"yearMonth":"1858/06","yearMonthDay":"1858/06/06","dateNotes":null,"state":"Utah Terr.","place":"Honey Lake Valley","county":"Plumas","locationNotes":"AC 6-21 states Plumas County, but no Honney Lake valley there Durham; Keep checkingmany choices GNIs; using Honey Lake mine; report from Placerville, reference to residents of Genoa. Seems to have taken place in Nevada; \"crime was committed on Utah soil\"","crowdType":"People's Court","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Accessory to murder of Frenchman","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Snow","suspectRaces":"White","confession":"implicated others","suspectNotes":null,"victimNumber":"1","victimNames":null,"victimGenders":"Male","victimRaces":"Other \"foreigner\"","victimNotes":null,"oldSources":"AC 6-10-58 p 2","oldNotes":null,"origDBindex":"300"},{"caseNum":301,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"Multiple punishments","latDecimal":"36.3270975","lonDecimal":-119.3265231,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1858,"yearMonth":"1858/07","yearMonthDay":"1858/07/28","dateNotes":null,"state":"California","place":"Visalia","county":"Tulare","locationNotes":"taken from sheriff to \"neighbouring grove\"","crowdType":"Individual retribution","crowdSize":"4 or 5 men; including Wm. Gouverneur Morris","open":"Secret","oldAuthorities":"Deputy taken from custody of Sheriff's guard","crime":"Larceny","punishment":"Whipped and Hanged to force sale of land held for Stapleford; then returned to sheriff","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"William C. Deputy","suspectRaces":"White","confession":null,"suspectNotes":"Uncle of Mr. Deputy, age 56, native of Delaware","victimNumber":"1","victimNames":"Stpleford","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"HHB PT, I: 470","oldNotes":null,"origDBindex":"301"},{"caseNum":302,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"Multiple punishments","latDecimal":"39.75972222","lonDecimal":-121.675,"latNDegrees":39,"latNMinutes":45,"latNSeconds":35,"lonWDegrees":121,"lonWMinutes":40,"lonWSeconds":30,"year":1857,"yearMonth":"1857/06","yearMonthDay":"1857/06/00","dateNotes":null,"state":"California","place":"Butte Creek","county":"Butte","locationNotes":"Durham 225; lat 39˚ 45\" 35'N; long. 121˚ 40\" 30' W","crowdType":"Spontaneous Assembly","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Robbery--money","punishment":"Shot\nQueue cut off\nHanged to extort confession (failed)\nReleased (probably died)","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":null,"suspectRaces":"Chinese","confession":"Unsuccessful","suspectNotes":null,"victimNumber":"1","victimNames":null,"victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"HHB PT, I: 561","oldNotes":null,"origDBindex":"302"},{"caseNum":303,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"38.4985333","lonDecimal":-121.0516787,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1857,"yearMonth":"1857/10","yearMonthDay":"1857/10/18","dateNotes":null,"state":"California","place":"Cooks Bar","county":"Sacramento","locationNotes":"Gudde CGC 81; South side of Cosumnes river, west of Michigan bar; near Katesville; two miles below michigan bar; here coords estimated downstream from Michigan Bar","crowdType":"Avenged by the citizens","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":null,"suspectRaces":"Chinese","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":null,"victimGenders":"Female","victimRaces":"Other \"foreigner\"","victimNotes":null,"oldSources":"HHB PT, I: 562-563","oldNotes":null,"origDBindex":"303"},{"caseNum":304,"cwIndex":null,"gdIndex":"G-D 153 has it as Cook's Bar","crossRefNotesCwGd":null,"latDecimal":"34.0726866","lonDecimal":-118.2130443,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1858,"yearMonth":"1858/11","yearMonthDay":"1858/11/30","dateNotes":null,"state":"California","place":"Los Angeles","county":"Los Angeles","locationNotes":null,"crowdType":"Spontaneous Assembly","crowdSize":"100-1000","open":"Secrret","oldAuthorities":"Suspect seized from Jail","crime":"Murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Pancho Daniel","suspectRaces":"Mexican/Latino","confession":null,"suspectNotes":null,"victimNumber":"2-5","victimNames":null,"victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"HHB PT, I: 504-506;\nLA Star 12-4-58;\nAC 12-7-58 p 1","oldNotes":null,"origDBindex":"304"},{"caseNum":305,"cwIndex":"C-W 81 has incident in Sta Barbara","gdIndex":" G-D 154? ","crossRefNotesCwGd":null,"latDecimal":"38.0352009","lonDecimal":-120.4007505,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1858,"yearMonth":"1858/12","yearMonthDay":"1858/12/02","dateNotes":null,"state":"California","place":"Columbia","county":"Tuolumne","locationNotes":null,"crowdType":"Spontaneous Assembly","crowdSize":"Community en masse","open":"Open","oldAuthorities":"Suspect escaped from jail; officers opposed proceedings; restrained by crowd","crime":"Murder","punishment":"Hanged (Morgan)\nSeized by authorities from mob (Wallace)","lethality":"Both","otherNamesMentioned":null,"numberSuspects":2,"suspectNames":"Morgan and Wallace","suspectRaces":"White","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":"John Leary","victimGenders":"Male","victimRaces":"White","victimNotes":"killed Monday night, 11/29, at 11:30 pm","oldSources":"HHB PT, I: 563-564;\nAC 12-6-58 p 1;\nAC 12-6-58 p?;\nLA Star 12-18-58 p 1","oldNotes":null,"origDBindex":"305"},{"caseNum":306,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"34.4208305","lonDecimal":-119.6981901,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1859,"yearMonth":"1859/08","yearMonthDay":"1859/08/23","dateNotes":null,"state":"California","place":"Carpenteria","county":"Santa Barbara","locationNotes":"15 miles from Santa Barbara; hanged in front yard of their house","crowdType":"Number of men","crowdSize":null,"open":"Secret","oldAuthorities":"several men arrested on suspicion of carrying out the lynching","crime":"Cattle Stealing","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":"Arrested on suspicion of lynching:\nJohn Nidever\nEvenezer Nidever (son)\nCharles Callis (discharged)\nMr. McKeon\nMr. Coates\nShot by Badillo's other son:\nGeorge Nidever (another son of John Nidever)","numberSuspects":2,"suspectNames":"Francisco Badillo; aka Bardelia\nBadillo's son","suspectRaces":"Mexican","confession":null,"suspectNotes":"son age 14 or 17","victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"HHB PT, I: 482","oldNotes":"\"On Tuesday night, 23d August, some persons went to the house of Senor Badillo,… and after seizing upon the father, and his son aged about seventeen years, took them to a tree about twenty yards from the house, and hung them.\" A body of 50 or 60 \"native Californian,\" upon learning the news the next morning, set out to find the lynchers. \"Suspicion fastened upon an American named Nidiver, and his two sons, who were immediately captured.\" George, one of the sons, was shot, while the father and other son were imprisoned. This \"created a great excitement among the American population of S.B., and they immediately turned out in numbers to guard the jail, as it was feared that the remaining Nidivers would be taken out during the night and hung or shot.\"\n\n9-9 gives more details about nature of accusations against Badillo and son, as well as about killing of George Nidever and trial of his brother and father (John and Ebenezer), and trial of those who killed George. This is a complicated case and involves both hispanic Californian and Anglo American suspects and victims in two retaliatory incidents of lynching.\n\n9-19 adds: John and Ebenezer Nidever, --- McKeon and --- Coates, were liberated by the Grand Jury, \"having reported 'no bill.'\" Jury were split about accuseds' involvement in lynching of Badillo. \"The Mayor of the town had resigned his office... The Gazette urges that a 'Council of Safety' be formed. The feeling between the Americans and native Californians continues very bitter.\"","origDBindex":"306"},{"caseNum":307,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"39.5602894","lonDecimal":-120.8280559,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1860,"yearMonth":"1860/04","yearMonthDay":"1860/04/21","dateNotes":null,"state":"California","place":"Pine Grove","county":"Sierra","locationNotes":"Hanged at Pratt's Livery Stable; Pine Grove 30 miles from Downieville","crowdType":"Spontaneous Assembly","crowdSize":"About 140 men","open":"Secrret","oldAuthorities":"Suspect seized from custody of constable, preparatory to taking him to jail in Downieville","crime":"Murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"John O'Donnell","suspectRaces":"White","confession":null,"suspectNotes":"Jealous of Shields's attention to his (O'donnell's) wife","victimNumber":"1","victimNames":"Alexander Shields","victimGenders":"Male","victimRaces":"White","victimNotes":"Foreman of Minnesota Mining Co. at Pine Grove","oldSources":"HHB PT, I: 564-565;\nLA Star 6-12-60 p 2","oldNotes":null,"origDBindex":"307"},{"caseNum":308,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"37.8196499","lonDecimal":-120.6721494,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1860,"yearMonth":"1860/06","yearMonthDay":"1860/06/12","dateNotes":null,"state":"California","place":"Knight's Ferry","county":"Stanislaus","locationNotes":"Suspect seized and hung while trying to escape Knight's Ferry","crowdType":"People's Court","crowdSize":"Community en masse","open":"Open","oldAuthorities":null,"crime":"rape and murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Antonio Ruez","suspectRaces":"Mexican/Latino","confession":"\"He confessed his crime to a countryman of his before the body of the unfortunate girl was found.\"","suspectNotes":null,"victimNumber":"1","victimNames":"Walther","victimGenders":"Female","victimRaces":"German","victimNotes":null,"oldSources":"SDU 6-12-60 p 2c1\nAC 6-11-60 p1c6\n1860-06-11 SDU p2c1","oldNotes":null,"origDBindex":"308"},{"caseNum":309,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"Check location","latDecimal":"38.08333333","lonDecimal":-120.55833333,"latNDegrees":38,"latNMinutes":5,"latNSeconds":null,"lonWDegrees":120,"lonWMinutes":33,"lonWSeconds":30,"year":1860,"yearMonth":"1860/09","yearMonthDay":"1860/09/07","dateNotes":null,"state":"California","place":"Altaville","county":"Calaveras","locationNotes":"citizens of Angel's Camp, Altaville, and neighboring camps camp together to make resolution against suspects","crowdType":"People's Court","crowdSize":"100","open":"Open","oldAuthorities":"Suspects have served time in jail previously; no authorities involved this time","crime":"General Nuisance and Stealing","punishment":"Banished","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":4,"suspectNames":"William Riddle\nBenjamin Doyle\nGeorge Rush\nWilliam Grey","suspectRaces":"White","confession":null,"suspectNotes":"\"notoriously dissolute and desperate men, constantly engaged in drinking, gambling and fighting\"","victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":"citizens of associated camps","oldSources":"HHB PT I: 473\nSDU 9-20-60 p1","oldNotes":null,"origDBindex":"309"},{"caseNum":310,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"40.9384828","lonDecimal":-122.4186241,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1861,"yearMonth":"1861/03","yearMonthDay":"1861/03/05","dateNotes":null,"state":"California","place":"Dog Creek","county":"Shasta","locationNotes":"Not clear…","crowdType":"People's Court","crowdSize":null,"open":"Secret","oldAuthorities":null,"crime":"Murder and robbery","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"To-ah-yo-la [or To-an-yo-la]","suspectRaces":"Indian","confession":null,"suspectNotes":"suspected in murder from Fall of 1854. Given over to people by fellow Indians, to whom To-ah-yo-la bragged about his crime","victimNumber":"1","victimNames":"Larkins","victimGenders":"Male","victimRaces":"White","victimNotes":"murdered in fall of 1854","oldSources":"SDU 3-19-61 p 4","oldNotes":"Suspect hanged for 1854 murder","origDBindex":"310"},{"caseNum":311,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"34.09723120","lonDecimal":-118.1078472,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1861,"yearMonth":"1861/04","yearMonthDay":"1861/04/28","dateNotes":null,"state":"California","place":"Mission San Gabriel","county":"Los Angeles","locationNotes":"Using San Gabrield  mission coordinates; \"at the old mission\"","crowdType":"The people","crowdSize":null,"open":"open","oldAuthorities":null,"crime":"Wife abuse, Murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Jose Claudio Alvitre","suspectRaces":"Californian","confession":null,"suspectNotes":"Aged","victimNumber":"1","victimNames":"his wife","victimGenders":"Female","victimRaces":"Californian","victimNotes":"LA Star 5/4/61 p2c3 \"his own countrymen took the lead in arranging the preliminaries.\"","oldSources":"HHB PT I: 565-566\nAC 5-11-61 p (2?)\n\"Vigilantism in Los Angeles,\" Southern California Quarterly, LIV (1972) 23","oldNotes":"LA Star 5/4/61 p2c3","origDBindex":"311"},{"caseNum":312,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"35.2670731","lonDecimal":-120.6689034,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1861,"yearMonth":"1861/09","yearMonthDay":"1861/09/12","dateNotes":null,"state":"California","place":"San Luis Obispo","county":"San Luis Obispo","locationNotes":"Hanged in jail yard doorway","crowdType":"Force of Americans","crowdSize":null,"open":"Secret","oldAuthorities":"taken from jail","crime":"Rape","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Unnamed","suspectRaces":"Mexican","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":null,"victimGenders":"Female","victimRaces":"White","victimNotes":null,"oldSources":"HHB PT I: 575\nSDU 9-26-61 p 2","oldNotes":"Hanged in jailyard doorway","origDBindex":"312"},{"caseNum":313,"cwIndex":"C-W 84","gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"34.0726866","lonDecimal":-118.2130443,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1861,"yearMonth":"1861/10","yearMonthDay":"1861/10/17","dateNotes":null,"state":"California","place":"Los Angeles","county":"Los Angeles","locationNotes":"Hanged on alameda Street","crowdType":"German population","crowdSize":null,"open":null,"oldAuthorities":"Taken from jail; Sheriff defended suspect \"bravely\"","crime":"Murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Francisco Cota","suspectRaces":"Mexican","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":"Mrs. Lorenzo Leck","victimGenders":"Female","victimRaces":"German","victimNotes":null,"oldSources":"Vigilantism in Los Angeles, Southern California Quarterly, LIV (1972) 23\nSDU 10-18-61 p 2\nHHB PT I: 506-507","oldNotes":null,"origDBindex":"313"},{"caseNum":314,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"Multiple punishments\nNew Report","latDecimal":"38.6421267","lonDecimal":-121.1557799,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1861,"yearMonth":"1861/11","yearMonthDay":"1861/11/16","dateNotes":null,"state":"California","place":"Prairie City","county":"Sacramento","locationNotes":"2 miles south of Folsom","crowdType":"Mob; the entire neighborhood was aroused","crowdSize":"The miners","open":"Secret","oldAuthorities":"Coroner's inquest: hanged by persons unknown","crime":"Robbery sluice boxes","punishment":"Dragged by a rope placed around his neck\nBeaten for more than an hour\nhanged; \"an hour or more was spent by the mob in exercises [torture] of this character\"","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":null,"suspectRaces":"Chinese","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":null,"victimGenders":"Male","victimRaces":null,"victimNotes":null,"oldSources":"SDU 11-16-61 p 3 (2?)","oldNotes":null,"origDBindex":"314"},{"caseNum":315,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"different locations","latDecimal":"34.6589924","lonDecimal":-118.3783931,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1862,"yearMonth":"1862/03","yearMonthDay":"1862/03/24","dateNotes":null,"state":"California","place":"Lake Elizabeth","county":"Los Angeles","locationNotes":"On the road between Lake Elizabeth and Fort Tejon. Allajo hung at Eliz Lake; the three or four others were hung in the vicinity of Four Creeks","crowdType":"Spontaneous Assembly","crowdSize":"Small group of stock owners","open":"Open","oldAuthorities":"Officers opposed proceedings;  restrained by crowd","crime":"stock stealing","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":5,"suspectNames":"Allajo\n4 unnamed","suspectRaces":"Californians","confession":null,"suspectNotes":"\"four or five Californians, or Mexicans\"; Allajo lived in Negro Alley in San Diego","victimNumber":null,"victimNames":"unnamed stock owners","victimGenders":"Male","victimRaces":null,"victimNotes":null,"oldSources":"HHB PT I: 566\nVigilantism in Los Angeles, Southern California Quarterly, LIV (1972) 23\nLA Star 3/24/62 p2c2","oldNotes":"the thieves \"were on their way to the upper country with stock… [and] they had been overtaken on the road by the owners of the cattle, and immediately executed.\"","origDBindex":"315"},{"caseNum":316,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"38.1079448","lonDecimal":-122.2643158,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1863,"yearMonth":"1863/05","yearMonthDay":"1863/05/06","dateNotes":null,"state":"California","place":"Vallejo","county":"Solano","locationNotes":"Suspect held and executed at \"Wilson's.\"","crowdType":"Spontaneous Assembly","crowdSize":"60 men, \"with faces blackened and masked, armed with pistols and knives\"","open":"Secret","oldAuthorities":"Taken from custody; Sheriff resisted","crime":"Attempted  murder","punishment":"Shot","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Manuel Vera","suspectRaces":"Mexican","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":"Shafley","victimGenders":"Female","victimRaces":"White","victimNotes":"\"a young man named Shafley, in company with a man named Preston;\" article speculates Vera meant to shoot Preston because Preston shot Vera \"some months ago\"","oldSources":"SDU 5-7-63 p 3\nAC 5-7-63 p 1","oldNotes":null,"origDBindex":"316"},{"caseNum":317,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"39.8115503","lonDecimal":-121.6596972,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1863,"yearMonth":"1863/06","yearMonthDay":"1863/06/08","dateNotes":null,"state":"California","place":"Helltown","county":"Butte","locationNotes":"\"found suspended to a hydraulic flume\"","crowdType":"The Citizens","crowdSize":null,"open":null,"oldAuthorities":"captured and held as prisoners for two or three days","crime":"Robbery and running off horses","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":5,"suspectNames":"\"Capitan\"\n4 unnamed","suspectRaces":"Indian","confession":null,"suspectNotes":"\"It is not known whether they confessed to any crime, but is certain the \"Capitan\" and four of his tribe suffered the extreme punishment of Judge Lynch.\"","victimNumber":null,"victimNames":null,"victimGenders":"Male","victimRaces":null,"victimNotes":"unnamed owners of cabins and horses","oldSources":"HHB PT I: 568\nSDU 6-11-63 p 2","oldNotes":"one article suggests the Indians' tribemates are rallying the troops to take vengeance","origDBindex":"317"},{"caseNum":318,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"37.0046727","lonDecimal":-121.5842487,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1863,"yearMonth":"1863/08","yearMonthDay":"1863/08/25","dateNotes":"Murder took place in late June 1863","state":"California","place":"Gilroy","county":"Santa Clara","locationNotes":"Using coordinates for San Jose West; check coordinates for all Sta Clara","crowdType":"Mob","crowdSize":null,"open":"Secrret","oldAuthorities":null,"crime":"Murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"unnamed","suspectRaces":"Indian","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":null,"victimGenders":"Male","victimRaces":"Spaniard","victimNotes":"\"A Spaniard, who name is not reported;\" \"a teamster\"","oldSources":"\nHHB PT I: 566","oldNotes":"suspected murder of the Spaniard happened over a month before the lynching","origDBindex":"318"},{"caseNum":319,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"34.0726866","lonDecimal":-118.2130443,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1863,"yearMonth":"1863/11","yearMonthDay":"1863/11/21","dateNotes":null,"state":"California","place":"Los Angeles","county":"Los Angeles","locationNotes":null,"crowdType":"Organized Vigilance Committee","crowdSize":"200","open":"Secrret","oldAuthorities":"Taken from jail","crime":"Highway robbery, Assault, murder; theft (Wood)","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":5,"suspectNames":"Boston Damewood; Blew has as Daimwood\nJose Sylvester Olivas\nChase\nWood\nIbarra\nBlew states Daimwood had three cohorts and that Wood was executed at same time; because he was also in jail, although not associated with Daimwood; he was there for stealing chickens","suspectRaces":"White (3)\nMexican (2)","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":"Officer Hester; Blew names victim as R.A. Hester, a miner","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"HHB PT I:  508-509? 569?\nAC 11-24-63 p?\nVigilantism in Los Angeles, Southern California Quarterly, LIV (1972) 23\nLA Star 11/28/63 p2c1\nNewmark 60 ears 324-325","oldNotes":null,"origDBindex":"319"},{"caseNum":320,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"37.5966299","lonDecimal":-122.0779166,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1863,"yearMonth":"1863/11","yearMonthDay":"1863/11/25","dateNotes":null,"state":"California","place":"Alvarado","county":"Alameda","locationNotes":"aka New Haven gudde, CPN 11; using alvarado Post Office; hung at Alvarado Bridge","crowdType":"Spontaneous Assembly","crowdSize":"\"Citizens\"","open":"Open","oldAuthorities":"Seized from his guard after preliminary hearing","crime":"Shot into a hotel; smashed windows in a Catholic church and then shot at a man (no injury)","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":null,"suspectRaces":"Mexican","confession":null,"suspectNotes":"one of a \"party of Spanish desperadoes\"","victimNumber":null,"victimNames":"Frank Devol","victimGenders":"Female","victimRaces":"White","victimNotes":"happened at midnight the morning of 11/25","oldSources":"HHB PT I: 534\nSDU 11-26-63 p 3\n","oldNotes":null,"origDBindex":"320"},{"caseNum":321,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"33.7097418","lonDecimal":-118.2675707,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1863,"yearMonth":"1863/12","yearMonthDay":"1863/12/09","dateNotes":null,"state":"California","place":"LA Harbor","county":"Los Angeles","locationNotes":"The lynching took place in LA harbor; Ceredel en route to San Quentin","crowdType":"LA VC","crowdSize":null,"open":"Open","oldAuthorities":"Seized from custody on ship leaving LA Harbor to take him to San Quentin; hanged from yard arm and thrown overboard\n\nHad been convicted of attempted murder of Marshall Trafford; after conviction confessed to particpating in murder of John Rains in Chino and named his confederates in the latter.","crime":"Attempted murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Manuel Ceredel","suspectRaces":"Mexican","confession":"confessed to being involved in murder of John Rains; gave names of other murderers in Rains murder","suspectNotes":"one member of a group of five criminals; suspect implicated four other members in murder of John Rains","victimNumber":"2","victimNames":"John Rain\nMarshall Trafford","victimGenders":"Male","victimRaces":"White","victimNotes":"Blew describes Cerredel murdering Rains, a local rancher; sentenced for murder of Trafford; confessed to Rains","oldSources":"HHB PT I: 507-508\nAC 12-11-63 p 1\nVigilantism in Los Angeles, Southern California Quarterly, LIV (1972) 24\nLA Star 12/12/63 p2c1","oldNotes":null,"origDBindex":"321"},{"caseNum":322,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"34.0726866","lonDecimal":-118.2130443,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1863,"yearMonth":"1863/12","yearMonthDay":"1863/12/17","dateNotes":null,"state":"California","place":"Los Angeles","county":"Los Angeles","locationNotes":"Seized in Santa Barbara week after crime; convicted of murder in LA. ; Seized on road from Santa Barbara to San Luis Obispo a week after crime; convicted of murder in LA.; hung in the lumber yard of Major Banning on \"the cross piece of the large door-frame of the yard\"","crowdType":"LA VC","crowdSize":"some articles report a disorganized mob","open":"Open","oldAuthorities":"Seized from courtroom after convicted of murder","crime":"Murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Charles Wilkins, aka John Peters","suspectRaces":"English Mormon","confession":null,"suspectNotes":"suspect also said to have confessed to killing two men in Yreka and nine men in total; was sentenced to State Prison from San Luis Obispo for grand larceny, but escaped","victimNumber":"1","victimNames":"John Sanford; prominent rancher in LA; Blew describes as local merchant","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"HHB PT I: 509-511\nSDU 12-18-63 p 4\nVigilantism in Los Angeles, Southern California Quarterly, LIV (1972) 24\nLA Star 12/12/63 p2c1\nLA Star 12/19/63 p2c1\nNewmark, 60 years, 327\nAC 1863-12-17 p1c3\nAC 1863-12-18 p1c4\nAC 1863-12-23 p1\nCalifornia Farmer 1863-12-25 p6c2\nMarin County Journal 1863-12-26 p2c2\nMDA 1863-12-17 p2c2\nMDA 1863-12-24 p1c7\nMDA 1863-12-25 p3c1\nSDU 1863-12-17 p2c5\nSDU 1863-12-24 p3c3","oldNotes":null,"origDBindex":"322"},{"caseNum":323,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"See SDU 2-3-64, names Orosco as murderer hanged","latDecimal":"36.6012792","lonDecimal":-121.8829442,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1864,"yearMonth":"1864/01","yearMonthDay":"1864/01/06","dateNotes":null,"state":"California","place":"Monterey","county":"Monterey","locationNotes":null,"crowdType":"Vigilance Committee","crowdSize":"factions of American and Californian -- Ams. wanted to execute, Cals. didn't -- Ams. overruled Cals. after a fight between the two groups","open":"Open","oldAuthorities":"examined before a Justice's Court; crowd assembled and stores were closed; suspect hung \"a few hours after the excitement subsided\"","crime":"Attempted Murder (\"Martin is still living; but it is thought the wound will prove fatal.\")","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Gregoria, possibly Gregorio Orozco or Orosco","suspectRaces":"Indian","confession":"Confessed murder","suspectNotes":"\"There was no quarrel between them, nor had either ever seen the other before; and the only reason Gregoria gave for shooting Martin was that he felt like killing somebody, and he would have shot any other man who might have been passing at the time.\"","victimNumber":"1","victimNames":"John Martin","victimGenders":"Male","victimRaces":"White","victimNotes":"coming into Monterey from Carmelo to attend the Grand Jury then in session; shot near town","oldSources":"SDU 1-14-64 p 4\nPajaro Times 1-9-64 (reprinted in Gold Hill Ecvening News (Nev.), 11-14-64","oldNotes":null,"origDBindex":"323"},{"caseNum":324,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"Two (possibly three) separate lynchings -- one happened near Mr. Jones's store at Converse's Ferry, the other \"about one mile from town.\"\nRECHECK LOCATION","latDecimal":"36.9838387","lonDecimal":-119.6415301,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1864,"yearMonth":"1864/01","yearMonthDay":"1864/01/18","dateNotes":null,"state":"California","place":"Millerton","county":"Madera","locationNotes":"Using millerton school fresno county. RECHECK LOCATION: For county information, see [https://en.wikipedia.org/wiki/Millerton,_Madera_County,_California]. Millerton was the county seat at the time.","crowdType":"Spontaneous Assembly","crowdSize":"first by \"some unknown Americans;\" second \"by some persons unknown\"","open":"Open","oldAuthorities":"County judge tried to stop the lynching","crime":"Murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":4,"suspectNames":null,"suspectRaces":"3 Indians and 1 white","confession":"In first, Indians boasted about murder at Jones's store; in second, suspect confessed after being seized and taken to place of supposed murder, showed where he was buried.","suspectNotes":"In first, two Indians suspected and executed; in second, one Indian suspected to have \"in company with another, killed a shepherd about one year ago and buried him under a tree.\" Some of the articles also mention a white man being lynched, but none of the articles makes it clear how the American is involved or whether it is a separate crime and/or execution.","victimNumber":"2","victimNames":null,"victimGenders":"Male","victimRaces":"1 Chinese; 1 white","victimNotes":"separate murders; shepherd murder happened about a year prior to lynching","oldSources":"HHB PT I: 511?\nAC 1-22-64 p 1\nSDU 1-25-64 p 3","oldNotes":"Half of the articles mention the lynching of an American in addition to the 3 Indians but give no details","origDBindex":"324"},{"caseNum":325,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"Seems related to Case 324; Recheck both","latDecimal":"37.3618873","lonDecimal":-119.6326488,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1864,"yearMonth":"1864/01","yearMonthDay":"1864/01/21","dateNotes":null,"state":"California","place":"Fresno River","county":"Madera","locationNotes":"Many choices…narrow down? Hung \"on the Fresno River.\" Probably near Millerton because this lynching seems to be associated with no. 324 lynchings of Indians in Madera County","crowdType":"Citizens","crowdSize":"about 40 citizens","open":"Open","oldAuthorities":null,"crime":"Robbery, \"particular Chinamen\"","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Dickinson","suspectRaces":"White","confession":null,"suspectNotes":"one of a crew of four robbers who committed a series of crimes.","victimNumber":"1","victimNames":"\"The people\" of the region were the victims","victimGenders":"Male","victimRaces":"White","victimNotes":"This is likely the \"American\" lynching associated with the Indians lynched in no. 324 above","oldSources":"AC 1-22-64 p 1","oldNotes":null,"origDBindex":"325"},{"caseNum":326,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"multiple punishments","latDecimal":"36.6012792","lonDecimal":-121.8829442,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1864,"yearMonth":"1864/02","yearMonthDay":"1864/02/06","dateNotes":null,"state":"California","place":"Natividad","county":"Monterey","locationNotes":null,"crowdType":"Vigilance Committee; people's court","crowdSize":null,"open":"Open","oldAuthorities":"Prisoners taken forcibly from Justice Wooley","crime":"Robberies, \"depredations,\" and murder","punishment":"Hanged (Patricinio Lopez)\nWhippted and Remanded (Francisco Lopez and Salvador Menquita)","lethality":"Both","otherNamesMentioned":null,"numberSuspects":3,"suspectNames":"Patricinio Lopez (hanged)\nFrancisco Lopez (whipped and remanded)\nSalvador Menquita (whipped and remanded)","suspectRaces":"Californian","confession":"Patricinio confessed murder to his brother","suspectNotes":"Lopez family notorious in the area","victimNumber":"1+","victimNames":"Unnamed Chileno murdered; suspects punished for other various crimes","victimGenders":"Male","victimRaces":"Chileno","victimNotes":null,"oldSources":"HHB PY I: 479\nSF Evening Bulletin 2-17-64 p 3 (from Monterey Gazette 2-11-64)","oldNotes":"First article also mentions public whipping of two boys, 12-13 yrs old, by their fathers for having \"hamstrung an ox.\" Second article notes that the Lopez's father was \"sentenced to death and hung, some years since, in this country.\"","origDBindex":"326"},{"caseNum":327,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"37.5191028","lonDecimal":-120.4374151,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1864,"yearMonth":"1864/09","yearMonthDay":"1864/09/20","dateNotes":null,"state":"California","place":"Snellings","county":"Merced","locationNotes":"GNIS \"Snelling\"; lynching happened at suspect's house near Snellings -- \"there being a camp meeting at Forlorn Hope, on the Merced, six miles below Snellings\"","crowdType":"Organized community group","crowdSize":null,"open":"Open","oldAuthorities":"took place after a camp meeting, where locals charged suspect with larceny","crime":"Horse thieving","punishment":"1 hanged, 1 shot","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":2,"suspectNames":"1 unnamed Mexican [hung]\nhis unnamed vaquero [shot]","suspectRaces":"Mexican","confession":"Suspect denied crime","suspectNotes":"vaquero shot for interfering with lynching. suspect charged for one particular horse theft two days prior, but article notes that \"Snellings has long been annoyed by bands of horse-thieves\"","victimNumber":"1+","victimNames":"unnamed horse owner[s]","victimGenders":"Male","victimRaces":"White","victimNotes":"shot at New Almaden mine","oldSources":"AC 9-25-64 p 1\nSDU 9-23-64 p 3","oldNotes":"SDU and AC different versions; led to tit-for-tat violence between Mexican community and white American community in region. Mexicans attacked a camp party and killed a man from Four Creeks; also shot McAmicks, the leader of the community group that lynched suspect; also shot a young man named Stockton; suspect apparently had sympathetic American neighbors; citizens of Snellings \"feeling deeply for the widow of the man hung by McAmicks and his gang made up a purse of $250 and presented it to his widow.\"","origDBindex":"327"},{"caseNum":328,"cwIndex":"C-W 95","gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"36.6012792","lonDecimal":-121.8829442,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1865,"yearMonth":"1865/05","yearMonthDay":"1865/05/19","dateNotes":null,"state":"California","place":"On road eight miles from Monterey towards Salinas","county":"Monterey","locationNotes":"suspect caught and hung on the road from Monterey to Salinas, \"about eight miles from here\"; hung to a tree","crowdType":"Infantry detachment","crowdSize":"12 men, 2 official guides","open":"Secret","oldAuthorities":"detachment of Company G, Sixth Infantry, stationed in Monterey; under command of Sergeant Ferguson and Constable Miller \"as guide\"","crime":"Attempted murder at New almaden Mine, of Seputy Sheriff of Santa Clara County","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Higura","suspectRaces":"Mexican","confession":null,"suspectNotes":"Pancho Alviso; captured by troops with Higura; Higura escaped and was later found lynched","victimNumber":"1","victimNames":"Dep. Sheriff","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"AC 5-20-65 p 1","oldNotes":null,"origDBindex":"328"},{"caseNum":329,"cwIndex":"C-W 96","gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"40.4211461","lonDecimal":-120.6572635,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1865,"yearMonth":"1865/07","yearMonthDay":"1865/07/06","dateNotes":null,"state":"California","place":"Susanville","county":"Lassen","locationNotes":null,"crowdType":"Those traveling with them","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Nurder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Charles Barnhart","suspectRaces":"White","confession":null,"suspectNotes":"both suspect and victim employed by Chico and Idaho Stage Company","victimNumber":"1","victimNames":"William Reagan","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"HHB PT I: 566\nSDU 7-10-65 p 2c1","oldNotes":"Very short article. \"The quarrel [between suspect and victim] originated about a piece of rope, and the same piece of rope was used in stretching Barnhart's neck.\"","origDBindex":"329"},{"caseNum":330,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"Check for additional reports; sketchy","latDecimal":"39.9368363","lonDecimal":-120.9471764,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1865,"yearMonth":"1865/07","yearMonthDay":"1865/07/11","dateNotes":"Tuesday Last from 7/20 report","state":"California","place":"Quincy","county":"Plumas","locationNotes":null,"crowdType":"Large party of men","crowdSize":null,"open":"Secret","oldAuthorities":null,"crime":"Robbery","punishment":"Other--apparently killed, likely by hanging","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":2,"suspectNames":"Charles Lee and Patrick Murphy","suspectRaces":"White","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":null,"victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"SDU 7-20-65 p 2c1","oldNotes":"Crowd incensed at release; only testimony from a Chinese (inelgible to testify against a white)","origDBindex":"330"},{"caseNum":331,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"36.9151584","lonDecimal":-121.7512298,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1866,"yearMonth":"1866/03","yearMonthDay":"1866/03/17","dateNotes":null,"state":"California","place":"Watsonville","county":"Santa Cruz","locationNotes":"Gilroy? near Visalia","crowdType":"Mob","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Theft--stock","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":4,"suspectNames":"Billy Wilbur of Gilroy\n3 unnamed men","suspectRaces":"White","confession":null,"suspectNotes":"it is unclear whether the three other men were lynched or involved in facilitating the lynching","victimNumber":null,"victimNames":"unnamed stock owners","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"SDU 3-22-66 p 2c3","oldNotes":"Two very short articles; not much detail","origDBindex":"331"},{"caseNum":332,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"39.4598965","lonDecimal":-120.8343894,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1866,"yearMonth":"1866/11","yearMonthDay":"1866/11/19","dateNotes":null,"state":"California","place":"Chipps Flat","county":"Sierra","locationNotes":"http://california.hometownlocator.com/maps/feature-map,ftc,2,fid,258339,n,chips%20flat.cfm","crowdType":"Spontaneous Assembly","crowdSize":"100-1000","open":"Open","oldAuthorities":"Seized from court","crime":"Robbery and murder","punishment":"Stoned to death, then hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":null,"suspectRaces":"Chinese","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":"John Newhouse","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"HHB PT I: 566=567","oldNotes":null,"origDBindex":"332"},{"caseNum":333,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"36.8455963","lonDecimal":-121.5382382,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1867,"yearMonth":"1867/05","yearMonthDay":"1867/05/20","dateNotes":null,"state":"California","place":"San Juan Bautista","county":"Monterey","locationNotes":"3 miles west of San Juan Bautista on road to Monterey.\nSan Benito Co?","crowdType":"\"a body of armed men, disguised as negroes\"","crowdSize":"small group","open":"Secret","oldAuthorities":"Suspect had been taken to San Juan, where he was tried by Justice W. S. Johnson. Suspect waived exam and \"was accordingly ordered committed to Monterey jail to await his trial.\" Suspect placed in custody of driver, \"there being no officer or other passenger on board\" and seized while on road to Monterey jail","crime":"robbery and rape","punishment":"dragged behind horse and hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Elder Thompson or Thomson","suspectRaces":"White","confession":null,"suspectNotes":"former soldier; deserter \"from the gallant Fourteenth, U.S.A., or from San Quentin\"","victimNumber":"1","victimNames":"Mrs. J.F. Ross","victimGenders":"Female","victimRaces":"White","victimNotes":"attacked while hosting suspect after Mr. Ross was out of the house","oldSources":"HHB PT I: 567\nAC 5-22-67 P?\nAC 5-25-67 p?\nSDU 5-23-67 p3c2","oldNotes":null,"origDBindex":"333"},{"caseNum":334,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"39.3754421","lonDecimal":-122.0035857,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1867,"yearMonth":"1867/08","yearMonthDay":"1867/08/04","dateNotes":null,"state":"California","place":"Boggs Ranch","county":"Colusa","locationNotes":"Changed location to Boggs Bend, to stand in for Boggs Ranch; check location further; see newspaper report; foothills of Colusa Co.; crime and execution both occurred at the victim's ranch house","crowdType":"\"the citizens\"","crowdSize":"30 people","open":"Open","oldAuthorities":"Members of lynchmob took a vote as to what should be done with suspects; 10 voted to hand over to authorities and 20 to hang them","crime":"assault and rape","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":2,"suspectNames":null,"suspectRaces":"Mexican and Indian","confession":"Indian confessed to Boggs after confronted by mob; Indian again confessed at mob's trial","suspectNotes":"both were ranch hands for Boggs. Boggs had raised Indian boy, \"and he had previously borne a good character, and Boggs had great confidence in him.\" Mexican came from Lower California a few weeks prior to incident. ","victimNumber":"1","victimNames":"unnamed woman","victimGenders":"Female","victimRaces":"White","victimNotes":null,"oldSources":"AC 8-7-67 p 1","oldNotes":null,"origDBindex":"334"},{"caseNum":335,"cwIndex":"C-W 98","gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"36.8455963","lonDecimal":-121.5382382,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1867,"yearMonth":"1867/08","yearMonthDay":"1867/08/21","dateNotes":null,"state":"California","place":"San Juan Bautista","county":"Monterey","locationNotes":"San Benito Co?","crowdType":"examined in accordance with Chief Justice Lynch","crowdSize":"Large company of mounted citizens","open":"Open","oldAuthorities":null,"crime":"murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Estevan or Esteban","suspectRaces":"Indian","confession":"Confesssed","suspectNotes":null,"victimNumber":"1","victimNames":"William Fitzgerald","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"HHB PT I: 567-568","oldNotes":null,"origDBindex":"335"},{"caseNum":336,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"40.1396126","lonDecimal":-120.9510675,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1868,"yearMonth":"1868/04","yearMonthDay":"1868/04/04","dateNotes":null,"state":"California","place":"Greenville","county":"Plumas","locationNotes":null,"crowdType":"Spontaneous Assembly","crowdSize":"1-10","open":"Secret","oldAuthorities":"seized from guard","crime":"murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Webb","suspectRaces":"White","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":"Gephart","victimGenders":"Female","victimRaces":"White","victimNotes":null,"oldSources":"HHB PT I: 568\nSDU 4-9-68\nAC 4-10-68 p 1","oldNotes":null,"origDBindex":"336"},{"caseNum":337,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"33.2422574","lonDecimal":-117.2705915,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1868,"yearMonth":"1868/05","yearMonthDay":"1868/05/29","dateNotes":null,"state":"California","place":"Guajome","county":"San Diego","locationNotes":"murder happened at Smith's house \"in the mountains\"","crowdType":"Spontaneous Assembly","crowdSize":"friends of victim","open":"Open","oldAuthorities":"Authorities took down suspect from tree after hanging for 36 hours","crime":"murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"\"Deserter from celebrated fourteenth\"","suspectRaces":"white","confession":"Confessed to victim's friends","suspectNotes":null,"victimNumber":"1","victimNames":"Old Mr. Joe Smith","victimGenders":"Male","victimRaces":"White","victimNotes":"\"one of our best citizens, a good Mason.\"","oldSources":"AC 6-9-68 p 1","oldNotes":null,"origDBindex":"337"},{"caseNum":338,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"41.4998949","lonDecimal":-120.0010495,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1868,"yearMonth":"1868/06","yearMonthDay":"1868/06/27","dateNotes":null,"state":"California","place":"Surprise Valley","county":"Modoc","locationNotes":"narrow down? Chose central point; murder occurred at Deep Creek; held to be taken to Yreka","crowdType":null,"crowdSize":"50","open":"Secret","oldAuthorities":"Seized from Jail\n\nHad been arraigned  for the murder","crime":"Murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Solomon Brundage","suspectRaces":"White","confession":"Given freely;\n\nInsisted on innocence at gallows: Prayed/ attended by clergy","suspectNotes":null,"victimNumber":"1","victimNames":"A.J.Goff","victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"SDU 7-14-68 p 3c3\nAC 7-15-68 p 1","oldNotes":"Brundage suspected of affair with Goff's wife","origDBindex":"338"},{"caseNum":339,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"36.7211053","lonDecimal":-119.793148,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1868,"yearMonth":"1868/07","yearMonthDay":"1868/07/00","dateNotes":null,"state":"California","place":"Fresno","county":"Fresno","locationNotes":"\"taken out from [suspect's] place, about four miles from the People's Mill, in Fresno County,… and hung\"","crowdType":"Organized party","crowdSize":"\"party of men, who were disguised, by having their faces blacked\"","open":"Secret","oldAuthorities":"suspect wounded in attempting to resisist Deputy Provost Marshal \"while in the discharge of his duties as enrolling officer\" during previous incident in 1863","crime":"Robbery--Stock","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Rains","suspectRaces":"White","confession":null,"suspectNotes":"lynched for \"stealing his neighbors' hogs and other stock until forbearance ceased to be a virtue.\" \"supposed to have been at the head of a gang of thieves and Chinese robbers that infested the northern part of Fresno County in 1863…\"","victimNumber":null,"victimNames":"unnamed neighbors","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"AC 7-25-68 p 1","oldNotes":null,"origDBindex":"339"},{"caseNum":341,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"34.2675291","lonDecimal":-119.2544461,"latNDegrees":34,"latNMinutes":16,"latNSeconds":45,"lonWDegrees":119,"lonWMinutes":17,"lonWSeconds":25,"year":1869,"yearMonth":"1869/03","yearMonthDay":"1869/03/28","dateNotes":null,"state":"California","place":"San Buenaventura","county":"Ventura","locationNotes":"Ventura? Otherwise see Gudde, 20;taken from jail and hung","crowdType":"\"the citizens\"","crowdSize":null,"open":"open","oldAuthorities":"Justice Hobson assembled jury and held inquest, found Lucas guilty and facilitated inquest of Cordova; Lucas taken from jail","crime":"Murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Lucas Garcia","suspectRaces":"Indian and Native Californian half breed","confession":"Luis Garcia, grandfather of Lucas, confessed Lucas's crime, and the body was found through his assistance buried in Lucas's garden","suspectNotes":"\"half Indian and half native\"; committed crime with partner Jesus Castillo, who is still undergoing trial as of writing of article","victimNumber":"1","victimNames":"Prudencio Cordova","victimGenders":"Male","victimRaces":"Sonorian","victimNotes":null,"oldSources":"SDU 4-6-69 p 3c3","oldNotes":"Halfway through article, author confuses name of victim \"Cordova\" with name of Lucas's partner, \"Castillo.\" Author refers to prisoner \"Cordova\" erroneously.","origDBindex":"341"},{"caseNum":342,"cwIndex":"C-W 99","gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"37.485377","lonDecimal":-120.264997,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1869,"yearMonth":"1869/08","yearMonthDay":"1869/08/00","dateNotes":null,"state":"California","place":"Hornitos","county":"Tuolumne","locationNotes":"Prisoner seized \"a few miles this side [towards Snellings) of Lagrange\" on the road from Snelling to La Grange, hung on a tree on the side of the road. Coords estimated at 2+ miles west of La Grange on road to snelings using Google maps.","crowdType":"Organized group","crowdSize":"4 masked men","open":"Secret","oldAuthorities":"Seized from Deputy Sheriff of Merced County en route to jail; Deputy tried to \"parley\" with mob","crime":"Theft--horse and cattle","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":null,"suspectRaces":"Mexican","confession":null,"suspectNotes":"one member of a gang of horse and cattle thieves. Gang was confronted between Hornitos and Lagrange and engaged in shoot-out with officers of Tuolumne County and Sheriff Bourland; three of gang were shot and killed; Mexican got away until caught later","victimNumber":null,"victimNames":null,"victimGenders":"Male","victimRaces":null,"victimNotes":null,"oldSources":"HHB PT I: 568-569","oldNotes":"Sheriff had pursued band of Mexican horse thieves; killed 3 and captured 1","origDBindex":"342"},{"caseNum":343,"cwIndex":"C-W 100","gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"36.9151584","lonDecimal":-121.7512298,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1870,"yearMonth":"1870/05","yearMonthDay":"1870/05/16","dateNotes":null,"state":"California","place":"Watsonville","county":"Santa Cruz","locationNotes":"Hanged at Pajaro Bridge\nSanta Cruz or Monterey County?","crowdType":"Vigilance Committee","crowdSize":"40 or 50","open":"Open","oldAuthorities":"Seized from jail","crime":"Murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":3,"suspectNames":"Valentine Varaga, Gregorio and Jesus Gomez","suspectRaces":"Mexican","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":"Indian Bill (Antonio Garrara)","victimGenders":"Female","victimRaces":"Mexican","victimNotes":null,"oldSources":"AC 5-21-70 p 1\nSDU5-17-70 p 2c5\nSDU 5-23-70 p 3c5","oldNotes":"Affair of the Heart; hanged at Pajaro Bridge","origDBindex":"343"},{"caseNum":344,"cwIndex":"C-W 104","gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"39.5001418","lonDecimal":-121.5644948,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1870,"yearMonth":"1870/08","yearMonthDay":"1870/08/23","dateNotes":null,"state":"California","place":"Oroville","county":"Butte","locationNotes":"beaten in jail cell and then taken to the derrick at the depot, where he was hung","crowdType":"Organized group","crowdSize":"30-40 men with \"sentinels… posted at each corner\" of the court house","open":"Open","oldAuthorities":"Seized from jail; mob overpowered \"the Jailor, Mr. Vera, who is also under Sheriff.\" The Sheriff refused to assist in opening cell after keys were obtained \"but none knew how to use them\"","crime":"Murder","punishment":"Beaten [possibly to death], then Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Charles Olson, or Olsen","suspectRaces":"White","confession":"suspect was \"bleeding and begging for mercy,… whose cries were heard by many citizens\"","suspectNotes":"one article says Olsen was defending himself from Logan; both were teamsters and working together","victimNumber":"1","victimNames":"M. Logan","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"HB PT I: 569","oldNotes":"one article notes that Olsen may have already been dead before he was hung","origDBindex":"344"},{"caseNum":345,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"36.9151584","lonDecimal":-121.7512298,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1870,"yearMonth":"1870/09","yearMonthDay":"1870/09/26","dateNotes":null,"state":"California","place":"Watsonville","county":"Santa Cruz","locationNotes":"found hanging \"within the precincts of the jail\"","crowdType":"\"vigilantes\"","crowdSize":null,"open":"Secret","oldAuthorities":null,"crime":"Horse theft","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":null,"suspectRaces":"Indian","confession":"Given freely","suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":"very short article; few details","oldSources":"SDU 9-28-70 p 3c4","oldNotes":null,"origDBindex":"345"},{"caseNum":346,"cwIndex":"C-W 106","gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"36.0636739","lonDecimal":-119.0333018,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1870,"yearMonth":"1870/12","yearMonthDay":"1870/12/07","dateNotes":null,"state":"California","place":"Porterville","county":"Tulare","locationNotes":"Called Portersville: suspects apprehended on the run and \"hanged to the first tree.\"","crowdType":"\"the people generally\"","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":2,"suspectNames":"Unnamed","suspectRaces":"Indian","confession":null,"suspectNotes":"a third Indian suspect not found when article was written, but he \"cannot elude speedy capture and punishment\"; the suspects \"had been in the vicinity for some time.\"","victimNumber":"3","victimNames":"Mrs. Bonsell and 2 children","victimGenders":"Female (1) and unknown (2)","victimRaces":"White","victimNotes":null,"oldSources":"AC 12-8-70 p 1\nSDU 12-8-70 p 2c4","oldNotes":null,"origDBindex":"346"},{"caseNum":347,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"34.0726866","lonDecimal":-118.2130443,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1870,"yearMonth":"1870/12","yearMonthDay":"1870/12/17","dateNotes":null,"state":"California","place":"Los Angeles","county":"Los Angeles","locationNotes":"Taken to Tomlinson's corral and Lumber Yardon Temple Street, two squares away from the jail; armed men marched from Teutonia Hall, on Los angeles Street, to Market and then down Spring Street to the jail","crowdType":"LA Vigilance Committee","crowdSize":"300 armed men, joined by nearly 1000 people","open":"open","oldAuthorities":"Seized from jail while awaiting trial; guards stationed at different points to prevent lynching but were overrun; took half an hour to batter down the doors","crime":"Murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":"Signouret , elected president of VC\nH.M. Smith, posse at jail\nJ. M. Baldwin, National Guard, posse at jail\n","numberSuspects":1,"suspectNames":"Miguel, aka Michel aka Louis Lachenai","suspectRaces":"identified as Frenchman","confession":"Administered last rites by Father Birmingham; Lachenais insisted on his innocence, that the killing was self defense","suspectNotes":"age 42","victimNumber":"1","victimNames":"Jacob Bell; Blew has a\"Joseph\"","victimGenders":"Male","victimRaces":"White","victimNotes":"described as \"an old and well-known resident of this city\"","oldSources":"HHB PT I: 511-512\nSDU 12-19-70 p2c2\nLA Star 12-18-70 p?\nVigilantism in Los Angeles, Southern California Quarterly, LIV (1972) 25","oldNotes":"argument began from a dispute over \"a piece of land claimed by both parties which Bell was plowing, when Lacherias approached him…\" and then shot him during a gun battle; article notes that most citizens agreed with the action of the VC","origDBindex":"347"},{"caseNum":348,"cwIndex":"C-W 107","gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"36.3270975","lonDecimal":-119.3265231,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1872,"yearMonth":"1872/12","yearMonthDay":"1872/12/24","dateNotes":null,"state":"California","place":"Visalia","county":"Tulare","locationNotes":"suspect seized from jail, dragged through the streets \"by the end of a rope.\" \"taken to the bridge on Court street, the rope was tied to the railing, and… thrown overboard.\"","crowdType":"Vigilance Committee","crowdSize":"seized from officers twice by a mob before successfully lodged in jail; VC then assembled at jail door, broke in, and took suspect. Said to be 50 in number","open":"open","oldAuthorities":"Seized from jail; Sheriff and deputies tried to resist and were nearly injured in chaos","crime":"Murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"James [J.C.] McCrory [or McCrary]","suspectRaces":"White","confession":null,"suspectNotes":"described as \"a noted desperado, who has already killed several men in this place\" and \"the worst man that has ever made Visalia his home\"","victimNumber":"1","victimNames":"Charles Allen","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"HHB PT I: 473-474\nSDU 12-25-71 (72?) p2c4\nSDU 12-27-71 (72?) p 2","oldNotes":"article notes that authorities \"were overwhelmed by a spontaneous uprising of our whole people, led on by our most influential business men\" and seems relieved that McCrory is gone. But also notes, \"It is a sad commentary, nevertheless, upon the manner in which the law is generally enforced, that our people should have felt constrained by necessity to thus shock the sense of law and order.\"","origDBindex":"348"},{"caseNum":349,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"34.2675291","lonDecimal":-119.2544461,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1874,"yearMonth":"1874/03","yearMonthDay":"1874/03/03","dateNotes":null,"state":"California","place":"San Buenaventura","county":"Ventura","locationNotes":"hanged on \"the nearest tree\" after neighbors seized him from his property","crowdType":"the neighbors","crowdSize":null,"open":"Open","oldAuthorities":"Officers demanded mob hand over suspect, but they refused; Coroner delivered verdict and mob hanged suspect","crime":"Murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"George Hargrand","suspectRaces":"White","confession":"\"He acknowledged having killed Martin and also that he intended to kill two other men who lived neighbors. His son, a boy 15 year of age, says his father had killed two men before.\"","suspectNotes":"dispute with victim over land claim","victimNumber":"1","victimNames":"George Martin","victimGenders":"Male","victimRaces":"White","victimNotes":"Native of Ohio, aged 39, a farmer; Martin told Hargrand he would \"give up the land in dispute for the time being, and turned his team to go, when Hargrand followed and shot him in the left shoulder and back, Martin fell dead.\"","oldSources":"SDU 3-4-73 p 3c4","oldNotes":null,"origDBindex":"349"},{"caseNum":350,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"36.9151584","lonDecimal":-121.7512298,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1873,"yearMonth":"1873/03","yearMonthDay":"1873/03/17","dateNotes":null,"state":"California","place":"Monterey","county":"Monterey","locationNotes":"Hanged three miles out of town (Monterey); Murder occurred at Carneros Rancho","crowdType":"Spontaneous Assembly","crowdSize":null,"open":"Secret","oldAuthorities":"Suspect seized from Jail","crime":"Murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Matt. Tarpey","suspectRaces":"White","confession":"Given freely; insisted shooting was a mistake while firing at a man in self defense","suspectNotes":null,"victimNumber":"1","victimNames":"Sarah Nicholson","victimGenders":"Female","victimRaces":"White","victimNotes":null,"oldSources":"SDU 3-19-73 p2c2\nSDU 4-23-73 letter to governor","oldNotes":null,"origDBindex":"350"},{"caseNum":351,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"40.5669281","lonDecimal":-122.4063247,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1873,"yearMonth":"1873/10","yearMonthDay":"1873/10/21","dateNotes":null,"state":"California","place":"Dog Creek","county":"Shasta","locationNotes":"Near Redding on McCloud River; \"people of Dog Creek collected and hanged\" suspect","crowdType":"People of Dog Creek","crowdSize":null,"open":"Open","oldAuthorities":"lynching took place before authorities arrived; one article notes \"Justice Knox of Shasta started with Deputy Sheriff Whiting… intending to hold an inquest…\" with the cooperation of the suspects' Indian tribe mates","crime":"Murder and robbery","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"\"an Indian named Pete\"","suspectRaces":"Indian","confession":"\"Before Pete's arrest he confessed to the killing. And said he did it for six dollars which he knew Crooks had in his possession\"","suspectNotes":"one article notes that \"the body of Crooks [victim], who was killed by an Indian named Pete on McCloud river, was caught in a fish trap by another Indian and buried for fear the killing would be laid to him.\"","victimNumber":"1","victimNames":"Crooks","victimGenders":"Male","victimRaces":"White","victimNotes":"had been living with the McCloud River Indians","oldSources":"SDU 10-23-73 p 3c4","oldNotes":"Is this a lynching? See 10-15-73 report of arrest of Pete for killing Crooks; two articles written before lynching occurred","origDBindex":"351"},{"caseNum":352,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"37.0046727","lonDecimal":-121.5842487,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1873,"yearMonth":"1873/11","yearMonthDay":"1873/11/08","dateNotes":null,"state":"California","place":"Gilroy","county":"Santa Clara","locationNotes":"check coordinates; VC \"went to numerous saloons, took out such men as they wished to leave town… formed them into a line and escorted them four miles out of the city.\"","crowdType":"Vigilance Committee; Leading citizens met at the Masonic Hall","crowdSize":"formed from \"a meeting of citizens… for the purpose of ridding the town of thieves and vagabonds\"","open":"Open","oldAuthorities":null,"crime":"Immoral Behavior","punishment":"Banished","lethality":"Not Lethal","otherNamesMentioned":"Alexander Hay, elected Captain of VC","numberSuspects":10,"suspectNames":"Joe Barbie, proprietor of dance and bawdy house\nBilly Smith\nJoseph Newell\nCharley Howard\nJohn Williams\nJohn Blanchon\n4 unnamed","suspectRaces":"White","confession":null,"suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"SDU 11-10-73 p 2c5\nSDU 1873-10-15","oldNotes":"one article in file for 352 is in reference to case 351 -- Taylor R. deleted this file","origDBindex":"352"},{"caseNum":353,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"37.0046727","lonDecimal":-121.5842487,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1873,"yearMonth":"1873/11","yearMonthDay":"1873/11/11","dateNotes":null,"state":"California","place":"Gilroy","county":"Santa Clara","locationNotes":"suspect taken by VC from a saloon \"and escorted… outside fo the city limits on a rail. At a point about two miles from town, Lanson was given a good coat of tar and feathers and then was placed on a rail and ridden some distance.\"","crowdType":"\"a posse of Vigilantes\"","crowdSize":null,"open":"Open","oldAuthorities":"VC seems to have taken place of authorities. \"A party of men are guarding the town nightly.\"","crime":"General nuisance against community; previously banished","punishment":"tarred and feathered and ridden out on a rail","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Jake Linson","suspectRaces":"White","confession":null,"suspectNotes":"previously banished from town","victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":"general crimes against the community","oldSources":"SDU 11-13-73 p2c5","oldNotes":"follow-up from case 352; Lanson never left town as instructed and was punished for it. Article also notes that Joe Barbie, \"proprietor of one of the dance-houses, who was notified to close his house, left for Hollister on to-day's train, taking his bar fixtures and women.\"","origDBindex":"353"},{"caseNum":354,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"33.2319797","lonDecimal":-117.3236485,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1874,"yearMonth":"1874/02","yearMonthDay":"1874/02/14","dateNotes":null,"state":"California","place":"San Luis Rey","county":"San Diego","locationNotes":"quarrel happened at SLR; suspect \"found gagged and hung to a tree this morning\"","crowdType":null,"crowdSize":null,"open":"Secret","oldAuthorities":null,"crime":"Murder","punishment":"Hanged and gagged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Blanchard","suspectRaces":"White","confession":null,"suspectNotes":"interfered in argument between Miles and Graham; shot Graham","victimNumber":"1","victimNames":"Graham","victimGenders":"Male","victimRaces":"White","victimNotes":"\"will probably recover\"","oldSources":"HHHB PT I: 570","oldNotes":null,"origDBindex":"354"},{"caseNum":355,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"38.6935793","lonDecimal":-119.7782885,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1874,"yearMonth":"1874/04","yearMonthDay":"1874/04/17","dateNotes":"report dated 4/18; Reusch taken from Sheriff 9 pm last vening","state":"California","place":"Markleeville","county":"Alpine","locationNotes":"Location changed to Markleeville, Alpine County, per newspaper report. Reusch Taken from sheriff on way to jail in Bridgeport, Mono County. Coorindates placed chere current highway 89 crosses Markleeville Creek. According to newspaper reports Reusch hanged under bridge at Johnson's toll house. Marklee established a toll bridge over Carson River (now Markleevville Creek) in early 1860s. See http://www.ebbettspassadventures.com/activities/historic_sites.html and http://genealogytrails.com/cal/alpine/history2.html","crowdType":"party of masked men","crowdSize":"8 or 9 masked men","open":"Secret","oldAuthorities":"Seized from Under Sheriff Davidson","crime":"Murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Ernst Reusch; in one report Rensch","suspectRaces":"White","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":"Errick .H. Errickson","victimGenders":"Female","victimRaces":"White","victimNotes":"pioneer citizen of Silver Mountain","oldSources":"HHB PT I: 570","oldNotes":null,"origDBindex":"355"},{"caseNum":357,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"34.0739197","lonDecimal":-118.029072,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1874,"yearMonth":"1874/06","yearMonthDay":"1874/06/02","dateNotes":null,"state":"California","place":"El Monte","county":"Los Angeles","locationNotes":null,"crowdType":"Spontaneous Assembly","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Jesus Ramos","suspectRaces":"Mexican","confession":null,"suspectNotes":null,"victimNumber":null,"victimNames":"Turner Family","victimGenders":null,"victimRaces":"White","victimNotes":null,"oldSources":"SDU 6-16-74 p8c4\nLA Star 6/4/74 p2c3\nLA Star 6/6/74 p3c2\nLA Star 6/7/74 p2c2\nVigilantism in Los Angeles, Southern California Quarterly, LIV (1972) 26\n","oldNotes":null,"origDBindex":"357"},{"caseNum":358,"cwIndex":"C-W 109","gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"39.3454485","lonDecimal":-120.1848834,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1874,"yearMonth":"1874/11","yearMonthDay":"1874/11/00","dateNotes":null,"state":"California","place":"Truckee","county":"Nevada","locationNotes":null,"crowdType":"Vivilance Committee \"Society of 601\")","crowdSize":null,"open":"Secret","oldAuthorities":"Howard and Brown sought protection with Justice Keiser and Constable Greeley, who \"agreed to do what they could to shield the 'dead beats'… but couldn't guarantee their safety\" ","crime":"Gambling and general nuisance","punishment":"Run out of town","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":5,"suspectNames":"Seth McCain [\"lodged in jail at Nevada that same day [that he left]\"]; Spence [or Spencer]; Potter; Harry Howard; George Brown","suspectRaces":"White","confession":null,"suspectNotes":"referred to as \"roughs\" and \"deadbeats\"; several suspects refused to leave or waited until the last minute to leave","victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":"crimes against the town","oldSources":"HHB PT I: 463-465","oldNotes":null,"origDBindex":"358"},{"caseNum":359,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"38.9865646","lonDecimal":-123.1063915,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1875,"yearMonth":"1875/12","yearMonthDay":"1875/12/22","dateNotes":null,"state":"California","place":"Sanel Valley","county":"Mendocino","locationNotes":"Near Ukiah; hung \"to a branch of liveoak tree\"; lynching may have taken place at the Ukiah jail -- it's unclear","crowdType":"referred to as \"small knots of anxious men\"","crowdSize":null,"open":"Secret","oldAuthorities":"Seized from jail; taken before Justice Knox for examination","crime":"Murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Antonio Igarra, aka Ygarra, aka Antone\nYereger","suspectRaces":"Mexican","confession":null,"suspectNotes":"a little confusing because Antone is the member of a criminal gang that \"has infested the road from Ukiah to Cloverdale…, of which gang the assassin was thought to be a member.\" But the assassin of Grangee was \"a Spaniard named Yereger\"","victimNumber":"1","victimNames":"William, or \"Bill\" Grangee","victimGenders":"Male","victimRaces":"White","victimNotes":"\"notorious… connected with many offenses; many times arrested, and recently peached as a witness of some of that desperate gang\"… in other words, he was killed for ratting on the gang somehow, it seems","oldSources":"HHB PT I: 572-573\nSDU 12-27-75 p 2c5","oldNotes":"Granger (Grangene?_ had testified against Igarra)","origDBindex":"359"},{"caseNum":360,"cwIndex":"C-W 112","gdIndex":null,"crossRefNotesCwGd":"Check location","latDecimal":"36.327172","lonDecimal":-119.0806604,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1876,"yearMonth":"1876/04","yearMonthDay":"1876/04/23","dateNotes":null,"state":"California","place":"Yokhle Valley","county":"Tulare","locationNotes":"Yokohl valley? From CA Gazetteer (correct); \"captured near Porterville, taken to the place where he committed the damnable deed, recognized, and hung to a tree\"","crowdType":"Mob","crowdSize":null,"open":"Secret","oldAuthorities":"Suspect seized from Jail","crime":"Rape","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":null,"suspectRaces":"Indian","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":"\"the wife of a gentleman whose name we have not learned\"","victimGenders":"Female","victimRaces":"White","victimNotes":null,"oldSources":"SDU 4-26-76 p 2c3","oldNotes":"article notes the suspect was \"deserving of death\"","origDBindex":"360"},{"caseNum":361,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"38.4464429","lonDecimal":-122.7060002,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1876,"yearMonth":"1876/06","yearMonthDay":"1876/06/10","dateNotes":null,"state":"California","place":"Santa Rosa","county":"Sonoma","locationNotes":"Bancroft places at Windsor; article seems to imply it happened near Santa Rosa; hung to a tree \"about a mile from town\"; \"hanged in Santa Rosa township\"","crowdType":"Organized group from Healdsburg","crowdSize":"\"200 masked men, well armed. The mob said they were 150 strong.\"","open":"Secret","oldAuthorities":"Mob went to house of Deputy Sheriff S. H. Wilson and made him go to the jail to get suspect; suspect was awaiting action of Grand Jury","crime":"Murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Thomas W. Henley","suspectRaces":"White","confession":null,"suspectNotes":"60 years old, resided near Windsor","victimNumber":"1","victimNames":"James Rowland","victimGenders":"Male","victimRaces":"White","victimNotes":"Murdered on May 9","oldSources":"HHB PT I: 571-572\nSDU 6-14-76 p 4c1","oldNotes":"Argument over borders of their farms","origDBindex":"361"},{"caseNum":362,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"38.7960628","lonDecimal":-123.0152021,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1876,"yearMonth":"1876/12","yearMonthDay":"1876/12/00","dateNotes":null,"state":"California","place":"Cloverdale","county":"Sonoma","locationNotes":"Near Cloverdale; \"a mile or two this side of Cloverdale\"","crowdType":"Organized Group","crowdSize":"\"twenty masked men\"","open":"Secret","oldAuthorities":"Justice convicted suspect of theft, and committed him to jail to await Grand Jury. Constable McCracken was taking him to Santa Rosa when they were ambushed and overpowered by the mob","crime":"Horse theft","punishment":"Hanged to extort confession; failed and returned to sheriff","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Joseph Murphey","suspectRaces":"White","confession":"Hanged three times to force confession; failed; given back to sheriff","suspectNotes":"from Oakland; had recently arrived in Cloverdale and was being a nuisance, possibly stealing other horses in the area","victimNumber":"1+","victimNames":"C. McCray and other owners of horses in the vicinity","victimGenders":"Male","victimRaces":"White","victimNotes":"Might not be an actual lynching. Author of article seems skeptical, saying Murphy recovered too fast from the incident and was playing it up.","oldSources":"HHB PT I: 573","oldNotes":null,"origDBindex":"362"},{"caseNum":363,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"36.980462","lonDecimal":-122.018762,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1877,"yearMonth":"1877/05","yearMonthDay":"1877/05/03","dateNotes":null,"state":"California","place":"Santa Cruz","county":"Santa Cruz","locationNotes":"hanged from \"the upper cross-beams of the Upper San Lorenzo bridge\"","crowdType":"\"a body of men\"; small group","crowdSize":null,"open":"Secret","oldAuthorities":"Seized from jail","crime":"Robbery and murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":2,"suspectNames":"Jose Chamalis\nFrancisco Arias","suspectRaces":"Mexican","confession":"\"For a time [Arias] denied the murder of De Forest, but on being closely cross examined, indirectly admitted the crime.\"","suspectNotes":"Chamalis \"executed within 300 yards of where he was born\"; 21 yrs old; served three years in prison for robbery. Arias 38 yrs old; born near Pescadero; murdered a sheep herder in San Luis Obispo","victimNumber":"1","victimNames":"Henry de Forest","victimGenders":"Male","victimRaces":"White","victimNotes":"age 62","oldSources":"HHB PT I: 573-\nSDU 5-4-77 p 3c4","oldNotes":"Author notes this is first lynching in Santa Cruz since 1852, but seems to condone it.","origDBindex":"363"},{"caseNum":364,"cwIndex":"C-W 113","gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"36.8455963","lonDecimal":-121.5382382,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1877,"yearMonth":"1877/07","yearMonthDay":"1877/07/13","dateNotes":null,"state":"California","place":"San Juan Bautista","county":"San Benito","locationNotes":"\"San Juan South\"; \"removed the prisoner from the lock-up and conducted him to the outskirts of the town, where his body was found this morning hanging from a willow tree.\"","crowdType":"\"a large crowd of disguised men\"","crowdSize":null,"open":"Secret","oldAuthorities":"officers overpowered; suspect seized from jail","crime":"Murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Justin Arajo","suspectRaces":"Mexican","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":"Manuel, or Michael Butron","victimGenders":"Male","victimRaces":"Mexican","victimNotes":"shot on the street unprovoked; alive at the time article written, \"but can live but a short time probably.\"","oldSources":"HHB PT I: 575","oldNotes":null,"origDBindex":"364"},{"caseNum":365,"cwIndex":"C-W 114","gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"35.3755107","lonDecimal":-119.0219612,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1877,"yearMonth":"1877/12","yearMonthDay":"1877/12/21","dateNotes":null,"state":"California","place":"Bakersfield","county":"Kern","locationNotes":"Using Downtown Bakersfiled Post Office; taken from jail to the rear of the court house, where \"a beam was stretched between two trees, and three of them were hanged to that. The two others were hanged to the limbs of the tree.\"","crowdType":"\"The lynchers made no attempt to conceal their identity, and comprised some of the leading citizens.\"","crowdSize":null,"open":"Open","oldAuthorities":"Suspect escaped from jail; officers opposed proceedings; restrained by crowd","crime":"Raiding Caliente \"and also stole a lot of horses in this place\"","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":"Four confessed; one denied it but was implicated by other four","numberSuspects":5,"suspectNames":"Anthony Maron\nFrancisco Ensinas\nMiguel Elias\nFermin Elder\nBessena Ruiz","suspectRaces":"Mexican/native Californian","confession":null,"suspectNotes":"part of an organized criminal band","victimNumber":"1","victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":"crimes against property-owners of the town","oldSources":"SDU 12-24-77 p 1c6","oldNotes":null,"origDBindex":"365"},{"caseNum":366,"cwIndex":"C-W 116","gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"39.6196036","lonDecimal":-122.1938726,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1878,"yearMonth":"1878/05","yearMonthDay":"1878/05/01","dateNotes":null,"state":"California","place":"Germantown","county":"Colusa","locationNotes":"aka Artois (north of Willows), Glenn Co?","crowdType":"Spontaneous Assembly","crowdSize":"14","open":"Open","oldAuthorities":"Mutchler had been arrested for arson but released; bribery charged","crime":"Arson and assault","punishment":"Shot","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Christian Mutschler","suspectRaces":"White","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":"Hagerman","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"HHB PT I: 575-576(?)\nSDU 5-6-78 p 1c6\nSDU 5-7-78 p 2c1\nSDU 5-9-78 p2c1-3","oldNotes":null,"origDBindex":"366"},{"caseNum":367,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"35.3755107","lonDecimal":-119.0219612,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1878,"yearMonth":"1878/05","yearMonthDay":"1878/05/28","dateNotes":null,"state":"California","place":"Bakersfield","county":"Kern","locationNotes":"Using Downtown Bakersfiled Post Office; hanged in their jail cells in Bakersfield","crowdType":"Mob","crowdSize":"\"Jailer Reed thinks there were about seventy-five of the mob, and Mr. Coons [Deputy Sheriff] says about thirty, but the belief is that there were more. With the exception of five all wore masks.\"","open":"Secret","oldAuthorities":"Hanged in cell; authorities overpowered","crime":"murder","punishment":"Shot, then hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":2,"suspectNames":"Thomas Yoakum\nWilliam Yoakum","suspectRaces":"White","confession":"William denied that his bro had anything to do with the murders","suspectNotes":null,"victimNumber":"2","victimNames":"William Johnson\nHamilton Tucker","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"HHB PT I: 473\nSDU 5-29-79 p1c5","oldNotes":"murder supposedly happened after a mining dispute at Long Tom","origDBindex":"367"},{"caseNum":368,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"36.3270975","lonDecimal":-119.3265231,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1879,"yearMonth":"1879/07","yearMonthDay":"1879/07/17","dateNotes":null,"state":"California","place":"Visalia","county":"Tulare","locationNotes":null,"crowdType":"Spontaneous Assembly","crowdSize":"10-100","open":null,"oldAuthorities":"Suspect seized from Jail","crime":"Murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":null,"suspectRaces":"Indian","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":"Townsend","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"SDU 7-19-79 p1c5","oldNotes":null,"origDBindex":"368"},{"caseNum":369,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"39.4049675","lonDecimal":-123.3493075,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1879,"yearMonth":"1879/09","yearMonthDay":"1879/09/04","dateNotes":null,"state":"California","place":"Willetsville","county":"Mendocino","locationNotes":"Referred to as Willets and Willits Mendocino Co. Near Little Lake","crowdType":"Spontaneous Assembly","crowdSize":null,"open":"Secret","oldAuthorities":"Suspect seized from Jail","crime":"Larceny of a saddle and harness; suspicion of other thefts","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":3,"suspectNames":"Abijah Gibson\nElijah Frost\nTom McCracken ","suspectRaces":"White","confession":null,"suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"SDU 9-5-79 p4c2\nSDU 9-18-79  p2c6\nSDU 9-29-79 p4c2","oldNotes":null,"origDBindex":"369"},{"caseNum":370,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"Additional Report\nRecheck coordinates","latDecimal":"33.7892768","lonDecimal":-118.2598245,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1881,"yearMonth":"1881/01","yearMonthDay":"1881/01/10","dateNotes":null,"state":"California","place":"Wilmington","county":"Los Angeles","locationNotes":"Willows settlement on the Cerritos ranch near wilmington (LA Co); one report says Bixby Ranch;\ncheck data sheets/coordinates estimated in case is in Wilmington, LA County; dragged into the bush after being identified by girls at house of Mr. Shaw; on the \"ground where the camp meeting was held last summer\"","crowdType":"6 masked men, armed with shotguns","crowdSize":"6","open":"Secret","oldAuthorities":"\"Mr. Teal and another young man named Garrison swore out a warrant for the arrest of the perpetrator… and gave immediate pursuit, capturing him, still on horseback… As Mr. Teal and companion were on their way to this city [LA] were surprised by six masked men, who... compelled them to deliver up their prisoner.\"","crime":"Assault and Attempted rape of 3 small girls","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Victor Miranda or Mirando","suspectRaces":"California native","confession":"\"It is said that Mirando, when first captured, said: 'I don't care; it will only be three years in San Quentin.'\"","suspectNotes":"16 or 17 yrs old, resident of Florence, had been working husking corn for Mr. Bailey on the Cerritos","victimNumber":"3","victimNames":"Mary Shaw\nMamie Shaw\nEmma Dale or Doyle","victimGenders":"Female","victimRaces":"White","victimNotes":null,"oldSources":"SDU 1-12-81 p3c4\nSDU 1-14-81 p3c4","oldNotes":null,"origDBindex":"370"},{"caseNum":371,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"39.5001418","lonDecimal":-121.5644948,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1881,"yearMonth":"1881/08","yearMonthDay":"1881/08/07","dateNotes":null,"state":"California","place":"Oroville","county":"Butte","locationNotes":"taken from jail in Oroville, voneyed to Crum's old place, \"about ten miles from here, on the road to Chico, and there hanged by the neck to the limb of a large oak tree.\"","crowdType":"\"a posse of armed and masked men\"us Assembly","crowdSize":"a witness on the road \"said he judged there were forty or more in the crowd\"","open":"Secret","oldAuthorities":"taken from jail; jailer Knowles \"was the only person at the jail;\" attempted to resist but was overpowered","crime":"MurderMurder--beat victim to death","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Thomas James [also, J.F.] Noakes","suspectRaces":"White","confession":"no signs of violence on suspect other than hanging","suspectNotes":null,"victimNumber":"1","victimNames":"A.J. Crum","victimGenders":"Male","victimRaces":"White","victimNotes":"\"The only provocation that Noakes alleged at the time was that Crum had made some disgraceful remark in reference to Noakes' brother, but even this crum utterly denied…\"","oldSources":"SDU 8-8-81 p2c4\nSDU 8-9-81 p1c7","oldNotes":null,"origDBindex":"371"},{"caseNum":372,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"35.7141183","lonDecimal":-118.4367517,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1881,"yearMonth":"1881/10","yearMonthDay":"1881/10/19","dateNotes":null,"state":"California","place":"Kernville","county":"Kern","locationNotes":"incident happened outside Kernville jail","crowdType":"Drunken mob","crowdSize":"25-40 persons [also reported as 15-20]","open":"Open","oldAuthorities":"Deputy Sheriff Ben Marshall resisted; Jim Cochran [member of mob] fired on Marshall, who shot back; Marshall died; Cochran alive at article's report; mob dispersed after shootout","crime":"Murder","punishment":"Attempted lynching, thwarted","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Tom Herbert","suspectRaces":"White","confession":"during trial, suspect denied guilt","suspectNotes":"employee of Piute Mountain mine under victim, who was a partner [owner?] in the mine","victimNumber":"1","victimNames":"Charles Ziegler","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"SDU 10-21-81 p2c3\nSDU 11-5-81 p1c6","oldNotes":"murder occurred after a night of drinking; Herbert only witness","origDBindex":"372"},{"caseNum":373,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"39.2846082","lonDecimal":-122.7219353,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1882,"yearMonth":"1882/04","yearMonthDay":"1882/04/24","dateNotes":null,"state":"California","place":"Stony Creek","county":"Colusa","locationNotes":"Using coordinates for South Stony Creek","crowdType":"Spontaneous Assembly","crowdSize":null,"open":null,"oldAuthorities":"Suspect seized froSuspect seized from Jail; \"He had been arrested, and was in charge of a Constable at the time.\"m Jail","crime":"Threatening victim; previous murders; \"desperate character\"","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":null,"suspectRaces":"Indian","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":"J.M. Pugh","victimGenders":"Male","victimRaces":"White","victimNotes":"prominent farmer","oldSources":"SDU 4-28-82 p2c4","oldNotes":null,"origDBindex":"373"},{"caseNum":374,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"41.7292557","lonDecimal":-122.6311481,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1882,"yearMonth":"1882/09","yearMonthDay":"1882/09/30","dateNotes":null,"state":"California","place":"Yreka","county":"Siskiyou","locationNotes":null,"crowdType":"Vigilance Committee (\"Committee of 100\")","crowdSize":"100","open":"Secret","oldAuthorities":null,"crime":"\"repeated attempts to fire the town\"","punishment":"Banished","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":2,"suspectNames":"Jim Moore and Jim Williams","suspectRaces":"White","confession":"Williams returned after leaving and was banished again, with more force","suspectNotes":"Williams had a history of \"robbing of drunken men… had almost led the citizens to deal summarily with him before.\"","victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":"crimes against town","oldSources":"SDU 10-2-82 p2c4","oldNotes":null,"origDBindex":"374"},{"caseNum":375,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"37.2226902","lonDecimal":-121.974264,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1883,"yearMonth":"1883/06","yearMonthDay":"1883/06/19","dateNotes":null,"state":"California","place":"Los Gatos","county":"Santa Clara","locationNotes":null,"crowdType":"Party of citizens","crowdSize":null,"open":"Open","oldAuthorities":"Taken from Constable","crime":"Murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Encarnacion Garcia, also Incarnacion Garcia","suspectRaces":"Mexican","confession":null,"suspectNotes":"Age 24","victimNumber":"1","victimNames":"Raphael Merival, also spelled Mirival and Murivale","victimGenders":"Male","victimRaces":"Mexican","victimNotes":"Age 55","oldSources":"SDU 6-18-83 p1c8\nSDU 6-19-83 p4c3-4","oldNotes":"Rafael Mirival and Incarnacion Garcia are playing cards at a saloon. They left together. Despite the witnesses hearing \"no quarrel,\" \"Garcia came up behind Mirival, who turned, and Garcia at once struck him. Mirival… grasped Garcia's wrist, as if endeavoring to prevent a repetition of the blow. Garcia disengaged his hand and let the knife fall and then ran.\" Somehow, Garcia bests Mirivial, described as \"an old man,\" and murders him with the knife. Witness testifies Garcia disliked Mirival's wife. Then, \"During the examination a most distressing scene ensued upon the arrival of the sisters of Garcia, whose screams and cries filled the hall, and for ten minutes suspended the progress of the examination.\" Author reveals Garcia also died by being hung to the Los Gatos Bridge. During the trial for Garcia's death, however, \"only one [witness] had been able to recognize a single person upon the streets or at the bridge after the murder of Mirival, and no one knew how Garcia came to be hanged to the bridge.\" After hours of questioning, the D.A. \"gave up in despair and the jury promptly found that 'Garcia came to his death by strangulation,... and the jury is unable, from testimony, to implicate anyone in his taking off.'\"","origDBindex":"375"},{"caseNum":376,"cwIndex":"C-W 119","gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"40.5798918","lonDecimal":-124.2619085,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1883,"yearMonth":"1883/12","yearMonthDay":"1883/12/29","dateNotes":null,"state":"California","place":"Ferndale","county":"Humboldt","locationNotes":"hanged outside of residence of Cyrus Broderick, about two miles from Ferndale; \"Richardson had lived within a few hundred yards of where he was hung for a number of years\"","crowdType":"Masked men","crowdSize":"12","open":"Secret","oldAuthorities":"Had undergone trial, \"but the jury disagreed, standing ten for acquittal and two for conviction\"","crime":"Rape of daughter","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"William Richardson","suspectRaces":"White","confession":null,"suspectNotes":"\"had always borne a good character\"; unknown what connection Cyrus Broderick played, but \"three men stood guard over Broderick and his wife while the hanging was going on.\"","victimNumber":"1","victimNames":"his daughter","victimGenders":"Female","victimRaces":"White","victimNotes":null,"oldSources":"SDU 1-1-84 p16c2\nSDU 1-26-84 p4c7","oldNotes":"some of the details a little unclear; one of the articles is an editorial from a member of the community defending the actions of the mob","origDBindex":"376"},{"caseNum":377,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"37.6370808","lonDecimal":-121.003028,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1884,"yearMonth":"1884/03","yearMonthDay":"1884/03/19","dateNotes":null,"state":"California","place":"Modesto","county":"Stanislaus","locationNotes":"shot at Doane's saloon, \"about six miles east of town, on the Waterford road\"","crowdType":"Vigilance Committee, \"San Joaquin Valley Regulators\"","crowdSize":"10 Regulators, armed with shotguns","open":"Secret","oldAuthorities":"Suspect arrested several months prior for participating in the suspected rape; was discharged after preliminary examination","crime":"Rape","punishment":"Shot","lethality":"Lethal","otherNamesMentioned":"suspect attempted to grab shotgun from back room when Regulators arrived; was shot in the back as he made moves toward the back room","numberSuspects":1,"suspectNames":"Joseph Doane","suspectRaces":"White","confession":"Shot after refusing to leave when banished","suspectNotes":"participant in rape; \"one of the men who ravished the younger McCrellis girl.\"","victimNumber":"1","victimNames":"\"younger McCrellis girl\"","victimGenders":"Female","victimRaces":"White","victimNotes":"possibly other suspects banished as a result of rape; article mentions that Doane was \"mixed up recently with J. J. Robbins,\" that Robbins \"received warning to leave the town\" and that Robbins \"left several days before his time was up.\" Also, \"The McCrellis received the same [warning to leave town]... McCrellis and his family left this morning.\"","oldSources":"SDU 3-21-84 p2c3","oldNotes":null,"origDBindex":"377"},{"caseNum":378,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"34.8633187","lonDecimal":-116.888092,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1884,"yearMonth":"1884/12","yearMonthDay":"1884/12/09","dateNotes":null,"state":"California","place":"Daggett","county":"San Bernardino","locationNotes":null,"crowdType":"Mob","crowdSize":"20 men","open":"Open","oldAuthorities":"Mob took suspects from Officers","crime":"Murder","punishment":"1 banished (Farthing)\n1 hanged (Pitts)","lethality":"Both","otherNamesMentioned":null,"numberSuspects":2,"suspectNames":"Louis Farthing\nWilliam H. White, aka William Pitts","suspectRaces":"White","confession":null,"suspectNotes":"Pitts suspected of murder, as he slept next ot Harris; Pitts a deserter from US army; enlisted under the name of William H. White","victimNumber":"1","victimNames":"Josiah O. Harris","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"SDU 12-10-84 p1c7","oldNotes":"Mob of 20 men takes Farthing and White (alias Pitts) from custody of officers. Mob takes the two to a telephone pole near Daggett, hangs Pitts, and Farthing \"was told to leave the country.\" Pitts accused of murdering Harris by beating him with a wagon spoke (\"His head was mashed to a jelly.\") while he slept. \"Circumstantial evidence pointed strongly toward Pitts, he having slept six feet from the murdered man's bed.\" Pitts was a deserter from U.S. Army in cavalry division.","origDBindex":"378"},{"caseNum":379,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"39.8218414","lonDecimal":-120.6671656,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1885,"yearMonth":"1885/06","yearMonthDay":"1885/06/12","dateNotes":null,"state":"California","place":"Mouth of Jameson Creek","county":"Plumas","locationNotes":"Suspect taken from sheriff while en route to Quincy\n\nUsing mouth of Jamison Creek ","crowdType":"Spontaneous Assembly","crowdSize":"25","open":"Open","oldAuthorities":null,"crime":"Murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Jimmy Delaney","suspectRaces":"White","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":"Ned Smith","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"SDU 6-13-85 p8c1","oldNotes":null,"origDBindex":"379"},{"caseNum":380,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"Added Reports; recheck coordinates","latDecimal":"36.5663515","lonDecimal":-121.1829781,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1885,"yearMonth":"1885/09","yearMonthDay":"1885/09/18","dateNotes":null,"state":"California","place":"Bear Valley","county":"San Benito","locationNotes":"30 miles SE of Hollister, along spur road to town of San Benito [This was in my study area for Pinnacles NP, and I remember this incident being a big deal for the homesteading community - Taylor R.]; found \"hanging to the limb of a tree thirty yards from the road, on the Bear valley grade\"","crowdType":"Organized group of neighbors with personal vendetta","crowdSize":"\"shooting done by one of the five parties present at the killing;\" \"also say that… the conspiracy or hanging were taken part in by\" 11 more","open":"Secret","oldAuthorities":"article gives names of suspected lynchers, who underwent various trials after the incident; at least one was under protection because of threats that he would be lynched as retribution","crime":"Arson and land disputes; general disagreements with neighbors","punishment":"Shot[?] and then Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Dr. A.W. [Americus, I think, from my Pinnacles research] Powers","suspectRaces":"White","confession":"\"There were evidences that a severe struggle had taken place.\" Several of the accused lynchers made confessions after; at first, some suggested Powers had committed suicide.","suspectNotes":"grew up in Vermont, 70 years old. \"Although recognized as one of the kindest of men and a fine physician, Dr. Powers was decidedly unpopular in the neighborhood in which he lived.\"","victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":"crimes against community; though \"the general opinion seems to be that the lynching was done, not by the citizens, but by a few individuals who had personal grievances against Powers.\"","oldSources":"SDU 9-19-85 p1c6\nSDU 11-9-85 p1c7-8\nSDU 11-24-85 p2c5","oldNotes":"Lynchers arrested and charged; articles follow trial of lynchers; one article debates whether this can be considered a lynching or a murder","origDBindex":"380"},{"caseNum":381,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"35.1266425","lonDecimal":-120.5810025,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1886,"yearMonth":"1886/03","yearMonthDay":"1886/03/31","dateNotes":null,"state":"California","place":"Arroyo Grande","county":"San Luis Obispo","locationNotes":"Using Arroyo Grande NE; suspects taken from jail, \"hung them, father and son, to the railroad bridge here\"","crowdType":"Spontaneous Assembly","crowdSize":"10-100","open":"Secret","oldAuthorities":"Suspect seized from Jail by armed men, who overpowerd the Constable","crime":"Murder, attempted murder, and dog murder [younger Hemmi]; conspiracy [elder Hemmi]","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":2,"suspectNames":"J. Hemmi (son)\nPeter Hemmi (father)","suspectRaces":"White","confession":"elder Hemmi had previous threatened to kill Walker \"on sight\"","suspectNotes":"Son about 20 years old; father about 50 years old. Peter H. had threatened to kill Walker numerous times in order to drive him off of government land","victimNumber":"2","victimNames":"Eugene Walker and wife","victimGenders":"Female and Male","victimRaces":"White","victimNotes":"also, their dog was shot; Mrs. Walker miraculously survived and reported incident, \"latest news is that she is resting easier and may recover.\"","oldSources":"SDU 4-2-86 p2c3","oldNotes":null,"origDBindex":"381"},{"caseNum":382,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"39.2048905","lonDecimal":-122.0095752,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1887,"yearMonth":"1887/07","yearMonthDay":"1887/07/10","dateNotes":null,"state":"California","place":"Colusa","county":"Colusa","locationNotes":null,"crowdType":"Spontaneous Assembly","crowdSize":null,"open":"Open","oldAuthorities":"Suspect escaped from jail;","crime":"Murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Hong Di","suspectRaces":"Chinese","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":"Mrs. Billiou","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"SDU 7-11-87 p1c7-8","oldNotes":null,"origDBindex":"382"},{"caseNum":383,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"37.7619738","lonDecimal":-120.8462638,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1887,"yearMonth":"1887/11","yearMonthDay":"1887/11/25","dateNotes":null,"state":"California","place":"Oakdale","county":"Stanislaus","locationNotes":"found hanging in Patterson's field, \"half a mile west of Oakdale;\" \"hanged him to a[sic] oak tree in the field near the road.\"","crowdType":"\"crowd\" \"mob\"","crowdSize":null,"open":"Open","oldAuthorities":"caught in the act and taken before Justice Warder, who held him to answer before Superior Court; fears of lynching made it necessary to move suspect from Oakdale to county jail; Seized from Constable James Swatzell while escorting him","crime":"Arson--caught in the act","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"McCutcheon, or McCutchan","suspectRaces":"White","confession":"Confessed--\"Before being hanged the boy confessed to setting the ten or twelve incendiary fires with which Oakdale has been visited within the past two weeks.\"","suspectNotes":"16 yrs old; \"Deceased was a brother of the boy McCutchan who was convicted and sentenced to eight years' imprisonment recently for the murder of his step-brother.\" A man named Manuel has also been arrested as an accessory of McCutchan.\"","victimNumber":"10+","victimNames":"McAllister and Dunlap [owned barn that suspect was attempting to burn when caught]","victimGenders":"Male","victimRaces":"White","victimNotes":"multiple victims","oldSources":"SDU 11-28-87 p1c3","oldNotes":null,"origDBindex":"383"},{"caseNum":384,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"33.9269629","lonDecimal":-116.8560429,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1890,"yearMonth":"1890/04","yearMonthDay":"1890/04/28","dateNotes":null,"state":"California","place":"Banning","county":"Riverside","locationNotes":"Suspect waiting for a train to San Bernardino from Banning with officer standing guard. Taken from car and \"down the track about one mile, where [the mob] strung him up to a telegraph pole…\"","crowdType":"\"a large number of stockmen\"","crowdSize":null,"open":"Secret","oldAuthorities":"Seized from guards on train; had a preliminary examination in Banning and was going to Superior Court in San Bernardino","crime":"Robbery--Stock","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Tacho","suspectRaces":"Indian","confession":null,"suspectNotes":"\"Tacho was a bad man, and had been stealing horses and cattle for the past year or more, operating especially in San Diego county.\"","victimNumber":null,"victimNames":null,"victimGenders":"Male","victimRaces":"White","victimNotes":"various cattle- and horse-owners","oldSources":"SDU 4-30-90 p1c4","oldNotes":"body found the next morning by Superintendent Muir of the Southern Pacific Company while passing on the train","origDBindex":"384"},{"caseNum":385,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"34.3997894","lonDecimal":-119.7130844,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1890,"yearMonth":"1890/05","yearMonthDay":"1890/05/12","dateNotes":null,"state":"California","place":"Santa Maria","county":"Santa Barbara","locationNotes":"hung from a rafter in the Twenty-six Saloon, on Main Street, where he was being held since the murder","crowdType":"Spontaneous Assembly","crowdSize":null,"open":"Secret","oldAuthorities":"murdered a constable; being watched by three guards with shotguns when lynched -- vigilantes \"placed a blanket over their heads and then proceeded to Criswell's room\"","crime":"Murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"E. L. Criswell","suspectRaces":"White","confession":"bound and gagged before hanging. \"The whole thing was done very quietly and did not awaken parties sleeping in the next room and there was only a thin partition between.\"","suspectNotes":"\"bears a hard reputation hereabouts\"; had been \"posting notices upon a bulletin board in front of his saloon reflecting upon the character of one of our citizens… this citizen swore out a warrant for the arrest of Criswell and placed it in the hands of Constable Southard.\" When Southard confronted him, a gun battle ensued.","victimNumber":"1","victimNames":"Constable Southard","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"SDU 5-13-90 p1c5","oldNotes":"\"The universal verdict is, served him right.\"","origDBindex":"385"},{"caseNum":386,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"41.2079441","lonDecimal":-121.1552523,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1901,"yearMonth":"1901/05","yearMonthDay":"1901/05/31","dateNotes":null,"state":"California","place":"Lookout","county":"Modoc","locationNotes":"10 miles west of Adin; Hanged at bridge crossing the Pitt River; held at Lookout Hotel","crowdType":"Mob of masked men","crowdSize":"30-50","open":"Secret","oldAuthorities":"Suspects were being guarded in the Lookout hotel by Constable Carpenter and two assistants; were waiting examinations; mob \"compelled the two guards to accompany them\" to the sight of the lynching","crime":"\"their crime had not attained even the dimensions of horse-stealing--always a capital offense in those counties yet on the borderland of civilization. They were petty thieves, no more.\" petty theft, and burglary","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":5,"suspectNames":"Calvin Hall, age 72\nFrank Hall, son, age 26\nJames Hall, son, age 19\nMartin Hall, son, age 16,\nB.D. (or Dan) Yantis, boarding with Halls, age 27","suspectRaces":"White (Calvin Hall and B.D. Yantis)\n\"Half Breed\" (Frank, James, Martin Hall)","confession":"\"Not even given the opportunity of making a farewell stFrank was so defiant that they had to lynch him earlier than the restatement\"","suspectNotes":"Calvin Hall a \"squaw man\"","victimNumber":null,"victimNames":null,"victimGenders":"Male","victimRaces":null,"victimNotes":"various property owners; seems organizers of the lynching saw them as general nuisances","oldSources":"SDU 6-1-1901 p1c1\nSDU 3-18-1902 p1c6\nSF Call 1890-05-13","oldNotes":"Tons of sources to corroborate -- widely reported across the state, it seems; Governor Gage condemned lynching and issued reward for \"ringleaders\" and others involved in lynching, stating \"Whereas, the notoriety and audacity of the crimes, if tolerated, will likely lead to a repetition of similar crimes in other localities in this state, will bring disgrace upon our law-abiding people, obstruct the orderly conduct of courts of justice, and will tend to render life and property insecure from the willful and wanton acts of lawless mobs,...\"; beware that I didn't have time to go through all of the dozens of sources in this folder, so some may not be of the same case","origDBindex":"386"},{"caseNum":387,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"OK","latDecimal":"37.9590275","lonDecimal":-121.2607426,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1849,"yearMonth":"1849/08","yearMonthDay":"1849/08/01","dateNotes":null,"state":"California","place":"Stockton","county":"San Joaquin","locationNotes":null,"crowdType":"trial by jury","crowdSize":null,"open":"open","oldAuthorities":null,"crime":"Burglary and Theft","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Mickey aka Bill Lyon","suspectRaces":"Hounds","confession":null,"suspectNotes":"Belonged to a fraternity of \"Hounds\" that had long disturbed the peace for six months\nOther suspects awaited trial\nOne or more other suspects arrested outside of Stockton had heads shaved and ears cut off","victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"1849-08-09 AC p3c1 CIF Mickey aka Bill Lyon Stockton CHECK DATE","oldNotes":"Check date--maybe 1850? 1851?","origDBindex":"Case_ADD_387"},{"caseNum":388,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"OK","latDecimal":"38.5840178","lonDecimal":-121.5021705,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1850,"yearMonth":"1850/01","yearMonthDay":"1850/01/28","dateNotes":null,"state":"California","place":"Lake Sutter","county":"Sacramento","locationNotes":"mention bridge over Lake Sutter and steam mill. This is in Sacramento. Bridge across Lake Sutter built in 1852 north of I Street along line of 3rd street. Coordinates set at NE corner of 3rd and I","crowdType":"Individuals","crowdSize":null,"open":null,"oldAuthorities":null,"crime":"Horse Theft","punishment":"Shot","lethality":"Lethal","otherNamesMentioned":"Charles E. Morse; C.J. Marvin; L.M. Taylor","numberSuspects":1,"suspectNames":"Lewis Ford","suspectRaces":"Black","confession":"Defied captors, attempted to flee","suspectNotes":"Alleged to be part of a gang. Other members included Peter Miller and Yankee Jim.","victimNumber":"1","victimNames":"William P. Henry","victimGenders":"Male","victimRaces":"Not stated; likely white","victimNotes":null,"oldSources":"Case ADD 1850-02-04 MH Lake Sutter Lewis Ford Negro CHECK.pdf","oldNotes":"Ford tricked by Taylor into confession; in course of which mentions gang of Yankee Jim and Peter Miller. Misters Pike and Henry also tracking Negro Ford, whom they suspected o horse and mule theft. Caught and restrained by Charles E. Morse,W.P Henry, C.J. Marvin, and L.M. Taylor","origDBindex":"Case_ADD_388"},{"caseNum":389,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"Date iffy","latDecimal":"38.90694444","lonDecimal":-120.8375,"latNDegrees":38,"latNMinutes":54,"latNSeconds":25,"lonWDegrees":120,"lonWMinutes":50,"lonWSeconds":15,"year":1850,"yearMonth":"1850/10","yearMonthDay":"1850/10/07","dateNotes":"Monday last during election","state":"California","place":"Georgetown","county":"El Dorado","locationNotes":null,"crowdType":"Enraged crowd","crowdSize":"\"Several hundred\"","open":"Open","oldAuthorities":null,"crime":"Murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Devine, aka Divine","suspectRaces":"Englishman","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":"Devine's wife","victimGenders":"Female","victimRaces":"white","victimNotes":"Wife refused to give Devine  money to gamble with and he shot her through a closed door","oldSources":"1850-10-10-50 p2 Devine Sac Transcript\n1850-10-12 p2c4 Alta California Devine Georgetown","oldNotes":null,"origDBindex":"Case_ADD_391"},{"caseNum":390,"cwIndex":null,"gdIndex":"G-D 2","crossRefNotesCwGd":"date unclear","latDecimal":"38.49305556","lonDecimal":-121.1722222,"latNDegrees":38,"latNMinutes":29,"latNSeconds":35,"lonWDegrees":121,"lonWMinutes":10,"lonWSeconds":20,"year":1850,"yearMonth":"1850/12","yearMonthDay":"1850/12/14","dateNotes":null,"state":"California","place":"Daylor's Ranch","county":"Sacramento","locationNotes":"Near Ringgold (where theft occurred); using coords for Consmne, Durham, p 470","crowdType":"Judge Lynch called in","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"theft of two horses","punishment":"50 lashes","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"unnamed","suspectRaces":"White or Mexican?","confession":null,"suspectNotes":"As executioner was \"Spanish,\" suspect likely Latino?","victimNumber":"1","victimNames":"Dr. Sargent","victimGenders":"Male","victimRaces":"white","victimNotes":"Victim caught suspect with horses","oldSources":"Case ADD 1850-12-19 p2 Sac Transcript Daylors Ranch CHECK.pdf","oldNotes":"Spaniard volunteered to execute the sentence","origDBindex":"Case_ADD_392"},{"caseNum":391,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"sketchy","latDecimal":"37.3107158","lonDecimal":-121.9206516,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1850,"yearMonth":"1850/12","yearMonthDay":"1850/12/19","dateNotes":"Thursday morning","state":"California","place":"San Jose","county":"Santa Clara","locationNotes":"Less than three miles outside city","crowdType":"Court under the jurisdiction of Judge Lynch","crowdSize":"Number of citizens","open":null,"oldAuthorities":null,"crime":"Murder and robbery","punishment":"threatened with hanging to reveal murderers","lethality":"Not Lethal","otherNamesMentioned":"M. Claude Jones, Esq., presided over Lynch court","numberSuspects":1,"suspectNames":"unnamed","suspectRaces":"Mexican","confession":null,"suspectNotes":"Suspected Mexican man gave the names of two or three, including his father","victimNumber":"1","victimNames":null,"victimGenders":"Male","victimRaces":"Californian","victimNotes":null,"oldSources":"Case ADD 1850-12-24-50 p2 Sac Transcript CHECK.pdf","oldNotes":null,"origDBindex":"Case_ADD_393"},{"caseNum":392,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"vague","latDecimal":"38.1539713","lonDecimal":-121.3005805,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/01","yearMonthDay":"1851/01/00","dateNotes":null,"state":"California","place":"On the Mokelumne River","county":"San Joaquin","locationNotes":"Estimated as near current Woodbridge; roughly south of Hick's Ranch","crowdType":"court of their own constituting ","crowdSize":null,"open":"open","oldAuthorities":null,"crime":"stealing stock","punishment":"Hung","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":null,"suspectRaces":"Probably White","confession":"Not specified","suspectNotes":"Confederate of man who received 100 lashes at Hick's Ranch for stealing stock","victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"Case ADD 1851-01-21 Sac Transcript p2c2 Hick's Ranch.pdf","oldNotes":"Exact date of lynching not stated","origDBindex":"Case_ADD_396"},{"caseNum":393,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"38.08333333","lonDecimal":-120.5666667,"latNDegrees":38,"latNMinutes":5,"latNSeconds":null,"lonWDegrees":120,"lonWMinutes":34,"lonWSeconds":null,"year":1853,"yearMonth":"1853/01","yearMonthDay":"1853/01/00","dateNotes":null,"state":"California","place":"Cherokee Flat","county":"Calaveras","locationNotes":"also called Cherokee Ranch; using coords for Altabille, Durham p 757","crowdType":null,"crowdSize":null,"open":null,"oldAuthorities":null,"crime":"murder","punishment":"hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"unnamed","suspectRaces":"Mexican","confession":null,"suspectNotes":null,"victimNumber":"2","victimNames":null,"victimGenders":"Male","victimRaces":"White","victimNotes":"employees at Phoenix Mill","oldSources":null,"oldNotes":null,"origDBindex":"Case_ADD_564"},{"caseNum":394,"cwIndex":"C-W 28","gdIndex":null,"crossRefNotesCwGd":"ok","latDecimal":"37.48611111","lonDecimal":-120.0194444,"latNDegrees":37,"latNMinutes":29,"latNSeconds":10,"lonWDegrees":120,"lonWMinutes":1,"lonWSeconds":10,"year":1851,"yearMonth":"1851/01","yearMonthDay":"1851/01/07","dateNotes":null,"state":"California","place":"Agua Frio","county":"Mariposa","locationNotes":"Durham p 739","crowdType":null,"crowdSize":"500 Americans and 200 foreigners","open":"Open","oldAuthorities":null,"crime":"murder","punishment":"hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Pablo","suspectRaces":"Mexican","confession":null,"suspectNotes":"40 years old","victimNumber":"1","victimNames":null,"victimGenders":null,"victimRaces":"American","victimNotes":null,"oldSources":"1851-01-21 p2 Sac Transcript Agua Frio Pablo","oldNotes":"500 Americans, 200 mexicns witnessed execution","origDBindex":"Case_ADD_397"},{"caseNum":395,"cwIndex":"C-W 6","gdIndex":"G-D 6","crossRefNotesCwGd":null,"latDecimal":"38.32777778","lonDecimal":-121.325,"latNDegrees":38,"latNMinutes":19,"latNSeconds":40,"lonWDegrees":121,"lonWMinutes":19,"lonWSeconds":30,"year":1851,"yearMonth":"1851/01","yearMonthDay":"1851/01/13","dateNotes":null,"state":"California","place":"Hick's Ranch on the Macosumne","county":"Sacramento","locationNotes":"Ranch on the Mokelumne and Dry Creek; elsewhere (History of Fresno) Hick's Ranch placed on Cosumnes. Using coordinates for hicksville, Durham, p 498","crowdType":"Judge Lynch is the popular court for the time-being; a number of persons determined upon taking the law into their own hands","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Horse theft","punishment":"125 lashes","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Starkey","suspectRaces":"Not stated; likely White","confession":"upon being strung up and down 5 times, made a full confession","suspectNotes":null,"victimNumber":"a number of ranchers","victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"1851-01-13 p2 Sac Transcript Starkey","oldNotes":"hanged to extort confession; fifth time led Starkeyu to confess to running on stock of neighbors","origDBindex":"Case_ADD_398"},{"caseNum":396,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"LOCATION?","latDecimal":"38.275342","lonDecimal":-121.377933,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/01","yearMonthDay":"1851/01/19","dateNotes":"Sunday the people gathered and formed a court","state":"California","place":"Rhodes Ranch","county":"Sacramento","locationNotes":"on the Cosumnes; 25 miles from Sacramento, in vicinity of Ten Mile House, where the men were taken into custody. After incident Grant in Sacramento(?); asked to leave declared unsafe for him to go either to Placerville or Marysville. Placing across the Cosumnes from Gage and Almond","crowdType":"court formed; two judges and jury appointed","crowdSize":"Not specified","open":"Open","oldAuthorities":null,"crime":"Horse theft","punishment":"Grant-40 lashes; head shaved, R branded on cheek.\nEustis 50 lashes; R branded on cheek. Punishment carried out by an \"Old Indian\"","lethality":"Not Lethal","otherNamesMentioned":"Whitley, claimed to see the 2 men with stock owned by Rhodes. Rhodes and others accompanied the two back to his ranch","numberSuspects":2,"suspectNames":"Grant (originally from illinois) and Eustis","suspectRaces":"White","confession":"During punishment, Grant declared innocence and Eustis declared both equally guilty","suspectNotes":"Grant had kept a boarding house in Sacramento near the stock market","victimNumber":"1","victimNames":"Mr. Rhodes","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"1851-01-21 p2  Sac Transcript Grant Eustis Rhodes Rancho Cosumnes","oldNotes":"Sunday afternoon last. Mr. Whitley met Grant and Eustis near 10 Mile Hjouse, recogniezed horses, told them to return them. Whipped by an \"old indian\" who worked on Rhodes Ranch","origDBindex":"Case_ADD_399"},{"caseNum":398,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"39.2915592","lonDecimal":-121.1946789,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/02","yearMonthDay":"1851/02/00","dateNotes":null,"state":"California","place":"Bridgeport","county":"Nevada","locationNotes":"8 miles above lower crossing of Deer Creek. Eureka House, kept by Dr. Mathews locafed at lower crossing","crowdType":"Judge Lynch presiding","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Theft, $1600","punishment":"92 lashes","lethality":"Not Lethal","otherNamesMentioned":"Report from T.M. Harris; Miller and Hopper accompanied French; foound Fillmore at Eureka House","numberSuspects":1,"suspectNames":"Thomas Fillmore","suspectRaces":"White","confession":"Confessed upon discovery","suspectNotes":null,"victimNumber":"1","victimNames":"Mr. French","victimGenders":"Male","victimRaces":"White","victimNotes":"partner of Fillmore","oldSources":"1851-02-12 p2 Sac Transcript Fillmore Bridgeort","oldNotes":"Exact date of lynching not stated (recent case of lynching) 02/12/1851","origDBindex":"Case_ADD_402"},{"caseNum":399,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"multiple punishments","latDecimal":"38.71111111","lonDecimal":-120.9513889,"latNDegrees":38,"latNMinutes":42,"latNSeconds":40,"lonWDegrees":120,"lonWMinutes":57,"lonWSeconds":5,"year":1851,"yearMonth":"1851/02","yearMonthDay":"1851/02/07","dateNotes":"Monday and Tuesday evenings","state":"California","place":"Green Springs","county":"El Dorado","locationNotes":"using coords for Rescue, Durham p545","crowdType":"Judge Lynch, arraigned","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Horse theft","punishment":"39 lashes, head shaved, branded with R on cheek","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Robert Fisher, from Pennsylavnia","suspectRaces":"White","confession":null,"suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":"Male","victimRaces":null,"victimNotes":null,"oldSources":"1851-02-07 p2 Sac Transcript Robert Fisher Green springs","oldNotes":"Lynching administered over two days 02/03 and 02/14/1851","origDBindex":"Case_ADD_401"},{"caseNum":401,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"See HHB Pt I p 138","latDecimal":"37.795798","lonDecimal":-122.403327,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/02","yearMonthDay":"1851/02/25","dateNotes":"Yesterday afternoon","state":"California","place":"San Francisco","county":"San Francisco","locationNotes":"Took place at auction house of Middleton and Hood, corner of Washington and Montgomery","crowdType":"Mob at auction house","crowdSize":"Large number of people; some thousand of the populace followed crowed to Police","open":"Open","oldAuthorities":"Handed over to police lynched","crime":"Theft vest and shirt","punishment":"beaten, whipped and delivered to police","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"William Wilson","suspectRaces":"White","confession":null,"suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":"Messrs, Middleton & Hood Auction House","oldSources":"1851-02-25 p 2 Alta California William Wilson beaten San Francisco","oldNotes":null,"origDBindex":"Case_ADD_404"},{"caseNum":402,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"39.2915592","lonDecimal":-121.1946789,"latNDegrees":39,"latNMinutes":17,"latNSeconds":30,"lonWDegrees":121,"lonWMinutes":11,"lonWSeconds":40,"year":1851,"yearMonth":"1851/02","yearMonthDay":"1851/02/27","dateNotes":"reports received yesterday from Sacramento Transcript; caught about a week and a half ago","state":"California","place":"Bridgeport","county":"Nevada","locationNotes":"Nye's Crossing, South fork of the Yuba; caught at Rattlesnake Bar middle Yuba; news is from Concord Bar, middle Yuba","crowdType":"tried by Lynch Court","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"threatening to kill a man and stealing horses","punishment":"hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Yankee Jim","suspectRaces":"White","confession":null,"suspectNotes":"leader of notorious gang","victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"Case ADD 1851-03-10 Sac Transcript p2c4 Yankee Jim Rattlesnake Bar Middle Yuba CHECK.pdf\nCase ADD 1851-03-11 AC p2c5 Yankee Jim CHECK.pdf","oldNotes":"Lynch date approximate","origDBindex":"Case_ADD_405"},{"caseNum":403,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"39.436002","lonDecimal":-121.1299567,"latNDegrees":39,"latNMinutes":26,"latNSeconds":10,"lonWDegrees":121,"lonWMinutes":8,"lonWSeconds":15,"year":1851,"yearMonth":"1851/03","yearMonthDay":"1851/03/00","dateNotes":null,"state":"California","place":"Foster's Bar","county":"Yuba","locationNotes":null,"crowdType":"the miners","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Theft of stock","punishment":"1 shot\n2 hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":3,"suspectNames":null,"suspectRaces":"Likely Mexican?","confession":null,"suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"Case ADD 1851-03-02 p 2 Alta California Rumor CHECK.pdf","oldNotes":"Lynching date not specified","origDBindex":"Case_ADD_407"},{"caseNum":404,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"37.9590275","lonDecimal":-121.2607426,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/03","yearMonthDay":"1851/03/02","dateNotes":"Sunday","state":"California","place":"Stockton","county":"San Joaquin ","locationNotes":null,"crowdType":"Taken by the populace","crowdSize":null,"open":"Open","oldAuthorities":"Dragged across the slough with determination to hang him; sheriff interposed","crime":"stealing a mule","punishment":"Dragged by neck for hanging but remanded","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":null,"suspectRaces":"White?","confession":null,"suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"Case ADD 1851-03-05 AC CHECK.pdf","oldNotes":null,"origDBindex":"Case_ADD_408"},{"caseNum":405,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"39.29722222","lonDecimal":-120.6708333,"latNDegrees":39,"latNMinutes":17,"latNSeconds":50,"lonWDegrees":120,"lonWMinutes":40,"lonWSeconds":15,"year":1851,"yearMonth":"1851/03","yearMonthDay":"1851/03/05","dateNotes":"yesterday","state":"California","place":"Wilson's Rancho","county":"Placer","locationNotes":"See Emigrant Gap, Durham 482","crowdType":"Tried and sentenced; summary punishment","crowdSize":null,"open":null,"oldAuthorities":null,"crime":"Aiding Hamilton's escape","punishment":"30 lashes","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Sage","suspectRaces":"White","confession":null,"suspectNotes":"Accomplice to Hamilton","victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"1851-03-05 AC;\nCase ADD 1851-03-10 Sac Transcript p2c1 horse thief Sage accomplice of Hamilton whipped Wilson's Rancho CHECK.pdf\nCase ADD 1851-03-11 Alta California Sage at Wilson's Rancho CHECK.pdf\n","oldNotes":null,"origDBindex":"Case_ADD_409"},{"caseNum":406,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"38.3484545","lonDecimal":-120.7723673,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/03","yearMonthDay":"1851/03/19","dateNotes":"Correct","state":"California","place":"Jackson","county":"Calaveras","locationNotes":"Historic Marker, location of Astor House nad childhood home of Ernesto Gallo. Coordinates: 38° 20.908′ N, 120° 46.431′ W. Translated )?) into decimal Coordinates for Astor House; Hangint took place at LargeOak directly in front of Astor House","crowdType":"formal meeting","crowdSize":"Not specified","open":"Open","oldAuthorities":"Magistrate, District Court, Justice","crime":"Theft and murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":"Two Indians, Coyote Jim and Coyote Joe previously jailed for murder of thompson, but released. later, Coyote Joe arrested by Justice Boynton. Public meeting determined on Lynch Court. Meeting chaired by Capt. Dunham as judge. Jury of 12. Henry R. Mann counsel for the people, Wm. McDowell counselor for prisoner","numberSuspects":1,"suspectNames":"Coyote Joe","suspectRaces":"Indian","confession":null,"suspectNotes":"Coyote Joe had been with Capt Sutter","victimNumber":"1","victimNames":"Allen Thompson","victimGenders":"Male","victimRaces":"white","victimNotes":null,"oldSources":"Case ADD 1851-03-22 Sac Transcript Coyote Joe Jim Jackson Calaveras CHECK.pdf\nCase ADD 1851-03-23 Alta California Coyote Joe Jim Jackson Calaveras CHECK.pdf","oldNotes":"Tuesday last; arrested along with Coyote Jim for murder of Thompson but released; Coyote joe taken by people on returning to town; tried and executed on 3-19-51 (letter dated 3/20. Capt Dunham served as judge; jury of 12; Henry R. Mann prosecutor and William McDowell attorney for defense. Hanged from large oak outside of Astor House. Coyote Joe had worked for Sutter before gold discovery;\n2 sources; Released without punishment by District Court; arrested again by the Justice; people's court sentenced Coyote Joe to hang","origDBindex":"Case_ADD_410"},{"caseNum":407,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"LOCATION?","latDecimal":null,"lonDecimal":null,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/03","yearMonthDay":"1851/03/27","dateNotes":null,"state":"California","place":"In the mountains","county":null,"locationNotes":"Hanged in Mountains according to Sac Transcript","crowdType":null,"crowdSize":null,"open":null,"oldAuthorities":null,"crime":"murder","punishment":"hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":2,"suspectNames":null,"suspectRaces":"Chinese","confession":null,"suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"Case ADD 1851-03-27 Alta California Two Chinamen CHECK.pdf","oldNotes":null,"origDBindex":"Case_ADD_411"},{"caseNum":408,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"38.4985333","lonDecimal":-121.0516787,"latNDegrees":38,"latNMinutes":30,"latNSeconds":null,"lonWDegrees":121,"lonWMinutes":2,"lonWSeconds":40,"year":1851,"yearMonth":"1851/04","yearMonthDay":"1851/04/00","dateNotes":null,"state":"California","place":"Cook's Bar","county":"Sacramento","locationNotes":"on the Cosumnes","crowdType":"some miners","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Washing dirt thrown up by another party","punishment":"assessed the damages","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":3,"suspectNames":"James Simpson\n2 unnamed","suspectRaces":"White","confession":null,"suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":null,"oldNotes":null,"origDBindex":"Case_ADD_578"},{"caseNum":409,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"New report; check coordinates","latDecimal":"38.67916667","lonDecimal":-121.9694444,"latNDegrees":38,"latNMinutes":40,"latNSeconds":45,"lonWDegrees":121,"lonWMinutes":58,"lonWSeconds":10,"year":1851,"yearMonth":"1851/04","yearMonthDay":"1851/04/02","dateNotes":"About the first of April; \"last Wednesday\" from report dated 4/7","state":"California","place":"Cache Creek","county":"Yolo","locationNotes":"Lynching took place at Stephen's Ranch,  also known as Virginia Rancho, about 28 miles from Fremont","crowdType":"mob","crowdSize":"About 26","open":"Open","oldAuthorities":"Officer summoned","crime":"horse stealing","punishment":"hanged to extort confession\nStaggers confessed\nJames 42 lashes, insisted on innocence but said he knew who thieves were","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":2,"suspectNames":"James and Staggers","suspectRaces":"White","confession":null,"suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"Case ADD 1851-04-14 AC p5 Followup from Fremont on hanging at Cache Creek CHECK.pdf","oldNotes":"this is a report about arrest of 26 lynchers; need to find initial  report of lynching agt Cache Creek","origDBindex":"Case_ADD_412"},{"caseNum":410,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"38.9621206","lonDecimal":-120.9310507,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/04","yearMonthDay":"1851/04/15","dateNotes":null,"state":"California","place":"Oregon Bar","county":"Placer","locationNotes":"Placer; near middle fork of the American river; report from New York Bar","crowdType":"court organized; jury of 12 and counsel for prisoner","crowdSize":null,"open":"open","oldAuthorities":null,"crime":"attempted horse stealing","punishment":"50 lashes\nHalf of head Shaved\nBanished","lethality":"Not Lethal","otherNamesMentioned":"J. D. Brown, New York Bar, sent report","numberSuspects":1,"suspectNames":"Bill Hardin or Harding","suspectRaces":"White","confession":null,"suspectNotes":null,"victimNumber":"2","victimNames":"Messrs. Blinn and Moffatt","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":null,"oldNotes":null,"origDBindex":"Case_ADD_563"},{"caseNum":411,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"Location unclear","latDecimal":"40.23136","lonDecimal":-122.261737,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/05","yearMonthDay":"1851/05/27","dateNotes":null,"state":"California","place":"Sandborn's Rancho","county":"Shasta","locationNotes":"130 miles north of Sacramento; near Reddings Ssprings. Also Shasta City, 5.25 miles NW of current Redding; locatin estimated 130 miles north of Sacramento towards Redding","crowdType":"Citizen's Court","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Theft of mule","punishment":"39 lashes","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"unnamed","suspectRaces":"Whitr","confession":"Screamed for mercy","suspectNotes":null,"victimNumber":"1","victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"Case ADD 1851-05-27  Sac Transcript Reddings Springs Sandborn's Rancho CHECK.pdf","oldNotes":null,"origDBindex":"Case_ADD_417"},{"caseNum":413,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"38.3004709","lonDecimal":-120.7063219,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/06","yearMonthDay":"1851/06/16","dateNotes":"estimated","state":"California","place":"Mokelumne Hill","county":"Calaveras","locationNotes":"Hanged at site of robbery; camp of Hoteling, at the second crossing of the Calaveras River about 4 miles from the double Springs","crowdType":"Jury, \"Lynch Code\"","crowdSize":null,"open":"open","oldAuthorities":null,"crime":"robbery, $1,200","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"unnamed","suspectRaces":"Irishman","confession":"Confessed; asked to see a priest, 4 hours allowed","suspectNotes":"deserted British army; confessed to priest that he had two wives, had emigrated from Liverpool to NY, St. Jos. Mo, and then Nevada (City), Ca, committed roberies at Nevada and Mariposa","victimNumber":"1","victimNames":"Mr. Hoteling","victimGenders":"male","victimRaces":"white","victimNotes":"old Missourian","oldSources":null,"oldNotes":null,"origDBindex":"Case_ADD_570"},{"caseNum":414,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"37.9840911","lonDecimal":-120.3821381,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/07","yearMonthDay":"1851/07/06","dateNotes":null,"state":"California","place":"Sonora","county":"Tuolumne","locationNotes":null,"crowdType":"Vigilance Committee","crowdSize":null,"open":"open","oldAuthorities":null,"crime":"passing counterfeit dust","punishment":"25 lashes each\nBanished","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":2,"suspectNames":"unnamed","suspectRaces":"Mexican","confession":null,"suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":null,"oldNotes":null,"origDBindex":"Case_ADD_568"},{"caseNum":415,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"37.7935535","lonDecimal":-122.40002,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/07","yearMonthDay":"1851/07/08","dateNotes":"Yesterday runed over; report from 7-9-51","state":"California","place":"San Francisco","county":"San Francisco","locationNotes":"Crimes at Sonoma; using coordinates for Committee Rooms Location set  near intersection of Battery and California","crowdType":"Vigilance Committee","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Horse theft","punishment":"Turned over to military authorities by SFVC","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Church","suspectRaces":"white","confession":null,"suspectNotes":"U.S. Dragoons deserter","victimNumber":"1","victimNames":"Mr. Derby","victimGenders":"male","victimRaces":"white","victimNotes":"horse stolen from 1st Lt. Derby of Topographical Engineers","oldSources":"Case ADD 1851-07-09 AC p2 Church Sonoma CHECK.pdf\nCase ADD 1851-07-09 AC p2 OLD NOTES CHECK.pdf","oldNotes":null,"origDBindex":"Case_ADD_420"},{"caseNum":416,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"38.44305556","lonDecimal":-120.8541667,"latNDegrees":38,"latNMinutes":26,"latNSeconds":35,"lonWDegrees":120,"lonWMinutes":51,"lonWSeconds":15,"year":1851,"yearMonth":"1851/08","yearMonthDay":"1851/08/08","dateNotes":null,"state":"California","place":"Drytown or Dry Creek","county":"Amador","locationNotes":"3 miles south of Drytown; using coords for Drytown, Durham, p 478. Refrine?","crowdType":null,"crowdSize":null,"open":"Open","oldAuthorities":"Court","crime":"$700 gold dust","punishment":"Released","lethality":"Not Lethal","otherNamesMentioned":"Dr. J.B. Isabell, of Mo. and NC; gambler and notorious character (cleared of charge). Initially tried, convicted, and condemned to hanging; later cleared by Coulburn's confession","numberSuspects":2,"suspectNames":"Dr. J.B. Isabell\nRobert Coulburn","suspectRaces":"white","confession":null,"suspectNotes":"Coulburn young man from Indiana; gambler and drunkard ( convicted of charge but released without punishment as lynch court tempered by near hanging of Isabell)","victimNumber":"1","victimNames":"Mr. York","victimGenders":"male","victimRaces":"white","victimNotes":"placed $700 gold dust in custody of storekeeper Mr. West, proprietor of New York Store","oldSources":"Case ADD 1851-07-09 AC p2 OLD NOTES CHECK.pdf\nCase ADD 1851-08-28 p2c4 SDU Isabell Coulburn Drytown CHECK.pdf","oldNotes":"Lynch court convicted Isabell of theft and about to hang when suspicion placed on Coulburn","origDBindex":"Case_ADD_421"},{"caseNum":417,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"38.8160114","lonDecimal":-121.0896677,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/09","yearMonthDay":"1851/09/12","dateNotes":"or 09/10","state":"California","place":"Rattlesnake Bar","county":"Placer","locationNotes":"suspect jumped into part of the river called \"Dea Man's Bay\"","crowdType":"Tribunal of miners","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"theft, food","punishment":"whipped--30 lashes","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":null,"suspectRaces":"Sydney Duck","confession":null,"suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"Case ADD 1851-09-12 p2c2 SDU Rattlesnake Bar Sydney Duck CHECK.pdf","oldNotes":null,"origDBindex":"Case_ADD_423"},{"caseNum":418,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"39.0293428","lonDecimal":-120.8616029,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/10","yearMonthDay":"1851/10/02","dateNotes":null,"state":"California","place":"Yankee Jim","county":"El Dorado","locationNotes":null,"crowdType":"by order of the populace","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"theft, $20","punishment":"whipped--20 lashes","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":null,"suspectRaces":"white","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":null,"victimGenders":"male","victimRaces":"white","victimNotes":"a miner","oldSources":"1851-10-07 p2c3 AC","oldNotes":null,"origDBindex":"Case_ADD_425"},{"caseNum":419,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"38.79583333","lonDecimal":-120.8180556,"latNDegrees":38,"latNMinutes":47,"latNSeconds":45,"lonWDegrees":120,"lonWMinutes":49,"lonWSeconds":5,"year":1851,"yearMonth":"1851/10","yearMonthDay":"1851/10/20","dateNotes":"\"last week\"","state":"California","place":"Columbia Flat","county":"El Dorado","locationNotes":"New Bedford House, kept by Edward Heilbut; using coords for Kelsey, Durham 507","crowdType":null,"crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Robbery $6000 gold","punishment":"whipped and banished","lethality":"Not Lethal","otherNamesMentioned":"Mr. Benson, with whom suspect boarded","numberSuspects":1,"suspectNames":null,"suspectRaces":"White","confession":null,"suspectNotes":"\"Young\"","victimNumber":"1","victimNames":null,"victimGenders":"male","victimRaces":"white","victimNotes":"\"hard working miner\"","oldSources":null,"oldNotes":null,"origDBindex":"Case_ADD_577"},{"caseNum":420,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"37.7935535","lonDecimal":-122.40002,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/11","yearMonthDay":"1851/11/00","dateNotes":null,"state":"California","place":"San Francisco","county":"San Francisco","locationNotes":"Committee Rooms Location set  near intersection of Battery and California","crowdType":"Vigilance Committee","crowdSize":null,"open":null,"oldAuthorities":null,"crime":"Murder","punishment":"Returned to Panama","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"W.G. Hance","suspectRaces":"white","confession":null,"suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"1851-11-15 p2 Alta California Panama SFVC (missing)","oldNotes":null,"origDBindex":"Case_ADD_426"},{"caseNum":422,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"Can't open journal","latDecimal":"38.3311481","lonDecimal":-120.627329,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/12","yearMonthDay":"1851/12/21","dateNotes":"or 12/22","state":"California","place":"Rich Gulch","county":"Calaveras","locationNotes":null,"crowdType":"People's Court","crowdSize":"About a dozen","open":"Open","oldAuthorities":null,"crime":"Murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":2,"suspectNames":null,"suspectRaces":"Mexican","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":"Alex McDonald","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"Case ADD 1851-12-21 Doten Journal V1 Bk4-pp 97-104 CHECK.pdf","oldNotes":null,"origDBindex":"Case_ADD_428"},{"caseNum":423,"cwIndex":"C-W 12","gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"41.77777778","lonDecimal":-123.0333333,"latNDegrees":41,"latNMinutes":46,"latNSeconds":40,"lonWDegrees":123,"lonWMinutes":2,"lonWSeconds":null,"year":1852,"yearMonth":"1851/02","yearMonthDay":"1851/02/28","dateNotes":"Date good","state":"California","place":"Johnson's Bar","county":"Siskiyou","locationNotes":"junction of Scott's River and Klamath river; under Steelhead Durham 318","crowdType":"A meeting","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Theft of gold","punishment":"39 lashes\nRepaid theft\nBanished\n(Considered cropping his ears)","lethality":"Not Lethal","otherNamesMentioned":"E.B Neff, Chairman of of meeting\nC.C. Beekman, Secretary\nCyrus Hurd, Jr., testified that he believed Bardt had stolen the gold dust\nFelix Parent, held Bardt under arrest","numberSuspects":1,"suspectNames":"Dr. A. Bardt","suspectRaces":"White","confession":"Confessed","suspectNotes":null,"victimNumber":"2","victimNames":"G.W. Smith\nCyrus Hurd, Jr.","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"Case ADD 1852-03-21 p2c4 AC CHECK.pdf","oldNotes":null,"origDBindex":"Case_ADD_406"},{"caseNum":424,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"38.05277778","lonDecimal":-121.0138889,"latNDegrees":38,"latNMinutes":3,"latNSeconds":10,"lonWDegrees":121,"lonWMinutes":0,"lonWSeconds":50,"year":1852,"yearMonth":"1852/03","yearMonthDay":"1852/03/00","dateNotes":null,"state":"California","place":"Atherton's Ranche","county":"San Joaquin","locationNotes":"Using coordinates for Bellota, Durham, p 745; location of Atherton Ferry. Would like better info on location of Atherton's Ranch","crowdType":"lynched","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Theft, gold","punishment":"200 Lashes","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":null,"suspectRaces":"White","confession":null,"suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"Case ADD 1852-03-24 p2c4-2 AC CHECK.pdf","oldNotes":"Lynching date not specified","origDBindex":"Case_ADD_432"},{"caseNum":425,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"38.8968431","lonDecimal":-121.0760567,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1852,"yearMonth":"1852/04","yearMonthDay":"1852/04/00","dateNotes":null,"state":"California","place":"Auburn","county":"Placer","locationNotes":"Seized a short distance south of town","crowdType":null,"crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Appropriating a title?","punishment":"Whipped, 10 lashes\nFined $60","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"John Ross","suspectRaces":"White","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":null,"victimGenders":"Male","victimRaces":null,"victimNotes":null,"oldSources":"Case ADD 1852-04-16 SDU p2c5 John Ross Auburn.pdf","oldNotes":"Lynching date not specified","origDBindex":"Case_ADD_435"},{"caseNum":426,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"38.682552","lonDecimal":-120.848518,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1852,"yearMonth":"1852/06","yearMonthDay":"1852/06/07","dateNotes":null,"state":"California","place":"Mud Springs","county":"El Dorado","locationNotes":null,"crowdType":null,"crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":null,"suspectRaces":"Indian","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":null,"victimGenders":"Male","victimRaces":"Chinese","victimNotes":null,"oldSources":"Case ADD 1852-06-07 p2c1 SDU Mud Springs Chinese CHECK.pdf\nCase ADD 1852-06-08 p2c4 AC Mud Springs Chinese CHECK.pdf\nCase ADD 1852-06-12 p1c5 WAC Mud Springs Chinese CHECK.pdf\nCase ADD 1852-06-15 p1c2 Steamer Edition Mud Springs Chinese CHECK.pdf","oldNotes":null,"origDBindex":"Case_ADD_437"},{"caseNum":427,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"39.7401714","lonDecimal":-120.9088398,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1852,"yearMonth":"1852/06","yearMonthDay":"1852/06/27","dateNotes":null,"state":"California","place":"Slate Creek House","county":"Sierra","locationNotes":"near Gibsonville?","crowdType":"The People; jury appointed","crowdSize":null,"open":"Open","oldAuthorities":"crowd took matter into own hands defying jp who had arrested pillsbury","crime":"murder","punishment":"hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":3,"suspectNames":"Jonathan Pillsbury\nHenry Miller\nTom Parks","suspectRaces":"White","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":"Mr. Dumnbar","victimGenders":"male","victimRaces":"Scotsman","victimNotes":"proprietor of Slate Creek House","oldSources":null,"oldNotes":null,"origDBindex":"Case_ADD_395"},{"caseNum":428,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"39.00555556","lonDecimal":-120.7527778,"latNDegrees":39,"latNMinutes":0,"latNSeconds":20,"lonWDegrees":120,"lonWMinutes":45,"lonWSeconds":10,"year":1852,"yearMonth":"1852/09","yearMonthDay":"1852/09/28","dateNotes":null,"state":"California","place":"American Bar","county":"Placer","locationNotes":"Middle Fork American River. Durham, p 442","crowdType":"Meeting of the Citizens","crowdSize":null,"open":null,"oldAuthorities":null,"crime":"Assault","punishment":"Fined $100","lethality":"Not Lethal","otherNamesMentioned":"Dr. Van Dyck, Chair of meeting\nWm. F. Nichols, Secretary\nJohnson\nCraig\nPollock","numberSuspects":4,"suspectNames":null,"suspectRaces":"White","confession":"One of the 4 suspects confessed to shooting at Indians","suspectNotes":null,"victimNumber":"1","victimNames":null,"victimGenders":"Male","victimRaces":"Indian","victimNotes":null,"oldSources":"Case ADD 1852-10-09 SDU p2c5 Americanville Indian.pdf","oldNotes":"Not sure this is a lynching case; INCLUDE FOR NOW","origDBindex":"Case_ADD_439"},{"caseNum":429,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"38.1446994","lonDecimal":-120.4347513,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1853,"yearMonth":"1853/01","yearMonthDay":"1853/01/24","dateNotes":null,"state":"California","place":"Murpheys","county":"Calaveras","locationNotes":"Pass along the road towards Duglass","crowdType":null,"crowdSize":"15 horsemen","open":"Open","oldAuthorities":null,"crime":"Murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":null,"suspectRaces":"Mexican","confession":null,"suspectNotes":"Party pursuiing other members of suspected band","victimNumber":"6","victimNames":null,"victimGenders":"Male","victimRaces":"2 Chinese\n4 Americans","victimNotes":null,"oldSources":"1853-01-24 Elias Ketcham Diary Murphys Calaveras County Huntington Library MssHM 58269","oldNotes":null,"origDBindex":"Case_ADD_440"},{"caseNum":430,"cwIndex":"C-W 27","gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"38.70416667","lonDecimal":-121.1319444,"latNDegrees":38,"latNMinutes":42,"latNSeconds":15,"lonWDegrees":121,"lonWMinutes":7,"lonWSeconds":55,"year":1853,"yearMonth":"1853/01","yearMonthDay":"1853/01/26","dateNotes":null,"state":"California","place":"Mormon Island","county":"Sacramento ","locationNotes":"executed on Negro Hill opposte Mormon Island","crowdType":"jury of 12 miners","crowdSize":"500","open":"Open","oldAuthorities":null,"crime":"Theft, gold","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":"Mr. Kelsey, a \"colored brother\" of suspect\nC.P. Nichols, author of report\n","numberSuspects":1,"suspectNames":"James Taylor","suspectRaces":"Black","confession":"Confessed and begged for life; a \"one of his colored brothers,\" Mr. Kelsey, pled for lenience, which exasperated the crowd","suspectNotes":null,"victimNumber":"3","victimNames":"L. Rowley & wife\nMr. Bennett","victimGenders":"2 Male\nFemale","victimRaces":"White","victimNotes":null,"oldSources":"Case ADD 1853-01-29 SDU p2c6 James Taylor Mormon Island.pdf\nCase ADD 1853-01-30 AC p2c3 Mormon Island James Taylor Negro CHECK.pdf","oldNotes":null,"origDBindex":"Case_ADD_443"},{"caseNum":431,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"38.3484545","lonDecimal":-120.7723673,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1853,"yearMonth":"1853/07","yearMonthDay":"1853/07/28","dateNotes":null,"state":"California","place":"Jackson","county":"Amador","locationNotes":"Creek two miles south of Jackson","crowdType":"Citizens of our place","crowdSize":"1000","open":"Open","oldAuthorities":null,"crime":"Murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":null,"suspectRaces":"Chilean","confession":"Yes","suspectNotes":"Before taken by Americans, struck by hatchet and beaten by Chinese","victimNumber":"1","victimNames":null,"victimGenders":"Male","victimRaces":"Chinese","victimNotes":"Part of a company of 3; Father and 2 sons; victim one of the sons","oldSources":"Case ADD 1853-07-00 HHB PT I-530-531 Chinese and Chileans near jackson CHECK.pdf\nCase ADD 1853-07-29 AC p2c2 Chinese by Chileans Jackson CHECK.pdf\nCase ADD 1853-07-29 AC p2c2 OLD NOTES CHECK.pdf\nCase ADD 1853-07-29 HHB PT I-530 Chinese by Chileans Jackson CHECK.pdf","oldNotes":null,"origDBindex":"Case_ADD_445"},{"caseNum":432,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"Check for additional information","latDecimal":"38.6765706","lonDecimal":-121.6349597,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1853,"yearMonth":"1853/12","yearMonthDay":"1853/12/05","dateNotes":null,"state":"California","place":"Fremont","county":"Yolo","locationNotes":"Brown's Hotel","crowdType":"jury summoned","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Theft","punishment":"Escaped","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":2,"suspectNames":"George Wright\nPorter","suspectRaces":"White","confession":"Wright and Porter falsely accused of intending to murder Dr. Covell","suspectNotes":null,"victimNumber":"1","victimNames":"Dr. Covell","victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"Case ADD 1853-12-05 AC p2c2 Wright Porter Fremont Yolo County","oldNotes":"Not a lynching. INCLUDE","origDBindex":"Case_ADD_449"},{"caseNum":433,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"39.51527778","lonDecimal":-120.9833333,"latNDegrees":39,"latNMinutes":30,"latNSeconds":55,"lonWDegrees":120,"lonWMinutes":59,"lonWSeconds":null,"year":1854,"yearMonth":"1854/02","yearMonthDay":"1854/02/00","dateNotes":null,"state":"California","place":"Indian Valley","county":"Sierra","locationNotes":"Choosing Indian Valley, Sierra County; Guess, because Indian Valley in sierra County mentioned in nearby stories….","crowdType":"Judge Lynch summoned a jury","crowdSize":null,"open":"open","oldAuthorities":null,"crime":"murder","punishment":"hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"George Taylor","suspectRaces":"white","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":"unnamed","victimGenders":"male","victimRaces":"Indian","victimNotes":null,"oldSources":null,"oldNotes":null,"origDBindex":"Case_ADD_567"},{"caseNum":434,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"41.29861111","lonDecimal":-123.1263889,"latNDegrees":41,"latNMinutes":17,"latNSeconds":55,"lonWDegrees":123,"lonWMinutes":7,"lonWSeconds":35,"year":1855,"yearMonth":"1855/01","yearMonthDay":"1855/01/00","dateNotes":null,"state":"California","place":"Sawyer's Bar","county":"Siskiyou","locationNotes":"on Salmon Creek, near Bestville, Klamath County","crowdType":"the citizens","crowdSize":null,"open":"open","oldAuthorities":null,"crime":"assault","punishment":"21 lashes\nbanished","lethality":"Not Lethal","otherNamesMentioned":"James Moran, lynched\nJ.W. Evans, justice of peace at Bestville, Klamath County\nDavis, beaten by McDivitt\nRobert Criag, killed by Moran","numberSuspects":1,"suspectNames":"McDivitt","suspectRaces":"white","confession":null,"suspectNotes":null,"victimNumber":"2","victimNames":"Mr. Davis","victimGenders":"male","victimRaces":"white","victimNotes":null,"oldSources":null,"oldNotes":null,"origDBindex":"Case_ADD_566"},{"caseNum":435,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"37.67083333","lonDecimal":-122.0805556,"latNDegrees":37,"latNMinutes":40,"latNSeconds":15,"lonWDegrees":122,"lonWMinutes":4,"lonWSeconds":50,"year":1855,"yearMonth":"1855/02","yearMonthDay":"1855/02/06","dateNotes":null,"state":"California","place":"Haywoods","county":"Alameda","locationNotes":"Horse stolen in San Leandro; suspect captured near San Joaquin River; Haywood early name for Hayward","crowdType":null,"crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Horse theft","punishment":"Hanging \"frustrated\" by Sheriff","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Charles Thompson","suspectRaces":"White","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":"Mr. Doherty","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"1855-02-06 Daily Democratic State Journal-Sacramento p2 San Leandro Thompson","oldNotes":null,"origDBindex":"Case_ADD_453"},{"caseNum":436,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"38.2423151","lonDecimal":-122.6266287,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1855,"yearMonth":"1855/05","yearMonthDay":"1855/05/11","dateNotes":null,"state":"California","place":"Petaluma","county":"Sonoma","locationNotes":null,"crowdType":"arrested by the citizens","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"horse and cattle stealing","punishment":"Hung by neck to get confession","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":2,"suspectNames":null,"suspectRaces":"White","confession":"No","suspectNotes":"\"two boys\"","victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"Case ADD 1855-05-15 p3 Sac Daily Democratic State Journal Sonoma CHECK.pdf\nCase ADD 1855-05-18-1855 p2 Sac Daily Democratic State Journal CHECK.pdf","oldNotes":"Fairly certain second source listed pertains to this instance","origDBindex":"Case_ADD_454"},{"caseNum":437,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"38.49305556","lonDecimal":-121.1722222,"latNDegrees":38,"latNMinutes":29,"latNSeconds":35,"lonWDegrees":121,"lonWMinutes":10,"lonWSeconds":20,"year":1855,"yearMonth":"1855/05","yearMonthDay":"1855/05/14","dateNotes":"Sunday evening prisoner taken to Live Oak City","state":"California","place":"Daylor's Ranch","county":"Sutter","locationNotes":"Live Oak City. Also mentioned: Michigan Bar. Hanging took place on property owned by Grimshaw; about 300 yeards form Grimshaw's house. Using coords for Consumne,Durham, p 470","crowdType":"Mob; jury of 6-12 persons","crowdSize":"300","open":"Open","oldAuthorities":"Sent word to authorities but mob acted first","crime":"Theft\nShot a man","punishment":"Hung","lethality":"Lethal","otherNamesMentioned":"Mr. W. T. Grimshaw (JP San Joaquin Co)\nMentioned:\nMr.. Lord\nMr. Rhodes\nWm West\nHenry Blair\nR. Wells\nBailey\nD. N. Hunt\nJ. Hereford\n\nCoroners Jury? (seems to be report from Inquest)\nCharles Petter\nGeorge Colton\nE.L. Noles\nP. Pearl\nJ.H. Mitchell\nG. W. Cord\nN.L. Drew\nA. Garfield\nWilliam Bragdon\nThomas Morriss\nWilliam Clyne\nC.T. MxNamar\nWitnesses:\nW. K. Lindsley\nHiram Barber\nOliver Saunders\nGeorge Wright\nCaldwell\nGray","numberSuspects":1,"suspectNames":"William Lomax","suspectRaces":"white","confession":"insisted on innocence","suspectNotes":null,"victimNumber":"1","victimNames":"Frederick Bohle","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"Case ADD 1855-05-17 Daily Democratic State Journal-Sacramento p2 Lomax Daylors Ranch CHECK.pdf","oldNotes":null,"origDBindex":"Case_ADD_456"},{"caseNum":438,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"37.127185","lonDecimal":-119.877401,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1855,"yearMonth":"1855/05","yearMonthDay":"1855/05/26","dateNotes":"Monday morning","state":"California","place":"Leach's store on Fresno River","county":"Madera","locationNotes":"On Fresno River. Nentions Hut's store, about 12 miles from Leach's. Now under Hensley Lake. Estimated coords from (rough) center of Hensley Lake","crowdType":"Jury of 12 miners","crowdSize":"At least 12","open":"Open","oldAuthorities":"Wood handed over to Indian sub-agent","crime":"Murder","punishment":"Indian hung\nWood (after being forced to dig grave and tie friend's feet together) remanded to Indian agent","lethality":"Both","otherNamesMentioned":"Mr. Lord, companion of suspect\nMr. Handy\nLt. Ayres from the Fort (on Indian Reserve?)","numberSuspects":2,"suspectNames":"unnamed Indian\nWood","suspectRaces":"Indian (unnamed)\nWood (Irishman)\n","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":null,"victimGenders":"Male","victimRaces":"Mexican","victimNotes":null,"oldSources":"Case ADD 1855-06-04 SDU p3c2 Indian and Irishman.pdf","oldNotes":null,"origDBindex":"Case_ADD_457"},{"caseNum":439,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"38.3484545","lonDecimal":-120.7723673,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1855,"yearMonth":"1855/08","yearMonthDay":"1855/08/15","dateNotes":null,"state":"California","place":"Jackson","county":"Amador","locationNotes":null,"crowdType":"crowd, \"impatient\"","crowdSize":"immense","open":"open","oldAuthorities":"seized from  officers who brought suspect from columbia","crime":"murder","punishment":"hanged","lethality":"Lethal","otherNamesMentioned":"Mr. Houtaling, of Volcano, brought suspect to MH\nGeo. Durham, with Houtaling and suspect\nOfficer Clark of Calaveras, to whom suspect allegedly confessed\nMacina, California, Bonito, Manuel, identified by suspect as rancheria murderers","numberSuspects":1,"suspectNames":"Rafael Escobar","suspectRaces":"Mexican","confession":"Insisted he had no role in rancheria murders, but knew who did and would identify. Others say he had confessed to Officer Taylor to his role in Rancheria murders","suspectNotes":null,"victimNumber":"1","victimNames":"Mrs. Dimon","victimGenders":"Female","victimRaces":"White","victimNotes":"Garcia had named Escobar as murderer of Mrs. Dimon","oldSources":null,"oldNotes":null,"origDBindex":"Case_ADD_565"},{"caseNum":440,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"Additional info?","latDecimal":"39.1085091","lonDecimal":-120.8593823,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1855,"yearMonth":"1855/10","yearMonthDay":"1855/10/11","dateNotes":"Last week","state":"California","place":"North fork of American River","county":"Placer","locationNotes":"Report from Iowa Hill News","crowdType":"the company (Holland, Warner, and Sturgeon)","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Robbing a sluice","punishment":"25 lashes","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":5,"suspectNames":null,"suspectRaces":"Chinese","confession":null,"suspectNotes":null,"victimNumber":"3","victimNames":"Holland\nWarner\nSturgeon","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"Case ADD 1855-10-18 MDH p2c3 Chinamen Fords Bar Holland Warner and Sturgeon CHECK.pdf","oldNotes":"Lynching date approximate","origDBindex":"Case_ADD_459"},{"caseNum":441,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"39.703792","lonDecimal":-120.924951,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1855,"yearMonth":"1855/10","yearMonthDay":"1855/10/20","dateNotes":null,"state":"California","place":"St. Louis","county":"Sierra","locationNotes":"murders took place at Slate Creek","crowdType":"Committee of 12","crowdSize":null,"open":null,"oldAuthorities":null,"crime":"Murder","punishment":"Banished","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":6,"suspectNames":null,"suspectRaces":"Spaniard","confession":null,"suspectNotes":null,"victimNumber":"A number","victimNames":null,"victimGenders":"Male","victimRaces":"Chinamen","victimNotes":null,"oldSources":"Case ADD 1855-10-23 p2 Sac Daily Democratic State Journal Chinese Spaniards Slate Creek St Louis Sierra Co CHECK.pdf","oldNotes":null,"origDBindex":"Case_ADD_461"},{"caseNum":442,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"39.41944444","lonDecimal":-120.9430556,"latNDegrees":39,"latNMinutes":25,"latNSeconds":10,"lonWDegrees":120,"lonWMinutes":56,"lonWSeconds":35,"year":1855,"yearMonth":"1855/11","yearMonthDay":"1855/11/27","dateNotes":null,"state":"California","place":"Kanaka Flat","county":"Sierra","locationNotes":"Near Forest City; using coordintates for Kanaka Creek, Durham, p 506","crowdType":"Mob","crowdSize":null,"open":null,"oldAuthorities":"York sent to jail","crime":"Rovvery, $1200","punishment":"Hung to extort confession; released","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Woods","suspectRaces":"white","confession":null,"suspectNotes":"Partner York later fought with lynchers and killed a dman, was then arrested and jailed","victimNumber":"2","victimNames":"Store of Ghates and Davidson","victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"Case ADD 1855-12-01-1855 p1 SF Evening Bulletin Woods Kanaka Flat Forest City York CHECK.pdf","oldNotes":null,"origDBindex":"Case_ADD_463"},{"caseNum":443,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"check further","latDecimal":"39.081285","lonDecimal":-120.9893886,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1856,"yearMonth":"1856/02","yearMonthDay":"1856/02/19","dateNotes":null,"state":"California","place":"Bear River","county":"Placer","locationNotes":"Selected coordinates GNIS for Bear River Canal near colfax; arbitrry choice","crowdType":null,"crowdSize":null,"open":null,"oldAuthorities":null,"crime":"Theft","punishment":"Whipped","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":8,"suspectNames":null,"suspectRaces":"Indian","confession":null,"suspectNotes":"Report says \"several\"","victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"Case ADD 1856-02-20 AC p6 Bear River Indians Whipped CHECK.pdf","oldNotes":null,"origDBindex":"Case_ADD_470"},{"caseNum":444,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"40.6000725","lonDecimal":-122.4924721,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1856,"yearMonth":"1856/02","yearMonthDay":"1856/02/22","dateNotes":null,"state":"California","place":"Shasta","county":"Shasta","locationNotes":"near the Tower House","crowdType":null,"crowdSize":null,"open":null,"oldAuthorities":null,"crime":"Stealing","punishment":"released","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":null,"suspectRaces":"White","confession":"Begged for meercy before whipping (sentenced to 12 lashes)","suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"Case ADD 1856-02-26 p2  Sac Daily Democratic State Journal Shasta Tower House CHECK.pdf","oldNotes":"Not a lynching. INCLUDE: CROWD DECIDED AGAINST PUNISHMENT","origDBindex":"Case_ADD_472"},{"caseNum":445,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"39.04583333","lonDecimal":-123.4166667,"latNDegrees":39,"latNMinutes":2,"latNSeconds":45,"lonWDegrees":123,"lonWMinutes":25,"lonWSeconds":null,"year":1856,"yearMonth":"1856/03","yearMonthDay":"1856/03/22","dateNotes":null,"state":"California","place":"Anderson Valley","county":"Sonoma","locationNotes":"currently Mendocino? Durham: Latitude 39 degrees 2 minutes, 45 seconds N; latitude 123 degrees, 25 minutes West","crowdType":"Mountain Rangers and Sonoma Regulators","crowdSize":"20 or 30 men","open":null,"oldAuthorities":null,"crime":"Adultery","punishment":"40 Lashes\nTarred (pitched)\nFeathered\nBanished","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":null,"suspectRaces":"White","confession":null,"suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"Case ADD 1856-04-05 San Joaquin Republican p1 Anderson Valley Adultery whipped tarred and feathered CHECK.pdf","oldNotes":null,"origDBindex":"Case_ADD_474"},{"caseNum":446,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"38.83472222","lonDecimal":-121.0138889,"latNDegrees":38,"latNMinutes":50,"latNSeconds":5,"lonWDegrees":121,"lonWMinutes":0,"lonWSeconds":50,"year":1856,"yearMonth":"1856/05","yearMonthDay":"1856/05/00","dateNotes":null,"state":"California","place":"Centerville","county":"El Dorado","locationNotes":"Between Sonora and Mariposa. Durham=Pilot Hill, lat. 38 ˚, 50 \", 5 ' N; lat. 121˚, 0\" 50' W.","crowdType":null,"crowdSize":null,"open":null,"oldAuthorities":null,"crime":"Murder","punishment":"10 shot\n1 hung","lethality":"Lethal","otherNamesMentioned":"Pancho (murderer of Conway)","numberSuspects":11,"suspectNames":"Pancho (hanged)","suspectRaces":"Mexicans and Chilenos","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":"Conway","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"Case ADD 1856-05-05-1856 p3 SF Evening Bulletin Centreville Conway Mexicans and Chilenos executed CHECK.pdf","oldNotes":"Related to Jenna088; Pancho murder of Conway stated to be in retaliation of Conway murdering friedn of Pancho named \"Steve\"\nLynching date not specified","origDBindex":"Case_ADD_476"},{"caseNum":447,"cwIndex":"Could this be C-W 60?","gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"39.06666667","lonDecimal":-121.8666667,"latNDegrees":39,"latNMinutes":4,"latNSeconds":null,"lonWDegrees":121,"lonWMinutes":52,"lonWSeconds":null,"year":1856,"yearMonth":"1856/05","yearMonthDay":"1856/05/22","dateNotes":"yesterday morning","state":"California","place":"Grand Island","county":"Colusa","locationNotes":"15 miles nort of Knight's ferry on the Sacramento; Durham 492","crowdType":"Mob; people incensed by the act","crowdSize":null,"open":"Secret","oldAuthorities":"Sheriff attempted to rescue","crime":"Murder","punishment":"Hung","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Judge George Wilson","suspectRaces":"white","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":"unknown","victimGenders":"Male","victimRaces":"white","victimNotes":null,"oldSources":"Case ADD 1856-05-23 p2 FIRST  Sac Daily Democratic State Journal Judge Wilson Colusi Grand Island Knights Ferry CHECK.pdf","oldNotes":null,"origDBindex":"Case_ADD_480"},{"caseNum":448,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"36.9151584","lonDecimal":-121.7512298,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1856,"yearMonth":"1856/06","yearMonthDay":"1856/06/16","dateNotes":"murder 6/14; lynhed following Monday","state":"California","place":"Watsonville","county":"Santa Cruz","locationNotes":"Monterey side of the Pajero river near Watsonville","crowdType":null,"crowdSize":null,"open":null,"oldAuthorities":null,"crime":"Murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":null,"suspectRaces":"Indian","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":null,"victimGenders":"Male","victimRaces":"Sonoranian","victimNotes":null,"oldSources":"Case ADD 1856-06-24 SFEB p1 Watsonville Sonorian Indian CHECK.pdf\nCase ADD 1856-06-27 p2 Sac Daily Democratic State Journal Watsonville Sonorian Indian CHECK.pdf\nCase ADD 1856-07-05 AC p3 Watsonville Sonorian Indian CHECK.pdf","oldNotes":null,"origDBindex":"Case_ADD_482"},{"caseNum":449,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"Sketchy","latDecimal":"41.57777778","lonDecimal":-122.9194444,"latNDegrees":41,"latNMinutes":34,"latNSeconds":40,"lonWDegrees":122,"lonWMinutes":55,"lonWSeconds":10,"year":1856,"yearMonth":"1856/07","yearMonthDay":"1856/07/03","dateNotes":null,"state":"California","place":"Oro Fino","county":"Siskiyou","locationNotes":"From Yreka Union","crowdType":"party of miners","crowdSize":null,"open":null,"oldAuthorities":"remanded to authorities after hanging","crime":"Theft $60 from a brother miner","punishment":"Hung by neck to get confession","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Pete","suspectRaces":"White","confession":"Yes","suspectNotes":null,"victimNumber":"1","victimNames":null,"victimGenders":"Male","victimRaces":"White","victimNotes":"Fellow miner","oldSources":"1856-07-03 SFEB p3 Oro Fino Pete Yreka","oldNotes":null,"origDBindex":"Case_ADD_484"},{"caseNum":450,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"38.675","lonDecimal":-122.5083333,"latNDegrees":38,"latNMinutes":40,"latNSeconds":30,"lonWDegrees":121,"lonWMinutes":90,"lonWSeconds":30,"year":1856,"yearMonth":"1856/10","yearMonthDay":"1856/10/13","dateNotes":null,"state":"California","place":"Twelve Mile House","county":"Sacramento?","locationNotes":"on the Auburn Road","crowdType":"Party of men","crowdSize":null,"open":"Open","oldAuthorities":"Handed over to authorities after lynched","crime":"Theft","punishment":"Hung by neck to get confession\nWhipped","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"George Mitchel","suspectRaces":"white","confession":"Insisted on innocence; perps later arrested and convicted","suspectNotes":null,"victimNumber":"2","victimNames":"Heaton\nCampbell","victimGenders":"Male","victimRaces":"White","victimNotes":"Campbell acquitted; Heaton convicted and fined $1000","oldSources":"Case ADD 1857-02-26-1857 p2  Sac Daily Democratic State Journal George Mitchell Twelve Mile House CHECK.pdf","oldNotes":"Lynching date approximate","origDBindex":"Case_ADD_487"},{"caseNum":451,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"36.6012792","lonDecimal":-121.8829442,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1856,"yearMonth":"1856/11","yearMonthDay":"1856/11/12","dateNotes":"or 11/01","state":"California","place":"Blanco Crossing","county":"Monterey","locationNotes":"Durham 872; lat 36˚ 40' 40\" N; long 121 ˚ 44' 15' W","crowdType":"Company of men","crowdSize":null,"open":"Secret","oldAuthorities":null,"crime":"Theft\nMurder","punishment":"1 shot\n1 hung","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":2,"suspectNames":"Juan and Jose Alvitre","suspectRaces":"Spaniards","confession":null,"suspectNotes":"Brothers","victimNumber":"3","victimNames":"Williamson\nWall\nSmith","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"Case ADD 1856-11-12 SFEB p3 Monterey Spaniards Murder of Wall and Williamson mention Anastacio Garcia Smith CHECK.pdf\nCase ADD 1856-11-15 p1 Sac Daily Democratic State Journal Monterey Spaniards Murder of Wall and Williamson mention Anastacio Garcia and Smith","oldNotes":null,"origDBindex":"Case_ADD_486"},{"caseNum":452,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"ok","latDecimal":"38.30694444","lonDecimal":-120.6930556,"latNDegrees":38,"latNMinutes":18,"latNSeconds":25,"lonWDegrees":120,"lonWMinutes":41,"lonWSeconds":35,"year":1857,"yearMonth":"1857/11","yearMonthDay":"1857/11/09","dateNotes":"caught Saturday last","state":"California","place":"French Hill","county":"Calaveras","locationNotes":"Durham, p775","crowdType":"Miners on French Hill","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Robbery of sluice boxes","punishment":"Stripped\n50 lashes\nQueues cut off","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":2,"suspectNames":null,"suspectRaces":"Chinese","confession":null,"suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"1857-11-09 p2 Sac Daily Democratic State Journal Campo Seco Chinese French Hill","oldNotes":null,"origDBindex":"Case_ADD_488"},{"caseNum":454,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"40.6000725","lonDecimal":-122.4924721,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1858,"yearMonth":"1858/11","yearMonthDay":"1858/11/14","dateNotes":"before the 20th","state":"California","place":"Shasta","county":"Shasta","locationNotes":null,"crowdType":"seized by white people in the neighborhood; jury of 15 or 20 whites","crowdSize":null,"open":"open","oldAuthorities":"At hanging, Nep asked attending Indians to oppose hanging","crime":"Murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":"Mr. Gilbert of Shasta","numberSuspects":2,"suspectNames":"Nep and his father","suspectRaces":"Indian","confession":null,"suspectNotes":"\"young boyu\" and \"decrepit\" father","victimNumber":null,"victimNames":"William McGowan","victimGenders":null,"victimRaces":"White","victimNotes":null,"oldSources":"1858-11-23 San Francisco Bulletin p1c2","oldNotes":"McGowan killed in \"a quarrel with some Indians.\" Some random members of the tribe were seized as hostages in demand for murderers. \"Subsequently, two of the guilty Indians [Nep and his father] were captured, and tried by a jury of some fifteen or twenty whites.\" From the Shasta Republican: \"Of course the accusation was conviction and they were sentenced to be hung to the first tree that could be reached.\" Apparently 150 Diggers present at hanging. Nep \"asked them if they intended to let the whites hang him and his father. They seconded the verdict of the whites.\" First rope was too long, and Nep did not die. \"A draw was made upon the rope and the limb broke--the Indian falling to the ground about half dead. He was again drawn up and strangled.\" A third Indian involved was jailed in Shasta, says that he shot McGowan to save his own life. \"No steps seem to have been taken toward the arrest of the parties engaged in the hanging of the Indians.\"","origDBindex":"Case_ADD_492"},{"caseNum":455,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"list victims; found report of lynching; correct location","latDecimal":"40.026903","lonDecimal":-122.122613,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1859,"yearMonth":"1859/05","yearMonthDay":"1859/05/31","dateNotes":"a few days ago","state":"California","place":"Tehama","county":"Tehama","locationNotes":"first county seat of Tehama Co; likely location, as suspect taken from courthouse","crowdType":"Mob","crowdSize":null,"open":null,"oldAuthorities":null,"crime":"Setting fire to the house of Col. Stevenson","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":"Sheriff Dunn","numberSuspects":1,"suspectNames":"Tom","suspectRaces":"Indian","confession":null,"suspectNotes":"oy between age of 10 and 15","victimNumber":null,"victimNames":"Col. Stevenson","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"1859-05-31 San Francisco Bulletin p3c4","oldNotes":"Report from Shasta Courier. Indian boy set fire to the house of Col. Stevenson. He was taken from the custody of Sheriff Dunn, \"by a number of citizens, and hanged.\" Courier author states \"This is really horrible, and reflects no credit to the parties concerned.\" Other newspapers condemn the lynching, stating boy was in his early teens. Author asks \"What good will the hanging... accomplish? Will it deter other Indian boys from committing a similar act? If so, the act is defensible. If not, what then?... why not let him be hung in a legal manner? There was no danger of his escaping.\"","origDBindex":"Case_ADD_493"},{"caseNum":457,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"37.81944444","lonDecimal":-120.6708333,"latNDegrees":37,"latNMinutes":49,"latNSeconds":10,"lonWDegrees":120,"lonWMinutes":40,"lonWSeconds":15,"year":1859,"yearMonth":"1859/08","yearMonthDay":"1859/08/26","dateNotes":null,"state":"California","place":"Six Mile Bar on the Stanislaus River","county":"Stanislaus","locationNotes":"near Knight's Ferry; Durham 790 Knight's Ferry, lat. 37˚ 49\" 10' N; long. 120˚ 40\" 15' W","crowdType":"Mob; \"a crowd of men\"","crowdSize":null,"open":null,"oldAuthorities":null,"crime":"Murder, robbery","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":"n/a","numberSuspects":2,"suspectNames":"\"two Indians\"","suspectRaces":"Indian","confession":null,"suspectNotes":null,"victimNumber":null,"victimNames":"Israel Jones","victimGenders":null,"victimRaces":"White","victimNotes":"about 40 years old, from Warsaw Poland","oldSources":"1859-08-31 San Francisco Bulletin p3c5","oldNotes":"Two Indians robbed and murdered Israel Jones (\"about 40 years of age, from Warsaw, Poland\") on 25 August at Two Mile Bar. Miners caught the suspects \"and had their arms tied, with the intention of hanging them immediately.\" The Indians got away, with \"a number\" in pursuit. That mob stopped pursuing after a member of the mob was shot in friendly fire. Indians caught in Knight's Ferry with cooperation of \"a son of the Chief of the tribe\" the Indians were from. Taken to Six-Mile Bar, tried and convicted. Were awaiting \"conveyance to Mokelumne Hill, with a view to deliver them over to the Sheriff of Calaveras county.\" But \"a crowd of men\" rushed the house where they were held \"and forcibly took them to a tree a short distance above the town, and hung them until they were dead, after which the bodies were removed by the Indians of their tribe.\" Article notes \"brutal manner\" of crowd in attendance of lynching. Bodies mutilated.","origDBindex":"Case_ADD_495"},{"caseNum":458,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"39.3885002","lonDecimal":-121.4052424,"latNDegrees":39,"latNMinutes":23,"latNSeconds":20,"lonWDegrees":121,"lonWMinutes":16,"lonWSeconds":40,"year":1859,"yearMonth":"1859/12","yearMonthDay":"1859/12/13","dateNotes":null,"state":"California","place":"Bangor","county":"Butte","locationNotes":"At time in Yuba County; currently in butte County; Butte coords, Durham 188, lat. 39˚ 23\" 20 N, long. 121˚ 24\" 15 W.\nOregon House and Martin House in same vicinity (Durham 534); lat 39˚ 21\" 25' N; long. 121˚ 16\" 40' W ","crowdType":"Vigilance Committee","crowdSize":null,"open":null,"oldAuthorities":null,"crime":"Robbery","punishment":"Hanging; \"took the man off into the woods, and… he has not been seen since.\"","lethality":"Lethal","otherNamesMentioned":"n/a","numberSuspects":1,"suspectNames":null,"suspectRaces":"Likely white","confession":null,"suspectNotes":"\"a highwayman\"; \"a man who had a piece of calico over his face\"","victimNumber":null,"victimNames":"Does not say; ","victimGenders":null,"victimRaces":"Does not say","victimNotes":null,"oldSources":"1859-12-19 San Francisco Bulletin p2c5\n1859-12-21 San Francisco Bulletin p1c1","oldNotes":"12-19: On 13th December, teamster stopped on road \"above Martin House… by a highwayman, and robbed of $262.50.\" Teamster told people \"in the vicinity, and the Vigilance Committee, which has been organized in that neighborhood for some time past, pursued the robber and captured him. The teamster swore to his identity.\" Man hung \"at or near Bangor[?]\" by Committee.\n\n12-21 gives more/conflicting details. Robbery said to occur Thursday night, 15th Dec., traveling near the Oregon House. Accosted by \"a man who had a piece of calico over his face, and robbed of two dollars and a half, all he had. Afterwards, the Vig. Com... arrested a man who had a similar, if not the same piece of calico in his possession; also two dollars and a half and a revolver. He was brought into the presence of the teamster, who failed to identify him, although he recognized the calico, and stated that the man was of about the same size with the one who robbed him.\" Suspect taken into woods by Vig. Com. and hasn't been seen since. \"We should judge that this was rather slender evidence upon which to dispose of a man in the way in which it is conjectured that this one has been.\"","origDBindex":"Case_ADD_497"},{"caseNum":459,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"39.5602894","lonDecimal":-120.8280559,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1860,"yearMonth":"1860/04","yearMonthDay":"1860/04/02","dateNotes":null,"state":"California","place":"Pine Grove","county":"Sierra","locationNotes":null,"crowdType":"Mob","crowdSize":"140","open":"secret","oldAuthorities":"Seized from sheriff","crime":"Murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":"Mrs. O'Donnell","numberSuspects":1,"suspectNames":"John O'Donnell","suspectRaces":"White","confession":null,"suspectNotes":null,"victimNumber":null,"victimNames":"Alexander Shields","victimGenders":null,"victimRaces":"White[?]","victimNotes":null,"oldSources":"1860-04-06 San Francisco Bulletin p3c3","oldNotes":"Article makes reference to previous Bulletin article of 4th April, of which this article is a sequel. Shields seduced O'Donnell's wife. O'Donnell assassinated Shields. When Mrs. O'Donnell found out about the murder, \"she screamed frantically and rushed along through mud and rain toward Pine Grove, and has not been seen since. She is supposed to be insane.\" \"The stage driver between Marysville and La Porte [who told Mrs. O'Donnell], brought the news to Marysville on the evening of 4th April, that there was a rumor in La Porte, when he left the morning previous, that O'Donnell, who killed Shields, had been seized by the mob and hanged.\"","origDBindex":"Case_ADD_499"},{"caseNum":460,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"39.01944444","lonDecimal":-120.8166667,"latNDegrees":39,"latNMinutes":1,"latNSeconds":10,"lonWDegrees":120,"lonWMinutes":49,"lonWSeconds":null,"year":1862,"yearMonth":"1862/03","yearMonthDay":"1862/03/27","dateNotes":"\"last week\"","state":"California","place":"Forest Hill","county":"Placer","locationNotes":null,"crowdType":"\"a posse of citizens\" delivered to Justice of the Peace","crowdSize":null,"open":null,"oldAuthorities":null,"crime":"Fighting and stabbing","punishment":"*Extended torture followed by trial and acquittal (not killed); \"duck him in a water ditch, and then applied ox-goads to his back, as they drove him into town\"","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":null,"suspectRaces":"Chilean","confession":null,"suspectNotes":"\"drunken Chilean\"","victimNumber":"1","victimNames":null,"victimGenders":null,"victimRaces":"Chilean","victimNotes":null,"oldSources":"1862-03-27 San Francisco Bulletin p1c5","oldNotes":"At \"a Spanish dance house,… two drunken Chileans got into a fight, when one stabbed the other, when both parties took to the street, the one who had done the stabbing evidently trying to escape, followed by his bleeding victim. A posse of citizens went in pursuit of the fleeing greaser, and upon overhauling him,\" tortured him \"as they drove him into town. Upon taking him before a Justice of the Peace he was discharged.\"","origDBindex":"Case_ADD_502"},{"caseNum":461,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"C-W and G-D include Arellanes, but no independent report","latDecimal":"34.0726866","lonDecimal":-118.2130443,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1864,"yearMonth":"1864/02","yearMonthDay":"1864/02/17","dateNotes":null,"state":"California","place":"Los Angeles","county":"Los Angeles","locationNotes":null,"crowdType":"Vigilance Committee","crowdSize":null,"open":null,"oldAuthorities":"Executed on ship in San Pedro?","crime":"Murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Jesus Arrelanes","suspectRaces":"Mexican","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":"Dep Sheriff Cook of Sta Barbara","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"Case ADD 1864-02-12 p3c2 SDU LA Jesus Arellanes CHECK.pdf\nCase ADD 1864-02-13 p2c2 MDA LA Arellanes CHECK.pdf\nCase ADD 1864-2-17 p1c3 AC Arellanes CHECK.pdf\nCase ADD 1864-02-24 p2c6 SDU Arellanes CHECK.pdf","oldNotes":"Arrellanes in hands of lA VC; lynching not ere reported. Track down","origDBindex":"Case_ADD_506"},{"caseNum":462,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"37.2166666667","lonDecimal":-119.9833333333,"latNDegrees":37,"latNMinutes":13,"latNSeconds":null,"lonWDegrees":119,"lonWMinutes":59,"lonWSeconds":null,"year":1867,"yearMonth":"1867/05","yearMonthDay":"1864/05/16","dateNotes":null,"state":"California","place":"Buchanan","county":"Madera","locationNotes":"lat 37˚ 13' N, Long. 119˚ 59' W Durham 769, under Eastman Lake","crowdType":"the citizens","crowdSize":null,"open":"open","oldAuthorities":null,"crime":"Attempted rape \"of a white girl\"","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"unnamed","suspectRaces":"Chinese","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":null,"victimGenders":"Female","victimRaces":"White","victimNotes":"\"girl\"","oldSources":"Case ADD 1867-05-22 AC p1c6 Chinese hanged in Buchana rape.pdf","oldNotes":"Lynching date approximate","origDBindex":"Case_ADD_507"},{"caseNum":463,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"35.73166667","lonDecimal":-118.7027778,"latNDegrees":35,"latNMinutes":43,"latNSeconds":54,"lonWDegrees":118,"lonWMinutes":42,"lonWSeconds":10,"year":1868,"yearMonth":"1868/08","yearMonthDay":"1868/08/00","dateNotes":"about the 12th","state":"California","place":"Linn's Valley","county":"Kern","locationNotes":"using coords for Glennville, Durham, p 1040","crowdType":"\"the citizens, after a long and patient examination","crowdSize":null,"open":null,"oldAuthorities":"one suspect remanded","crime":"murder","punishment":"Hanged\nremanded","lethality":"Both","otherNamesMentioned":null,"numberSuspects":2,"suspectNames":"Jack McDowell (hanged)\nJames Welch (remanded)","suspectRaces":"White","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":"John Galtry, aka Gaultry, aka Baltre","victimGenders":"Male","victimRaces":"White","victimNotes":"Englishmen","oldSources":null,"oldNotes":null,"origDBindex":"Case_ADD_573"},{"caseNum":464,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"ok; location has to be estimated","latDecimal":"37.6616708","lonDecimal":-120.4612046,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1869,"yearMonth":"1869/08","yearMonthDay":"1869/08/15","dateNotes":null,"state":"California","place":"La Grange","county":"Stanislaus","locationNotes":"a \"few miles this side of Lagrange\" (coming from Snelling's) Estimate location as 2-3 miles south of La Grange; should this be Merced County? (as in reports)","crowdType":"Small vigilante group; \"four masked men\"","crowdSize":null,"open":"Secret","oldAuthorities":"Seized from deputy en route to La Grange","crime":"Theft of cattle and horses","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":"Sheriff Bourland","numberSuspects":1,"suspectNames":"unnamed","suspectRaces":"Mexican","confession":null,"suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"1869-08-31 San Francisco Bulletin p1c4","oldNotes":"Sheriff Boarland[?] of Tuolumne county left ten days ago looking for cattle/horse thieves. He found them between Hornitos[?] and La Grange driving a band of cattle. \"The Mexicans [thieves] resisted the officers and fired upon them.\"  After gun battle, one thief captured and taken to Snelling's, Merced Co. Soon after, a deputy is taking the suspect to La Grange \"when a few miles this side of Lagrange four masked men surrounded him,\" and demanded the prisoner. The deptuy \"tried to parley with them, but to no avail; they shamelessly[?] took the prisoner out of the buggy[?] and strung him up to the nearest tree, where he was founding hanging as last accounts.\"","origDBindex":"Case_ADD_511"},{"caseNum":465,"cwIndex":"C-W 101","gdIndex":null,"crossRefNotesCwGd":"LOCATION?","latDecimal":null,"lonDecimal":null,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1870,"yearMonth":"1870/04","yearMonthDay":"1870/04/13","dateNotes":null,"state":"California","place":"Klamath Reservation","county":"Siskiyou[?]","locationNotes":" (proximity)","crowdType":"Mob; \"The white people took the matter in hand and hung Spikey.\"","crowdSize":null,"open":null,"oldAuthorities":null,"crime":"Murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":"Captain Jack, \"a Chief of the Modocs\"","numberSuspects":1,"suspectNames":"Spikey","suspectRaces":"Indian","confession":null,"suspectNotes":null,"victimNumber":null,"victimNames":"Joe Hood","victimGenders":null,"victimRaces":"Indian","victimNotes":null,"oldSources":"1870-04-13 San Francisco Bulletin p2c2","oldNotes":"Spikey kills another Indian named Joe Hood near the Klamath Reservation. \"The white people took the matter in hand and hung Spikey.\" That's all the article says about the case. Author notes Captain Jack, \"a Chief of the Modes, concluded to take a day's recreation and go see the execution.\" On his way, his horse bucked him off, and Captain Jack broke his arm. Author concludes, \"Had it been his neck, we might have followed the example of our contemporary and recorded the conversion and death of a good Indian.\"","origDBindex":"Case_ADD_512"},{"caseNum":466,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"ok","latDecimal":"35.3755107","lonDecimal":-119.0219612,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1870,"yearMonth":"1870/09","yearMonthDay":"1870/09/06","dateNotes":null,"state":"California","place":"Bakersfield","county":"Kern","locationNotes":"2  miles from Bakersfield on road to LA","crowdType":"Native Californians & white citizens\nA mob","crowdSize":"A great number","open":null,"oldAuthorities":"Suspect seized from Sheriff after examination by justice Jones","crime":"Theft\nMurder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":"Justice Jones,\nPrefecto Baldonad (whom Sepulveda was accused of murdering)","numberSuspects":1,"suspectNames":"Juan de dios Sepúlveda","suspectRaces":"Mexican","confession":null,"suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"Case ADD 1870-09-06 HHB PT I-569 Juan de Dios Sepulveda CHECK.pdf\nCase ADD 1870-09-06 OLD NOTES Juan de Dios Sepulveda CHECK.pdf\nCase ADD 1870-09-17 Marin Journal p4c1 Juan de dias Sepulveda Bakersfield CHECK.pdf","oldNotes":null,"origDBindex":"Case_ADD_513"},{"caseNum":468,"cwIndex":"C-W 105","gdIndex":null,"crossRefNotesCwGd":"SeeLA Star 10-26-1871","latDecimal":"34.062","lonDecimal":-118.238,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1871,"yearMonth":"1871/10","yearMonthDay":"1871/10/24","dateNotes":"Double check date; see Armond thesis and Faragher, plus HSSC 1/4ly for articles","state":"California","place":"Los Angeles","county":"Los Angeles","locationNotes":"Nigger Alley; using coordinates from https://tools.wmflabs.org/geohack/geohack.php?pagename=Chinese_massacre_of_1871&params=34.062_N_118.238_W_type:event.\nWong Tuck hanged corner of Temple and New High Streets\n10 hanged at John Goller’s wagon shop\n5 hanged at Tomlinson's Corral (where Lachenais hanged year previous)\n4 shot in Negro Alley\n","crowdType":"Mob","crowdSize":null,"open":null,"oldAuthorities":null,"crime":"Murder; attempted murder","punishment":"3 shot\n15 hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":18,"suspectNames":"Wong Tuck\nDr. Gene Tong\nWho Sim\nChang Tong\nLeong Quais\nJohnny Burrow\nAh Tong\nWong Chin\nFong Won\nAh Lo\nDay Kee\nHo Hing\nAh Wad\nAh Cut\nKo Ke\nAh Won\nWang Chee\nSeward","suspectRaces":"Chinese","confession":null,"suspectNotes":null,"victimNumber":null,"victimNames":"Robert Thompson (killed)\nyoung white boy (wounded)","victimGenders":null,"victimRaces":"White","victimNotes":null,"oldSources":"1871-10-25 San Francisco Bulletin p2c2\n1871-10-27 San Francisco Bulletin p3c6\n1871-11-01 San Francisco Bulletin p1c2","oldNotes":"Begins with \"A quarrel and an attempt at murder, between the Celestials [Chinese] themselves, led to the interference of the civil authority, when, in an attempted arrest by an officer, the Chinese fatally shot an unoffending citizen called to his assistance, the officer himself barely escaping with his life, and a boy being wounded in the leg.\" Citizens heard the rumor, \"banding themselves together to take summary vengeance for the death of the white man.\" Chinese quarter \"besieged, and shots exchanged on both sides, and it would appear from our dispatches that two Chinamen and a Chinawoman were shot. In addition, fifteen Chinamen were captured and summarily executed.\" Others were taken to jail. Author of report condemns vengeance, saying it \"was far in excess of the original offense,\" that the law likely would've taken care of it. \"In no part of the State have the courts erred on the side of clemency to the Chinese, and this being the case, the wholesale, indiscriminate lynching resorted to at Los Angeles is especially to be regretted, and is sure to be regarded abroad as an evidence of a rude state of society, and thus to bring reproach upon the State.\"\n\n10-27 gives more details of \"Brutal and Cowardly Atrocities\" committed by mob and initial crime committed by Chinese. \"Wholesale pillaging\" occurred at the scene of the riot \"on Negro alley,\" which is apparently the Chinese quarter. Random and accused members of the Chinese community robbed of valuables. \"Eighteen Chinamen were buried yesterday.\" Describes \"ghastly and horrible sight\" of their bodies, mutilated, \"riddled with bullets,\" and stripped of clothing. Notes \"The ropes by which they were hanged were still attached to their necks, and a number of them were shot previous to being hanged.\" Author suggests there was a threat a riot would occur at the burial as well, but it didn't. Inquest is ongoing. Author notes that \"Three of the four Chinamen who are said to have done the shooting at citizens and officers are still at large, only one of those hanged is known to have been a party to the shooting.\"\n\n10-27 goes into great detail about the fight between factions of Chinese that led to the \"attempt at murder\" and mass-lynching referred to in other articles. Also provides detail about shooting and hanging of Chinese associated with fight. Reporter states, \"Most of the whites engaged in the hanging were men of Hibernian extraction,\" and also notes that young men and teenagers made up a good portion of the lynch mob. Details ransacking of \"Negro Alley\" where Chinese live. \"It is believed that the majority of those lynched were innocent of the crime for which they suffered, and that most of the guilty ones had escaped during or after the time of the riot. But retribution is now likely to fall on the heads of the guilty; or, at least, the shadows of its coming are being cast around them. Yo Hing, the shooter of officer Bilderrain[?], is in jail, and two Americans are also abiding in the same place\" for their participation in the pillaging. Reporter details legal proceedings after lynchings. \"A special Grand Jury has been ordered by the County Judge, and those now under arrest will be indicted to appear before it.\"\n\n","origDBindex":"Case_ADD_517"},{"caseNum":470,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"36.50555556","lonDecimal":-118.0611111,"latNDegrees":36,"latNMinutes":30,"latNSeconds":20,"lonWDegrees":118,"lonWMinutes":3,"lonWSeconds":40,"year":1878,"yearMonth":"1878/02","yearMonthDay":"1878/02/11","dateNotes":"two others discovered on 12th","state":"California","place":"Lone Pine","county":"Inyo","locationNotes":"Behind saloon in sothern part of town owned by Frank Dabeeny","crowdType":"infuriated mob","crowdSize":null,"open":"open and secret","oldAuthorities":"sheriff killed","crime":"murder","punishment":"shot (2)\nhanged (2)","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":4,"suspectNames":"Frank Dabeeny (shot)\nGumasindo Palacio (shot)\nCarlos Ferman (hanged)\nEustagio Santayo (hanged)","suspectRaces":"Portuguese (Dabeeny and Palacio\nLatino (Ferman and Santayo)","confession":null,"suspectNotes":null,"victimNumber":"2","victimNames":"Dick\nSheriff Thomas Passomore","victimGenders":"Male","victimRaces":"Indian (Dick)\nWhite (Passmore)","victimNotes":null,"oldSources":null,"oldNotes":null,"origDBindex":"Case_ADD_575"},{"caseNum":471,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"39.307389","lonDecimal":-123.3069525,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1878,"yearMonth":"1878/05","yearMonthDay":"1878/05/05","dateNotes":null,"state":"California","place":"Walker Valley","county":"Mendocino","locationNotes":"Home of Mr. Angle, owned entire Walker Valley at some point","crowdType":"The People (The Redwood Indians and People of Walker Valley)","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"attempted rape and attempted murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":"Mr. Angle, stopped the assault","numberSuspects":1,"suspectNames":"Modoc Charlie, aka Indian Charley","suspectRaces":"Indian","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":"Mrs. Reynolds","victimGenders":"Femaile","victimRaces":"White","victimNotes":null,"oldSources":"Webb (6), 22-23\nSF Chronicle, 5-8-1878\nMendocino Beacon 5-11-1878\nDemocratic Weekly Dispatch, 5-11-1878","oldNotes":null,"origDBindex":"Case_ADD_523"},{"caseNum":472,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"33.9793951","lonDecimal":-117.3745415,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1878,"yearMonth":"1878/07","yearMonthDay":"1878/07/09","dateNotes":"Report dated July 10 (Tuesday) states hanging took place on Monday (7/9)","state":"California","place":"Riverside","county":"Riverside","locationNotes":"Murder took place at San Jacinto. Some reports seem to indicate that the lynching took place at San Jacinto","crowdType":"armed mob","crowdSize":"30","open":null,"oldAuthorities":"armed mob took foricble possesssion of suspect during preliminary trial","crime":"Murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":"J.B. Kennedy, JP Riverside","numberSuspects":1,"suspectNames":"Refugio Boca; also named Baco and Refugio Montallo in subsequent reports","suspectRaces":"Mexican","confession":null,"suspectNotes":"Later reports claim wrong man (Montallo) lynched, a resident of Agua Mansa \"quiet and innofensive\"","victimNumber":"2","victimNames":"Wm Palmerston\nMrs. Palmerston","victimGenders":"Male\nFemale","victimRaces":"White","victimNotes":null,"oldSources":"Webb (7), 23-24.\nSF Chronicle, 7-11-78\nLA Herald, 7-11-78 p3c4\nSDU 7-13-78 p1c7\nLA Herald 7-15-78 p3c2\nSDU 7-23-78 p1c8\nPacific Rural Press 7-27-78 p53c4","oldNotes":null,"origDBindex":"Case_ADD_524"},{"caseNum":473,"cwIndex":"C-W 117","gdIndex":null,"crossRefNotesCwGd":"No location","latDecimal":null,"lonDecimal":null,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1878,"yearMonth":"1878/08","yearMonthDay":"1878/08/00","dateNotes":null,"state":"California","place":null,"county":"Modoc","locationNotes":null,"crowdType":null,"crowdSize":null,"open":null,"oldAuthorities":null,"crime":"murder","punishment":"hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"John McCoy","suspectRaces":"White","confession":null,"suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":null,"oldNotes":null,"origDBindex":"Case_ADD_576"},{"caseNum":474,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":"not completely proven","latDecimal":"36.8490549","lonDecimal":-121.4516517,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1879,"yearMonth":"1879/09","yearMonthDay":"1879/09/09","dateNotes":null,"state":"California","place":"between San Juan and Hollister","county":"San Benito","locationNotes":"Coordinates chosen arbitrarily betweenb gilroy and Holister","crowdType":"Organized mob; \"a dozen well armed men\"","crowdSize":null,"open":null,"oldAuthorities":"Taken from Semferino and given over to Deputy Sheriff Goss, who took suspect to San Juan and locked him up; Fearing a mob, Goss started out with suspect to County jail in Hollister; suspect escaped; pursued by a dozen armed men; found hanged in a canyon not far from San Juan","crime":"Attempted Rape","punishment":"Hanging","lethality":"Lethal","otherNamesMentioned":"Frank Ross (Sheriff of San Benito Co.); Deputy Sheriff Goss; Mr. Rue (Miss Crane's escort); Ernest Zanetta (found Miss Crane and ran off Fellom)","numberSuspects":1,"suspectNames":"Jose Semferino Fellom; elsewhere spelled Sulfarano Fallon or Fallen of San Jose, or Fellon","suspectRaces":"Californian; \"a half-breed native Californian\"; elsewhere \"half breed Spaniard\"","confession":null,"suspectNotes":"rejected by Miss Crane; about 30 (or 26-27) years old; left quite wealthy on death of his father. Until recently lived in Gilroy. Once a student at Santa Clara College","victimNumber":"1","victimNames":"Miss Lilly Crane","victimGenders":"Female","victimRaces":"White","victimNotes":"about 18 years old","oldSources":"1879-09-13 San Francisco Bulletin p4c5","oldNotes":"Miss Lilly Crane was returning from a Pinafore performance at Gilroy one night when Fellom, \"a rejected suitor of the young lady, attended the Pinafore performance on the same evening, and as soon as it closed mounted his horse and rode rapidly ahead on the road she had to take to go home and laid in wait for her.\" He \"compelled\" her escort, Mr. Rue, to leave the buggy, got in, drove down the road to \"an osage orange hedge,\" where he attempted to rape (\"attempted to commit an outrage on...\") Crane. Ernest Zanetta heard Crane's screams, \"drove hastily up to her assistance. Fellom left his intended victim and fled.\" Zanetta went to sheriff. \"Ross quickly collected a posse and started in pursuit of Fellom, overtaking and capturing him within a short distance of the scene of the outrage.\" Party came across Deputy Sheriff Goss on the road to San Juan and transferred custody of Fellom to him. Fellom locked up in San Juan. \"The story... spread rapidly, and the people were so much incensed that it was deemed advisable to remove the prisoner to the County Jail at Hollister for safe keeping.\" While they were headed to Hollister, Fellom attempted to escape (\"sprang from the buggy, and mountaing a horse that happened to be near by, succeeded in escaping.\"). \"A dozen well armed men started immediately in pursuit, determined to take him, dead or alive.\" \"The latest account... is that Fellom has been lynched.... found hanging by the neck to a tree in a canyon not far from San Juan.\" Gives short bio of Fellom, who was \"a half-breed native Californian and was well known here.\" Also, he \"had escaped by the assistance of four Spaniards.\" Crane was a daughter of a lawyer in San Benito Co., and \"the only motive that could have impelled Fellom to the commission of the outrage was revenge for her refusal to accept his proposal of marriage.\"","origDBindex":"Case_ADD_527"},{"caseNum":475,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"36.20416667","lonDecimal":-120.0986111,"latNDegrees":36,"latNMinutes":12,"latNSeconds":15,"lonWDegrees":120,"lonWMinutes":5,"lonWSeconds":55,"year":1880,"yearMonth":"1880/06","yearMonthDay":"1880/06/00","dateNotes":"before 19th","state":"California","place":"Huron","county":"Fresno","locationNotes":"Horses stolen from Bitterwater, San Benito County; Durham, p 1049","crowdType":"Party of 4 men, Lowell, Hanson, and two sons of C.C. Tully","crowdSize":null,"open":"Secret","oldAuthorities":null,"crime":"Horse stealing","punishment":"Shot","lethality":"Lethal","otherNamesMentioned":"C.C. Tully, whose sons helped track and kill thieves","numberSuspects":3,"suspectNames":null,"suspectRaces":"White","confession":null,"suspectNotes":null,"victimNumber":"2","victimNames":"Louis Lowell\nGeorge Hanson","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":null,"oldNotes":null,"origDBindex":"Case_ADD_574"},{"caseNum":477,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"38.210827","lonDecimal":-119.013225,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1881,"yearMonth":"1881/01","yearMonthDay":"1881/01/18","dateNotes":null,"state":"California","place":"Bodie","county":"Mono","locationNotes":"hanged at scene of crime, corner of Main and Lowe Streets. Using coordinates at site of County Barn","crowdType":"Vigilance Committee, \"mysterious\" \"Bodie 601\"; masked and unmasked men","crowdSize":"500","open":"Open","oldAuthorities":"taken from the jail at 1 o\"clock in the morning; jailor allowed mob acces to suspect's cell","crime":"Murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":"Deputy Sheriff Farnsworth\nJailor Kingen","numberSuspects":1,"suspectNames":"Joseph de Roche or Daroche\n","suspectRaces":"Frenchman (De Roche)","confession":null,"suspectNotes":null,"victimNumber":null,"victimNames":"Thomas Treloar or Treloas or Treelvar","victimGenders":"Male","victimRaces":"White","victimNotes":"DaRoche killed Treloar because latter had prohibited his wife form dancing with Daroche","oldSources":"Webb (10), 29-30 Need Copies\nBodie Daily Free Press, 1-18-1881\nSDU 1-18-1881\nSF Chronicle 1-18-1881\nDaily Bee, 1-18-1881\n1881-01-15 San Francisco Bulletin p1c4\n1881-01-18 San Francisco Bulletin p1c4","oldNotes":"De Roche \"assassinated\" Thomas Treloar, a miner. \"Treloar's wife was attending a ball, and he had ordered her not to dance with De Roche. She did so, however, to his great annoyance. At the hour mentioned the two men met, and De Roche shot Treloar through the head, the ball entering just below the left ear. A crowd gathered and the murderer was arrested.\" \"He was taken to jail but upon a pretext that the vigilantes intended to hang him before morning, Deputy Sheriff Joseph Farnsworth took the prisoner to his own boarding house, handcuffed. During the night De Roche mysteriously disappeared while Farnsworth was asleep. There is great indignation over the murder of Treloar and De Roche's escape, and there is talk of lynching Farnsworth.\"\n\n1-18 Follows up: Daroche[sic] is captured \"at a wood ranch six miles from Bodie.\" \"Several speeches were made by leading citizens, some in favor and others against lynching. It was finally agreed to allow him a preliminary examination before Justice Newman... which left no doubt of the prisoner's guilt.\" \"A Vigilance Committee, known as 'The Bodie 601[?],' was organized after dark...\" Daroche taken from jail by V.C. \"and conveyed to the scene of Friday morning's murder, and hanged exactly over the spot where it occurred. [illeg.] 500 men witnessed the execution. No one is dissatisfied with the result...\" Farnsworth fled to carson but was arrested and is being escorted back. \"A demand has been made by the Free Press for a complete reorganization of the police force, and unless the demand is complied with there is liable to be further trouble. A Carson dispatch says: Farnsworth... was liberated on the news that the murderer was lynched.\"","origDBindex":"Case_ADD_532"},{"caseNum":478,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"34.6391501","lonDecimal":-120.4579409,"latNDegrees":34,"latNMinutes":38,"latNSeconds":20,"lonWDegrees":120,"lonWMinutes":27,"lonWSeconds":25,"year":1881,"yearMonth":"1881/04","yearMonthDay":"1881/04/05","dateNotes":null,"state":"California","place":"Lompoc","county":"Santa Barbara","locationNotes":null,"crowdType":"Citizens","crowdSize":"100","open":"Open","oldAuthorities":"Hanged after inquest ","crime":"Rape and murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":"A. Lansdell, JP, held inquest on Mrs. Sergeant","numberSuspects":1,"suspectNames":"Francisco Jimeno","suspectRaces":"Probably Mexican, although alsso identified as Indian; in one report Indian or Mexican","confession":"Jimeno stated he had seen an unknown Mexican rape and murder Mrs. Sergeant, burid it as it was near his cabin and feared being accused","suspectNotes":"Indian herder; Age about 16","victimNumber":"1","victimNames":"Mrs. J.R. Sergeant","victimGenders":"Female","victimRaces":"White","victimNotes":"Age about 20","oldSources":"Webb (11), 30-31  Need Copies\nSF chronicle 4-6-81\nSDU 4-6-81\nDaily evening post 4-7-81","oldNotes":null,"origDBindex":"Case_ADD_533"},{"caseNum":479,"cwIndex":"C-W 118","gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"40.5798918","lonDecimal":-124.2619085,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1884,"yearMonth":"1884/12","yearMonthDay":"1884/12/29","dateNotes":null,"state":"California","place":"Ferndale","county":"Humboldt","locationNotes":"at home of Cyrus Broderick, about 2 miles from Ferndale","crowdType":"Mob","crowdSize":null,"open":null,"oldAuthorities":"Richardson under bail awating retrial","crime":"Rape of his daughter","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":"Cyrus Broderick, from whose home richardson seized by mob","numberSuspects":1,"suspectNames":"William Richardson","suspectRaces":"White","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":null,"victimGenders":"Female","victimRaces":"richardson's daughter","victimNotes":null,"oldSources":"Case ADD 1884-01-26 Daily Record Union pc7 Richardson Ferndale report from Eureka CHECK.pdf","oldNotes":null,"origDBindex":"Case_ADD_535"},{"caseNum":480,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"40.7941276","lonDecimal":-124.1568562,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1885,"yearMonth":"1885/08","yearMonthDay":"1885/08/11","dateNotes":null,"state":"California","place":"Eureka","county":"Humboldt","locationNotes":null,"crowdType":"Parties unknown","crowdSize":"about 100","open":"secret","oldAuthorities":"Taken from officer before lodged in jail","crime":"Murder","punishment":"Hanged, then shot","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Henry D. Benner","suspectRaces":"White","confession":"suspect denied guilt","suspectNotes":"Benner had formerly lived with victim as her husband","victimNumber":"1","victimNames":"Amanda M. Towne","victimGenders":"Female","victimRaces":"White","victimNotes":null,"oldSources":"Webb (17), 37  Need Copies\nAC 8-13-85\nHumboldt Standard 8-15-85\nWeekly Bee 8-14-85\nSF Chronicle 8-13-85","oldNotes":null,"origDBindex":"Case_ADD_536"},{"caseNum":481,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"40.4211461","lonDecimal":-120.6572635,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1886,"yearMonth":"1886/01","yearMonthDay":"1886/01/23","dateNotes":null,"state":"California","place":"Susanville","county":"Lassen","locationNotes":"Hanged in woodhouse in rear of courthouse yard","crowdType":"Parties unknown","crowdSize":null,"open":"secret","oldAuthorities":"Suspects taken from jail at 11:00pm","crime":"Murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":2,"suspectNames":"Holden Dick\nVicente Olivas","suspectRaces":"Indian (Pitt River Tribe--Dick)\nMexican (Olivas)","confession":null,"suspectNotes":null,"victimNumber":"2","victimNames":"Samuel B. Shaw (murdered by Dick)\nGriffith Logan (killed by Olivas)","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"Webb (18), 37-39  Need Copies\nDaily Bee 1-27-86\nLassen Advocate 1-28-1886\nMountain Tribune 1-30-86","oldNotes":null,"origDBindex":"Case_ADD_537"},{"caseNum":482,"cwIndex":"C-W 119","gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"38.4818531","lonDecimal":-120.844659,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1886,"yearMonth":"1886/05","yearMonthDay":"1886/05/02","dateNotes":null,"state":"California","place":"Plymouth","county":"Amador","locationNotes":"Check all sources; Webb says hanging took place in Drytown; Most detailed report says half a mile before Plymouth on road from Drytown (3 miles from Dry town to Plymouth); For Plymouth, Durham 540, lat38˚ 28' 45\", ,long. 120˚50' 45\"","crowdType":"Parties unknown; Mob;  \"a number of men\"; \"generally thought that the Austrian friends of Seper did the lynching\"","crowdSize":"40-100","open":"Secret","oldAuthorities":"Vuga seized from Constable","crime":"Murder; attempted murder (injured victim likely to die)","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":"Constable Jennings; Justice Church of Drytown; George C. Jennings (store owner); Constable Jehu[?]; District Attorney McGee; Mr. Butler (farmer who owned field where lynched Vuga was found)","numberSuspects":1,"suspectNames":"George Vuga","suspectRaces":"Austrian","confession":null,"suspectNotes":"about 60 years old","victimNumber":"2","victimNames":"Lucas Seper (killed)\nAntone Barovich (injured)","victimGenders":"Male","victimRaces":"Austrian (both)","victimNotes":"Seper about 60 years old","oldSources":"Case ADD 1886-05-05 pc1 SDU Vugo Lucas Seper Antone Barovich Drytown Amador Co CHECK.pdf\nCase ADD 1886-05-05 SDU p4c2 Seper killed Vugo Amador Drytown Barovich CHECK.pdf\nCase ADD 1886-05-05 SFEB p1c8 Vugo Sepeer Jackson Amador\nCase ADD 1886-05-06 AC Seper Vugo Jackson Amador\nCase ADD 1886-05-07 p2c4 Sta Cruz Sentinel George Vugas Barovich Seper Drytown CHECK.pdf\nCase ADD 1886-05-07 San Jose Daily News p3c2\nCase ADD 1886-05-26 CHECK PAPER p3c2 Vugo Jackson Amador Co CHECK.pdf\n1886-05-05 San Francisco Bulletin p1c8\n1886-05-06 San Francisco Bulletin p1c9","oldNotes":"George Vuga and Antone Barovich are Austrian immigrant prospectors living in the Black Hills, two miles from Drytown. Barovich owns a cabin and Vuga was staying at it. Barovich invites Seper to join them, which Vuga takes to mean \"his being ousted from the premises.\" \"There was no quarrel... but Vuga brooded over the situation and... he took down his gun, loaded one barrel with buckshot and the other with rifle balls. He stepped outside the cabin and saw Seper sitting on a rock and said, \"You've come to drive me out,\" took deliberate aim and fired the charge of buckshot,\" killing Seper. Vuga then went to find Barovich, shot him with the other barrel, striking him in the leg and fracturing the bone. \"The murderer is about sixty years old and is cross and desperate under slight provocation.\" Later, Vuga is examined in Drytown. At midnight after exam, \"a number of men took him from Constable Jennings... and carried him off. Vuga was afterward found hanging to a tree.\"","origDBindex":"Case_ADD_539"},{"caseNum":483,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"37.39027778","lonDecimal":-119.9861111,"latNDegrees":37,"latNMinutes":23,"latNSeconds":25,"lonWDegrees":119,"lonWMinutes":59,"lonWSeconds":10,"year":1888,"yearMonth":"1888/01","yearMonthDay":"1888/01/23","dateNotes":null,"state":"California","place":"Moore Hill","county":"Mariposa","locationNotes":"Ranch of George Yocum (or Yoakum), Moore Hill; Durham, p 805, lat. 37˚ 23' 25\" N, long. 119˚ 59' 10\" W; also placed at Pea Ridge","crowdType":null,"crowdSize":null,"open":".","oldAuthorities":"Coroner's report \"persons unknown.\" Later, 3 men, Jim Westfall, Jake McGirk, and Smithers arrested and charged with murder. At trial the three defendants were discharged (acquitted). Two years later, McGirk was shot by a Dr. Wells, purpotedly because of McGirk's lynching of Ledon.","crime":"Cattle Stealing","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":"John McGurk, Howard Wells\nJim Westfall (arrested for lynching July 1888; discharged)\nJack McGuire, or McGurk (arrested for lynching July 1888; discharged; shot 1890 by man who had raised Ledon)\nJohn Smithers (arrested for lynching July 1888; discharged)","numberSuspects":1,"suspectNames":"Julian Ladon, aka  Ledon, Leden, Medon","suspectRaces":"Mexican; also described as Native Californian and Indian","confession":null,"suspectNotes":"\"helpless boy.\" Age 22","victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"1890-08-14 San Francisco Bulletin p1c9","oldNotes":"Brief mention of a lynching. The article is about an incident related to the lynching: \"John McGurk, a resident of Mariposa county, was shot yesterday, four miles north of Madera, by Howard Wells, a veterinary surgeon. The wound is serious. The shooting was the result of a feud originating in the lynching of a Mexican boy named Julian Ladon, two years ago, for cattle stealing. Ladon had been reared by Wells.\"","origDBindex":"Case_ADD_548"},{"caseNum":484,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"38.295583","lonDecimal":-122.282219,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1888,"yearMonth":"1888/05","yearMonthDay":"1888/05/04","dateNotes":null,"state":"California","place":"St. Helena","county":"Napa","locationNotes":"Where 1st st. would cross Napa River","crowdType":"Masked mob","crowdSize":"25","open":"Secret; unknown parties","oldAuthorities":"overpowered sheriff/jailor, and took Wright from jail and hanged him","crime":"Murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"John Wright","suspectRaces":"white","confession":null,"suspectNotes":"age 18 years; sister Pet Graham operated brothel known as \"Pink Saloon\"","victimNumber":"1","victimNames":"Budd Vann","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":"Webb (23), 49-52  Need Copies\nSF Chronicle 5-6-88\nNapa Daily Register 5-7-88\nSt. Helena Star 5-11-88\nNapa Daily Register 5-29-88\nNapa Daily register 6-12-88\nNapa Daily Register 5-5 88\nOakland Enquirer 5-7-88\nLakeport Democrat 5-11-88\nSt. Helena Star 5-11-88","oldNotes":null,"origDBindex":"Case_ADD_543"},{"caseNum":485,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"38.2557527","lonDecimal":-119.2312656,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1891,"yearMonth":"1891/06","yearMonthDay":"1891/06/09","dateNotes":null,"state":"California","place":"Bridgeport","county":"Mono","locationNotes":null,"crowdType":"Indian mob form Walker Lake","crowdSize":null,"open":"Open","oldAuthorities":"coroner's jury indicted Ah Tai for Poker Tom's murder; crowd took Ah Tai from courtroom and hanged and mutilated him on street outside","crime":"Murder","punishment":"Hanged and mutliated","lethality":"Lethal","otherNamesMentioned":"Francis Hanson, Ah Tai's lawyer\nParker and Murphy, Ah Tai's lawyers","numberSuspects":1,"suspectNames":"Ah Tai","suspectRaces":"Chinese","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":"Poker Tom","victimGenders":"Male","victimRaces":"Indian","victimNotes":"From Walker Lake Reservation","oldSources":"Webb (26), 54-56  Need Copies","oldNotes":"Indians from Walker Lake Reservation seized Ah Tai and lynched him","origDBindex":"Case_ADD_549"},{"caseNum":486,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"40.5857964","lonDecimal":-122.3943551,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1892,"yearMonth":"1892/07","yearMonthDay":"1892/07/24","dateNotes":null,"state":"California","place":"Redding","county":"Shasta","locationNotes":"Hanged after 40 men stormed the jail, overpowered the sheriff, blew open the safe, took Ruggles brothers outside jail and hanged them; NW corner of Shasta St. and RR tracks for coords","crowdType":"Mob","crowdSize":"about 40 men","open":"Secret; persons unknown","oldAuthorities":"stormed the jail while tiral underway; overpowerd the sheriff","crime":"Murder ","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":2,"suspectNames":"John Ruggles\nCharles Ruggles","suspectRaces":"White","confession":null,"suspectNotes":"Brothers, age 34 (John) and 22 (Charles)","victimNumber":"1","victimNames":"Buck Montgomery","victimGenders":"Male","victimRaces":"white","victimNotes":null,"oldSources":"Webb (27), 56-58  Need Copies\nSF Examiner 7-25-92\nSDU 7-25-92\nSF Evening Bulleting 7-25-92\nSF Examiner 7-26-92","oldNotes":null,"origDBindex":"Case_ADD_550"},{"caseNum":487,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"33.748006","lonDecimal":-117.868649,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1892,"yearMonth":"1892/08","yearMonthDay":"1892/08/20","dateNotes":null,"state":"California","place":"Santa Ana","county":"Orange","locationNotes":"Hanged from a telegraph pole at the corner of 4th and Sycamore, Santa Ana","crowdType":"Mob of masked men","crowdSize":"about 30","open":"Secret","oldAuthorities":"Jailor subdued while suspect taken from cell","crime":"Murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Francisco Torres","suspectRaces":"Mexican","confession":null,"suspectNotes":"Had worked at ranch. Poll tax amount garnished from his wagesby McKelveyTaken from jail","victimNumber":"1","victimNames":"Captain William McKelvey","victimGenders":"Male","victimRaces":"white","victimNotes":"About 50 years old; Foreman, Madame Modjeska's Ranch in Santiago Canyon, about 20 miles from Santa Ana","oldSources":"Case ADD 1892-08-21 p 2C1 SF Call Torres murder of McKelvey Mme Modjeska Ranch LA Santa Ana CHECK.pdf\nCase ADD 1892-08-28 p1 LA Herald Torres LA Lachenais 18 Chinese murderer if Nrs v d Kecj  CHECK.pdf\nCase ADD 1892-09-06 p7C6 SF Call Torres innocent McKelvey  CHECK.pdf","oldNotes":null,"origDBindex":"Case_ADD_551"},{"caseNum":488,"cwIndex":"C-W 121","gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"41.1384854","lonDecimal":-122.3177877,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1892,"yearMonth":"1892/09","yearMonthDay":"1892/09/30","dateNotes":null,"state":"California","place":"Castella","county":"Siskiyou","locationNotes":"Hanged from a tree outside train depot in Castella. Smith, wife, and daughter took train from Dunsmuir to Castella, a few miles south of Dunsmuir. There he murdered wife and child; regulators from Dunsmuir seized Smith from Sheriff and hanged Smith on an oak tree","crowdType":null,"crowdSize":"about 20","open":"secret","oldAuthorities":"seized suspect from sheriff","crime":"Murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"J. W. Smith","suspectRaces":"white","confession":null,"suspectNotes":"murdered wife and daughter, then attempted suicide","victimNumber":"1","victimNames":"Mrs. Smith\nSmith's daughter","victimGenders":"Female","victimRaces":"white","victimNotes":null,"oldSources":"Webb (28), 58-59  Need Copies\nSF Examinaer 10-1-92\nSDU 10-1-92","oldNotes":null,"origDBindex":"Case_ADD_552"},{"caseNum":489,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"34.1007323","lonDecimal":-117.3032377,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1893,"yearMonth":"1893/04","yearMonthDay":"1893/04/07","dateNotes":"2:30 in morning","state":"California","place":"San Bernardino","county":"San Bernardino","locationNotes":"Under railroad bridge near first street. Located near intersectin of Rialto St. (1st?) and rr tracks","crowdType":"mob","crowdSize":"about 50","open":"Secret; coronoer inquest: parties unknown; some wore masks but many well known","oldAuthorities":"broke down door to jail and seized the suspect","crime":"Murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":"Isen Mendibles, onlooker, stopped Fuen by hitting him on head with a rock","numberSuspects":1,"suspectNames":"Jesus Fuen","suspectRaces":"Mexican?","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":"Francisca Flores\nWilliam Goldcoffer","victimGenders":"Femaile\nMale","victimRaces":"Mexican (flores)?\nWhite (Goldcoffer)","victimNotes":"Flores living with Fuen","oldSources":"Webb (29), 59-61  Need Copies\nSF Examiner 4-8-93\nSF examiner 4-9-93\nSan Bernardino Daily Courier 4-8-93\nRedlands Citrograph 4-8-03\nSan Bernardino Daily Courier 4-7-93","oldNotes":null,"origDBindex":"Case_ADD_554"},{"caseNum":490,"cwIndex":"C-W 122","gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"41.60833333","lonDecimal":-122.8416667,"latNDegrees":41,"latNMinutes":36,"latNSeconds":30,"lonWDegrees":122,"lonWMinutes":50,"lonWSeconds":30,"year":1894,"yearMonth":"1894/12","yearMonthDay":"1894/12/12","dateNotes":"2:00 in the morning","state":"California","place":"Fort Jones","county":"Siskiyou","locationNotes":"Murder took place at Happy Camp, on way to Yreka; suspect taken from Fort Jones Hotel, down Main Street 200 yeards and lynched him from a construction derrick","crowdType":"masked men","crowdSize":"about a dozen","open":"Coroner's jury: persons unknown","oldAuthorities":"2:00 am Taken from hotel en rotewith deputy sherif  to Yreka for trial","crime":"Murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"William Dean","suspectRaces":"Indian","confession":null,"suspectNotes":"aged 24 years","victimNumber":"1","victimNames":"William Beremore or Baremore","victimGenders":"Male","victimRaces":"White","victimNotes":"murder took place at Happy Camp","oldSources":"Webb (30), 61-62  Need Copies\nSDU 12-23-94\nSF Examiner 12-13-94\nSF Evening Bulleting 12-13-94","oldNotes":null,"origDBindex":"Case_ADD_555"},{"caseNum":491,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"37.12777778","lonDecimal":-119.6944444,"latNDegrees":37,"latNMinutes":7,"latNSeconds":40,"lonWDegrees":119,"lonWMinutes":41,"lonWSeconds":40,"year":1895,"yearMonth":"1895/07","yearMonthDay":"1895/07/27","dateNotes":null,"state":"California","place":"O'Neals","county":"Madera","locationNotes":"captured at north fork; posse headed up by victim's brother hanged suspect about three miles from O'Neals on way back from North Fork","crowdType":"crowd","crowdSize":"about 60","open":"secret; parties unknown","oldAuthorities":null,"crime":"murder","punishment":"hanged","lethality":"Lethal","otherNamesMentioned":"Tom Baker, brother of Baker, led posse that capture Adams","numberSuspects":1,"suspectNames":"Victor Adams","suspectRaces":"white","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":"I.L. Baker","victimGenders":"Male","victimRaces":"white","victimNotes":"father in law of suspect; jp of O'Neals","oldSources":"Webb (31), 62-63  Need Copies","oldNotes":null,"origDBindex":"Case_ADD_556"},{"caseNum":492,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"41.7292557","lonDecimal":-122.6311481,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1895,"yearMonth":"1895/08","yearMonthDay":"1895/08/26","dateNotes":null,"state":"California","place":"Yreka","county":"Siskiyou ","locationNotes":"hanged in courthouse square across the street from the jail","crowdType":"masked mob included prominent citizens; \"impomptu court\"","crowdSize":"small army of some 250 men","open":"secret; coroner \"hands of parties unknown\"","oldAuthorities":"broke into jail and seized prisoners\nSheriff forcibly stopped from intervening","crime":"murder","punishment":"hanged","lethality":"Lethal","otherNamesMentioned":"Henry Bratluch jailor","numberSuspects":4,"suspectNames":"L.awrence H. Johnson\nWilliam Null\nLuis Moreno\nGarland Stemler or Semier","suspectRaces":"white (Johnson, Null, Stemler)\nMexican (Moreno)","confession":null,"suspectNotes":"\nJohnson age 59\nNull age 45\nMoreno age 40\nStemler age 19\nMexico protested the lynching of Moreno, a citizen of Mexico","victimNumber":"4","victimNames":"Henry Hayter (killed by Null)\nJohnson's wife\nGeorge Sears ()Killed by Moreno and Stemler)\nCaspar Meirhaus (killed by Moreno and Stemler)","victimGenders":"Male (3)\nFemale (1)","victimRaces":"White","victimNotes":null,"oldSources":"Webb (32), 63-66  Need Copies\nSDU 8-28-85\nEvening Bee 8-26-95\nSF Examiner 8-27-95\nHR document 237 55th Cong. 2nd sess. On protest of Mexico","oldNotes":null,"origDBindex":"Case_ADD_557"},{"caseNum":493,"cwIndex":"C-W 123","gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"35.7141183","lonDecimal":-118.4367517,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1895,"yearMonth":"1895/09","yearMonthDay":"1895/09/23","dateNotes":null,"state":"California","place":"Kernville","county":"Kern","locationNotes":"outside jail","crowdType":"crowd of men led by victim's father","crowdSize":null,"open":"open","oldAuthorities":"after preliminary trial accused of murder; in custody of constable when confronted by crowd; suspect ran down street","crime":"murder","punishment":"shot and knifed","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"William Archer","suspectRaces":"Indian","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":"Phillip (or Philippi) Seybert","victimGenders":"Male","victimRaces":"white","victimNotes":null,"oldSources":"Webb (33), 66-67  Need Copies\nBakersfield Democrat 10-2-95\nKern County Gazette 10-5-1895\nSF Examiner 9-27-95","oldNotes":null,"origDBindex":"Case_ADD_558"},{"caseNum":494,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"39.79166667","lonDecimal":-123.2291667,"latNDegrees":39,"latNMinutes":47,"latNSeconds":30,"lonWDegrees":123,"lonWMinutes":13,"lonWSeconds":45,"year":1895,"yearMonth":"1895/09","yearMonthDay":"1895/09/29","dateNotes":null,"state":"California","place":"Round Valley","county":"Trinity","locationNotes":"just across the line in trinity County; Durham for round Valley, p 134; at inquest location described as trail from Red Mountain to Round Valley, toward RedMountain Place, in Southern Trinity County","crowdType":"a \"party of ranchers\" heavily masked","crowdSize":"about 25","open":"Secret","oldAuthorities":"seized suspect from sheriff who had captured suspect","crime":"murder","punishment":"shot, then hanged; claimed that shots wounded and hanging killed him","lethality":"Lethal","otherNamesMentioned":"`","numberSuspects":1,"suspectNames":"Alfred, \"Jack,\" Littlefied","suspectRaces":"white","confession":null,"suspectNotes":"from Round Valley","victimNumber":"1","victimNames":"J.M. Vinton","victimGenders":"male","victimRaces":"white","victimNotes":"resident of Covelo; died at home of Tom Hayden, on Red Mountain; known as a \"bad man\"; naval deserter; previously known as Clark Melville in Humboldt County","oldSources":null,"oldNotes":"\"White-anti-White War\"; start of a war between two factions; those who worked for george White (Vinton) and thos who opposed (littlefield being one, in the employ of Ves Palmer)","origDBindex":"Case ADD 572"},{"caseNum":495,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"35.4510673","lonDecimal":-118.5842544,"latNDegrees":35,"latNMinutes":27,"latNSeconds":30,"lonWDegrees":118,"lonWMinutes":35,"lonWSeconds":5,"year":1901,"yearMonth":"1901/07","yearMonthDay":"1901/07/09","dateNotes":null,"state":"California","place":"Mt. Breckenridge","county":"Kern","locationNotes":"30-45 miles east of Bakersfield","crowdType":"lumbermen at mill","crowdSize":null,"open":"open, persons unknown","oldAuthorities":"none","crime":"attempted murder","punishment":"hanged","lethality":"Lethal","otherNamesMentioned":"W.J. Doherty, owner of Union Lumber col\nDr. J.L. Carson\nSheriff Borgwardt\nDep DA Dorsey\nCoroner Buckreus\nCt. Reporter Laird","numberSuspects":1,"suspectNames":"\nYung Fook, or Young Fook; also named Ah Sing","suspectRaces":"Chinese","confession":null,"suspectNotes":"described as temporarily insane because of opium","victimNumber":"2","victimNames":"Mrs. G.C. Kennedy\nCharlotte Kennedy (daughter)","victimGenders":"Female","victimRaces":"white","victimNotes":null,"oldSources":"Webb (35), 74  Need Copies","oldNotes":null,"origDBindex":"Case_ADD_559"},{"caseNum":496,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"36.43611111","lonDecimal":-117.1472222,"latNDegrees":36,"latNMinutes":26,"latNSeconds":10,"lonWDegrees":117,"lonWMinutes":8,"lonWSeconds":50,"year":1908,"yearMonth":"1908/04","yearMonthDay":"1908/04/22","dateNotes":null,"state":"California","place":"Skidoo","county":"Inyo","locationNotes":"55 miles south of Rhyolite, NV.","crowdType":null,"crowdSize":null,"open":"secret; unknown parties","oldAuthorities":"seized by a party of masked men from deputy sheriff prior to preliminary hearing","crime":"murder","punishment":"hanged","lethality":"Lethal","otherNamesMentioned":"Deputy Sheriff Sellers","numberSuspects":1,"suspectNames":"Joseph Simpson","suspectRaces":"White","confession":null,"suspectNotes":"Gambler, aged 34","victimNumber":"1","victimNames":"James Arnold","victimGenders":"Male","victimRaces":"white","victimNotes":"Had located th townsite; formerly jp, had prosecuteed simpson in past.town butcher","oldSources":"Webb (36), 74-75  Need Copies\nSF Daily Call-bulletin 4-24-08\nEvening Bee 4-23-08\nInyo Independent 5-1-08","oldNotes":null,"origDBindex":"Case_ADD_560"},{"caseNum":497,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"38.4464429","lonDecimal":-122.7060002,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1920,"yearMonth":"1920/12","yearMonthDay":"1920/12/10","dateNotes":null,"state":"California","place":"Santa Rosa","county":"Sonoma","locationNotes":"Hanged at rural cemetery east of Santa Rosa","crowdType":"cmasked men; owd (rumored to be members of SF police department and sonoma county sheriff's department)","crowdSize":"60-100","open":"secret; unknown parties","oldAuthorities":"broke into sheriff's office and seized 3 suspects","crime":"murder","punishment":"hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":3,"suspectNames":"George Boyd\nTerrence Fitts\nCharles Valento","suspectRaces":"White","confession":null,"suspectNotes":"Member of notorious \"Howard Street Gang\"","victimNumber":"3","victimNames":"Lester Dorman\nMiles Jackson\nPetray","victimGenders":"Male","victimRaces":"White","victimNotes":"SF detectives (Dorman and Jackson); Sonoma Co sheriff (Petray)","oldSources":"Webb (37), 75-78  Need Copies\nSanta Rosa Republican 12-10-20\nSF Chronicle 12-11 20\nSF Examiner 12-11-20\nNapa Register 12-17-20\n(SF? Santa Roas?) Daily News 12-10-20","oldNotes":null,"origDBindex":"Case_ADD_561"},{"caseNum":498,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"37.3107158","lonDecimal":-121.9206516,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1933,"yearMonth":"1933/11","yearMonthDay":"1933/11/26","dateNotes":null,"state":"California","place":"San Jose","county":"Santa Clara","locationNotes":"St. James Park","crowdType":"crowd; during hanging there was dancing in the streets; mothers held up their infant children;","crowdSize":"10,000","open":"open","oldAuthorities":"Captured and indicted by federal grand jury; mob overpowered the sheriff and deputies; while lynching underway Governor rolph refused to call out Nat'l guard to stop it","crime":"kidnapping and murder","punishment":"hanged","lethality":"Lethal","otherNamesMentioned":"Sheriff Emig, Santa Clara County","numberSuspects":2,"suspectNames":"John M. Holmes\nThomas H. thurmond","suspectRaces":"White","confession":null,"suspectNotes":"both 30 years old","victimNumber":"1","victimNames":"Brooke Hart","victimGenders":"Male","victimRaces":"White","victimNotes":"Son of wealthy SJ businessman","oldSources":"Webb (38), 79-82  Need Copies\nSF Chronicle 11-11 & 27 & 28 & 30-33  Need Copies\nSan Jose Mercury Herald 11-27 & 30-33  Need Copies\nSF Examiner 11-27 & 28-33  Need Copies\nDaily News 11-27 & 28-33  Need Copies\nNYT 11-28-33  Need Copies","oldNotes":null,"origDBindex":"Case_ADD_562"},{"caseNum":499,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"37.9595012","lonDecimal":-121.2927574,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1858,"yearMonth":"1858/05","yearMonthDay":"1858/05/00","dateNotes":"Lynching announced by SDU on 5-31 and by AC on 6-5","state":"California","place":"Stockton","county":"San Joaquin","locationNotes":"\"a few miles from town\" SDU 5-31-58","crowdType":"Hanged by lynch law","crowdSize":null,"open":"Secret","oldAuthorities":null,"crime":"Seduction","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":" Shel Deth, or Shildeth, or Shelldeath, or Shell Deth (husband of woman \"seduced\"","numberSuspects":1,"suspectNames":"Joe Williams","suspectRaces":"Black","confession":null,"suspectNotes":"about 24 years old","victimNumber":"1","victimNames":"Mrs. Shel Deth","victimGenders":"Female","victimRaces":"white","victimNotes":"She claimed Willimas drugged her but also confessed that they had sex three or four times. Revealed when she gave birth to a dark complected baby","oldSources":null,"oldNotes":null,"origDBindex":null},{"caseNum":500,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"35.2670731","lonDecimal":-120.6689034,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1858,"yearMonth":"1858/05","yearMonthDay":"1858/05/13","dateNotes":null,"state":"California","place":"San Luis Obispo","county":"San Luis Obispo","locationNotes":"Hanged from door of jail inside mission compound","crowdType":"\"the citizens\"","crowdSize":null,"open":"open","oldAuthorities":"Sheriff abetted the crowd and VC","crime":"Murder and banditry","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Santos Peralta\naka Santus Peraltus","suspectRaces":"SonorianBlack","confession":"acknowledged guilt, did not name others","suspectNotes":null,"victimNumber":null,"victimNames":"Baratie and Borel","victimGenders":"Male","victimRaces":"French","victimNotes":null,"oldSources":null,"oldNotes":"Linares Gang and SLO VC","origDBindex":"297"},{"caseNum":501,"cwIndex":"C-W 75","gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"35.280072","lonDecimal":-120.6647,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1859,"yearMonth":"1858/05","yearMonthDay":"1858/05/21","dateNotes":null,"state":"California","place":"San Luis Obispo","county":"San Luis Obispo","locationNotes":"Valenzuela hanged outside of Mission SLO \"in what is now the Mission Plaza,\" diagonally across the street from house of John and Ramona Wilson, Hall-Patton, 93","crowdType":"\"the citizens\"","crowdSize":"40 men during main activity; at other times as few as 15 and as many as 60-80","open":"open","oldAuthorities":"Sheriff abetted the crowd and VC","crime":"Murder and banditry","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":"David W. Alexander, employer of Valenzuela","numberSuspects":1,"suspectNames":"Joaquin Valenzuela\na.k.a. Joaquin Ocomorenia\na.k.a. Nacamereño\naka Jesus Chiquito","suspectRaces":"Mexican/Californian","confession":null,"suspectNotes":"Declared innocent in LA Clamor Publico, according to his employer Don David W. Alexander; brother of Joaquin Valenzuela","victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":"Case ADD 1858-06-03 AC p1c6 San Luis Obispo Baratier Joaquin Valenzuela Ocomorenia CHECK.pdf\nCase ADD 1858-06-14 AC p1c3 Joaquin Valenzuela.pdf\nCase ADD 1858-06-16 SDU p4c2 Joaquin Valenzuela.pdf","oldNotes":"Linares Gang and SLO VC","origDBindex":"Case 281\nCase ADD 490"},{"caseNum":502,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"35.280072","lonDecimal":-120.6647,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1859,"yearMonth":"1858/06","yearMonthDay":"1858/06/04","dateNotes":null,"state":"California","place":"San Luis Obispo","county":"San Luis Obispo","locationNotes":"In front of Mission opposite house of John Wilson","crowdType":"SLO VC","crowdSize":null,"open":"open","oldAuthorities":"Sheriff abetted the crowd and VC","crime":"Murder and banditry","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Luciano \"El Mesteno: Tapia","suspectRaces":"Mexican/Californian","confession":null,"suspectNotes":null,"victimNumber":"2","victimNames":"Baratie and Borel","victimGenders":"Male","victimRaces":"French","victimNotes":null,"oldSources":null,"oldNotes":"Linares Gang and SLO VC","origDBindex":null},{"caseNum":503,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"35.280072","lonDecimal":-120.6647,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1860,"yearMonth":"1858/06","yearMonthDay":"1858/06/08","dateNotes":null,"state":"California","place":"San Luis Obispo","county":"San Luis Obispo","locationNotes":"In front of Mission opposite house of John Wilson","crowdType":"SLO VC","crowdSize":null,"open":"open","oldAuthorities":"Sheriff abetted the crowd and VC","crime":"Murder and banditry","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Jose Antonio Garcia","suspectRaces":"Mexican/Californian","confession":null,"suspectNotes":null,"victimNumber":null,"victimNames":"Biesa and Craciano","victimGenders":"Male","victimRaces":"Basque","victimNotes":null,"oldSources":null,"oldNotes":"Linares Gang and SLO VC","origDBindex":null},{"caseNum":504,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"35.2724303","lonDecimal":-120.7577866,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1860,"yearMonth":"1858/06","yearMonthDay":"1858/06/12","dateNotes":null,"state":"California","place":"Rancho de Los Osos","county":"San Luis Obispo","locationNotes":"Monte Los Osos (Hall-Patton); John Wilson's Rancho de Los Osos (SDU 6-30-58); Spot selected in Canada de los Osos","crowdType":"SLO VC Posse shot Linares","crowdSize":null,"open":"open","oldAuthorities":"Sheriff abetted the crowd and VC","crime":"Murder and banditry","punishment":"Shot","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Pio Linares ","suspectRaces":"Mexican/Californian","confession":null,"suspectNotes":null,"victimNumber":"3","victimNames":"Baratie and Borel\nPerkins","victimGenders":"Male","victimRaces":"French (Baratie and Borel);\nWhite (Perkins)","victimNotes":null,"oldSources":"HHB PT, I: 488 (check 487 also)","oldNotes":"Linares Gang and SLO VC","origDBindex":null},{"caseNum":505,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"35.280072","lonDecimal":-120.6647,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1861,"yearMonth":"1858/06","yearMonthDay":"1858/06/14","dateNotes":null,"state":"California","place":"San Luis Obispo","county":"San Luis Obispo","locationNotes":"In front of Mission opposite house of John Wilson","crowdType":"SLO VC","crowdSize":null,"open":"open","oldAuthorities":"Sheriff abetted the crowd and VC","crime":"Murder and banditry","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":2,"suspectNames":"Miguel Blanco\nDesidero Grijalva","suspectRaces":"Mexican/Californian","confession":null,"suspectNotes":"Blanco about 20 years old; native Californian","victimNumber":"6","victimNames":"Baratie and Borel; Gilkey; Biesa and Graciano; Marlock","victimGenders":"Male","victimRaces":"French; Basque:White","victimNotes":null,"oldSources":null,"oldNotes":"Linares Gang and SLO VC","origDBindex":null},{"caseNum":506,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"35.280072","lonDecimal":-120.6647,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1861,"yearMonth":"1858/06","yearMonthDay":"1858/06/28","dateNotes":null,"state":"California","place":"San Luis Obispo","county":"San Luis Obispo","locationNotes":"\"At the usual place\" (SFEB 7-16, assume to mean in front of mission diagonally across from house of John Wilson (today, Mission Plaza0","crowdType":"SLO VC","crowdSize":null,"open":"open","oldAuthorities":"Sheriff abetted the crowd and VC","crime":"Murder and banditry","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Nieves \"Eduriquez\" or \"Eduviques\" Robles, aka Florian Servin","suspectRaces":"Mexican/Californian","confession":null,"suspectNotes":"about 23 years old","victimNumber":null,"victimNames":"Biesa and Graciano","victimGenders":"Male","victimRaces":"Basque","victimNotes":null,"oldSources":null,"oldNotes":"Linares Gang and SLO VC","origDBindex":null},{"caseNum":507,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"38.3484545","lonDecimal":-120.7723673,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1855,"yearMonth":"1855/08","yearMonthDay":"1855/08/08","dateNotes":null,"state":"California","place":"Jackson","county":"Amador","locationNotes":null,"crowdType":null,"crowdSize":null,"open":"open","oldAuthorities":"Taken from jail ","crime":"Murder; Rancheria Tragedy","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Manuel Garcia","suspectRaces":"Mexican","confession":null,"suspectNotes":null,"victimNumber":"10","victimNames":"Mr. (injured) and Mrs. (Killed) Dimon, or Diamond, or Dymond, or Dynan\nEugene Francis, or French, from Ohio\nHutchins, or Hutchings, Francis's clerk\nJames Wilson\nUriah Michener\nunnamed Indian\n4 Frenchmen","victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":null,"oldNotes":null,"origDBindex":null},{"caseNum":508,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"38.390748","lonDecimal":-120.8032717,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1855,"yearMonth":"1855/08","yearMonthDay":"1855/08/08","dateNotes":null,"state":"California","place":"Sutter","county":"Amador","locationNotes":"Also referrred to as Sutter Creek","crowdType":null,"crowdSize":null,"open":"open","oldAuthorities":"Taken from authorities","crime":"Murder; Rancheria Tragedy","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Antonio Garcia","suspectRaces":"Mexican","confession":null,"suspectNotes":null,"victimNumber":"10","victimNames":"Mr. (injured) and Mrs. (Killed) Dimon, or Diamond, or Dymond, or Dynan\nEugene Francis, or French, from Ohio\nHutchins, or Hutchings, Francis's clerk\nJames Wilson\nUriah Michener\nunnamed Indian\n4 Frenchmen","victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":null,"oldNotes":null,"origDBindex":null},{"caseNum":509,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"38.3484545","lonDecimal":-120.7723673,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1855,"yearMonth":"1855/08","yearMonthDay":"1855/08/09","dateNotes":null,"state":"California","place":"Jackson","county":"Amador","locationNotes":null,"crowdType":null,"crowdSize":null,"open":"open","oldAuthorities":"Taken from authorities","crime":"Murder; Rancheria Tragedy","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Manuel Castro","suspectRaces":"Mexican","confession":null,"suspectNotes":null,"victimNumber":"10","victimNames":"Mr. (injured) and Mrs. (Killed) Dimon, or Diamond, or Dymond, or Dynan\nEugene Francis, or French, from Ohio\nHutchins, or Hutchings, Francis's clerk\nJames Wilson\nUriah Michener\nunnamed Indian\n4 Frenchmen","victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":null,"oldNotes":null,"origDBindex":null},{"caseNum":510,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"38.4379659","lonDecimal":-120.8193805,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1855,"yearMonth":"1855/09","yearMonthDay":"1855/09/09","dateNotes":null,"state":"California","place":"Rancheria","county":"Amador","locationNotes":"Lower Rancheria GNIS","crowdType":null,"crowdSize":null,"open":"open","oldAuthorities":"Taken from authorities in Mokelumne Hill","crime":"Murder; Rancheria Tragedy","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":2,"suspectNames":"unnamed","suspectRaces":"Mexican","confession":null,"suspectNotes":null,"victimNumber":"10","victimNames":"Mr. (injured) and Mrs. (Killed) Dimon, or Diamond, or Dymond, or Dynan\nEugene Francis, or French, from Ohio\nHutchins, or Hutchings, Francis's clerk\nJames Wilson\nUriah Michener\nunnamed Indian\n4 Frenchmen","victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":null,"oldNotes":null,"origDBindex":null},{"caseNum":511,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"39.5326648","lonDecimal":-121.3855208,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1852,"yearMonth":"1852/04","yearMonthDay":"1852/04/01","dateNotes":null,"state":"California","place":"Stringtown","county":"Butte","locationNotes":"Using GNIS coords for Stringtown Bar (now under Lake Oroville)","crowdType":"jury of townspeople","crowdSize":null,"open":"open","oldAuthorities":null,"crime":"Murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":2,"suspectNames":"Indian Charley, aka Charley Bill\nOne incorrectly identified as Bull Head","suspectRaces":"Indian","confession":null,"suspectNotes":null,"victimNumber":"4","victimNames":"Frenchman and wife a year prior\nMagee and Dixon, 6 months prior","victimGenders":"Female (1)\nMale (3)","victimRaces":"Americans (2)\nFrench (2)","victimNotes":null,"oldSources":null,"oldNotes":null,"origDBindex":null},{"caseNum":512,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"38.8004569","lonDecimal":-120.9132725,"latNDegrees":38,"latNMinutes":47,"latNSeconds":5,"lonWDegrees":120,"lonWMinutes":54,"lonWSeconds":55,"year":1852,"yearMonth":"1852/03","yearMonthDay":"1852/04/01","dateNotes":null,"state":"California","place":"Granite Creek","county":"El Dorado","locationNotes":"near Coloma; using GNIS Granite Creek coords ","crowdType":"12 jurors","crowdSize":"100 miners looked on","open":"open","oldAuthorities":null,"crime":"robbery 150 oz. gold","punishment":"Hanged to reveal stolen property, then remanded","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Thomas George","suspectRaces":"Sydney Man","confession":"After numerous hangings, confessed and returned stolen gold","suspectNotes":null,"victimNumber":"1","victimNames":"Michael McKevitte","victimGenders":"Male","victimRaces":"white","victimNotes":null,"oldSources":null,"oldNotes":null,"origDBindex":null},{"caseNum":513,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"37.350219","lonDecimal":-122.1319079,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1852,"yearMonth":"1852/04","yearMonthDay":"1852/04/00","dateNotes":null,"state":"California","place":"San Antonio","county":"Santa Clara","locationNotes":"Near San jose; using GNIS San Antonio coords near Rancho San Antonio Open Space","crowdType":"the citizens","crowdSize":null,"open":"open","oldAuthorities":null,"crime":"murder","punishment":"hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"unnamed","suspectRaces":"Indian","confession":"confessed; asked to have hands loosened; attack crowd; immediately hanged","suspectNotes":null,"victimNumber":"2","victimNames":null,"victimGenders":"Male","victimRaces":"Mexican\nPeruvian","victimNotes":null,"oldSources":null,"oldNotes":null,"origDBindex":null},{"caseNum":514,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"41.7465038","lonDecimal":-124.204525,"latNDegrees":41,"latNMinutes":44,"latNSeconds":50,"lonWDegrees":124,"lonWMinutes":12,"lonWSeconds":5,"year":1854,"yearMonth":"1854/11","yearMonthDay":"1854/11/20","dateNotes":null,"state":"California","place":"Battery Point","county":"Del Norte","locationNotes":"near Crescent City","crowdType":"Ccitizens assembled en masse","crowdSize":null,"open":"open","oldAuthorities":null,"crime":"murder","punishment":"hanged","lethality":"Lethal","otherNamesMentioned":"E. Mason, chair\nS.J. Whipple, Secretary","numberSuspects":3,"suspectNames":"Black Mow\nJim (son of black Mow)\nNarpa (Chetcoe Indian)","suspectRaces":"Indian","confession":null,"suspectNotes":"Jim, son of Black Mow\nNarpa, Chetcoe Indian","victimNumber":"1","victimNames":"Mr. French","victimGenders":"Male","victimRaces":"Male","victimNotes":null,"oldSources":null,"oldNotes":null,"origDBindex":null},{"caseNum":515,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"35.280072","lonDecimal":-120.6647,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1861,"yearMonth":"1861/09","yearMonthDay":"1861/09/00","dateNotes":"Likely September as report dated 10/4","state":"California","place":"San Luis Obispo","county":"San Luis Obispo","locationNotes":"hanged in jail doorway; same location as Mexican previously hanged for rape","crowdType":"Reped woman's (Mexican) countrymen","crowdSize":null,"open":"secret","oldAuthorities":"crowd broke open the jail and took suspect","crime":"rape","punishment":"hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Dillon","suspectRaces":"White","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":"unnamed","victimGenders":"Female","victimRaces":"Mexican","victimNotes":null,"oldSources":null,"oldNotes":null,"origDBindex":null},{"caseNum":516,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"38.2321349","lonDecimal":-121.6893995,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1851,"yearMonth":"1851/07","yearMonthDay":"1851/07/00","dateNotes":null,"state":"California","place":"Steamer Senator ","county":"Sacramento","locationNotes":"en route to Sacramento; location coords estimated south and west of Sacramento on west side of river","crowdType":"Passengers and Steamer Captain","crowdSize":null,"open":"open","oldAuthorities":null,"crime":"Robbery. Shoes form a Chinaman and $5 from a passenger","punishment":"Whipped, 36 lashes and ejected from ship","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"unnamed","suspectRaces":"Sydney Duck","confession":null,"suspectNotes":null,"victimNumber":"2","victimNames":"unnamed","victimGenders":"Male","victimRaces":"Chinese (1)\n\"Gentleman\"/White (1)","victimNotes":null,"oldSources":null,"oldNotes":null,"origDBindex":null},{"caseNum":517,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"38.82633","lonDecimal":-120.948405,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1852,"yearMonth":"1852/05","yearMonthDay":"1852/05/02","dateNotes":null,"state":"California","place":"4 miles from Coloma","county":"El Dorado","locationNotes":"4 miles from Coloma on city road;coordinates estimated about 4 miles form Coloma on Hwy 49","crowdType":null,"crowdSize":null,"open":"Secret","oldAuthorities":"Coroners inquest concluded suicide, but strong suspicions lynched","crime":"unknown","punishment":"hanged","lethality":"Lethal","otherNamesMentioned":"Dr. Franklin, receipt from found on body","numberSuspects":1,"suspectNames":"Jno. Ogle","suspectRaces":"White","confession":null,"suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":null,"oldNotes":null,"origDBindex":null},{"caseNum":518,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"39.42916667","lonDecimal":-121.3333333,"latNDegrees":39,"latNMinutes":25,"latNSeconds":45,"lonWDegrees":121,"lonWMinutes":20,"lonWSeconds":null,"year":1852,"yearMonth":"1852/05","yearMonthDay":"1852/05/26","dateNotes":null,"state":"California","place":"Natchez","county":"Yuba","locationNotes":null,"crowdType":null,"crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Stealing","punishment":"hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"unknown","suspectRaces":"White","confession":null,"suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":null,"oldNotes":null,"origDBindex":null},{"caseNum":519,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"38.0193658","lonDecimal":-122.1352433,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1853,"yearMonth":"1853/09","yearMonthDay":"1853/09/03","dateNotes":null,"state":"California","place":"Martinez","county":"Contra Costa","locationNotes":null,"crowdType":"Assumed lynched by Mexicans to keep suspect from testifying about Joaquin's band","crowdSize":null,"open":"Secret","oldAuthorities":"Taken from jail; jailor found empty cell morning of 9/4","crime":"Horse thief","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":null,"suspectRaces":"Mexican","confession":null,"suspectNotes":"Captured by Love's Rangers","victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":null,"oldNotes":null,"origDBindex":null},{"caseNum":520,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"40.67083333","lonDecimal":-122.3458333,"latNDegrees":40,"latNMinutes":40,"latNSeconds":15,"lonWDegrees":122,"lonWMinutes":20,"lonWSeconds":45,"year":1854,"yearMonth":"1854/02","yearMonthDay":"1854/02/00","dateNotes":"\"a week or more since\"","state":"California","place":"Woodman's Ranch","county":"Shasta","locationNotes":"Using coordinates for Woodman, Shasta County; Durham p 337. 3 places; first and second not specified; third near Woodman's Ranch on Cow Creek; lynching by men from Johnson's Ranch","crowdType":"Party of white men","crowdSize":null,"open":"Secret","oldAuthorities":null,"crime":"Theft of a large number of valuable articles","punishment":"4 hanged\n1 shot","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":5,"suspectNames":"unnamed","suspectRaces":"Indians","confession":null,"suspectNotes":"Pitt River Indians; Nuntaramin, Chief of Cow Creek Indians, identified suspects to whites","victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":null,"oldNotes":null,"origDBindex":null},{"caseNum":522,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"38.34833333","lonDecimal":-120.7738889,"latNDegrees":38,"latNMinutes":20,"latNSeconds":54,"lonWDegrees":120,"lonWMinutes":46,"lonWSeconds":26,"year":1854,"yearMonth":"1854/03","yearMonthDay":"1854/03/23","dateNotes":"Thursday last","state":"California","place":"Jackson","county":"El Dorado","locationNotes":"Hung from same old oak tree on Main Street, the 7th victim of lynch law who has expiated his crimes on the same tree","crowdType":"Tanke in charge of Judge Lynch; no excitement, everyone satisfied of the fuilt","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Horse theft","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":"Askey and Campbell, who arrested suspect","numberSuspects":1,"suspectNames":"Christopher Bennett","suspectRaces":"Dutchman","confession":null,"suspectNotes":"about 30 years old","victimNumber":"2","victimNames":"Messrs. Askey and Campbell","victimGenders":"Male","victimRaces":"white","victimNotes":null,"oldSources":null,"oldNotes":null,"origDBindex":null},{"caseNum":523,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"39.03611111","lonDecimal":-120.9736111,"latNDegrees":39,"latNMinutes":2,"latNSeconds":10,"lonWDegrees":120,"lonWMinutes":58,"lonWSeconds":25,"year":1854,"yearMonth":"1854/09","yearMonthDay":"1854/09/04","dateNotes":"Monday Last","state":"California","place":"Weimar","county":"Placer","locationNotes":"Using coordinates of town with same name as Indian tribe","crowdType":"lynched by his own brethren","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Murder of a \"squaw\" and severla Chinamen","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":null,"suspectRaces":"Indian","confession":null,"suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":null,"oldNotes":null,"origDBindex":null},{"caseNum":524,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"34.0938981","lonDecimal":-118.1067361,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1856,"yearMonth":"1856/07","yearMonthDay":"1856/07/15","dateNotes":"Tuesday last","state":"California","place":"Ravine near Mission San Gabriel","county":"Los Angeles","locationNotes":null,"crowdType":null,"crowdSize":null,"open":"Secret","oldAuthorities":null,"crime":"unknown","punishment":"Dragged, shot, tongue cut out","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Cruz","suspectRaces":"Mexican","confession":null,"suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":null,"oldNotes":null,"origDBindex":null},{"caseNum":525,"cwIndex":"C-W 64","gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"34.1152873","lonDecimal":-117.6378318,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1864,"yearMonth":"1864/05","yearMonthDay":"1864/05/21","dateNotes":"Satruday Last","state":"California","place":"Cucamunga","county":"San Bernardino","locationNotes":"in the immediate vicinity of a store and blacksmith shop at Cucamungo","crowdType":"Shot by a spy of the Vigilantes","crowdSize":null,"open":"Secret","oldAuthorities":null,"crime":"unknown; long the terror of Sta Barbara; leader of bandits in Los Angeles; at least 25 or 30 murders and innumerable robberies and outrages","punishment":"Shot","lethality":"Lethal","otherNamesMentioned":"Ruiz, with Carillo at time of killing\nMan by name of Love suspected of killig Carillo","numberSuspects":1,"suspectNames":"Ramon Carillo (Carrigan Webb give name as Hose Antonio Carillo)","suspectRaces":"Californian","confession":null,"suspectNotes":"About 37 years old; Long been the terror of Sta Barbara; formerly lived in Sonoma County; connected by birth and marriage with the most respectable old families of California; Romueldo pachedo takes issue with these characterizations and issues statement that Carillo was upstanding citizen","victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":null,"oldNotes":null,"origDBindex":null},{"caseNum":526,"cwIndex":"C-W 93","gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"36.83","lonDecimal":-121.6775,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1870,"yearMonth":"1870/02","yearMonthDay":"1870/02/27","dateNotes":"each report has a different date","state":"California","place":"San Miguel Canyon","county":"Monterey","locationNotes":"six miles from watsonville","crowdType":"Party of men","crowdSize":null,"open":"Open","oldAuthorities":"Coroner inquest rules justifiable homicide","crime":"Horse theft","punishment":"Shot","lethality":"Lethal","otherNamesMentioned":"Coroner Roberts of Pajaro Township","numberSuspects":1,"suspectNames":"Pancho Redondo (Corrigan Webb gives name as Francisco Redondo)","suspectRaces":"Mexican","confession":null,"suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":null,"oldNotes":null,"origDBindex":null},{"caseNum":527,"cwIndex":"C-W 102","gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"36.910231","lonDecimal":-121.7568946,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1870,"yearMonth":"1870/03","yearMonthDay":"1870/03/15","dateNotes":null,"state":"California","place":"Watsonville","county":"Santa Cruz","locationNotes":"taken from jail","crowdType":"Vigilance Committee","crowdSize":null,"open":"Secret","oldAuthorities":"Taken from jail between 11pm and midnight","crime":"Horse stealing","punishment":"Nothing heard of Castro; assumed dead","lethality":"Lethal","otherNamesMentioned":"George Burton, arrested along with Castro but not take from jail","numberSuspects":1,"suspectNames":"Chulu Castro","suspectRaces":"California","confession":null,"suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":null,"oldNotes":null,"origDBindex":null},{"caseNum":528,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"32.6308899","lonDecimal":-116.8975229,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1870,"yearMonth":"1870/06","yearMonthDay":"1870/06/00","dateNotes":"Between 6/1 when murder occurred and 6/19, when lynching reported","state":"California","place":"Jamul","county":"San Diego","locationNotes":"Reports say Jamul Valley; using coordinates for Jamul","crowdType":"The citizens","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Murder","punishment":"hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"unnamed","suspectRaces":"Indian","confession":"Confessed, then hanged","suspectNotes":null,"victimNumber":"2","victimNames":"West and Van Hoosen (Van Hose)","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":null,"oldNotes":null,"origDBindex":null},{"caseNum":529,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"36.8269004","lonDecimal":-121.4710503,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1872,"yearMonth":"1872/04","yearMonthDay":"1872/04/23","dateNotes":null,"state":"California","place":"San Benito Valley","county":"San Benito","locationNotes":"Reports place at southern end of San Benito (Bonita) valley; coordinates placed at southern end of San Juan valley, aka Sen Benito Valley","crowdType":"Party of masked men;  vigilantes","crowdSize":null,"open":"Secret","oldAuthorities":"taken from officers","crime":"Horse theft and stage robbery","punishment":"hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Jose Castro","suspectRaces":"Mexican","confession":null,"suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":null,"oldNotes":null,"origDBindex":null},{"caseNum":530,"cwIndex":"C-W 108","gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"32.6064494","lonDecimal":-116.4689053,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1875,"yearMonth":"1875/12","yearMonthDay":"1875/12/05","dateNotes":null,"state":"California","place":"Campo","county":"San Diego","locationNotes":null,"crowdType":"Party of unknown men","crowdSize":null,"open":"Secret","oldAuthorities":"Taken from Jail; one jailor tied up, other not present","crime":"Assault and attempted murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":2,"suspectNames":"Jose Alvijo\nRafael Martinez","suspectRaces":"Mexican","confession":null,"suspectNotes":"Part of border band; information in reports; purportedly part of Tiburcio Vasquez gang","victimNumber":null,"victimNames":"Lumen Gaskill\nSilas Gaskill\n","victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":null,"oldNotes":null,"origDBindex":null},{"caseNum":531,"cwIndex":"C-W 110","gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"32.6064494","lonDecimal":-116.4689053,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1877,"yearMonth":"1877/07","yearMonthDay":"1877/07/17","dateNotes":null,"state":"California","place":"Milquetay Valley","county":"San Diego","locationNotes":"Milquetay is Indian name for Campo; using coordinates for Campo. Apparently party followed horse thieves into Mexico; as they were siezed and imprisoned there","crowdType":"Party of three school boys, Andrew and Zachary Elliott and Manuel Melendrez","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Horse theft","punishment":"shot","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":2,"suspectNames":"unnamed","suspectRaces":"Mexican","confession":null,"suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":null,"oldNotes":null,"origDBindex":null},{"caseNum":532,"cwIndex":"C-W 115","gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"36.9138575","lonDecimal":-121.7256462,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1856,"yearMonth":"1856/10","yearMonthDay":"1856/10/26","dateNotes":null,"state":"California","place":"Pajaro River","county":"Sant Cruz","locationNotes":"Near Watsonville; coordinates rough estimate \"up\" Pajaro River from Watsonvillle","crowdType":"Company of men searching for horse thieves","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Horse theft","punishment":"shot","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":3,"suspectNames":"Juan Salazar, aka Salisar\n2 unnamed","suspectRaces":"Mexican","confession":null,"suspectNotes":"related to Case 262","victimNumber":"2","victimNames":"Isaac and Charles WilliamsMale","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":null,"oldNotes":"Not clear if only Salazar, or Salazar and one other, or two others, were executed; reports differ","origDBindex":null},{"caseNum":533,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"37.9532584","lonDecimal":-120.4226952,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1850,"yearMonth":"1850/08","yearMonthDay":"1850/08/00","dateNotes":null,"state":"California","place":"Jamestown","county":"Tuolumne","locationNotes":null,"crowdType":"the public","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Theft money","punishment":"Whipped, 39 lashes","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"unnamed","suspectRaces":"Foreigner","confession":null,"suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":null,"oldNotes":null,"origDBindex":null},{"caseNum":534,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"38.3004709","lonDecimal":-120.7063219,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1852,"yearMonth":"1852/04","yearMonthDay":"1852/04/06","dateNotes":null,"state":"California","place":"Mokelumne Hill","county":"Calaveras","locationNotes":null,"crowdType":"summary proceedings","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Flores","suspectRaces":"Mexican","confession":null,"suspectNotes":"\"fine looking youth, only about eighteen years old\"","victimNumber":"2","victimNames":"Michael Hughuez\nunnamed","victimGenders":"Mele","victimRaces":"1 White? (Hughuez)\n1 Mexican","victimNotes":null,"oldSources":null,"oldNotes":null,"origDBindex":null},{"caseNum":535,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"39.388781","lonDecimal":-121.0855097,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1852,"yearMonth":"1852/06","yearMonthDay":"1852/06/00","dateNotes":null,"state":"California","place":"Nie's Crossing","county":"Yuba","locationNotes":"Using coordingates for Freemans Crossing per Durham p488. On Middle Yuba, just on Yuba County side (not Nevada County) of river","crowdType":"The citizens","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Shot severely","punishment":"Whipped, sentenced to 24 lashes; released after 12 and\nBanished","lethality":"Not Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"James B. Yates","suspectRaces":"White","confession":null,"suspectNotes":"Shot victim (Chinese) because latter refused to drink with him","victimNumber":"1","victimNames":"unnamed","victimGenders":"Male","victimRaces":"Chinese","victimNotes":null,"oldSources":null,"oldNotes":null,"origDBindex":null},{"caseNum":536,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"35.7444124","lonDecimal":-120.6979493,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1855,"yearMonth":"1855/05","yearMonthDay":"1855/05/00","dateNotes":"before 5/18","state":"California","place":"Mission San Miguel","county":"San Luis Obispo","locationNotes":null,"crowdType":"\"approved style of Judge Lynch\"","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Robbery, $1200","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":2,"suspectNames":"Unnamed","suspectRaces":"1 White\n1 Chileno","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":"Senor Rias","victimGenders":"Male","victimRaces":"Latino","victimNotes":null,"oldSources":null,"oldNotes":null,"origDBindex":null},{"caseNum":537,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"34.053789","lonDecimal":-118.242959,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1863,"yearMonth":"1863/11","yearMonthDay":"1863/11/22","dateNotes":null,"state":"California","place":"Los Angeles","county":"Los Angeles","locationNotes":"Hanged in corridor in front of the jail; coordinates calculated from Gonzalez-Day Notes","crowdType":"impromptu Vigilance Committee","crowdSize":"300 strong","open":"Open","oldAuthorities":"Opposed by sheriff and jailor but overpowered","crime":"Murder, robbery","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":5,"suspectNames":"Jose Olivas\nEli Chase\nBoss Damwood\nAndrew Wood\nJose Yreba","suspectRaces":"2 Latino (Olivas, Yreba)\n3 White (Chase, Damwood, Wood)","confession":null,"suspectNotes":null,"victimNumber":"various","victimNames":"Olivas charged with murder of Sylvester;\nDamwood with attempted murder of Constable R.A. Hester","victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":null,"oldNotes":null,"origDBindex":null},{"caseNum":538,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"34.098604","lonDecimal":-118.15221,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1889,"yearMonth":"1889/03","yearMonthDay":"1889/03/17","dateNotes":"Sprague died 1889/03/18","state":"California","place":"Alhambra","county":"Los Angeles","locationNotes":"Based on reports, Sprague shot between Old Adobe Road (now Huntington Drive) and Shorb Winery (Vine Street, Alhambra, rough location). Estimated location as intersection of Fremont and alhambra, roughly between Huntington Drive and vine Street","crowdType":"\"Citizens, who in the emergency, had taken it upon themselves to vindicate the law","crowdSize":null,"open":"Open","oldAuthorities":"Contable shot and sheriff welcomed citizens to assist","crime":"Murder; incident began when Sprague beat a girl for collecting wood","punishment":"Shot","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"B.F. Sprague","suspectRaces":"White","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":"Antone Harnischfeger","victimGenders":"Male","victimRaces":"White","victimNotes":"Constable; had come to Sprague's \"hut\" to arrest him for beating a small girl, Ida Lightner, aka Leitner","oldSources":null,"oldNotes":null,"origDBindex":null},{"caseNum":539,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"41.70666667","lonDecimal":-122.8433333,"latNDegrees":41,"latNMinutes":42,"latNSeconds":24,"lonWDegrees":122,"lonWMinutes":38,"lonWSeconds":756,"year":1935,"yearMonth":"1935/08","yearMonthDay":"8/3/1935","dateNotes":null,"state":"California","place":"Yreka","county":"Siskiyou","locationNotes":"Murder took place in Dunsmuir; suspect arrested and placed in county jail in Yreka for safety; taken from jail and hanged from piine tree outside of town. Coordinates from plaque identifying location","crowdType":"Mob of 25 masked men","crowdSize":"25","open":"secret","oldAuthorities":"Suspect seized from county jail on Yreka","crime":"Murder of polic chief after robbery","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Clyde L. Johnson, aka Clifford L., aka Charles L.","suspectRaces":"White","confession":null,"suspectNotes":"Aged 24 years","victimNumber":"1","victimNames":"F.R. Daw","victimGenders":"Male","victimRaces":"White","victimNotes":"Police Chief, Dunsmuir Calif.","oldSources":null,"oldNotes":null,"origDBindex":null},{"caseNum":540,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"36.6012792","lonDecimal":-121.8829442,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1854,"yearMonth":"1854/09","yearMonthDay":"1854/09/02","dateNotes":null,"state":"California","place":"Monterey","county":"Monterey","locationNotes":null,"crowdType":"Mob was raised, Judge Lynch presided","crowdSize":null,"open":"Open","oldAuthorities":null,"crime":"Murder","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"unnamed","suspectRaces":"Californian","confession":null,"suspectNotes":null,"victimNumber":"1","victimNames":"Officer Hardworth","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":null,"oldNotes":null,"origDBindex":null},{"caseNum":541,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"36.7841161","lonDecimal":-120.3696134,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1856,"yearMonth":"1856/10","yearMonthDay":"1856/10/04","dateNotes":null,"state":"California","place":"Tulare Slough","county":"Fresno","locationNotes":"Location estmated at confluence of Fresno Slough and San Joaquin River","crowdType":"Party in pursuit","crowdSize":null,"open":"Open","oldAuthorities":"Authorities chasing Bell but arrivved after capture, execution and scalpling","crime":"Robbery, Assault","punishment":"Hanged and scalped","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Tom Bell, aka George Brooks, aka Thomas Hodges","suspectRaces":"White","confession":"Confessoed and wrote letter to mother","suspectNotes":"From Tennessee; described as either 26 or 33","victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":null,"oldNotes":null,"origDBindex":null},{"caseNum":542,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"39.1517792","lonDecimal":-121.5834912,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1883,"yearMonth":"1883/07","yearMonthDay":"1883/07/12","dateNotes":null,"state":"California","place":"Marysville","county":"Yuba","locationNotes":"Taken from Jail and hanged","crowdType":"\"by citizens\"","crowdSize":null,"open":null,"oldAuthorities":"Taken from jail","crime":"Murder and robbery","punishment":"Hanged","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":2,"suspectNames":"Dennis Haggerty\nHnery Dowling","suspectRaces":"White","confession":null,"suspectNotes":null,"victimNumber":"2","victimNames":"Lames Lynn\nunnamed Swede","victimGenders":"Male","victimRaces":"White","victimNotes":null,"oldSources":null,"oldNotes":null,"origDBindex":null},{"caseNum":543,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"37.666347","lonDecimal":-120.897804,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1884,"yearMonth":"1884/03","yearMonthDay":"1884/03/19","dateNotes":null,"state":"California","place":"Modesto","county":"Stanislaus","locationNotes":"six miles east of town on the Wterford Road; roughly estimated","crowdType":"Party of masked citizens San Joaquin Valley Regulators","crowdSize":null,"open":"Secret","oldAuthorities":null,"crime":"Rape","punishment":"Shot","lethality":"Both","otherNamesMentioned":"McCrellis (allgeded victim)\nRobbins (codefendant)","numberSuspects":6,"suspectNames":"Jpseph Doan, aka Doane (shot)\nRobbins (Banished)\nMcCrellis Family (Banished)","suspectRaces":"White","confession":null,"suspectNotes":"Saloonkeeper (Doan)","victimNumber":"2","victimNames":"McCrellis","victimGenders":"Female","victimRaces":"White","victimNotes":"one or two young girls","oldSources":null,"oldNotes":null,"origDBindex":null},{"caseNum":544,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"37.337482","lonDecimal":-121.901301,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1892,"yearMonth":"1892/11","yearMonthDay":"1892/11/11","dateNotes":null,"state":"California","place":"San Jose","county":"Santa Clara","locationNotes":"Location estimated near intersection of Julian Street and Guadalupe Creek","crowdType":null,"crowdSize":null,"open":"Secret","oldAuthorities":null,"crime":"Unknown","punishment":"Hanged and Beaten","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Henry Planz","suspectRaces":"White","confession":null,"suspectNotes":"Manager of brewery","victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":null,"oldNotes":null,"origDBindex":null},{"caseNum":545,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"35..52930","lonDecimal":-118.172758,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1904,"yearMonth":"1904/03","yearMonthDay":"3/11/1904","dateNotes":null,"state":"California","place":"Mojave","county":"Kern","locationNotes":null,"crowdType":"Mob","crowdSize":"30","open":"Secret","oldAuthorities":"Taken from jail","crime":"rape of boy (implied)","punishment":"Beaten, shot, tarred and feathered","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"James Cummings","suspectRaces":"Black","confession":"Begged for life on knees when beatend and shot","suspectNotes":"recently arrivbed in town","victimNumber":"1","victimNames":null,"victimGenders":"Maile","victimRaces":"White","victimNotes":"young transient boy who accused Cummings of rape (implied)","oldSources":null,"oldNotes":null,"origDBindex":null},{"caseNum":546,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"41.194667","lonDecimal":-122.279348,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1904,"yearMonth":"1904/04","yearMonthDay":"4/15/1904","dateNotes":null,"state":"California","place":"Dunsmuir","county":"Shasta","locationNotes":"Took Place at RR yard; estimating at current locatin of Dunsmuit RR Yard Access Road","crowdType":"Mob of indignant citiznes","crowdSize":"100","open":"Secret","oldAuthorities":null,"crime":"attacked a 4 (or 8) year old girl","punishment":"Beaten to death and thrown into Sacramento River","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"B.H. Harrington, or Petrie","suspectRaces":"White","confession":"Begged for life while being beaten","suspectNotes":"Age 35, painter and upholsterer","victimNumber":"1","victimNames":"Hodkinson","victimGenders":"Female","victimRaces":"White","victimNotes":"Age 4 (or 8)","oldSources":null,"oldNotes":null,"origDBindex":null},{"caseNum":547,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":"33.7358518","lonDecimal":-118.2922934,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":1918,"yearMonth":"1918/09","yearMonthDay":"9/3/1918","dateNotes":null,"state":"California","place":"San Pedro","county":"Los Angeles","locationNotes":null,"crowdType":"Mob of police, soldiers, sailors, and citizens","crowdSize":null,"open":"Open","oldAuthorities":"Present--not clear whether this is a lynching, although comparisons were made at the time","crime":"murder of wife, purportedly because she was going to testify that he had assaulted 15 year old daughter","punishment":"Shot","lethality":"Lethal","otherNamesMentioned":null,"numberSuspects":1,"suspectNames":"Joseph, aka Marion, Ciserich, aka Siserich, ","suspectRaces":"Austrian","confession":"Gunfight with crown from inside his home, using infant as shield","suspectNotes":"Fisherman","victimNumber":"1","victimNames":"Wife","victimGenders":"Femail","victimRaces":"White","victimNotes":null,"oldSources":null,"oldNotes":null,"origDBindex":null},{"caseNum":null,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":null,"lonDecimal":null,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":0,"yearMonth":null,"yearMonthDay":null,"dateNotes":null,"state":null,"place":null,"county":null,"locationNotes":null,"crowdType":null,"crowdSize":null,"open":null,"oldAuthorities":null,"crime":null,"punishment":null,"lethality":null,"otherNamesMentioned":null,"numberSuspects":null,"suspectNames":null,"suspectRaces":null,"confession":null,"suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":null,"oldNotes":null,"origDBindex":null},{"caseNum":null,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":null,"lonDecimal":null,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":0,"yearMonth":null,"yearMonthDay":null,"dateNotes":null,"state":null,"place":null,"county":null,"locationNotes":null,"crowdType":null,"crowdSize":null,"open":null,"oldAuthorities":null,"crime":null,"punishment":null,"lethality":null,"otherNamesMentioned":null,"numberSuspects":null,"suspectNames":null,"suspectRaces":null,"confession":null,"suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":null,"oldNotes":null,"origDBindex":null},{"caseNum":null,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":null,"lonDecimal":null,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":0,"yearMonth":null,"yearMonthDay":null,"dateNotes":null,"state":null,"place":null,"county":null,"locationNotes":null,"crowdType":null,"crowdSize":null,"open":null,"oldAuthorities":null,"crime":null,"punishment":null,"lethality":null,"otherNamesMentioned":null,"numberSuspects":null,"suspectNames":null,"suspectRaces":null,"confession":null,"suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":null,"oldNotes":null,"origDBindex":null},{"caseNum":null,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":null,"lonDecimal":null,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":0,"yearMonth":null,"yearMonthDay":null,"dateNotes":null,"state":null,"place":null,"county":null,"locationNotes":null,"crowdType":null,"crowdSize":null,"open":null,"oldAuthorities":null,"crime":null,"punishment":null,"lethality":null,"otherNamesMentioned":null,"numberSuspects":null,"suspectNames":null,"suspectRaces":null,"confession":null,"suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":null,"oldNotes":null,"origDBindex":null},{"caseNum":null,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":null,"lonDecimal":null,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":0,"yearMonth":null,"yearMonthDay":null,"dateNotes":null,"state":null,"place":null,"county":null,"locationNotes":null,"crowdType":null,"crowdSize":null,"open":null,"oldAuthorities":null,"crime":null,"punishment":null,"lethality":null,"otherNamesMentioned":null,"numberSuspects":null,"suspectNames":null,"suspectRaces":null,"confession":null,"suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":null,"oldNotes":null,"origDBindex":null},{"caseNum":null,"cwIndex":null,"gdIndex":null,"crossRefNotesCwGd":null,"latDecimal":null,"lonDecimal":null,"latNDegrees":null,"latNMinutes":null,"latNSeconds":null,"lonWDegrees":null,"lonWMinutes":null,"lonWSeconds":null,"year":0,"yearMonth":null,"yearMonthDay":null,"dateNotes":null,"state":null,"place":null,"county":null,"locationNotes":null,"crowdType":null,"crowdSize":null,"open":null,"oldAuthorities":null,"crime":null,"punishment":null,"lethality":null,"otherNamesMentioned":null,"numberSuspects":null,"suspectNames":null,"suspectRaces":null,"confession":null,"suspectNotes":null,"victimNumber":null,"victimNames":null,"victimGenders":null,"victimRaces":null,"victimNotes":null,"oldSources":null,"oldNotes":null,"origDBindex":null}];}

/***/ },
/* 23 */
/***/ function(module, exports) {

	module.exports = "\n<section>\n     <div class=\"container\">\n \n                <button ng-if=\"$ctrl.nuke===true\" class=\"btn btn-danger\"  ng-click=\"$ctrl.deleteIncidents()\" ><span class=\"glyphicon glyphicon-fire\"><h6>Nuke Incients</h6></span></button>\n                <button ng-if=\"$ctrl.nuke===true\" class=\"btn btn-danger\"  ng-click=\"$ctrl.populateDatabase()\" ><span class=\"glyphicon glyphicon-book\"><h6>Populate Database</h6></span></button>\n        <!-- <div map-lazy-load=\"https://maps.google.com/maps/api/js\" map-lazy-load-params=\"{{$ctrl.mapURL}}\">\n        <ng-map center=\"41,-87\" zoom=\"3\"></ng-map>\n        </div> -->\n\n        <h2>Browse Lynchings</h2>\n        <div id=\"filters\">\n                <div class=\"jumbotron\">\n                        <label for=\"inputFilter\" class=\"col-lg-1 control-label\">Filter by </label>\n                        <div class=\"col-lg-1\">\n                                <select ng-model=\"$ctrl.newQuery.category\" ng-options=\"filter.name for filter in $ctrl.filters\">\n                                </select>\n                        </div>\n                        <div>\n                                <div ng-if=\"$ctrl.newQuery.category.name==='county'\" class=\"col-lg-2\" >\n                                        <select  ng-model=\"$ctrl.newQuery.target\" ng-options=\"county for county in $ctrl.counties\">\n                                        </select>\n                                </div>\n                                <div ng-if=\"$ctrl.newQuery.category.name==='place'\" class=\"col-lg-2\">\n                                        <input ng-model=\"$ctrl.newQuery.target\" type=\"text\" class=\"form-control\" id=\"inputPlace\" placeholder=\"Place\">\n                                </div>\n                                <div class=\"col-lg-2\" ng-if=\"$ctrl.newQuery.category.name==='year'\">\n                                        <input ng-model=\"$ctrl.newQuery.target\" type=\"number\" class=\"form-control\" id=\"inputYear\" min=1500 max=2100>\n                                </div>\n                        </div>\n                        <button ng-if=\"$ctrl.newQuery.target!==null\" class=\"btn btn-success\"  ng-click=\"$ctrl.addFilter()\" ><span class=\"glyphicon glyphicon-plus\"><h6>Add</h6></span></button>\n\n                </div>\n        </div>\n\n        <div class=\"jumbotron mb-3\" ng-if=\"$ctrl.queries.length\">\n                <label for=\"inputFilter\" class=\"col-lg-3 control-label\">Active Filters: Click a Filter to Remove</label>\n                <div class=\"col-lg-2\" ng-repeat=\"query in $ctrl.queries\" >\n                        <button type='button' class=\"{{$ctrl.classes[query.number]}}\" ng-click=\"$ctrl.removeFilter(query)\">{{query.category.name}} is {{query.target}}</button>\n                </div>\n        </div>\n\n        <div class=\"form-group\">\n                <button class=\"btn btn-info\"  ng-click=\"$ctrl.searchIncidents()\" ><span class=\"glyphicon glyphicon-search\"><h6>Search Incidents</h6></span></button>\n        </div>\n\n        <div id=\"No Results Message\" ng-if=\"$ctrl.incidents.length===0\" class=\"panel-group\">\n                <h3>No Results Found</h3>\n        </div>\n\n        <div id=\"incident-gallery\" ng-if=\"$ctrl.incidents.length\" class=\"panel-group\">\n                <h3>{{$ctrl.incidentNumber}} Results Found</h3>\n                <ul id=\"incident-list\">\n                        <li ng-repeat=\"incident in $ctrl.activeIncidents\">\n                                <div class=\"panel panel-primary col-lg-11\" id=\"incident-panel\">\n                                        <div  class=\"panel-header\">\n                                                <h3>{{incident.suspectNames}}</h3>\n                                        </div>\n\n                                        <div ng-if=\"incident.fullView===true\" class=\"lynchMap\" map-lazy-load=\"https://maps.google.com/maps/api/js\" map-lazy-load-params=\"{{$ctrl.mapURL}}\" >\n                                                <ng-map ng-if=\"incident.fullView===true\" class=\"small-map\" center=\"{{incident.latDecimal}},{{incident.lonDecimal}} \" zoom=\"8\">\n                                                        <marker  ng-if=\"incident.fullView===true\" position=“{{incident.latDecimal}},{{incident.lonDecimal}}”/> \n                                                </ng-map>\n                                        </div>\n\n                                        <div class=\"panel-body\" ng-hide=\"incident.fullView===true\"> \n                                                <button class=\"btn btn-primary\" id=\"show-incident-button\" ng-click=\"$ctrl.showIncident(incident)\"><span class=\"glyphicon glyphicon-plus\"><h6>Show More</h6></span></button>\n                                                <h3>{{incident.dateString}}</h3>\n                                                <h4>{{incident.place}}, {{incident.county}} County {{incident.state}}</h4>\n                                                <p>{{incident.summary}} summary will go here</p>          \n                                        </div>\n                                        <div class=\"panel-body\" ng-if=\"incident.fullView===true\">\n                                                <button class=\"btn btn-secondary\" id=\"show-incident-button\" ng-click=\"$ctrl.hideIncident(incident)\" ><span class=\"glyphicon glyphicon-minus\"><h6>Show Less</h6></span></button>\n                                                <h3>{{incident.dateString}}</h3>\n                                                <h4>{{incident.place}}, {{incident.county}} County {{incident.state}}</h4>\n                                                <p>{{incident.summary}} summary will go here</p>\n\n                                                <div class=\"panel-body\">\n                                                        <h4>Accused</h4>\n                                                        <p>Number: {{incident.numberSuspects}}</p>\n                                                        <p>Names: {{incident.suspectNames}}</p>\n                                                        <p>Races: {{incident.suspectRaces}}</p>\n                                                        <p>Confession or Speech at Gallows: {{incident.confession}}</p>\n                                                        <p>Accused Notes: {{incident.suspectNotes}}</p>\n                                                </div>\n                                            \n                                                <div class=\"panel-body\">\n                                                        <h4>Victims</h4>\n                                                        <p>Number:  <em>{{incident.victimNumber}}</em></p>\n                                                        <p>Names: {{incident.victimNames}}</p>\n                                                        <p>Genders: {{incident.victimGenders}}</p>\n                                                        <p>Races: {{incident.victimRaces}}</p>\n                                                        <p>Victim Notes: {{incident.victimNotes}}</p>\n                                                </div>\n\n                                                <div class=\"panel-body\">\n                                                        <h4>Lynching</h4>\n                                                        <p>Type of Crowd:  <em>{{incident.crowdType}}</em></p>\n                                                        <p>Size of Crowd: {{incident.crowdSize}}</p>\n                                                        <p>Open or Closed?: {{incident.open}}</p>\n                                                        <p>Authorities Present: {{incident.oldAuthorities}}</p>\n                                                        <p>Crime: {{incident.crime}}</p>\n                                                        <p>Punishment: {{incident.punishment}}</p>\n                                                        <p>Lethality: {{incident.lethality}}</p>\n                                                        <p>Other Names Mentioned: {{incident.otherNamesMentioned}}</p>\n                                                </div>\n                                    \n                                                <div class=\"panel-body\">\n                                                        <h4>Database Indices</h4>\n                                                        <p>Case Number:  <em>{{incident.caseNum}}</em></p>\n                                                        <p>Current Database ID:  <em>{{incident._id}}</em></p>\n                                                        <p>Original Database Index: {{incident.origDBIndex}}</p>\n                                                        <p>cwIndex: {{incident.cwIndex}}</p>\n                                                        <p>gdIndex: {{incident.gdIndex}}</p>\n                                                        <p>Index Notes: {{incident.crossRefNotesCwGd}}</p>\n                                                </div>\n\n                                                <div class=\"panel-body\">\n                                                        <h4>Sources</h4>\n                                                        <p>Sources:  <em>{{incident.oldSources}}</em></p>\n                                                        <p>Notes:  <em>{{incident.oldNotes}}</em></p>\n                                                </div>\n\n                                                <button class=\"btn btn-warning\" id=\"edit-incident-button\" ng-click=\"$ctrl.editIncident(incident)\" ><span class=\"glyphicon glyphicon-wrench\"><h6>Edit Incident</h6></span></button>\n                                                <button class=\"btn btn-danger\" id=\"delete-incident-button\" ng-click=\"$ctrl.deleteIncident(incident)\" ><span class=\"glyphicon glyphicon-trash\"><h6>Delete Incident</h6></span></button>\n\n    <!-- latDecimal: Number,\n    lonDecimal: Number,\n    latNDegrees:Number,\n    latNMinutes:Number,\n    latNSeconds:Number,\n    lonWDegrees:Number,\n    lonWMinutes:Number,\n    lonWSeconds:Number,\n    year: requiredNumber,\n    month: Number,\n    day: Number,\n    dateNotes: String,\n    state: String,\n    place: String,\n    county: String,\n    locationNotes: String, -->\n\n                                        </div>\n                                </div>\n                        </li>\n                </ul>\n        </div>\n</div> \n\n        <div id=\"search-results-footer\" class=\"jumbotron\" ng-if=\"$ctrl.incidents.length>0\">\n                <div class=\"panel-md-10\">\n                        <button class=\"btn btn-info\" ng-if=\"$ctrl.minResult>9\" ng-click=\"$ctrl.previousResults()\"><span class=\"glyphicon glyphicon-arrow-left\"><h6>Previous</h6></button>\n                        <button class=\"btn btn-info\" ng-if=\"$ctrl.maxResult<$ctrl.incidentNumber\" ng-click=\"$ctrl.nextResults()\"><span class=\"glyphicon glyphicon-arrow-right\"><h6>Next</h6></button>\n                        <span>Results {{$ctrl.minResult}}-{{$ctrl.maxResult}}</span>\n                        <span> (of {{$ctrl.incidentNumber}})</h3>\n                </div>\n        </div>\n              \n</section>";

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _login = __webpack_require__(25);
	
	var _login2 = _interopRequireDefault(_login);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = {
	    template: _login2.default,
	    controller: controller
	};
	
	
	controller.$inject = ['$rootScope', 'authService', '$state'];
	
	function controller(rootScope, authSvc, $state) {
	    var _this = this;
	
	    this.credentials = {};
	    this.authenticate = function () {
	        console.log('authenticate called');
	        return authSvc.login(_this.credentials).then(function (user) {
	            console.log('user is ', user);
	            localStorage.setItem('user', JSON.stringify(user));
	            rootScope.$emit('login', { user: user });
	            $state.go('home');
	        }).catch(function (error) {
	            _this.error = error;
	        });
	    };
	};

/***/ },
/* 25 */
/***/ function(module, exports) {

	module.exports = "<section id=\"signin-page\">\n    <h2>Login to access your account</h2>\n\t<form name=\"auth\" ng-submit=\"$ctrl.authenticate()\">\n\t\t<div>\n\t\t\t<label id=\"username\">\n\t\t\t\tUsername: <input required ng-model=\"$ctrl.credentials.username\">\n\t\t\t</label>\n\t\t</div>\n\n\t\t<div>\n\t\t\t<label id=\"password\">\n\t\t\t\tPassword: <input required type=\"password\" ng-model=\"$ctrl.credentials.password\">\n\t\t\t</label>\n\t\t</div>\n\n\t\t<button type=\"submit\" ng-click=\"$ctrl.authenticate\">Login</button>\n\t</form>\n\t<div class=\"error\" ng-if='$ctrl.error'>{{$ctrl.error.message}}</div>\n</section>";

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _logout = __webpack_require__(27);
	
	var _logout2 = _interopRequireDefault(_logout);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = {
	    template: _logout2.default,
	    controller: controller
	};
	
	
	controller.$inject = ['tokenService', '$state', '$rootScope'];
	
	function controller(tokenService, $state, rootScope) {
	
	    console.log('before clear ' + localStorage.getItem('user'));
	    tokenService.remove();
	    localStorage.removeItem('user');
	    console.log('after clear ' + localStorage.getItem('user'));
	    rootScope.$emit('logout');
	}

/***/ },
/* 27 */
/***/ function(module, exports) {

	module.exports = "<section>\n    <h2>You've been logged out of your account.</h2>\n</section>";

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _lynchMap = __webpack_require__(29);
	
	var _lynchMap2 = _interopRequireDefault(_lynchMap);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = {
	    template: _lynchMap2.default,
	    controller: controller
	};
	
	
	controller.$inject = ['lynchService', '$timeout', '$rootScope', 'googleMapsUrl', 'NgMap'];
	
	function controller(lynchSvc, timeout, rootScope, googleMapsUrl, NgMap) {
	    var _this = this;
	
	    lynchSvc.get().then(function (incidents) {
	        _this.incidents = incidents;
	        console.log('incidents loaded: ', _this.incidents);
	        NgMap.getMap().then(function (map) {
	            console.log(map.getCenter());
	            console.log('markers', map.markers);
	            console.log('shapes', map.shapes);
	            console.log('class', map.class);
	
	            var _loop = function _loop(i) {
	                console.log('add marker called');
	                var newMarker = new google.maps.Marker({
	                    title: "Hi marker "
	                });
	
	                newMarker.addListener('click', function () {
	                    map.setZoom(10);
	                    map.setCenter(newMarker.getPosition());
	                    alert(incidents[i].year + incidents[i].place + incidents[i].county + incidents[i].suspectNames);
	                });
	
	                bounds = new google.maps.LatLngBounds();
	                lat = incidents[i].latDecimal;
	                lng = incidents[i].lonDecimal;
	                latlng = new google.maps.LatLng(lat, lng);
	
	                newMarker.setPosition(latlng);
	                newMarker.setMap(map);
	                bounds.extend(latlng);
	            };
	
	            for (var i = 0; i < incidents.length; i++) {
	                var bounds;
	                var lat;
	                var lng;
	                var latlng;
	
	                _loop(i);
	            };
	
	            // map.addListener('center_changed', function() {
	            //     // 3 seconds after the center of the map has changed, pan back to the
	            //     // marker.
	            //     window.setTimeout(function() {
	            //       map.panTo(marker.getPosition());
	            //     }, 3000);
	            //   });
	        });
	    });
	
	    // for (var i=0; i<8 ; i++) {
	    //   markers[i] = new google.maps.Marker({
	    //     title: "Hi marker " + i
	    //   })
	    // }
	    // this.GenerateMapMarkers = function() {
	    //     var numMarkers = Math.floor(Math.random() * 4) + 4;  // betwween 4 & 8 of them
	    //      var bounds = new google.maps.LatLngBounds();
	
	    //     for (i = 0; i < numMarkers; i++) {
	    //         var lat =   1.280095 + (Math.random()/100);
	    //         var lng = 103.850949 + (Math.random()/100);
	    //         // You need to set markers according to google api instruction
	    //         // you don't need to learn ngMap, but you need to learn google map api v3
	    //         // https://developers.google.com/maps/documentation/javascript/markers
	    //         var latlng = new google.maps.LatLng(lat, lng);
	    //         markers[i].setPosition(latlng);
	    //         markers[i].setMap(this.map);
	    //         bounds.extend(latlng);
	    //     }
	
	    //     var centre = bounds.getCenter();
	    //     this.map.setCenter(centre);
	    // };  
	
	    // timeout( this.GenerateMapMarkers, 2000);
	
	
	    // var markers = [];
	
	    // for (var i=0; i<8 ; i++) {
	    //   markers[i] = new google.maps.Marker({
	    //     title: "Hi marker " + i
	    //   })
	    // }
	    // this.GenerateMapMarkers = function() {
	    //     var numMarkers = Math.floor(Math.random() * 4) + 4;  // betwween 4 & 8 of them
	    //      var bounds = new google.maps.LatLngBounds();
	
	    //     for (i = 0; i < numMarkers; i++) {
	    //         var lat =   1.280095 + (Math.random()/100);
	    //         var lng = 103.850949 + (Math.random()/100);
	    //         // You need to set markers according to google api instruction
	    //         // you don't need to learn ngMap, but you need to learn google map api v3
	    //         // https://developers.google.com/maps/documentation/javascript/markers
	    //         var latlng = new google.maps.LatLng(lat, lng);
	    //         markers[i].setPosition(latlng);
	    //         markers[i].setMap(this.map);
	    //         bounds.extend(latlng);
	    //     }
	
	    //     var centre = bounds.getCenter();
	    //     this.map.setCenter(centre);
	    // };  
	
	    // timeout( this.GenerateMapMarkers, 2000);
	
	    //     });
	    // });
	
	
	    this.mapURL = googleMapsUrl;
	
	    this.fart = function () {
	        alert('fart');
	        console.log('fart complete');
	    };
	
	    // google.maps.event.trigger(map, “resize”);
	
	
	    // this.newFilter = false;
	    // this.activeFilter = null;
	
	    // this.queryNumber=-1; 
	
	    // this.incidents = [];
	
	
	    // this.newQuery = {
	    //     category: null,
	    //     target: null,
	    //     number: null
	    // };
	
	    // this.queries = [];
	
	    // this.filters = [
	    //     {
	    //         name: 'year',
	    //         value: 'year'
	    //     },
	    //     {
	    //         name: 'county',
	    //         value: 'county'
	    //     },
	    //     {
	    //         name: 'place',
	    //         value: 'place'
	    //     }
	    // ];
	
	    // this.oldCounties = ['Alameda County', 'Alpine County',
	    //     'Amador County',
	    //     'Butte County',
	    //     'Calaveras County',
	    //     'Colusa County',
	    //     'Contra Costa County',
	    //     'Del Norte County',
	    //     'El Dorado County',
	    //     'Fresno County',
	    //     'Glenn County',
	    //     'Humboldt County',
	    //     'Imperial County',
	    //     'Inyo County',
	    //     'Kern County',
	    //     'Kings County',
	    //     'Lake County',
	    //     'Lassen County',
	    //     'Los Angeles County',
	    //     'Madera County',
	    //     'Marin County',
	    //     'Mariposa County',
	    //     'Mendocino County',
	    //     'Merced County',
	    //     'Modoc County',
	    //     'Mono County',
	    //     'Monterey County',
	    //     'Napa County',
	    //     'Nevada County',
	    //     'Orange County',
	    //     'Placer County',
	    //     'Plumas County',
	    //     'Riverside County',
	    //     'Sacramento County',
	    //     'San Benito County',
	    //     'San Bernardino County',
	    //     'San Diego County',
	    //     'San Francisco County',
	    //     'San Joaquin County',
	    //     'San Luis Obispo County',
	    //     'San Mateo County',
	    //     'Santa Barbara County',
	    //     'Santa Clara County',
	    //     'Santa Cruz County',
	    //     'Shasta County',
	    //     'Sierra County',
	    //     'Siskiyou County',
	    //     'Solano County',
	    //     'Sonoma County',
	    //     'Stanislaus County',
	    //     'Sutter County',
	    //     'Tehama County',
	    //     'Trinity County',
	    //     'Tulare County',
	    //     'Tuolumne County',
	    //     'Ventura County',
	    //     'Yolo County',
	    //     'Yuba County'];
	
	    // this.counties = [];
	
	    // this.oldCounties.forEach((county)=>{
	    //     let arr = county.split(' ');
	    //     arr.pop();
	    //     let str = arr.join(' ');
	    //     this.counties.push(str);
	    // });
	
	    // this.classes = ['btn btn-primary', 'btn btn-secondary', 'btn btn-warning', 'btn btn-danger'];
	
	    // this.buttonClass = 'btn btn-outline-primary';
	
	    // this.addFilter = ()=>{
	    //     this.newFilter=true;
	    //     if (this.newQuery.category !== null && this.newQuery.target !== null){
	    //         this.queryNumber ++;
	    //         if (this.queryNumber > 3){
	    //             this.queryNumber = 0;
	    //         }
	
	    //         this.newQuery.number = this.queryNumber;
	
	    //         this.queries.push(this.newQuery);
	
	    //         let index = this.filters.findIndex((filter)=>{
	    //             return filter.name === this.newQuery.category.name;
	    //         });
	
	    //         this.filters.splice(index,1);
	
	    //         this.newQuery = {
	    //             catergory: null,
	    //             target: null,
	    //             number: null
	    //         };
	    //         console.log('filters are ', this.filters);
	    //     }
	    // };
	
	    // this.removeFilter = (filter)=>{
	    //     console.log('removing this filter ', filter);
	
	    //     this.filters.push(filter.category);
	
	    //     let index = this.queries.findIndex((query)=>{
	    //         console.log('query name is ' + query.category.name + ' and filter name is ' + filter.category.name);
	    //         return query.category.name === filter.category.name;
	    //     });
	
	    //     this.queries.splice(index,1);
	
	    // };
	
	    // this.showIncident= (incident)=>{
	    //     incident.fullView = true;
	    // };
	
	    // this.hideIncident= (incident)=>{
	    //     incident.fullView = false;
	    // };
	
	    // this.searchIncidents = ()=>{
	    //     console.log('searching incidents with these queries ', this.queries);
	    //     let queryString = '';
	    //     if (this.queries.length > 0){
	    //         queryString += '?' + this.queries[0].category.value + '=' + this.queries[0].target;
	    //         for (let i=1; i < this.queries.length; i++){
	    //             queryString += '&' + this.queries[i].category.value + '=' + this.queries[i].target; 
	    //         }
	    //     }
	    //     console.log(queryString);
	    //     lynchSvc.getByQuery(queryString)
	    //         .then((incidents)=>{
	    //             this.incidents=incidents;
	    //             console.log(this.incidents);
	    //             this.incidentNumber = this.incidents.length;
	    //             this.incidents.sort((a,b)=>{
	    //                 return a.year > b.year;
	    //             });
	    //         });
	
	    // };
	
	    // lynchSvc.get()
	    //     .then((incidents)=>{
	    //         this.incidents=incidents;
	    //         console.log(this.incidents);
	    //         this.incidentNumber = this.incidents.length;
	    //         let sorted = this.incidents.sort((a,b)=>{
	    //             return parseInt(a.year) > parseInt(b.year);
	    //         });
	    //         this.incidents = sorted;
	    //     });
	
	
	    // this code populates the DB
	    // this.oldJSON.forEach((entry)=>{
	    // if (entry.yearMonthDay.length > 0){
	    //     entry.month = 
	    // }
	    // lynchSvc.addIncident(entry)
	    // .then((incident)=>{
	    //     console.log('posted ', incident);
	    // });
	    //     console.log(entry);
	    // });
	}

/***/ },
/* 29 */
/***/ function(module, exports) {

	module.exports = "\n<section>\n       \n        <h1>Lynching Map</h1>\n\n        <div class=\"lynchMap\" map-lazy-load=\"https://maps.google.com/maps/api/js\" map-lazy-load-params=\"{{$ctrl.mapURL}}\">\n                <ng-map class=\"lynch-map\" center=\"37.897894, -119.340420\" zoom=\"6\">\n                        <!-- <marker position=“{{$ctrl.incidents[0].latDecimal}},{{$ctrl.incidents[0].lonDecimal}}” /> -->\n                        <!-- <marker ng-repeat=\"incident in $ctrl.incidents\" position=“{{incident.latDecimal}},{{incident.lonDecimal}}” on-click=\"$ctrl.fart()\"/>  -->\n                </ng-map>\n        </div>\n\n\n        <!-- <ng-map class=\"lynch-map\" center=\"37.897894, -119.340420\" zoom=\"6\">\n                <marker ng-repeat=\"incident in $ctrl.incidents\" position=“{{incident.latDecimal}},{{incident.lonDecimal}}” on-click=\"$ctrl.fart()\"/> \n        </ng-map> -->\n\n        <!-- ng-repeat=\"incident in $ctrl.incidents\"  -->\n\n        \n\n\n        <!-- <h2>Browse Incidents</h2>\n        <div id=\"filters\">\n                <div class=\"jumbotron\">\n                        <label for=\"inputFilter\" class=\"col-lg-1 control-label\">Filter by </label>\n                        <div class=\"col-lg-1\">\n                                <select ng-model=\"$ctrl.newQuery.category\" ng-options=\"filter.name for filter in $ctrl.filters\">\n                                </select>\n                        </div>\n                        <div>\n                                <div ng-if=\"$ctrl.newQuery.category.name==='county'\" class=\"col-lg-2\" >\n                                        <select  ng-model=\"$ctrl.newQuery.target\" ng-options=\"county for county in $ctrl.counties\">\n                                        </select>\n                                </div>\n                                <div ng-if=\"$ctrl.newQuery.category.name==='place'\" class=\"col-lg-2\">\n                                        <input ng-model=\"$ctrl.newQuery.target\" type=\"text\" class=\"form-control\" id=\"inputPlace\" placeholder=\"Place\">\n                                </div>\n                                <div class=\"col-lg-2\" ng-if=\"$ctrl.newQuery.category.name==='year'\">\n                                        <input ng-model=\"$ctrl.newQuery.target\" type=\"number\" class=\"form-control\" id=\"inputYear\" min=1500 max=2100>\n                                </div>\n                        </div>\n                        <button ng-if=\"$ctrl.newQuery.target!==null\" class=\"btn btn-success\"  ng-click=\"$ctrl.addFilter()\" ><span class=\"glyphicon glyphicon-plus\"><h6>Add</h6></span></button>\n\n                </div>\n        </div>\n\n        <div class=\"jumbotron mb-3\" ng-if=\"$ctrl.queries.length\">\n                <label for=\"inputFilter\" class=\"col-lg-3 control-label\">Active Filters: Click a Filter to Remove</label>\n                <div class=\"col-lg-2\" ng-repeat=\"query in $ctrl.queries\" >\n                        <button type='button' class=\"{{$ctrl.classes[query.number]}}\" ng-click=\"$ctrl.removeFilter(query)\">{{query.category.name}} is {{query.target}}</button>\n                </div>\n        </div>\n\n        <div class=\"form-group\">\n                <button class=\"btn btn-info\"  ng-click=\"$ctrl.searchIncidents()\" ><span class=\"glyphicon glyphicon-search\"><h6>Search Incidents</h6></span></button>\n        </div>\n\n        <div id=\"incident-gallery\" ng-if=\"$ctrl.incidents.length\" class=\"panel-group\">\n                <h3>{{$ctrl.incidentNumber}} Results Found</h3>\n                <ul id=\"incident-list\">\n                        <li ng-repeat=\"incident in $ctrl.incidents\">\n                                <div class=\"panel panel-primary col-lg-11\" id=\"incident-panel\">\n                                        <div  class=\"panel-header\">\n                                                <h3>{{incident.suspectNames}}</h3>\n                                        </div>\n                                        <div class=\"panel-body\" ng-hide=\"incident.fullView===true\"> \n                                                <button class=\"btn btn-primary\" id=\"show-incident-button\" ng-click=\"$ctrl.showIncident(incident)\"><span class=\"glyphicon glyphicon-view\"><h6>Show More</h6></span></button>\n                                                <h3>{{incident.year}}</h3>\n                                                <h4>{{incident.place}}, {{incident.county}} County {{incident.state}}</h4>\n                                                <p>{{incident.summary}} summary will go here</p>          \n                                        </div>\n                                        <div class=\"panel-body\" ng-if=\"incident.fullView===true\">\n                                                <button class=\"btn btn-secondary\" id=\"show-incident-button\" ng-click=\"$ctrl.hideIncident(incident)\" ><span class=\"glyphicon glyphicon-view\"><h6>Show Less</h6></span></button>\n                                                <h3>{{incident.year}}</h3>\n                                                <h4>{{incident.place}}, {{incident.county}} County {{incident.state}}</h4>\n                                                <p>{{incident.summary}} summary will go here</p>\n\n                                                <div class=\"panel-body\">\n                                                        <h4>Accused</h4>\n                                                        <p>Number: {{incident.numberSuspects}}</p>\n                                                        <p>Names: {{incident.suspectNames}}</p>\n                                                        <p>Races: {{incident.suspectRaces}}</p>\n                                                        <p>Confession or Speech at Gallows: {{incident.confession}}</p>\n                                                        <p>Accused Notes: {{incident.suspectNotes}}</p>\n                                                </div>\n                                            \n                                                <div class=\"panel-body\">\n                                                        <h4>Victims</h4>\n                                                        <p>Number:  <em>{{incident.victimNumber}}</em></p>\n                                                        <p>Names: {{incident.victimNames}}</p>\n                                                        <p>Genders: {{incident.victimGenders}}</p>\n                                                        <p>Races: {{incident.victimRaces}}</p>\n                                                        <p>Victim Notes: {{incident.victimNotes}}</p>\n                                                </div>\n\n                                                <div class=\"panel-body\">\n                                                        <h4>Lynching</h4>\n                                                        <p>Type of Crowd:  <em>{{incident.crowdType}}</em></p>\n                                                        <p>Size of Crowd: {{incident.crowdSize}}</p>\n                                                        <p>Open or Closed?: {{incident.open}}</p>\n                                                        <p>Authorities Present: {{incident.oldAuthorities}}</p>\n                                                        <p>Crime: {{incident.crime}}</p>\n                                                        <p>Punishment: {{incident.punishment}}</p>\n                                                        <p>Lethality: {{incident.Lethality}}</p>\n                                                        <p>Other Names Mentioned: {{incident.otherNamesMentioned}}</p>\n                                                </div>\n                                    \n                                                <div class=\"panel-body\">\n                                                        <h4>Database Indices</h4>\n                                                        <p>Case Number:  <em>{{incident.caseNum}}</em></p>\n                                                        <p>Current Database ID:  <em>{{incident._id}}</em></p>\n                                                        <p>Original Database Index: {{incident.origDBIndex}}</p>\n                                                        <p>cwIndex: {{incident.cwIndex}}</p>\n                                                        <p>gdIndex: {{incident.gdIndex}}</p>\n                                                        <p>Index Notes: {{incident.crossRefNotesCwGd}}</p>\n                                                </div>\n\n                                                <div class=\"panel-body\">\n                                                        <h4>Sources</h4>\n                                                        <p>Sources:  <em>{{incident.oldSources}}</em></p>\n                                                        <p>Notes:  <em>{{incident.oldNotes}}</em></p>\n                                                </div>\n\n    latDecimal: Number,\n    lonDecimal: Number,\n    latNDegrees:Number,\n    latNMinutes:Number,\n    latNSeconds:Number,\n    lonWDegrees:Number,\n    lonWMinutes:Number,\n    lonWSeconds:Number,\n    year: requiredNumber,\n    month: Number,\n    day: Number,\n    dateNotes: String,\n    state: String,\n    place: String,\n    county: String,\n    locationNotes: String,\n\n                                        </div>\n                                </div>\n                        </li>\n                </ul>\n        <div> -->\n</section>";

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _signup = __webpack_require__(31);
	
	var _signup2 = _interopRequireDefault(_signup);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = {
	    template: _signup2.default,
	    controller: controller
	};
	
	
	controller.$inject = ['authService', '$state', '$rootScope'];
	
	function controller(authSvc, $state, rootScope) {
	    var _this = this;
	
	    this.first = '';
	    this.last = '', this.credentials = {
	        username: '',
	        name: '',
	        password: '',
	        dob: '',
	        email: '',
	        role: 'user',
	        friends: [],
	        trips: []
	    };
	
	    this.authenticate = function () {
	        console.log('authenticate called');
	        _this.credentials.name = _this.first + ' ' + _this.last;
	        return authSvc.signup(_this.credentials).then(function (user) {
	            console.log('user is ', user);
	            localStorage.setItem('user', JSON.stringify(user));
	            rootScope.$emit('signin', { user: user });
	            $state.go('home');
	        }).catch(function (error) {
	            _this.error = error;
	        });
	    };
	};

/***/ },
/* 31 */
/***/ function(module, exports) {

	module.exports = "<section class=\"signup-box\">\n   \t<h2 id=\"signup-header\">Sign up for a user account</h2>\n\t<form name=\"auth\" ng-submit=\"$ctrl.authenticate()\">\n\t\t<div>\n\t\t\t<label id=\"username\">\n\t\t\t\tUsername: <input required ng-model=\"$ctrl.credentials.username\">\n\t\t\t</label>\n\t\t</div>\n\n\t\t<div>\n\t\t\t<label id=\"name\">\n\t\t\t\tName<br>       \n\t\t\t\tFirst: <input type=\"text\" ng-model=\"$ctrl.first\">\n\t\t\t\tLast: <input type=\"text\" ng-model=\"$ctrl.last\">\n\t\t\t</label>\n\t\t</div>\n\n\t\t<div>\n\t\t\t<label id=\"password\">\n\t\t\t\tPassword: <input required type=\"password\" ng-model=\"$ctrl.credentials.password\">\n\t\t\t</label>\n\t\t</div>\n\n\t\t<div>\n\t\t\t<label id=\"email\">\n\t\t\t\tEmail: <input type=\"email\" ng-model=\"$ctrl.credentials.email\">\n\t\t\t</label>\n\t\t</div>\n\n        <div id=\"dob\">\n\t\t\tDate of Birth: <input type=\"date\" ng-model=\"$ctrl.credentials.dob\">\n\t\t</div>\n\n\t\t<button type=\"submit\">Sign Up</button>\n\t</form>\n\t<div class=\"error\" ng-if='$ctrl.error'>{{$ctrl.error.message}}</div>\n</section>";

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _user = __webpack_require__(33);
	
	var _user2 = _interopRequireDefault(_user);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = {
	    template: _user2.default,
	    controller: controller
	};
	
	
	controller.$inject = ['userService', '$timeout', '$rootScope'];
	
	function controller(userSvc, timeout, rootScope) {
	    var _this = this;
	
	    this.user = {
	        name: 'Fartlord'
	    };
	    console.log('user is ', this.user);
	    console.log('rootScope.user.userId is ', rootScope.user.userId);
	
	    userSvc.getById(rootScope.user.userId).then(function (user) {
	        console.log('user is ', user[0]);
	        _this.user = user[0];
	        console.log('user is ', _this.user);
	    });
	};

/***/ },
/* 33 */
/***/ function(module, exports) {

	module.exports = "<section>\n    <h1>User Portfolio Section</h1>\n    \n    <h3>Username: {{$ctrl.user.username}}</h3>\n    <h3>Name: {{$ctrl.user.name}}</h3>\n    <h3>Password: {{$ctrl.user.password}}</h3>\n    <h3>Email: {{$ctrl.user.email}}</h3>\n    <h3>Date of Birth: {{$ctrl.user.dob}}</h3>  \n\n</section>\n";

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _angular = __webpack_require__(1);
	
	var _angular2 = _interopRequireDefault(_angular);
	
	var _camelcase = __webpack_require__(8);
	
	var _camelcase2 = _interopRequireDefault(_camelcase);
	
	var _path = __webpack_require__(9);
	
	var _path2 = _interopRequireDefault(_path);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	// .context is a method webpack adds to require 
	var context = __webpack_require__(35);
	
	// create the module to put the resources in,
	// in this case directives
	var _module = _angular2.default.module('services', []);
	
	// iterate each of the found required contexts (files)
	context.keys().forEach(function (key) {
	    // convert kabob to camel, eg list-item -> listItem
	    var name = (0, _camelcase2.default)(_path2.default.basename(key, '.js'));
	    // add the component to the components module
	    _module.factory(name, context(key).default);
	});
	
	// export the name of the module for 
	// adding as a dependecy at the app level
	exports.default = _module.name;

/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	var map = {
		"./auth-service.js": 36,
		"./lynch-service.js": 37,
		"./token-service.js": 38,
		"./user-service.js": 39
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;
	webpackContext.id = 35;


/***/ },
/* 36 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.default = authService;
	authService.$inject = ['tokenService', '$http', 'apiUrl'];
	
	function authService(token, $http, apiUrl) {
	    console.log('in auths service');
	    var current = token.get();
	    if (current) {
	        $http.get(apiUrl + '/auths/verify').catch(function () {
	            return token.remove();
	        });
	    }
	
	    function credential(endpoint) {
	        console.log('credential called.  This is the endpoint:', endpoint);
	        return function (credentials) {
	            console.log('these are the credentials, ', credentials);
	            return $http.post(apiUrl + '/auths/' + endpoint, credentials).then(function (result) {
	                token.set(result.data.token);
	                return result.data;
	            }).catch(function (err) {
	                throw err.data;
	            });
	        };
	    }
	
	    return {
	        isAuthenticated: function isAuthenticated() {
	            return !!token.get();
	        },
	        logout: function logout() {
	            token.remove();
	        },
	
	        login: credential('login'),
	        signup: credential('signup')
	    };
	}

/***/ },
/* 37 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.default = lynchService;
	
	lynchService.$inject = ['$http', 'apiUrl'];
	
	function lynchService($http, apiUrl) {
	    return {
	        get: function get() {
	            return $http.get(apiUrl + '/incidents').then(function (res) {
	                return res.data;
	            });
	        },
	        getById: function getById(incidentId) {
	            console.log('in get by Id ,', apiUrl);
	            return $http.get(apiUrl + '/incidents/' + incidentId).then(function (res) {
	                return res.data;
	            });
	        },
	        getByQuery: function getByQuery(query) {
	            return $http.get(apiUrl + '/incidents/' + query).then(function (res) {
	                return res.data;
	            });
	        },
	        addIncident: function addIncident(incident) {
	            console.log('In lynch service, adding this incident ', incident);
	            return $http.post(apiUrl + '/incidents', incident).then(function (res) {
	                return res.data;
	            });
	        },
	        deleteIncident: function deleteIncident(incident) {
	            console.log('In lynch service, deleting this incident ', incident);
	            return $http.delete(apiUrl + '/incidents/' + incident._id).then(function (res) {
	                return res.data;
	            });
	        }
	    };
	};

/***/ },
/* 38 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.default = tokenService;
	tokenService.$inject = ['$window'];
	
	var TOKEN_NAME = 'token';
	
	function tokenService($window) {
	    return {
	        get: function get() {
	            return $window.localStorage.getItem(TOKEN_NAME);
	        },
	        remove: function remove() {
	            console.log('in token service.remove');
	            $window.localStorage.removeItem(TOKEN_NAME);
	        },
	        set: function set(token) {
	            $window.localStorage.setItem(TOKEN_NAME, token);
	        }
	    };
	}

/***/ },
/* 39 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.default = userService;
	
	userService.$inject = ['$http', 'apiUrl'];
	
	function userService($http, apiUrl) {
	    return {
	        get: function get() {
	            return $http.get(apiUrl + '/users').then(function (res) {
	                return res.data;
	            });
	        },
	        getById: function getById(userId) {
	            console.log('in get by Id ,', apiUrl);
	            return $http.get(apiUrl + '/users/' + userId).then(function (res) {
	                return res.data;
	            });
	        },
	        getByName: function getByName(username) {
	            return $http.get(apiUrl + '/users/' + username).then(function (res) {
	                return res.data;
	            });
	        },
	        updateUser: function updateUser(user, course) {
	            return $http.put(apiUrl + '/users/' + user._id, course).then(function (res) {
	                return res.data;
	            });
	        },
	        checkCourseProgress: function checkCourseProgress(user, course) {
	            console.log('checking progress ', user, course);
	        },
	        updateCourseProgress: function updateCourseProgress(user, course) {
	            console.log('updating this user and course ', user, course);
	            var points = 0;
	            var total = 0;
	            user[course.name].forEach(function (unit) {
	                if (unit) {
	                    points += unit.correct;
	                    total += unit.total;
	                }
	                console.log('unit is ', unit);
	            });
	            var percentComplete = points / total * 100;
	            console.log('user has this many points', percentComplete);
	        }
	    };
	};

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * State-based routing for AngularJS
	 * @version v1.0.0-beta.3
	 * @link https://ui-router.github.io
	 * @license MIT License, http://www.opensource.org/licenses/MIT
	 */
	(function webpackUniversalModuleDefinition(root, factory) {
		if(true)
			module.exports = factory(__webpack_require__(1));
		else if(typeof define === 'function' && define.amd)
			define("angular-ui-router", ["angular"], factory);
		else if(typeof exports === 'object')
			exports["angular-ui-router"] = factory(require("angular"));
		else
			root["angular-ui-router"] = factory(root["angular"]);
	})(this, function(__WEBPACK_EXTERNAL_MODULE_57__) {
	return /******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	/******/
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	/******/
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId])
	/******/ 			return installedModules[moduleId].exports;
	/******/
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			exports: {},
	/******/ 			id: moduleId,
	/******/ 			loaded: false
	/******/ 		};
	/******/
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	/******/
	/******/ 		// Flag the module as loaded
	/******/ 		module.loaded = true;
	/******/
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	/******/
	/******/
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;
	/******/
	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;
	/******/
	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "";
	/******/
	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(0);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ function(module, exports, __webpack_require__) {
	
		/**
		 * Main entry point for angular 1.x build
		 * @module ng1
		 */
		/** for typedoc */
		"use strict";
		function __export(m) {
		    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
		}
		__export(__webpack_require__(1));
		__export(__webpack_require__(53));
		__export(__webpack_require__(55));
		__export(__webpack_require__(58));
		__webpack_require__(60);
		__webpack_require__(61);
		__webpack_require__(62);
		__webpack_require__(63);
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.default = "ui.router";
	
	
	/***/ },
	/* 1 */
	/***/ function(module, exports, __webpack_require__) {
	
		/** @module common */ /** */
		"use strict";
		function __export(m) {
		    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
		}
		__export(__webpack_require__(2));
		__export(__webpack_require__(46));
		__export(__webpack_require__(47));
		__export(__webpack_require__(48));
		__export(__webpack_require__(49));
		__export(__webpack_require__(50));
		__export(__webpack_require__(51));
		__export(__webpack_require__(52));
		__export(__webpack_require__(44));
		var router_1 = __webpack_require__(25);
		exports.UIRouter = router_1.UIRouter;
	
	
	/***/ },
	/* 2 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		function __export(m) {
		    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
		}
		/** @module common */ /** for typedoc */
		__export(__webpack_require__(3));
		__export(__webpack_require__(6));
		__export(__webpack_require__(7));
		__export(__webpack_require__(5));
		__export(__webpack_require__(4));
		__export(__webpack_require__(8));
		__export(__webpack_require__(9));
		__export(__webpack_require__(12));
	
	
	/***/ },
	/* 3 */
	/***/ function(module, exports, __webpack_require__) {
	
		/**
		 * Random utility functions used in the UI-Router code
		 *
		 * @preferred @module common
		 */ /** for typedoc */
		"use strict";
		var predicates_1 = __webpack_require__(4);
		var hof_1 = __webpack_require__(5);
		var coreservices_1 = __webpack_require__(6);
		var w = typeof window === 'undefined' ? {} : window;
		var angular = w.angular || {};
		exports.fromJson = angular.fromJson || JSON.parse.bind(JSON);
		exports.toJson = angular.toJson || JSON.stringify.bind(JSON);
		exports.copy = angular.copy || _copy;
		exports.forEach = angular.forEach || _forEach;
		exports.extend = angular.extend || _extend;
		exports.equals = angular.equals || _equals;
		exports.identity = function (x) { return x; };
		exports.noop = function () { return undefined; };
		/**
		 * Binds and copies functions onto an object
		 *
		 * Takes functions from the 'from' object, binds those functions to the _this object, and puts the bound functions
		 * on the 'to' object.
		 *
		 * This example creates an new class instance whose functions are prebound to the new'd object.
		 * @example
		 * ```
		 *
		 * class Foo {
		 *   constructor(data) {
		 *     // Binds all functions from Foo.prototype to 'this',
		 *     // then copies them to 'this'
		 *     bindFunctions(Foo.prototype, this, this);
		 *     this.data = data;
		 *   }
		 *
		 *   log() {
		 *     console.log(this.data);
		 *   }
		 * }
		 *
		 * let myFoo = new Foo([1,2,3]);
		 * var logit = myFoo.log;
		 * logit(); // logs [1, 2, 3] from the myFoo 'this' instance
		 * ```
		 *
		 * This example creates a bound version of a service function, and copies it to another object
		 * @example
		 * ```
		 *
		 * var SomeService = {
		 *   this.data = [3, 4, 5];
		 *   this.log = function() {
		 *     console.log(this.data);
		 *   }
		 * }
		 *
		 * // Constructor fn
		 * function OtherThing() {
		 *   // Binds all functions from SomeService to SomeService,
		 *   // then copies them to 'this'
		 *   bindFunctions(SomeService, this, SomeService);
		 * }
		 *
		 * let myOtherThing = new OtherThing();
		 * myOtherThing.log(); // logs [3, 4, 5] from SomeService's 'this'
		 * ```
		 *
		 * @param from The object which contains the functions to be bound
		 * @param to The object which will receive the bound functions
		 * @param bindTo The object which the functions will be bound to
		 * @param fnNames The function names which will be bound (Defaults to all the functions found on the 'from' object)
		 */
		function bindFunctions(from, to, bindTo, fnNames) {
		    if (fnNames === void 0) { fnNames = Object.keys(from); }
		    return fnNames.filter(function (name) { return typeof from[name] === 'function'; })
		        .forEach(function (name) { return to[name] = from[name].bind(bindTo); });
		}
		exports.bindFunctions = bindFunctions;
		/**
		 * prototypal inheritance helper.
		 * Creates a new object which has `parent` object as its prototype, and then copies the properties from `extra` onto it
		 */
		exports.inherit = function (parent, extra) {
		    return exports.extend(new (exports.extend(function () { }, { prototype: parent }))(), extra);
		};
		/**
		 * Given an arguments object, converts the arguments at index idx and above to an array.
		 * This is similar to es6 rest parameters.
		 *
		 * Optionally, the argument at index idx may itself already be an array.
		 *
		 * For example,
		 * given either:
		 *        arguments = [ obj, "foo", "bar" ]
		 * or:
		 *        arguments = [ obj, ["foo", "bar"] ]
		 * then:
		 *        restArgs(arguments, 1) == ["foo", "bar"]
		 *
		 * This allows functions like pick() to be implemented such that it allows either a bunch
		 * of string arguments (like es6 rest parameters), or a single array of strings:
		 *
		 * given:
		 *        var obj = { foo: 1, bar: 2, baz: 3 };
		 * then:
		 *        pick(obj, "foo", "bar");   // returns { foo: 1, bar: 2 }
		 *        pick(obj, ["foo", "bar"]); // returns { foo: 1, bar: 2 }
		 */
		var restArgs = function (args, idx) {
		    if (idx === void 0) { idx = 0; }
		    return Array.prototype.concat.apply(Array.prototype, Array.prototype.slice.call(args, idx));
		};
		/** Given an array, returns true if the object is found in the array, (using indexOf) */
		exports.inArray = function (array, obj) {
		    return array.indexOf(obj) !== -1;
		};
		/** Given an array, and an item, if the item is found in the array, it removes it (in-place).  The same array is returned */
		exports.removeFrom = hof_1.curry(function (array, obj) {
		    var idx = array.indexOf(obj);
		    if (idx >= 0)
		        array.splice(idx, 1);
		    return array;
		});
		/**
		 * Applies a set of defaults to an options object.  The options object is filtered
		 * to only those properties of the objects in the defaultsList.
		 * Earlier objects in the defaultsList take precedence when applying defaults.
		 */
		function defaults(opts) {
		    if (opts === void 0) { opts = {}; }
		    var defaultsList = [];
		    for (var _i = 1; _i < arguments.length; _i++) {
		        defaultsList[_i - 1] = arguments[_i];
		    }
		    var defaults = merge.apply(null, [{}].concat(defaultsList));
		    return exports.extend({}, defaults, pick(opts || {}, Object.keys(defaults)));
		}
		exports.defaults = defaults;
		/**
		 * Merges properties from the list of objects to the destination object.
		 * If a property already exists in the destination object, then it is not overwritten.
		 */
		function merge(dst) {
		    var objs = [];
		    for (var _i = 1; _i < arguments.length; _i++) {
		        objs[_i - 1] = arguments[_i];
		    }
		    exports.forEach(objs, function (obj) {
		        exports.forEach(obj, function (value, key) {
		            if (!dst.hasOwnProperty(key))
		                dst[key] = value;
		        });
		    });
		    return dst;
		}
		exports.merge = merge;
		/** Reduce function that merges each element of the list into a single object, using extend */
		exports.mergeR = function (memo, item) { return exports.extend(memo, item); };
		/**
		 * Finds the common ancestor path between two states.
		 *
		 * @param {Object} first The first state.
		 * @param {Object} second The second state.
		 * @return {Array} Returns an array of state names in descending order, not including the root.
		 */
		function ancestors(first, second) {
		    var path = [];
		    for (var n in first.path) {
		        if (first.path[n] !== second.path[n])
		            break;
		        path.push(first.path[n]);
		    }
		    return path;
		}
		exports.ancestors = ancestors;
		/**
		 * Performs a non-strict comparison of the subset of two objects, defined by a list of keys.
		 *
		 * @param {Object} a The first object.
		 * @param {Object} b The second object.
		 * @param {Array} keys The list of keys within each object to compare. If the list is empty or not specified,
		 *                     it defaults to the list of keys in `a`.
		 * @return {Boolean} Returns `true` if the keys match, otherwise `false`.
		 */
		function equalForKeys(a, b, keys) {
		    if (keys === void 0) { keys = Object.keys(a); }
		    for (var i = 0; i < keys.length; i++) {
		        var k = keys[i];
		        if (a[k] != b[k])
		            return false; // Not '===', values aren't necessarily normalized
		    }
		    return true;
		}
		exports.equalForKeys = equalForKeys;
		function pickOmitImpl(predicate, obj) {
		    var keys = [];
		    for (var _i = 2; _i < arguments.length; _i++) {
		        keys[_i - 2] = arguments[_i];
		    }
		    var objCopy = {};
		    for (var key in obj) {
		        if (predicate(keys, key))
		            objCopy[key] = obj[key];
		    }
		    return objCopy;
		}
		/** Return a copy of the object only containing the whitelisted properties. */
		function pick(obj) {
		    return pickOmitImpl.apply(null, [exports.inArray].concat(restArgs(arguments)));
		}
		exports.pick = pick;
		/** Return a copy of the object omitting the blacklisted properties. */
		function omit(obj) {
		    var notInArray = function (array, item) { return !exports.inArray(array, item); };
		    return pickOmitImpl.apply(null, [notInArray].concat(restArgs(arguments)));
		}
		exports.omit = omit;
		/**
		 * Maps an array, or object to a property (by name)
		 */
		function pluck(collection, propName) {
		    return map(collection, hof_1.prop(propName));
		}
		exports.pluck = pluck;
		/** Filters an Array or an Object's properties based on a predicate */
		function filter(collection, callback) {
		    var arr = predicates_1.isArray(collection), result = arr ? [] : {};
		    var accept = arr ? function (x) { return result.push(x); } : function (x, key) { return result[key] = x; };
		    exports.forEach(collection, function (item, i) {
		        if (callback(item, i))
		            accept(item, i);
		    });
		    return result;
		}
		exports.filter = filter;
		/** Finds an object from an array, or a property of an object, that matches a predicate */
		function find(collection, callback) {
		    var result;
		    exports.forEach(collection, function (item, i) {
		        if (result)
		            return;
		        if (callback(item, i))
		            result = item;
		    });
		    return result;
		}
		exports.find = find;
		/** Given an object, returns a new object, where each property is transformed by the callback function */
		exports.mapObj = map;
		/** Maps an array or object properties using a callback function */
		function map(collection, callback) {
		    var result = predicates_1.isArray(collection) ? [] : {};
		    exports.forEach(collection, function (item, i) { return result[i] = callback(item, i); });
		    return result;
		}
		exports.map = map;
		/**
		 * Given an object, return its enumerable property values
		 *
		 * @example
		 * ```
		 *
		 * let foo = { a: 1, b: 2, c: 3 }
		 * let vals = values(foo); // [ 1, 2, 3 ]
		 * ```
		 */
		exports.values = function (obj) {
		    return Object.keys(obj).map(function (key) { return obj[key]; });
		};
		/**
		 * Reduce function that returns true if all of the values are truthy.
		 *
		 * @example
		 * ```
		 *
		 * let vals = [ 1, true, {}, "hello world"];
		 * vals.reduce(allTrueR, true); // true
		 *
		 * vals.push(0);
		 * vals.reduce(allTrueR, true); // false
		 * ```
		 */
		exports.allTrueR = function (memo, elem) { return memo && elem; };
		/**
		 * Reduce function that returns true if any of the values are truthy.
		 *
		 *  * @example
		 * ```
		 *
		 * let vals = [ 0, null, undefined ];
		 * vals.reduce(anyTrueR, true); // false
		 *
		 * vals.push("hello world");
		 * vals.reduce(anyTrueR, true); // true
		 * ```
		 */
		exports.anyTrueR = function (memo, elem) { return memo || elem; };
		/**
		 * Reduce function which un-nests a single level of arrays
		 * @example
		 * ```
		 *
		 * let input = [ [ "a", "b" ], [ "c", "d" ], [ [ "double", "nested" ] ] ];
		 * input.reduce(unnestR, []) // [ "a", "b", "c", "d", [ "double, "nested" ] ]
		 * ```
		 */
		exports.unnestR = function (memo, elem) { return memo.concat(elem); };
		/**
		 * Reduce function which recursively un-nests all arrays
		 *
		 * @example
		 * ```
		 *
		 * let input = [ [ "a", "b" ], [ "c", "d" ], [ [ "double", "nested" ] ] ];
		 * input.reduce(unnestR, []) // [ "a", "b", "c", "d", "double, "nested" ]
		 * ```
		 */
		exports.flattenR = function (memo, elem) {
		    return predicates_1.isArray(elem) ? memo.concat(elem.reduce(exports.flattenR, [])) : pushR(memo, elem);
		};
		/**
		 * Reduce function that pushes an object to an array, then returns the array.
		 * Mostly just for [[flattenR]] and [[uniqR]]
		 */
		function pushR(arr, obj) {
		    arr.push(obj);
		    return arr;
		}
		exports.pushR = pushR;
		/** Reduce function that filters out duplicates */
		exports.uniqR = function (acc, token) {
		    return exports.inArray(acc, token) ? acc : pushR(acc, token);
		};
		/**
		 * Return a new array with a single level of arrays unnested.
		 *
		 * @example
		 * ```
		 *
		 * let input = [ [ "a", "b" ], [ "c", "d" ], [ [ "double", "nested" ] ] ];
		 * unnest(input) // [ "a", "b", "c", "d", [ "double, "nested" ] ]
		 * ```
		 */
		exports.unnest = function (arr) { return arr.reduce(exports.unnestR, []); };
		/**
		 * Return a completely flattened version of an array.
		 *
		 * @example
		 * ```
		 *
		 * let input = [ [ "a", "b" ], [ "c", "d" ], [ [ "double", "nested" ] ] ];
		 * flatten(input) // [ "a", "b", "c", "d", "double, "nested" ]
		 * ```
		 */
		exports.flatten = function (arr) { return arr.reduce(exports.flattenR, []); };
		/**
		 * Given a .filter Predicate, builds a .filter Predicate which throws an error if any elements do not pass.
		 * @example
		 * ```
		 *
		 * let isNumber = (obj) => typeof(obj) === 'number';
		 * let allNumbers = [ 1, 2, 3, 4, 5 ];
		 * allNumbers.filter(assertPredicate(isNumber)); //OK
		 *
		 * let oneString = [ 1, 2, 3, 4, "5" ];
		 * oneString.filter(assertPredicate(isNumber, "Not all numbers")); // throws Error(""Not all numbers"");
		 * ```
		 */
		function assertPredicate(predicate, errMsg) {
		    if (errMsg === void 0) { errMsg = "assert failure"; }
		    return function (obj) {
		        if (!predicate(obj)) {
		            throw new Error(predicates_1.isFunction(errMsg) ? errMsg(obj) : errMsg);
		        }
		        return true;
		    };
		}
		exports.assertPredicate = assertPredicate;
		/**
		 * Like _.pairs: Given an object, returns an array of key/value pairs
		 *
		 * @example
		 * ```
		 *
		 * pairs({ foo: "FOO", bar: "BAR }) // [ [ "foo", "FOO" ], [ "bar": "BAR" ] ]
		 * ```
		 */
		exports.pairs = function (obj) {
		    return Object.keys(obj).map(function (key) { return [key, obj[key]]; });
		};
		/**
		 * Given two or more parallel arrays, returns an array of tuples where
		 * each tuple is composed of [ a[i], b[i], ... z[i] ]
		 *
		 * @example
		 * ```
		 *
		 * let foo = [ 0, 2, 4, 6 ];
		 * let bar = [ 1, 3, 5, 7 ];
		 * let baz = [ 10, 30, 50, 70 ];
		 * arrayTuples(foo, bar);       // [ [0, 1], [2, 3], [4, 5], [6, 7] ]
		 * arrayTuples(foo, bar, baz);  // [ [0, 1, 10], [2, 3, 30], [4, 5, 50], [6, 7, 70] ]
		 * ```
		 */
		function arrayTuples() {
		    var arrayArgs = [];
		    for (var _i = 0; _i < arguments.length; _i++) {
		        arrayArgs[_i - 0] = arguments[_i];
		    }
		    if (arrayArgs.length === 0)
		        return [];
		    var length = arrayArgs.reduce(function (min, arr) { return Math.min(arr.length, min); }, 9007199254740991); // aka 2^53 − 1 aka Number.MAX_SAFE_INTEGER
		    return Array.apply(null, Array(length)).map(function (ignored, idx) { return arrayArgs.map(function (arr) { return arr[idx]; }); });
		}
		exports.arrayTuples = arrayTuples;
		/**
		 * Reduce function which builds an object from an array of [key, value] pairs.
		 *
		 * Each iteration sets the key/val pair on the memo object, then returns the memo for the next iteration.
		 *
		 * Each keyValueTuple should be an array with values [ key: string, value: any ]
		 *
		 * @example
		 * ```
		 *
		 * var pairs = [ ["fookey", "fooval"], ["barkey", "barval"] ]
		 *
		 * var pairsToObj = pairs.reduce((memo, pair) => applyPairs(memo, pair), {})
		 * // pairsToObj == { fookey: "fooval", barkey: "barval" }
		 *
		 * // Or, more simply:
		 * var pairsToObj = pairs.reduce(applyPairs, {})
		 * // pairsToObj == { fookey: "fooval", barkey: "barval" }
		 * ```
		 */
		function applyPairs(memo, keyValTuple) {
		    var key, value;
		    if (predicates_1.isArray(keyValTuple))
		        key = keyValTuple[0], value = keyValTuple[1];
		    if (!predicates_1.isString(key))
		        throw new Error("invalid parameters to applyPairs");
		    memo[key] = value;
		    return memo;
		}
		exports.applyPairs = applyPairs;
		/** Get the last element of an array */
		function tail(arr) {
		    return arr.length && arr[arr.length - 1] || undefined;
		}
		exports.tail = tail;
		/**
		 * shallow copy from src to dest
		 *
		 * note: This is a shallow copy, while angular.copy is a deep copy.
		 * ui-router uses `copy` only to make copies of state parameters.
		 */
		function _copy(src, dest) {
		    if (dest)
		        Object.keys(dest).forEach(function (key) { return delete dest[key]; });
		    if (!dest)
		        dest = {};
		    return exports.extend(dest, src);
		}
		/** Naive forEach implementation works with Objects or Arrays */
		function _forEach(obj, cb, _this) {
		    if (predicates_1.isArray(obj))
		        return obj.forEach(cb, _this);
		    Object.keys(obj).forEach(function (key) { return cb(obj[key], key); });
		}
		function _copyProps(to, from) {
		    Object.keys(from).forEach(function (key) { return to[key] = from[key]; });
		    return to;
		}
		function _extend(toObj) {
		    return restArgs(arguments, 1).filter(exports.identity).reduce(_copyProps, toObj);
		}
		function _equals(o1, o2) {
		    if (o1 === o2)
		        return true;
		    if (o1 === null || o2 === null)
		        return false;
		    if (o1 !== o1 && o2 !== o2)
		        return true; // NaN === NaN
		    var t1 = typeof o1, t2 = typeof o2;
		    if (t1 !== t2 || t1 !== 'object')
		        return false;
		    var tup = [o1, o2];
		    if (hof_1.all(predicates_1.isArray)(tup))
		        return _arraysEq(o1, o2);
		    if (hof_1.all(predicates_1.isDate)(tup))
		        return o1.getTime() === o2.getTime();
		    if (hof_1.all(predicates_1.isRegExp)(tup))
		        return o1.toString() === o2.toString();
		    if (hof_1.all(predicates_1.isFunction)(tup))
		        return true; // meh
		    var predicates = [predicates_1.isFunction, predicates_1.isArray, predicates_1.isDate, predicates_1.isRegExp];
		    if (predicates.map(hof_1.any).reduce(function (b, fn) { return b || !!fn(tup); }, false))
		        return false;
		    var key, keys = {};
		    for (key in o1) {
		        if (!_equals(o1[key], o2[key]))
		            return false;
		        keys[key] = true;
		    }
		    for (key in o2) {
		        if (!keys[key])
		            return false;
		    }
		    return true;
		}
		function _arraysEq(a1, a2) {
		    if (a1.length !== a2.length)
		        return false;
		    return arrayTuples(a1, a2).reduce(function (b, t) { return b && _equals(t[0], t[1]); }, true);
		}
		// issue #2676
		exports.silenceUncaughtInPromise = function (promise) {
		    return promise.catch(function (e) { return 0; }) && promise;
		};
		exports.silentRejection = function (error) {
		    return exports.silenceUncaughtInPromise(coreservices_1.services.$q.reject(error));
		};
	
	
	/***/ },
	/* 4 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		/** Predicates @module common_predicates */ /** */
		var hof_1 = __webpack_require__(5);
		var toStr = Object.prototype.toString;
		var tis = function (t) { return function (x) { return typeof (x) === t; }; };
		exports.isUndefined = tis('undefined');
		exports.isDefined = hof_1.not(exports.isUndefined);
		exports.isNull = function (o) { return o === null; };
		exports.isFunction = tis('function');
		exports.isNumber = tis('number');
		exports.isString = tis('string');
		exports.isObject = function (x) { return x !== null && typeof x === 'object'; };
		exports.isArray = Array.isArray;
		exports.isDate = (function (x) { return toStr.call(x) === '[object Date]'; });
		exports.isRegExp = (function (x) { return toStr.call(x) === '[object RegExp]'; });
		/**
		 * Predicate which checks if a value is injectable
		 *
		 * A value is "injectable" if it is a function, or if it is an ng1 array-notation-style array
		 * where all the elements in the array are Strings, except the last one, which is a Function
		 */
		function isInjectable(val) {
		    if (exports.isArray(val) && val.length) {
		        var head = val.slice(0, -1), tail = val.slice(-1);
		        return !(head.filter(hof_1.not(exports.isString)).length || tail.filter(hof_1.not(exports.isFunction)).length);
		    }
		    return exports.isFunction(val);
		}
		exports.isInjectable = isInjectable;
		/**
		 * Predicate which checks if a value looks like a Promise
		 *
		 * It is probably a Promise if it's an object, and it has a `then` property which is a Function
		 */
		exports.isPromise = hof_1.and(exports.isObject, hof_1.pipe(hof_1.prop('then'), exports.isFunction));
	
	
	/***/ },
	/* 5 */
	/***/ function(module, exports) {
	
		/**
		 * Higher order functions
		 *
		 * @module common_hof
		 */ /** */
		"use strict";
		/**
		 * Returns a new function for [Partial Application](https://en.wikipedia.org/wiki/Partial_application) of the original function.
		 *
		 * Given a function with N parameters, returns a new function that supports partial application.
		 * The new function accepts anywhere from 1 to N parameters.  When that function is called with M parameters,
		 * where M is less than N, it returns a new function that accepts the remaining parameters.  It continues to
		 * accept more parameters until all N parameters have been supplied.
		 *
		 *
		 * This contrived example uses a partially applied function as an predicate, which returns true
		 * if an object is found in both arrays.
		 * @example
		 * ```
		 * // returns true if an object is in both of the two arrays
		 * function inBoth(array1, array2, object) {
		 *   return array1.indexOf(object) !== -1 &&
		 *          array2.indexOf(object) !== 1;
		 * }
		 * let obj1, obj2, obj3, obj4, obj5, obj6, obj7
		 * let foos = [obj1, obj3]
		 * let bars = [obj3, obj4, obj5]
		 *
		 * // A curried "copy" of inBoth
		 * let curriedInBoth = curry(inBoth);
		 * // Partially apply both the array1 and array2
		 * let inFoosAndBars = curriedInBoth(foos, bars);
		 *
		 * // Supply the final argument; since all arguments are
		 * // supplied, the original inBoth function is then called.
		 * let obj1InBoth = inFoosAndBars(obj1); // false
		 *
		 * // Use the inFoosAndBars as a predicate.
		 * // Filter, on each iteration, supplies the final argument
		 * let allObjs = [ obj1, obj2, obj3, obj4, obj5, obj6, obj7 ];
		 * let foundInBoth = allObjs.filter(inFoosAndBars); // [ obj3 ]
		 *
		 * ```
		 *
		 * Stolen from: http://stackoverflow.com/questions/4394747/javascript-curry-function
		 *
		 * @param fn
		 * @returns {*|function(): (*|any)}
		 */
		function curry(fn) {
		    var initial_args = [].slice.apply(arguments, [1]);
		    var func_args_length = fn.length;
		    function curried(args) {
		        if (args.length >= func_args_length)
		            return fn.apply(null, args);
		        return function () {
		            return curried(args.concat([].slice.apply(arguments)));
		        };
		    }
		    return curried(initial_args);
		}
		exports.curry = curry;
		/**
		 * Given a varargs list of functions, returns a function that composes the argument functions, right-to-left
		 * given: f(x), g(x), h(x)
		 * let composed = compose(f,g,h)
		 * then, composed is: f(g(h(x)))
		 */
		function compose() {
		    var args = arguments;
		    var start = args.length - 1;
		    return function () {
		        var i = start, result = args[start].apply(this, arguments);
		        while (i--)
		            result = args[i].call(this, result);
		        return result;
		    };
		}
		exports.compose = compose;
		/**
		 * Given a varargs list of functions, returns a function that is composes the argument functions, left-to-right
		 * given: f(x), g(x), h(x)
		 * let piped = pipe(f,g,h);
		 * then, piped is: h(g(f(x)))
		 */
		function pipe() {
		    var funcs = [];
		    for (var _i = 0; _i < arguments.length; _i++) {
		        funcs[_i - 0] = arguments[_i];
		    }
		    return compose.apply(null, [].slice.call(arguments).reverse());
		}
		exports.pipe = pipe;
		/**
		 * Given a property name, returns a function that returns that property from an object
		 * let obj = { foo: 1, name: "blarg" };
		 * let getName = prop("name");
		 * getName(obj) === "blarg"
		 */
		exports.prop = function (name) {
		    return function (obj) { return obj && obj[name]; };
		};
		/**
		 * Given a property name and a value, returns a function that returns a boolean based on whether
		 * the passed object has a property that matches the value
		 * let obj = { foo: 1, name: "blarg" };
		 * let getName = propEq("name", "blarg");
		 * getName(obj) === true
		 */
		exports.propEq = curry(function (name, val, obj) { return obj && obj[name] === val; });
		/**
		 * Given a dotted property name, returns a function that returns a nested property from an object, or undefined
		 * let obj = { id: 1, nestedObj: { foo: 1, name: "blarg" }, };
		 * let getName = prop("nestedObj.name");
		 * getName(obj) === "blarg"
		 * let propNotFound = prop("this.property.doesnt.exist");
		 * propNotFound(obj) === undefined
		 */
		exports.parse = function (name) {
		    return pipe.apply(null, name.split(".").map(exports.prop));
		};
		/**
		 * Given a function that returns a truthy or falsey value, returns a
		 * function that returns the opposite (falsey or truthy) value given the same inputs
		 */
		exports.not = function (fn) {
		    return function () {
		        var args = [];
		        for (var _i = 0; _i < arguments.length; _i++) {
		            args[_i - 0] = arguments[_i];
		        }
		        return !fn.apply(null, args);
		    };
		};
		/**
		 * Given two functions that return truthy or falsey values, returns a function that returns truthy
		 * if both functions return truthy for the given arguments
		 */
		function and(fn1, fn2) {
		    return function () {
		        var args = [];
		        for (var _i = 0; _i < arguments.length; _i++) {
		            args[_i - 0] = arguments[_i];
		        }
		        return fn1.apply(null, args) && fn2.apply(null, args);
		    };
		}
		exports.and = and;
		/**
		 * Given two functions that return truthy or falsey values, returns a function that returns truthy
		 * if at least one of the functions returns truthy for the given arguments
		 */
		function or(fn1, fn2) {
		    return function () {
		        var args = [];
		        for (var _i = 0; _i < arguments.length; _i++) {
		            args[_i - 0] = arguments[_i];
		        }
		        return fn1.apply(null, args) || fn2.apply(null, args);
		    };
		}
		exports.or = or;
		/**
		 * Check if all the elements of an array match a predicate function
		 *
		 * @param fn1 a predicate function `fn1`
		 * @returns a function which takes an array and returns true if `fn1` is true for all elements of the array
		 */
		exports.all = function (fn1) {
		    return function (arr) { return arr.reduce(function (b, x) { return b && !!fn1(x); }, true); };
		};
		exports.any = function (fn1) {
		    return function (arr) { return arr.reduce(function (b, x) { return b || !!fn1(x); }, false); };
		};
		/** Given a class, returns a Predicate function that returns true if the object is of that class */
		exports.is = function (ctor) { return function (obj) {
		    return (obj != null && obj.constructor === ctor || obj instanceof ctor);
		}; };
		/** Given a value, returns a Predicate function that returns true if another value is === equal to the original value */
		exports.eq = function (val) { return function (other) {
		    return val === other;
		}; };
		/** Given a value, returns a function which returns the value */
		exports.val = function (v) { return function () { return v; }; };
		function invoke(fnName, args) {
		    return function (obj) {
		        return obj[fnName].apply(obj, args);
		    };
		}
		exports.invoke = invoke;
		/**
		 * Sorta like Pattern Matching (a functional programming conditional construct)
		 *
		 * See http://c2.com/cgi/wiki?PatternMatching
		 *
		 * This is a conditional construct which allows a series of predicates and output functions
		 * to be checked and then applied.  Each predicate receives the input.  If the predicate
		 * returns truthy, then its matching output function (mapping function) is provided with
		 * the input and, then the result is returned.
		 *
		 * Each combination (2-tuple) of predicate + output function should be placed in an array
		 * of size 2: [ predicate, mapFn ]
		 *
		 * These 2-tuples should be put in an outer array.
		 *
		 * @example
		 * ```
		 *
		 * // Here's a 2-tuple where the first element is the isString predicate
		 * // and the second element is a function that returns a description of the input
		 * let firstTuple = [ angular.isString, (input) => `Heres your string ${input}` ];
		 *
		 * // Second tuple: predicate "isNumber", mapfn returns a description
		 * let secondTuple = [ angular.isNumber, (input) => `(${input}) That's a number!` ];
		 *
		 * let third = [ (input) => input === null,  (input) => `Oh, null...` ];
		 *
		 * let fourth = [ (input) => input === undefined,  (input) => `notdefined` ];
		 *
		 * let descriptionOf = pattern([ firstTuple, secondTuple, third, fourth ]);
		 *
		 * console.log(descriptionOf(undefined)); // 'notdefined'
		 * console.log(descriptionOf(55)); // '(55) That's a number!'
		 * console.log(descriptionOf("foo")); // 'Here's your string foo'
		 * ```
		 *
		 * @param struct A 2D array.  Each element of the array should be an array, a 2-tuple,
		 * with a Predicate and a mapping/output function
		 * @returns {function(any): *}
		 */
		function pattern(struct) {
		    return function (x) {
		        for (var i = 0; i < struct.length; i++) {
		            if (struct[i][0](x))
		                return struct[i][1](x);
		        }
		    };
		}
		exports.pattern = pattern;
	
	
	/***/ },
	/* 6 */
	/***/ function(module, exports) {
	
		"use strict";
		var notImplemented = function (fnname) { return function () {
		    throw new Error(fnname + "(): No coreservices implementation for UI-Router is loaded. You should include one of: ['angular1.js']");
		}; };
		var services = {
		    $q: undefined,
		    $injector: undefined,
		    location: {},
		    locationConfig: {},
		    template: {}
		};
		exports.services = services;
		["setUrl", "path", "search", "hash", "onChange"]
		    .forEach(function (key) { return services.location[key] = notImplemented(key); });
		["port", "protocol", "host", "baseHref", "html5Mode", "hashPrefix"]
		    .forEach(function (key) { return services.locationConfig[key] = notImplemented(key); });
	
	
	/***/ },
	/* 7 */
	/***/ function(module, exports) {
	
		"use strict";
		/** @module common */
		/**
		 * Matches state names using glob-like pattern strings.
		 *
		 * Globs can be used in specific APIs including:
		 *
		 * - [[StateService.is]]
		 * - [[StateService.includes]]
		 * - [[HookMatchCriteria.to]]
		 * - [[HookMatchCriteria.from]]
		 * - [[HookMatchCriteria.exiting]]
		 * - [[HookMatchCriteria.retained]]
		 * - [[HookMatchCriteria.entering]]
		 *
		 * A `Glob` string is a pattern which matches state names.
		 * Nested state names are split into segments (separated by a dot) when processing.
		 * The state named `foo.bar.baz` is split into three segments ['foo', 'bar', 'baz']
		 *
		 * Globs work according to the following rules:
		 *
		 * ### Exact match:
		 *
		 * The glob `'A.B'` matches the state named exactly `'A.B'`.
		 *
		 * | Glob        |Matches states named|Does not match state named|
		 * |:------------|:--------------------|:---------------------|
		 * | `'A'`       | `'A'`               | `'B'` , `'A.C'`      |
		 * | `'A.B'`     | `'A.B'`             | `'A'` , `'A.B.C'`    |
		 * | `'foo'`     | `'foo'`             | `'FOO'` , `'foo.bar'`|
		 *
		 * ### Single star (`*`)
		 *
		 * A single star (`*`) is a wildcard that matches exactly one segment.
		 *
		 * | Glob        |Matches states named  |Does not match state named |
		 * |:------------|:---------------------|:--------------------------|
		 * | `'*'`       | `'A'` , `'Z'`        | `'A.B'` , `'Z.Y.X'`       |
		 * | `'A.*'`     | `'A.B'` , `'A.C'`    | `'A'` , `'A.B.C'`         |
		 * | `'A.*.*'`   | `'A.B.C'` , `'A.X.Y'`| `'A'`, `'A.B'` , `'Z.Y.X'`|
		 *
		 * ### Double star (`**`)
		 *
		 * A double star (`'**'`) is a wildcard that matches *zero or more segments*
		 *
		 * | Glob        |Matches states named                           |Does not match state named         |
		 * |:------------|:----------------------------------------------|:----------------------------------|
		 * | `'**'`      | `'A'` , `'A.B'`, `'Z.Y.X'`                    | (matches all states)              |
		 * | `'A.**'`    | `'A'` , `'A.B'` , `'A.C.X'`                   | `'Z.Y.X'`                         |
		 * | `'**.X'`    | `'X'` , `'A.X'` , `'Z.Y.X'`                   | `'A'` , `'A.login.Z'`             |
		 * | `'A.**.X'`  | `'A.X'` , `'A.B.X'` , `'A.B.C.X'`             | `'A'` , `'A.B.C'`                 |
		 *
		 */
		var Glob = (function () {
		    function Glob(text) {
		        this.text = text;
		        this.glob = text.split('.');
		        var regexpString = this.text.split('.')
		            .map(function (seg) {
		            if (seg === '**')
		                return '(?:|(?:\\.[^.]*)*)';
		            if (seg === '*')
		                return '\\.[^.]*';
		            return '\\.' + seg;
		        }).join('');
		        this.regexp = new RegExp("^" + regexpString + "$");
		    }
		    Glob.prototype.matches = function (name) {
		        return this.regexp.test('.' + name);
		    };
		    /** @deprecated whats the point? */
		    Glob.is = function (text) {
		        return text.indexOf('*') > -1;
		    };
		    /** @deprecated whats the point? */
		    Glob.fromString = function (text) {
		        if (!this.is(text))
		            return null;
		        return new Glob(text);
		    };
		    return Glob;
		}());
		exports.Glob = Glob;
	
	
	/***/ },
	/* 8 */
	/***/ function(module, exports) {
	
		/** @module common */ /** for typedoc */
		"use strict";
		var Queue = (function () {
		    function Queue(_items, _limit) {
		        if (_items === void 0) { _items = []; }
		        if (_limit === void 0) { _limit = null; }
		        this._items = _items;
		        this._limit = _limit;
		    }
		    Queue.prototype.enqueue = function (item) {
		        var items = this._items;
		        items.push(item);
		        if (this._limit && items.length > this._limit)
		            items.shift();
		        return item;
		    };
		    Queue.prototype.dequeue = function () {
		        if (this.size())
		            return this._items.splice(0, 1)[0];
		    };
		    Queue.prototype.clear = function () {
		        var current = this._items;
		        this._items = [];
		        return current;
		    };
		    Queue.prototype.size = function () {
		        return this._items.length;
		    };
		    Queue.prototype.remove = function (item) {
		        var idx = this._items.indexOf(item);
		        return idx > -1 && this._items.splice(idx, 1)[0];
		    };
		    Queue.prototype.peekTail = function () {
		        return this._items[this._items.length - 1];
		    };
		    Queue.prototype.peekHead = function () {
		        if (this.size())
		            return this._items[0];
		    };
		    return Queue;
		}());
		exports.Queue = Queue;
	
	
	/***/ },
	/* 9 */
	/***/ function(module, exports, __webpack_require__) {
	
		/** @module common_strings */ /** */
		"use strict";
		var predicates_1 = __webpack_require__(4);
		var rejectFactory_1 = __webpack_require__(10);
		var common_1 = __webpack_require__(3);
		var hof_1 = __webpack_require__(5);
		var transition_1 = __webpack_require__(11);
		var resolvable_1 = __webpack_require__(19);
		/**
		 * Returns a string shortened to a maximum length
		 *
		 * If the string is already less than the `max` length, return the string.
		 * Else return the string, shortened to `max - 3` and append three dots ("...").
		 *
		 * @param max the maximum length of the string to return
		 * @param str the input string
		 */
		function maxLength(max, str) {
		    if (str.length <= max)
		        return str;
		    return str.substr(0, max - 3) + "...";
		}
		exports.maxLength = maxLength;
		/**
		 * Returns a string, with spaces added to the end, up to a desired str length
		 *
		 * If the string is already longer than the desired length, return the string.
		 * Else returns the string, with extra spaces on the end, such that it reaches `length` characters.
		 *
		 * @param length the desired length of the string to return
		 * @param str the input string
		 */
		function padString(length, str) {
		    while (str.length < length)
		        str += " ";
		    return str;
		}
		exports.padString = padString;
		function kebobString(camelCase) {
		    return camelCase
		        .replace(/^([A-Z])/, function ($1) { return $1.toLowerCase(); }) // replace first char
		        .replace(/([A-Z])/g, function ($1) { return "-" + $1.toLowerCase(); }); // replace rest
		}
		exports.kebobString = kebobString;
		function _toJson(obj) {
		    return JSON.stringify(obj);
		}
		function _fromJson(json) {
		    return predicates_1.isString(json) ? JSON.parse(json) : json;
		}
		function promiseToString(p) {
		    return "Promise(" + JSON.stringify(p) + ")";
		}
		function functionToString(fn) {
		    var fnStr = fnToString(fn);
		    var namedFunctionMatch = fnStr.match(/^(function [^ ]+\([^)]*\))/);
		    var toStr = namedFunctionMatch ? namedFunctionMatch[1] : fnStr;
		    var fnName = fn['name'] || "";
		    if (fnName && toStr.match(/function \(/)) {
		        return 'function ' + fnName + toStr.substr(9);
		    }
		    return toStr;
		}
		exports.functionToString = functionToString;
		function fnToString(fn) {
		    var _fn = predicates_1.isArray(fn) ? fn.slice(-1)[0] : fn;
		    return _fn && _fn.toString() || "undefined";
		}
		exports.fnToString = fnToString;
		var stringifyPatternFn = null;
		var stringifyPattern = function (value) {
		    var isTransitionRejectionPromise = rejectFactory_1.Rejection.isTransitionRejectionPromise;
		    stringifyPatternFn = stringifyPatternFn || hof_1.pattern([
		        [hof_1.not(predicates_1.isDefined), hof_1.val("undefined")],
		        [predicates_1.isNull, hof_1.val("null")],
		        [predicates_1.isPromise, hof_1.val("[Promise]")],
		        [isTransitionRejectionPromise, function (x) { return x._transitionRejection.toString(); }],
		        [hof_1.is(rejectFactory_1.Rejection), hof_1.invoke("toString")],
		        [hof_1.is(transition_1.Transition), hof_1.invoke("toString")],
		        [hof_1.is(resolvable_1.Resolvable), hof_1.invoke("toString")],
		        [predicates_1.isInjectable, functionToString],
		        [hof_1.val(true), common_1.identity]
		    ]);
		    return stringifyPatternFn(value);
		};
		function stringify(o) {
		    var seen = [];
		    function format(val) {
		        if (predicates_1.isObject(val)) {
		            if (seen.indexOf(val) !== -1)
		                return '[circular ref]';
		            seen.push(val);
		        }
		        return stringifyPattern(val);
		    }
		    return JSON.stringify(o, function (key, val) { return format(val); }).replace(/\\"/g, '"');
		}
		exports.stringify = stringify;
		/** Returns a function that splits a string on a character or substring */
		exports.beforeAfterSubstr = function (char) { return function (str) {
		    if (!str)
		        return ["", ""];
		    var idx = str.indexOf(char);
		    if (idx === -1)
		        return [str, ""];
		    return [str.substr(0, idx), str.substr(idx + 1)];
		}; };
	
	
	/***/ },
	/* 10 */
	/***/ function(module, exports, __webpack_require__) {
	
		/** @module transition */ /** for typedoc */
		"use strict";
		var common_1 = __webpack_require__(3);
		var strings_1 = __webpack_require__(9);
		(function (RejectType) {
		    RejectType[RejectType["SUPERSEDED"] = 2] = "SUPERSEDED";
		    RejectType[RejectType["ABORTED"] = 3] = "ABORTED";
		    RejectType[RejectType["INVALID"] = 4] = "INVALID";
		    RejectType[RejectType["IGNORED"] = 5] = "IGNORED";
		    RejectType[RejectType["ERROR"] = 6] = "ERROR";
		})(exports.RejectType || (exports.RejectType = {}));
		var RejectType = exports.RejectType;
		var Rejection = (function () {
		    function Rejection(type, message, detail) {
		        this.type = type;
		        this.message = message;
		        this.detail = detail;
		    }
		    Rejection.prototype.toString = function () {
		        var detailString = function (d) {
		            return d && d.toString !== Object.prototype.toString ? d.toString() : strings_1.stringify(d);
		        };
		        var type = this.type, message = this.message, detail = detailString(this.detail);
		        return "TransitionRejection(type: " + type + ", message: " + message + ", detail: " + detail + ")";
		    };
		    Rejection.prototype.toPromise = function () {
		        return common_1.extend(common_1.silentRejection(this), { _transitionRejection: this });
		    };
		    /** Returns true if the obj is a rejected promise created from the `asPromise` factory */
		    Rejection.isTransitionRejectionPromise = function (obj) {
		        return obj && (typeof obj.then === 'function') && obj._transitionRejection instanceof Rejection;
		    };
		    /** Returns a TransitionRejection due to transition superseded */
		    Rejection.superseded = function (detail, options) {
		        var message = "The transition has been superseded by a different transition";
		        var rejection = new Rejection(RejectType.SUPERSEDED, message, detail);
		        if (options && options.redirected) {
		            rejection.redirected = true;
		        }
		        return rejection;
		    };
		    /** Returns a TransitionRejection due to redirected transition */
		    Rejection.redirected = function (detail) {
		        return Rejection.superseded(detail, { redirected: true });
		    };
		    /** Returns a TransitionRejection due to invalid transition */
		    Rejection.invalid = function (detail) {
		        var message = "This transition is invalid";
		        return new Rejection(RejectType.INVALID, message, detail);
		    };
		    /** Returns a TransitionRejection due to ignored transition */
		    Rejection.ignored = function (detail) {
		        var message = "The transition was ignored";
		        return new Rejection(RejectType.IGNORED, message, detail);
		    };
		    /** Returns a TransitionRejection due to aborted transition */
		    Rejection.aborted = function (detail) {
		        // TODO think about how to encapsulate an Error() object
		        var message = "The transition has been aborted";
		        return new Rejection(RejectType.ABORTED, message, detail);
		    };
		    /** Returns a TransitionRejection due to aborted transition */
		    Rejection.errored = function (detail) {
		        // TODO think about how to encapsulate an Error() object
		        var message = "The transition errored";
		        return new Rejection(RejectType.ERROR, message, detail);
		    };
		    return Rejection;
		}());
		exports.Rejection = Rejection;
	
	
	/***/ },
	/* 11 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		/** @module transition */ /** for typedoc */
		var strings_1 = __webpack_require__(9);
		var trace_1 = __webpack_require__(12);
		var coreservices_1 = __webpack_require__(6);
		var common_1 = __webpack_require__(3);
		var predicates_1 = __webpack_require__(4);
		var hof_1 = __webpack_require__(5);
		var transitionHook_1 = __webpack_require__(13);
		var hookRegistry_1 = __webpack_require__(15);
		var hookBuilder_1 = __webpack_require__(16);
		var node_1 = __webpack_require__(21);
		var pathFactory_1 = __webpack_require__(20);
		var targetState_1 = __webpack_require__(14);
		var param_1 = __webpack_require__(22);
		var resolvable_1 = __webpack_require__(19);
		var rejectFactory_1 = __webpack_require__(10);
		var resolveContext_1 = __webpack_require__(17);
		var router_1 = __webpack_require__(25);
		var transitionCount = 0;
		var stateSelf = hof_1.prop("self");
		/**
		 * Represents a transition between two states.
		 *
		 * When navigating to a state, we are transitioning **from** the current state **to** the new state.
		 *
		 * This object contains all contextual information about the to/from states, parameters, resolves.
		 * It has information about all states being entered and exited as a result of the transition.
		 */
		var Transition = (function () {
		    /**
		     * Creates a new Transition object.
		     *
		     * If the target state is not valid, an error is thrown.
		     *
		     * @param fromPath The path of [[PathNode]]s from which the transition is leaving.  The last node in the `fromPath`
		     *        encapsulates the "from state".
		     * @param targetState The target state and parameters being transitioned to (also, the transition options)
		     * @param router The [[UIRouter]] instance
		     */
		    function Transition(fromPath, targetState, router) {
		        var _this = this;
		        /** @hidden */
		        this._deferred = coreservices_1.services.$q.defer();
		        /**
		         * This promise is resolved or rejected based on the outcome of the Transition.
		         *
		         * When the transition is successful, the promise is resolved
		         * When the transition is unsuccessful, the promise is rejected with the [[TransitionRejection]] or javascript error
		         */
		        this.promise = this._deferred.promise;
		        this.treeChanges = function () { return _this._treeChanges; };
		        this.isActive = function () { return _this === _this._options.current(); };
		        this.router = router;
		        this._targetState = targetState;
		        if (!targetState.valid()) {
		            throw new Error(targetState.error());
		        }
		        // Makes the Transition instance a hook registry (onStart, etc)
		        hookRegistry_1.HookRegistry.mixin(new hookRegistry_1.HookRegistry(), this);
		        // current() is assumed to come from targetState.options, but provide a naive implementation otherwise.
		        this._options = common_1.extend({ current: hof_1.val(this) }, targetState.options());
		        this.$id = transitionCount++;
		        var toPath = pathFactory_1.PathFactory.buildToPath(fromPath, targetState);
		        this._treeChanges = pathFactory_1.PathFactory.treeChanges(fromPath, toPath, this._options.reloadState);
		        var enteringStates = this._treeChanges.entering.map(function (node) { return node.state; });
		        pathFactory_1.PathFactory.applyViewConfigs(router.transitionService.$view, this._treeChanges.to, enteringStates);
		        var rootResolvables = [
		            new resolvable_1.Resolvable(router_1.UIRouter, function () { return router; }, [], undefined, router),
		            new resolvable_1.Resolvable(Transition, function () { return _this; }, [], undefined, this),
		            new resolvable_1.Resolvable('$transition$', function () { return _this; }, [], undefined, this),
		            new resolvable_1.Resolvable('$stateParams', function () { return _this.params(); }, [], undefined, this.params())
		        ];
		        var rootNode = this._treeChanges.to[0];
		        var context = new resolveContext_1.ResolveContext(this._treeChanges.to);
		        context.addResolvables(rootResolvables, rootNode.state);
		    }
		    /** @inheritdoc */
		    Transition.prototype.onBefore = function (matchCriteria, callback, options) { throw ""; };
		    ;
		    /** @inheritdoc */
		    Transition.prototype.onStart = function (matchCriteria, callback, options) { throw ""; };
		    ;
		    /** @inheritdoc */
		    Transition.prototype.onExit = function (matchCriteria, callback, options) { throw ""; };
		    ;
		    /** @inheritdoc */
		    Transition.prototype.onRetain = function (matchCriteria, callback, options) { throw ""; };
		    ;
		    /** @inheritdoc */
		    Transition.prototype.onEnter = function (matchCriteria, callback, options) { throw ""; };
		    ;
		    /** @inheritdoc */
		    Transition.prototype.onFinish = function (matchCriteria, callback, options) { throw ""; };
		    ;
		    /** @inheritdoc */
		    Transition.prototype.onSuccess = function (matchCriteria, callback, options) { throw ""; };
		    ;
		    /** @inheritdoc */
		    Transition.prototype.onError = function (matchCriteria, callback, options) { throw ""; };
		    ;
		    Transition.prototype.$from = function () {
		        return common_1.tail(this._treeChanges.from).state;
		    };
		    Transition.prototype.$to = function () {
		        return common_1.tail(this._treeChanges.to).state;
		    };
		    /**
		     * Returns the "from state"
		     *
		     * @returns The state object for the Transition's "from state".
		     */
		    Transition.prototype.from = function () {
		        return this.$from().self;
		    };
		    /**
		     * Returns the "to state"
		     *
		     * @returns The state object for the Transition's target state ("to state").
		     */
		    Transition.prototype.to = function () {
		        return this.$to().self;
		    };
		    /**
		     * Gets the Target State
		     *
		     * A transition's [[TargetState]] encapsulates the [[to]] state, the [[params]], and the [[options]].
		     *
		     * @returns the [[TargetState]] of this Transition
		     */
		    Transition.prototype.targetState = function () {
		        return this._targetState;
		    };
		    /**
		     * Determines whether two transitions are equivalent.
		     */
		    Transition.prototype.is = function (compare) {
		        if (compare instanceof Transition) {
		            // TODO: Also compare parameters
		            return this.is({ to: compare.$to().name, from: compare.$from().name });
		        }
		        return !((compare.to && !hookRegistry_1.matchState(this.$to(), compare.to)) ||
		            (compare.from && !hookRegistry_1.matchState(this.$from(), compare.from)));
		    };
		    /**
		     * Gets transition parameter values
		     *
		     * @param pathname Pick which treeChanges path to get parameters for:
		     *   (`'to'`, `'from'`, `'entering'`, `'exiting'`, `'retained'`)
		     * @returns transition parameter values for the desired path.
		     */
		    Transition.prototype.params = function (pathname) {
		        if (pathname === void 0) { pathname = "to"; }
		        return this._treeChanges[pathname].map(hof_1.prop("paramValues")).reduce(common_1.mergeR, {});
		    };
		    /**
		     * Creates a [[UIInjector]] Dependency Injector
		     *
		     * Returns a Dependency Injector for the Transition's target state (to state).
		     * The injector provides resolve values which the target state has access to.
		     *
		     * The `UIInjector` can also provide values from the native root/global injector (ng1/ng2).
		     *
		     * If a `state` is provided, the injector that is returned will be limited to resolve values that the provided state has access to.
		     *
		     * @param state Limits the resolves provided to only the resolves the provided state has access to.
		     * @returns a [[UIInjector]]
		     */
		    Transition.prototype.injector = function (state) {
		        var path = this.treeChanges().to;
		        if (state)
		            path = pathFactory_1.PathFactory.subPath(path, function (node) { return node.state === state || node.state.name === state; });
		        return new resolveContext_1.ResolveContext(path).injector();
		    };
		    /**
		     * Gets all available resolve tokens (keys)
		     *
		     * This method can be used in conjunction with [[getResolve]] to inspect the resolve values
		     * available to the Transition.
		     *
		     * The returned tokens include those defined on [[StateDeclaration.resolve]] blocks, for the states
		     * in the Transition's [[TreeChanges.to]] path.
		     *
		     * @returns an array of resolve tokens (keys)
		     */
		    Transition.prototype.getResolveTokens = function () {
		        return new resolveContext_1.ResolveContext(this._treeChanges.to).getTokens();
		    };
		    /**
		     * Gets resolved values
		     *
		     * This method can be used in conjunction with [[getResolveTokens]] to inspect what resolve values
		     * are available to the Transition.
		     *
		     * Given a token, returns the resolved data for that token.
		     * Given an array of tokens, returns an array of resolved data for those tokens.
		     *
		     * If a resolvable hasn't yet been fetched, returns `undefined` for that token
		     * If a resolvable doesn't exist for the token, throws an error.
		     *
		     * @param token the token (or array of tokens)
		     *
		     * @returns an array of resolve tokens (keys)
		     */
		    Transition.prototype.getResolveValue = function (token) {
		        var resolveContext = new resolveContext_1.ResolveContext(this._treeChanges.to);
		        var getData = function (token) {
		            var resolvable = resolveContext.getResolvable(token);
		            if (resolvable === undefined) {
		                throw new Error("Dependency Injection token not found: " + strings_1.stringify(token));
		            }
		            return resolvable.data;
		        };
		        if (predicates_1.isArray(token)) {
		            return token.map(getData);
		        }
		        return getData(token);
		    };
		    /**
		     * Gets a [[Resolvable]] primitive
		     *
		     * This is a lower level API that returns a [[Resolvable]] from the Transition for a given token.
		     *
		     * @param token the DI token
		     *
		     * @returns the [[Resolvable]] in the transition's to path, or undefined
		     */
		    Transition.prototype.getResolvable = function (token) {
		        return new resolveContext_1.ResolveContext(this._treeChanges.to).getResolvable(token);
		    };
		    /**
		     * Dynamically adds a new [[Resolvable]] (`resolve`) to this transition.
		     *
		     * @param resolvable an [[Resolvable]] object
		     * @param state the state in the "to path" which should receive the new resolve (otherwise, the root state)
		     */
		    Transition.prototype.addResolvable = function (resolvable, state) {
		        if (state === void 0) { state = ""; }
		        var stateName = (typeof state === "string") ? state : state.name;
		        var topath = this._treeChanges.to;
		        var targetNode = common_1.find(topath, function (node) { return node.state.name === stateName; });
		        var resolveContext = new resolveContext_1.ResolveContext(topath);
		        resolveContext.addResolvables([resolvable], targetNode.state);
		    };
		    /**
		     * If the current transition is a redirect, returns the transition that was redirected.
		     *
		     * Gets the transition from which this transition was redirected.
		     *
		     *
		     * @example
		     * ```js
		     *
		     * let transitionA = $state.go('A').transitionA
		     * transitionA.onStart({}, () => $state.target('B'));
		     * $transitions.onSuccess({ to: 'B' }, (trans) => {
		     *   trans.to().name === 'B'; // true
		     *   trans.redirectedFrom() === transitionA; // true
		     * });
		     * ```
		     *
		     * @returns The previous Transition, or null if this Transition is not the result of a redirection
		     */
		    Transition.prototype.redirectedFrom = function () {
		        return this._options.redirectedFrom || null;
		    };
		    /**
		     * Get the transition options
		     *
		     * @returns the options for this Transition.
		     */
		    Transition.prototype.options = function () {
		        return this._options;
		    };
		    /**
		     * Gets the states being entered.
		     *
		     * @returns an array of states that will be entered during this transition.
		     */
		    Transition.prototype.entering = function () {
		        return common_1.map(this._treeChanges.entering, hof_1.prop('state')).map(stateSelf);
		    };
		    /**
		     * Gets the states being exited.
		     *
		     * @returns an array of states that will be exited during this transition.
		     */
		    Transition.prototype.exiting = function () {
		        return common_1.map(this._treeChanges.exiting, hof_1.prop('state')).map(stateSelf).reverse();
		    };
		    /**
		     * Gets the states being retained.
		     *
		     * @returns an array of states that are already entered from a previous Transition, that will not be
		     *    exited during this Transition
		     */
		    Transition.prototype.retained = function () {
		        return common_1.map(this._treeChanges.retained, hof_1.prop('state')).map(stateSelf);
		    };
		    /**
		     * Get the [[ViewConfig]]s associated with this Transition
		     *
		     * Each state can define one or more views (template/controller), which are encapsulated as `ViewConfig` objects.
		     * This method fetches the `ViewConfigs` for a given path in the Transition (e.g., "to" or "entering").
		     *
		     * @param pathname the name of the path to fetch views for:
		     *   (`'to'`, `'from'`, `'entering'`, `'exiting'`, `'retained'`)
		     * @param state If provided, only returns the `ViewConfig`s for a single state in the path
		     *
		     * @returns a list of ViewConfig objects for the given path.
		     */
		    Transition.prototype.views = function (pathname, state) {
		        if (pathname === void 0) { pathname = "entering"; }
		        var path = this._treeChanges[pathname];
		        path = !state ? path : path.filter(hof_1.propEq('state', state));
		        return path.map(hof_1.prop("views")).filter(common_1.identity).reduce(common_1.unnestR, []);
		    };
		    /**
		     * Creates a new transition that is a redirection of the current one.
		     *
		     * This transition can be returned from a [[TransitionService]] hook to
		     * redirect a transition to a new state and/or set of parameters.
		     *
		     * @returns Returns a new [[Transition]] instance.
		     */
		    Transition.prototype.redirect = function (targetState) {
		        var newOptions = common_1.extend({}, this.options(), targetState.options(), { redirectedFrom: this, source: "redirect" });
		        targetState = new targetState_1.TargetState(targetState.identifier(), targetState.$state(), targetState.params(), newOptions);
		        var newTransition = this.router.transitionService.create(this._treeChanges.from, targetState);
		        var originalEnteringNodes = this.treeChanges().entering;
		        var redirectEnteringNodes = newTransition.treeChanges().entering;
		        // --- Re-use resolve data from original transition ---
		        // When redirecting from a parent state to a child state where the parent parameter values haven't changed
		        // (because of the redirect), the resolves fetched by the original transition are still valid in the
		        // redirected transition.
		        //
		        // This allows you to define a redirect on a parent state which depends on an async resolve value.
		        // You can wait for the resolve, then redirect to a child state based on the result.
		        // The redirected transition does not have to re-fetch the resolve.
		        // ---------------------------------------------------------
		        var nodeIsReloading = function (reloadState) { return function (node) {
		            return reloadState && node.state.includes[reloadState.name];
		        }; };
		        // Find any "entering" nodes in the redirect path that match the original path and aren't being reloaded
		        var matchingEnteringNodes = node_1.PathNode.matching(redirectEnteringNodes, originalEnteringNodes)
		            .filter(hof_1.not(nodeIsReloading(targetState.options().reloadState)));
		        // Use the existing (possibly pre-resolved) resolvables for the matching entering nodes.
		        matchingEnteringNodes.forEach(function (node, idx) {
		            node.resolvables = originalEnteringNodes[idx].resolvables;
		        });
		        return newTransition;
		    };
		    /** @hidden If a transition doesn't exit/enter any states, returns any [[Param]] whose value changed */
		    Transition.prototype._changedParams = function () {
		        var _a = this._treeChanges, to = _a.to, from = _a.from;
		        if (this._options.reload || common_1.tail(to).state !== common_1.tail(from).state)
		            return undefined;
		        var nodeSchemas = to.map(function (node) { return node.paramSchema; });
		        var _b = [to, from].map(function (path) { return path.map(function (x) { return x.paramValues; }); }), toValues = _b[0], fromValues = _b[1];
		        var tuples = common_1.arrayTuples(nodeSchemas, toValues, fromValues);
		        return tuples.map(function (_a) {
		            var schema = _a[0], toVals = _a[1], fromVals = _a[2];
		            return param_1.Param.changed(schema, toVals, fromVals);
		        }).reduce(common_1.unnestR, []);
		    };
		    /**
		     * Returns true if the transition is dynamic.
		     *
		     * A transition is dynamic if no states are entered nor exited, but at least one dynamic parameter has changed.
		     *
		     * @returns true if the Transition is dynamic
		     */
		    Transition.prototype.dynamic = function () {
		        var changes = this._changedParams();
		        return !changes ? false : changes.map(function (x) { return x.dynamic; }).reduce(common_1.anyTrueR, false);
		    };
		    /**
		     * Returns true if the transition is ignored.
		     *
		     * A transition is ignored if no states are entered nor exited, and no parameter values have changed.
		     *
		     * @returns true if the Transition is ignored.
		     */
		    Transition.prototype.ignored = function () {
		        var changes = this._changedParams();
		        return !changes ? false : changes.length === 0;
		    };
		    /**
		     * @hidden
		     */
		    Transition.prototype.hookBuilder = function () {
		        return new hookBuilder_1.HookBuilder(this.router.transitionService, this, {
		            transition: this,
		            current: this._options.current
		        });
		    };
		    /**
		     * Runs the transition
		     *
		     * This method is generally called from the [[StateService.transitionTo]]
		     *
		     * @returns a promise for a successful transition.
		     */
		    Transition.prototype.run = function () {
		        var _this = this;
		        var runSynchronousHooks = transitionHook_1.TransitionHook.runSynchronousHooks;
		        var hookBuilder = this.hookBuilder();
		        var globals = this.router.globals;
		        globals.transitionHistory.enqueue(this);
		        var syncResult = runSynchronousHooks(hookBuilder.getOnBeforeHooks());
		        if (rejectFactory_1.Rejection.isTransitionRejectionPromise(syncResult)) {
		            syncResult.catch(function () { return 0; }); // issue #2676
		            var rejectReason = syncResult._transitionRejection;
		            this._deferred.reject(rejectReason);
		            return this.promise;
		        }
		        if (!this.valid()) {
		            var error = new Error(this.error());
		            this._deferred.reject(error);
		            return this.promise;
		        }
		        if (this.ignored()) {
		            trace_1.trace.traceTransitionIgnored(this);
		            this._deferred.reject(rejectFactory_1.Rejection.ignored());
		            return this.promise;
		        }
		        // When the chain is complete, then resolve or reject the deferred
		        var transitionSuccess = function () {
		            trace_1.trace.traceSuccess(_this.$to(), _this);
		            _this.success = true;
		            _this._deferred.resolve(_this.to());
		            runSynchronousHooks(hookBuilder.getOnSuccessHooks(), true);
		        };
		        var transitionError = function (reason) {
		            trace_1.trace.traceError(reason, _this);
		            _this.success = false;
		            _this._deferred.reject(reason);
		            _this._error = reason;
		            runSynchronousHooks(hookBuilder.getOnErrorHooks(), true);
		        };
		        trace_1.trace.traceTransitionStart(this);
		        // Chain the next hook off the previous
		        var appendHookToChain = function (prev, nextHook) {
		            return prev.then(function () { return nextHook.invokeHook(); });
		        };
		        // Run the hooks, then resolve or reject the overall deferred in the .then() handler
		        hookBuilder.asyncHooks()
		            .reduce(appendHookToChain, syncResult)
		            .then(transitionSuccess, transitionError);
		        return this.promise;
		    };
		    /**
		     * Checks if the Transition is valid
		     *
		     * @returns true if the Transition is valid
		     */
		    Transition.prototype.valid = function () {
		        return !this.error() || this.success !== undefined;
		    };
		    /**
		     * The Transition error reason.
		     *
		     * If the transition is invalid (and could not be run), returns the reason the transition is invalid.
		     * If the transition was valid and ran, but was not successful, returns the reason the transition failed.
		     *
		     * @returns an error message explaining why the transition is invalid, or the reason the transition failed.
		     */
		    Transition.prototype.error = function () {
		        var state = this.$to();
		        var redirects = 0, trans = this;
		        while ((trans = trans.redirectedFrom()) != null) {
		            if (++redirects > 20)
		                return "Too many Transition redirects (20+)";
		        }
		        if (state.self.abstract)
		            return "Cannot transition to abstract state '" + state.name + "'";
		        if (!param_1.Param.validates(state.parameters(), this.params()))
		            return "Param values not valid for state '" + state.name + "'";
		        if (this.success === false)
		            return this._error;
		    };
		    /**
		     * A string representation of the Transition
		     *
		     * @returns A string representation of the Transition
		     */
		    Transition.prototype.toString = function () {
		        var fromStateOrName = this.from();
		        var toStateOrName = this.to();
		        var avoidEmptyHash = function (params) {
		            return (params["#"] !== null && params["#"] !== undefined) ? params : common_1.omit(params, "#");
		        };
		        // (X) means the to state is invalid.
		        var id = this.$id, from = predicates_1.isObject(fromStateOrName) ? fromStateOrName.name : fromStateOrName, fromParams = common_1.toJson(avoidEmptyHash(this._treeChanges.from.map(hof_1.prop('paramValues')).reduce(common_1.mergeR, {}))), toValid = this.valid() ? "" : "(X) ", to = predicates_1.isObject(toStateOrName) ? toStateOrName.name : toStateOrName, toParams = common_1.toJson(avoidEmptyHash(this.params()));
		        return "Transition#" + id + "( '" + from + "'" + fromParams + " -> " + toValid + "'" + to + "'" + toParams + " )";
		    };
		    Transition.diToken = Transition;
		    return Transition;
		}());
		exports.Transition = Transition;
	
	
	/***/ },
	/* 12 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		/**
		 * UI-Router Transition Tracing
		 *
		 * Enable transition tracing to print transition information to the console, in order to help debug your application.
		 * Tracing logs detailed information about each Transition to your console.
		 *
		 * To enable tracing, import the [[trace]] singleton and enable one or more categories.
		 *
		 * ES6
		 * ```
		 *
		 * import {trace} from "ui-router-ng2"; // or "angular-ui-router"
		 * trace.enable(1, 5); // TRANSITION and VIEWCONFIG
		 * ```
		 *
		 * CJS
		 * ```
		 *
		 * let trace = require("angular-ui-router").trace; // or "ui-router-ng2"
		 * trace.enable("TRANSITION", "VIEWCONFIG");
		 * ```
		 *
		 * Globals
		 * ```
		 *
		 * let trace = window["angular-ui-router"].trace; // or "ui-router-ng2"
		 * trace.enable(); // Trace everything (very verbose)
		 * ```
		 *
		 * @module trace
		 */ /** for typedoc */
		var hof_1 = __webpack_require__(5);
		var predicates_1 = __webpack_require__(4);
		var strings_1 = __webpack_require__(9);
		/** @hidden */
		function uiViewString(viewData) {
		    if (!viewData)
		        return 'ui-view (defunct)';
		    return ("[ui-view#" + viewData.id + " tag ") +
		        ("in template from '" + (viewData.creationContext && viewData.creationContext.name || '(root)') + "' state]: ") +
		        ("fqn: '" + viewData.fqn + "', ") +
		        ("name: '" + viewData.name + "@" + viewData.creationContext + "')");
		}
		/** @hidden */
		var viewConfigString = function (viewConfig) {
		    return ("[ViewConfig#" + viewConfig.$id + " from '" + (viewConfig.viewDecl.$context.name || '(root)') + "' state]: target ui-view: '" + viewConfig.viewDecl.$uiViewName + "@" + viewConfig.viewDecl.$uiViewContextAnchor + "'");
		};
		/** @hidden */
		function normalizedCat(input) {
		    return predicates_1.isNumber(input) ? Category[input] : Category[Category[input]];
		}
		/**
		 * Trace categories
		 *
		 * [[Trace.enable]] or [[Trace.disable]] a category
		 *
		 * `trace.enable(Category.TRANSITION)`
		 *
		 * These can also be provided using a matching string, or position ordinal
		 *
		 * `trace.enable("TRANSITION")`
		 *
		 * `trace.enable(1)`
		 */
		(function (Category) {
		    Category[Category["RESOLVE"] = 0] = "RESOLVE";
		    Category[Category["TRANSITION"] = 1] = "TRANSITION";
		    Category[Category["HOOK"] = 2] = "HOOK";
		    Category[Category["UIVIEW"] = 3] = "UIVIEW";
		    Category[Category["VIEWCONFIG"] = 4] = "VIEWCONFIG";
		})(exports.Category || (exports.Category = {}));
		var Category = exports.Category;
		/**
		 * Prints UI-Router Transition trace information to the console.
		 */
		var Trace = (function () {
		    function Trace() {
		        /** @hidden */
		        this._enabled = {};
		        this.approximateDigests = 0;
		    }
		    /** @hidden */
		    Trace.prototype._set = function (enabled, categories) {
		        var _this = this;
		        if (!categories.length) {
		            categories = Object.keys(Category)
		                .map(function (k) { return parseInt(k, 10); })
		                .filter(function (k) { return !isNaN(k); })
		                .map(function (key) { return Category[key]; });
		        }
		        categories.map(normalizedCat).forEach(function (category) { return _this._enabled[category] = enabled; });
		    };
		    /**
		     * Enables a trace [[Category]]
		     *
		     * ```
		     * trace.enable("TRANSITION");
		     * ```
		     *
		     * @param categories categories to enable. If `categories` is omitted, all categories are enabled.
		     *        Also takes strings (category name) or ordinal (category position)
		     */
		    Trace.prototype.enable = function () {
		        var categories = [];
		        for (var _i = 0; _i < arguments.length; _i++) {
		            categories[_i - 0] = arguments[_i];
		        }
		        this._set(true, categories);
		    };
		    /**
		     * Disables a trace [[Category]]
		     *
		     * ```
		     * trace.disable("VIEWCONFIG");
		     * ```
		     *
		     * @param categories categories to disable. If `categories` is omitted, all categories are disabled.
		     *        Also takes strings (category name) or ordinal (category position)
		     */
		    Trace.prototype.disable = function () {
		        var categories = [];
		        for (var _i = 0; _i < arguments.length; _i++) {
		            categories[_i - 0] = arguments[_i];
		        }
		        this._set(false, categories);
		    };
		    /**
		     * Retrieves the enabled stateus of a [[Category]]
		     *
		     * ```
		     * trace.enabled("VIEWCONFIG"); // true or false
		     * ```
		     *
		     * @returns boolean true if the category is enabled
		     */
		    Trace.prototype.enabled = function (category) {
		        return !!this._enabled[normalizedCat(category)];
		    };
		    /** called by ui-router code */
		    Trace.prototype.traceTransitionStart = function (transition) {
		        if (!this.enabled(Category.TRANSITION))
		            return;
		        var tid = transition.$id, digest = this.approximateDigests, transitionStr = strings_1.stringify(transition);
		        console.log("Transition #" + tid + " Digest #" + digest + ": Started  -> " + transitionStr);
		    };
		    /** called by ui-router code */
		    Trace.prototype.traceTransitionIgnored = function (trans) {
		        if (!this.enabled(Category.TRANSITION))
		            return;
		        var tid = trans && trans.$id, digest = this.approximateDigests, transitionStr = strings_1.stringify(trans);
		        console.log("Transition #" + tid + " Digest #" + digest + ": Ignored  <> " + transitionStr);
		    };
		    /** called by ui-router code */
		    Trace.prototype.traceHookInvocation = function (step, options) {
		        if (!this.enabled(Category.HOOK))
		            return;
		        var tid = hof_1.parse("transition.$id")(options), digest = this.approximateDigests, event = hof_1.parse("traceData.hookType")(options) || "internal", context = hof_1.parse("traceData.context.state.name")(options) || hof_1.parse("traceData.context")(options) || "unknown", name = strings_1.functionToString(step.eventHook.callback);
		        console.log("Transition #" + tid + " Digest #" + digest + ":   Hook -> " + event + " context: " + context + ", " + strings_1.maxLength(200, name));
		    };
		    /** called by ui-router code */
		    Trace.prototype.traceHookResult = function (hookResult, transitionOptions) {
		        if (!this.enabled(Category.HOOK))
		            return;
		        var tid = hof_1.parse("transition.$id")(transitionOptions), digest = this.approximateDigests, hookResultStr = strings_1.stringify(hookResult);
		        console.log("Transition #" + tid + " Digest #" + digest + ":   <- Hook returned: " + strings_1.maxLength(200, hookResultStr));
		    };
		    /** called by ui-router code */
		    Trace.prototype.traceResolvePath = function (path, when, trans) {
		        if (!this.enabled(Category.RESOLVE))
		            return;
		        var tid = trans && trans.$id, digest = this.approximateDigests, pathStr = path && path.toString();
		        console.log("Transition #" + tid + " Digest #" + digest + ":         Resolving " + pathStr + " (" + when + ")");
		    };
		    /** called by ui-router code */
		    Trace.prototype.traceResolvableResolved = function (resolvable, trans) {
		        if (!this.enabled(Category.RESOLVE))
		            return;
		        var tid = trans && trans.$id, digest = this.approximateDigests, resolvableStr = resolvable && resolvable.toString(), result = strings_1.stringify(resolvable.data);
		        console.log("Transition #" + tid + " Digest #" + digest + ":               <- Resolved  " + resolvableStr + " to: " + strings_1.maxLength(200, result));
		    };
		    /** called by ui-router code */
		    Trace.prototype.traceError = function (reason, trans) {
		        if (!this.enabled(Category.TRANSITION))
		            return;
		        var tid = trans && trans.$id, digest = this.approximateDigests, transitionStr = strings_1.stringify(trans);
		        console.log("Transition #" + tid + " Digest #" + digest + ": <- Rejected " + transitionStr + ", reason: " + reason);
		    };
		    /** called by ui-router code */
		    Trace.prototype.traceSuccess = function (finalState, trans) {
		        if (!this.enabled(Category.TRANSITION))
		            return;
		        var tid = trans && trans.$id, digest = this.approximateDigests, state = finalState.name, transitionStr = strings_1.stringify(trans);
		        console.log("Transition #" + tid + " Digest #" + digest + ": <- Success  " + transitionStr + ", final state: " + state);
		    };
		    /** called by ui-router code */
		    Trace.prototype.traceUIViewEvent = function (event, viewData, extra) {
		        if (extra === void 0) { extra = ""; }
		        if (!this.enabled(Category.UIVIEW))
		            return;
		        console.log("ui-view: " + strings_1.padString(30, event) + " " + uiViewString(viewData) + extra);
		    };
		    /** called by ui-router code */
		    Trace.prototype.traceUIViewConfigUpdated = function (viewData, context) {
		        if (!this.enabled(Category.UIVIEW))
		            return;
		        this.traceUIViewEvent("Updating", viewData, " with ViewConfig from context='" + context + "'");
		    };
		    /** called by ui-router code */
		    Trace.prototype.traceUIViewFill = function (viewData, html) {
		        if (!this.enabled(Category.UIVIEW))
		            return;
		        this.traceUIViewEvent("Fill", viewData, " with: " + strings_1.maxLength(200, html));
		    };
		    /** called by ui-router code */
		    Trace.prototype.traceViewServiceEvent = function (event, viewConfig) {
		        if (!this.enabled(Category.VIEWCONFIG))
		            return;
		        console.log("VIEWCONFIG: " + event + " " + viewConfigString(viewConfig));
		    };
		    /** called by ui-router code */
		    Trace.prototype.traceViewServiceUIViewEvent = function (event, viewData) {
		        if (!this.enabled(Category.VIEWCONFIG))
		            return;
		        console.log("VIEWCONFIG: " + event + " " + uiViewString(viewData));
		    };
		    return Trace;
		}());
		exports.Trace = Trace;
		/**
		 * The [[Trace]] singleton
		 *
		 * @example
		 * ```js
		 *
		 * import {trace} from "angular-ui-router";
		 * trace.enable(1, 5);
		 * ```
		 */
		var trace = new Trace();
		exports.trace = trace;
	
	
	/***/ },
	/* 13 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		var common_1 = __webpack_require__(3);
		var strings_1 = __webpack_require__(9);
		var predicates_1 = __webpack_require__(4);
		var hof_1 = __webpack_require__(5);
		var trace_1 = __webpack_require__(12);
		var coreservices_1 = __webpack_require__(6);
		var rejectFactory_1 = __webpack_require__(10);
		var targetState_1 = __webpack_require__(14);
		var defaultOptions = {
		    async: true,
		    rejectIfSuperseded: true,
		    current: common_1.noop,
		    transition: null,
		    traceData: {},
		    bind: null
		};
		/** @hidden */
		var TransitionHook = (function () {
		    function TransitionHook(transition, stateContext, eventHook, options) {
		        var _this = this;
		        this.transition = transition;
		        this.stateContext = stateContext;
		        this.eventHook = eventHook;
		        this.options = options;
		        this.isSuperseded = function () {
		            return _this.options.current() !== _this.options.transition;
		        };
		        this.options = common_1.defaults(options, defaultOptions);
		    }
		    TransitionHook.prototype.invokeHook = function () {
		        var _a = this, options = _a.options, eventHook = _a.eventHook;
		        trace_1.trace.traceHookInvocation(this, options);
		        if (options.rejectIfSuperseded && this.isSuperseded()) {
		            return rejectFactory_1.Rejection.superseded(options.current()).toPromise();
		        }
		        var synchronousHookResult = !eventHook._deregistered
		            ? eventHook.callback.call(options.bind, this.transition, this.stateContext)
		            : undefined;
		        return this.handleHookResult(synchronousHookResult);
		    };
		    /**
		     * This method handles the return value of a Transition Hook.
		     *
		     * A hook can return false (cancel), a TargetState (redirect),
		     * or a promise (which may later resolve to false or a redirect)
		     *
		     * This also handles "transition superseded" -- when a new transition
		     * was started while the hook was still running
		     */
		    TransitionHook.prototype.handleHookResult = function (result) {
		        // This transition is no longer current.
		        // Another transition started while this hook was still running.
		        if (this.isSuperseded()) {
		            // Abort this transition
		            return rejectFactory_1.Rejection.superseded(this.options.current()).toPromise();
		        }
		        // Hook returned a promise
		        if (predicates_1.isPromise(result)) {
		            // Wait for the promise, then reprocess the resolved value
		            return result.then(this.handleHookResult.bind(this));
		        }
		        trace_1.trace.traceHookResult(result, this.options);
		        // Hook returned false
		        if (result === false) {
		            // Abort this Transition
		            return rejectFactory_1.Rejection.aborted("Hook aborted transition").toPromise();
		        }
		        var isTargetState = hof_1.is(targetState_1.TargetState);
		        // hook returned a TargetState
		        if (isTargetState(result)) {
		            // Halt the current Transition and start a redirected Transition (to the TargetState).
		            return rejectFactory_1.Rejection.redirected(result).toPromise();
		        }
		    };
		    TransitionHook.prototype.toString = function () {
		        var _a = this, options = _a.options, eventHook = _a.eventHook;
		        var event = hof_1.parse("traceData.hookType")(options) || "internal", context = hof_1.parse("traceData.context.state.name")(options) || hof_1.parse("traceData.context")(options) || "unknown", name = strings_1.fnToString(eventHook.callback);
		        return event + " context: " + context + ", " + strings_1.maxLength(200, name);
		    };
		    /**
		     * Given an array of TransitionHooks, runs each one synchronously and sequentially.
		     *
		     * Returns a promise chain composed of any promises returned from each hook.invokeStep() call
		     */
		    TransitionHook.runSynchronousHooks = function (hooks, swallowExceptions) {
		        if (swallowExceptions === void 0) { swallowExceptions = false; }
		        var results = [];
		        for (var i = 0; i < hooks.length; i++) {
		            var hook = hooks[i];
		            try {
		                results.push(hook.invokeHook());
		            }
		            catch (exception) {
		                if (!swallowExceptions) {
		                    return rejectFactory_1.Rejection.errored(exception).toPromise();
		                }
		                var errorHandler = hook.transition.router.stateService.defaultErrorHandler();
		                errorHandler(exception);
		            }
		        }
		        var rejections = results.filter(rejectFactory_1.Rejection.isTransitionRejectionPromise);
		        if (rejections.length)
		            return rejections[0];
		        return results
		            .filter(predicates_1.isPromise)
		            .reduce(function (chain, promise) { return chain.then(hof_1.val(promise)); }, coreservices_1.services.$q.when());
		    };
		    return TransitionHook;
		}());
		exports.TransitionHook = TransitionHook;
	
	
	/***/ },
	/* 14 */
	/***/ function(module, exports, __webpack_require__) {
	
		/** @module state */ /** for typedoc */
		"use strict";
		var common_1 = __webpack_require__(3);
		/**
		 * @ngdoc object
		 * @name ui.router.state.type:TargetState
		 *
		 * @description
		 * Encapsulate the desired target of a transition.
		 * Wraps an identifier for a state, a set of parameters, and transition options with the definition of the state.
		 *
		 * @param {StateOrName} _identifier  An identifier for a state. Either a fully-qualified path, or the object
		 *            used to define the state.
		 * @param {IState} _definition The `State` object definition.
		 * @param {ParamsOrArray} _params Parameters for the target state
		 * @param {TransitionOptions} _options Transition options.
		 */
		var TargetState = (function () {
		    function TargetState(_identifier, _definition, _params, _options) {
		        if (_params === void 0) { _params = {}; }
		        if (_options === void 0) { _options = {}; }
		        this._identifier = _identifier;
		        this._definition = _definition;
		        this._options = _options;
		        this._params = _params || {};
		    }
		    TargetState.prototype.name = function () {
		        return this._definition && this._definition.name || this._identifier;
		    };
		    TargetState.prototype.identifier = function () {
		        return this._identifier;
		    };
		    TargetState.prototype.params = function () {
		        return this._params;
		    };
		    TargetState.prototype.$state = function () {
		        return this._definition;
		    };
		    TargetState.prototype.state = function () {
		        return this._definition && this._definition.self;
		    };
		    TargetState.prototype.options = function () {
		        return this._options;
		    };
		    TargetState.prototype.exists = function () {
		        return !!(this._definition && this._definition.self);
		    };
		    TargetState.prototype.valid = function () {
		        return !this.error();
		    };
		    TargetState.prototype.error = function () {
		        var base = this.options().relative;
		        if (!this._definition && !!base) {
		            var stateName = base.name ? base.name : base;
		            return "Could not resolve '" + this.name() + "' from state '" + stateName + "'";
		        }
		        if (!this._definition)
		            return "No such state '" + this.name() + "'";
		        if (!this._definition.self)
		            return "State '" + this.name() + "' has an invalid definition";
		    };
		    TargetState.prototype.toString = function () {
		        return "'" + this.name() + "'" + common_1.toJson(this.params());
		    };
		    return TargetState;
		}());
		exports.TargetState = TargetState;
	
	
	/***/ },
	/* 15 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		/** @module transition */ /** for typedoc */
		var common_1 = __webpack_require__(3);
		var predicates_1 = __webpack_require__(4);
		var glob_1 = __webpack_require__(7);
		/**
		 * Determines if the given state matches the matchCriteria
		 *
		 * @hidden
		 *
		 * @param state a State Object to test against
		 * @param criterion
		 * - If a string, matchState uses the string as a glob-matcher against the state name
		 * - If an array (of strings), matchState uses each string in the array as a glob-matchers against the state name
		 *   and returns a positive match if any of the globs match.
		 * - If a function, matchState calls the function with the state and returns true if the function's result is truthy.
		 * @returns {boolean}
		 */
		function matchState(state, criterion) {
		    var toMatch = predicates_1.isString(criterion) ? [criterion] : criterion;
		    function matchGlobs(_state) {
		        var globStrings = toMatch;
		        for (var i = 0; i < globStrings.length; i++) {
		            var glob = glob_1.Glob.fromString(globStrings[i]);
		            if ((glob && glob.matches(_state.name)) || (!glob && globStrings[i] === _state.name)) {
		                return true;
		            }
		        }
		        return false;
		    }
		    var matchFn = (predicates_1.isFunction(toMatch) ? toMatch : matchGlobs);
		    return !!matchFn(state);
		}
		exports.matchState = matchState;
		/** @hidden */
		var EventHook = (function () {
		    function EventHook(matchCriteria, callback, options) {
		        if (options === void 0) { options = {}; }
		        this.callback = callback;
		        this.matchCriteria = common_1.extend({ to: true, from: true, exiting: true, retained: true, entering: true }, matchCriteria);
		        this.priority = options.priority || 0;
		        this.bind = options.bind || null;
		        this._deregistered = false;
		    }
		    EventHook._matchingNodes = function (nodes, criterion) {
		        if (criterion === true)
		            return nodes;
		        var matching = nodes.filter(function (node) { return matchState(node.state, criterion); });
		        return matching.length ? matching : null;
		    };
		    /**
		     * Determines if this hook's [[matchCriteria]] match the given [[TreeChanges]]
		     *
		     * @returns an IMatchingNodes object, or null. If an IMatchingNodes object is returned, its values
		     * are the matching [[PathNode]]s for each [[HookMatchCriterion]] (to, from, exiting, retained, entering)
		     */
		    EventHook.prototype.matches = function (treeChanges) {
		        var mc = this.matchCriteria, _matchingNodes = EventHook._matchingNodes;
		        var matches = {
		            to: _matchingNodes([common_1.tail(treeChanges.to)], mc.to),
		            from: _matchingNodes([common_1.tail(treeChanges.from)], mc.from),
		            exiting: _matchingNodes(treeChanges.exiting, mc.exiting),
		            retained: _matchingNodes(treeChanges.retained, mc.retained),
		            entering: _matchingNodes(treeChanges.entering, mc.entering),
		        };
		        // Check if all the criteria matched the TreeChanges object
		        var allMatched = ["to", "from", "exiting", "retained", "entering"]
		            .map(function (prop) { return matches[prop]; })
		            .reduce(common_1.allTrueR, true);
		        return allMatched ? matches : null;
		    };
		    return EventHook;
		}());
		exports.EventHook = EventHook;
		/** @hidden Return a registration function of the requested type. */
		function makeHookRegistrationFn(hooks, name) {
		    return function (matchObject, callback, options) {
		        if (options === void 0) { options = {}; }
		        var eventHook = new EventHook(matchObject, callback, options);
		        hooks[name].push(eventHook);
		        return function deregisterEventHook() {
		            eventHook._deregistered = true;
		            common_1.removeFrom(hooks[name])(eventHook);
		        };
		    };
		}
		/**
		 * Mixin class acts as a Transition Hook registry.
		 *
		 * Holds the registered [[HookFn]] objects.
		 * Exposes functions to register new hooks.
		 *
		 * This is a Mixin class which can be applied to other objects.
		 *
		 * The hook registration functions are [[onBefore]], [[onStart]], [[onEnter]], [[onRetain]], [[onExit]], [[onFinish]], [[onSuccess]], [[onError]].
		 *
		 * This class is mixed into both the [[TransitionService]] and every [[Transition]] object.
		 * Global hooks are added to the [[TransitionService]].
		 * Since each [[Transition]] is itself a `HookRegistry`, hooks can also be added to individual Transitions
		 * (note: the hook criteria still must match the Transition).
		 */
		var HookRegistry = (function () {
		    function HookRegistry() {
		        var _this = this;
		        this._transitionEvents = {
		            onBefore: [], onStart: [], onEnter: [], onRetain: [], onExit: [], onFinish: [], onSuccess: [], onError: []
		        };
		        this.getHooks = function (name) { return _this._transitionEvents[name]; };
		        /** @inheritdoc */
		        this.onBefore = makeHookRegistrationFn(this._transitionEvents, "onBefore");
		        /** @inheritdoc */
		        this.onStart = makeHookRegistrationFn(this._transitionEvents, "onStart");
		        /** @inheritdoc */
		        this.onEnter = makeHookRegistrationFn(this._transitionEvents, "onEnter");
		        /** @inheritdoc */
		        this.onRetain = makeHookRegistrationFn(this._transitionEvents, "onRetain");
		        /** @inheritdoc */
		        this.onExit = makeHookRegistrationFn(this._transitionEvents, "onExit");
		        /** @inheritdoc */
		        this.onFinish = makeHookRegistrationFn(this._transitionEvents, "onFinish");
		        /** @inheritdoc */
		        this.onSuccess = makeHookRegistrationFn(this._transitionEvents, "onSuccess");
		        /** @inheritdoc */
		        this.onError = makeHookRegistrationFn(this._transitionEvents, "onError");
		    }
		    HookRegistry.mixin = function (source, target) {
		        Object.keys(source._transitionEvents).concat(["getHooks"]).forEach(function (key) { return target[key] = source[key]; });
		    };
		    return HookRegistry;
		}());
		exports.HookRegistry = HookRegistry;
	
	
	/***/ },
	/* 16 */
	/***/ function(module, exports, __webpack_require__) {
	
		/** @module transition */ /** for typedoc */
		"use strict";
		var common_1 = __webpack_require__(3);
		var predicates_1 = __webpack_require__(4);
		var transitionHook_1 = __webpack_require__(13);
		var resolveContext_1 = __webpack_require__(17);
		/**
		 * This class returns applicable TransitionHooks for a specific Transition instance.
		 *
		 * Hooks (IEventHook) may be registered globally, e.g., $transitions.onEnter(...), or locally, e.g.
		 * myTransition.onEnter(...).  The HookBuilder finds matching IEventHooks (where the match criteria is
		 * determined by the type of hook)
		 *
		 * The HookBuilder also converts IEventHooks objects to TransitionHook objects, which are used to run a Transition.
		 *
		 * The HookBuilder constructor is given the $transitions service and a Transition instance.  Thus, a HookBuilder
		 * instance may only be used for one specific Transition object. (side note: the _treeChanges accessor is private
		 * in the Transition class, so we must also provide the Transition's _treeChanges)
		 *
		 */
		var HookBuilder = (function () {
		    function HookBuilder($transitions, transition, baseHookOptions) {
		        var _this = this;
		        this.$transitions = $transitions;
		        this.transition = transition;
		        this.baseHookOptions = baseHookOptions;
		        this.getOnBeforeHooks = function () { return _this._buildNodeHooks("onBefore", "to", tupleSort(), { async: false }); };
		        this.getOnStartHooks = function () { return _this._buildNodeHooks("onStart", "to", tupleSort()); };
		        this.getOnExitHooks = function () { return _this._buildNodeHooks("onExit", "exiting", tupleSort(true), { stateHook: true }); };
		        this.getOnRetainHooks = function () { return _this._buildNodeHooks("onRetain", "retained", tupleSort(false), { stateHook: true }); };
		        this.getOnEnterHooks = function () { return _this._buildNodeHooks("onEnter", "entering", tupleSort(false), { stateHook: true }); };
		        this.getOnFinishHooks = function () { return _this._buildNodeHooks("onFinish", "to", tupleSort()); };
		        this.getOnSuccessHooks = function () { return _this._buildNodeHooks("onSuccess", "to", tupleSort(), { async: false, rejectIfSuperseded: false }); };
		        this.getOnErrorHooks = function () { return _this._buildNodeHooks("onError", "to", tupleSort(), { async: false, rejectIfSuperseded: false }); };
		        this.treeChanges = transition.treeChanges();
		        this.toState = common_1.tail(this.treeChanges.to).state;
		        this.fromState = common_1.tail(this.treeChanges.from).state;
		        this.transitionOptions = transition.options();
		    }
		    HookBuilder.prototype.asyncHooks = function () {
		        var onStartHooks = this.getOnStartHooks();
		        var onExitHooks = this.getOnExitHooks();
		        var onRetainHooks = this.getOnRetainHooks();
		        var onEnterHooks = this.getOnEnterHooks();
		        var onFinishHooks = this.getOnFinishHooks();
		        var asyncHooks = [onStartHooks, onExitHooks, onRetainHooks, onEnterHooks, onFinishHooks];
		        return asyncHooks.reduce(common_1.unnestR, []).filter(common_1.identity);
		    };
		    /**
		     * Returns an array of newly built TransitionHook objects.
		     *
		     * - Finds all IEventHooks registered for the given `hookType` which matched the transition's [[TreeChanges]].
		     * - Finds [[PathNode]] (or `PathNode[]`) to use as the TransitionHook context(s)
		     * - For each of the [[PathNode]]s, creates a TransitionHook
		     *
		     * @param hookType the name of the hook registration function, e.g., 'onEnter', 'onFinish'.
		     * @param matchingNodesProp selects which [[PathNode]]s from the [[IMatchingNodes]] object to create hooks for.
		     * @param getLocals a function which accepts a [[PathNode]] and returns additional locals to provide to the hook as injectables
		     * @param sortHooksFn a function which compares two HookTuple and returns <1, 0, or >1
		     * @param options any specific Transition Hook Options
		     */
		    HookBuilder.prototype._buildNodeHooks = function (hookType, matchingNodesProp, sortHooksFn, options) {
		        var _this = this;
		        // Find all the matching registered hooks for a given hook type
		        var matchingHooks = this._matchingHooks(hookType, this.treeChanges);
		        if (!matchingHooks)
		            return [];
		        var makeTransitionHooks = function (hook) {
		            // Fetch the Nodes that caused this hook to match.
		            var matches = hook.matches(_this.treeChanges);
		            // Select the PathNode[] that will be used as TransitionHook context objects
		            var matchingNodes = matches[matchingNodesProp];
		            // When invoking 'exiting' hooks, give them the "from path" for resolve data.
		            // Everything else gets the "to path"
		            var resolvePath = matchingNodesProp === 'exiting' ? _this.treeChanges.from : _this.treeChanges.to;
		            var resolveContext = new resolveContext_1.ResolveContext(resolvePath);
		            // Return an array of HookTuples
		            return matchingNodes.map(function (node) {
		                var _options = common_1.extend({ bind: hook.bind, traceData: { hookType: hookType, context: node } }, _this.baseHookOptions, options);
		                var state = _options.stateHook ? node.state : null;
		                var transitionHook = new transitionHook_1.TransitionHook(_this.transition, state, hook, _options);
		                return { hook: hook, node: node, transitionHook: transitionHook };
		            });
		        };
		        return matchingHooks.map(makeTransitionHooks)
		            .reduce(common_1.unnestR, [])
		            .sort(sortHooksFn)
		            .map(function (tuple) { return tuple.transitionHook; });
		    };
		    /**
		     * Finds all IEventHooks from:
		     * - The Transition object instance hook registry
		     * - The TransitionService ($transitions) global hook registry
		     *
		     * which matched:
		     * - the eventType
		     * - the matchCriteria (to, from, exiting, retained, entering)
		     *
		     * @returns an array of matched [[IEventHook]]s
		     */
		    HookBuilder.prototype._matchingHooks = function (hookName, treeChanges) {
		        return [this.transition, this.$transitions] // Instance and Global hook registries
		            .map(function (reg) { return reg.getHooks(hookName); }) // Get named hooks from registries
		            .filter(common_1.assertPredicate(predicates_1.isArray, "broken event named: " + hookName)) // Sanity check
		            .reduce(common_1.unnestR, []) // Un-nest IEventHook[][] to IEventHook[] array
		            .filter(function (hook) { return hook.matches(treeChanges); }); // Only those satisfying matchCriteria
		    };
		    return HookBuilder;
		}());
		exports.HookBuilder = HookBuilder;
		/**
		 * A factory for a sort function for HookTuples.
		 *
		 * The sort function first compares the PathNode depth (how deep in the state tree a node is), then compares
		 * the EventHook priority.
		 *
		 * @param reverseDepthSort a boolean, when true, reverses the sort order for the node depth
		 * @returns a tuple sort function
		 */
		function tupleSort(reverseDepthSort) {
		    if (reverseDepthSort === void 0) { reverseDepthSort = false; }
		    return function nodeDepthThenPriority(l, r) {
		        var factor = reverseDepthSort ? -1 : 1;
		        var depthDelta = (l.node.state.path.length - r.node.state.path.length) * factor;
		        return depthDelta !== 0 ? depthDelta : r.hook.priority - l.hook.priority;
		    };
		}
	
	
	/***/ },
	/* 17 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		/** @module resolve */ /** for typedoc */
		var common_1 = __webpack_require__(3);
		var hof_1 = __webpack_require__(5);
		var trace_1 = __webpack_require__(12);
		var coreservices_1 = __webpack_require__(6);
		var interface_1 = __webpack_require__(18);
		var resolvable_1 = __webpack_require__(19);
		var pathFactory_1 = __webpack_require__(20);
		var strings_1 = __webpack_require__(9);
		var when = interface_1.resolvePolicies.when;
		var ALL_WHENS = [when.EAGER, when.LAZY];
		var EAGER_WHENS = [when.EAGER];
		exports.NATIVE_INJECTOR_TOKEN = "Native Injector";
		/**
		 * Encapsulates Depenency Injection for a path of nodes
		 *
		 * UI-Router states are organized as a tree.
		 * A nested state has a path of ancestors to the root of the tree.
		 * When a state is being activated, each element in the path is wrapped as a [[PathNode]].
		 * A `PathNode` is a stateful object that holds things like parameters and resolvables for the state being activated.
		 *
		 * The ResolveContext closes over the [[PathNode]]s, and provides DI for the last node in the path.
		 */
		var ResolveContext = (function () {
		    function ResolveContext(_path) {
		        this._path = _path;
		    }
		    /** Gets all the tokens found in the resolve context, de-duplicated */
		    ResolveContext.prototype.getTokens = function () {
		        return this._path.reduce(function (acc, node) { return acc.concat(node.resolvables.map(function (r) { return r.token; })); }, []).reduce(common_1.uniqR, []);
		    };
		    /**
		     * Gets the Resolvable that matches the token
		     *
		     * Gets the last Resolvable that matches the token in this context, or undefined.
		     * Throws an error if it doesn't exist in the ResolveContext
		     */
		    ResolveContext.prototype.getResolvable = function (token) {
		        var matching = this._path.map(function (node) { return node.resolvables; })
		            .reduce(common_1.unnestR, [])
		            .filter(function (r) { return r.token === token; });
		        return common_1.tail(matching);
		    };
		    /**
		     * Returns a ResolveContext that includes a portion of this one
		     *
		     * Given a state, this method creates a new ResolveContext from this one.
		     * The new context starts at the first node (root) and stops at the node for the `state` parameter.
		     *
		     * #### Why
		     *
		     * When a transition is created, the nodes in the "To Path" are injected from a ResolveContext.
		     * A ResolveContext closes over a path of [[PathNode]]s and processes the resolvables.
		     * The "To State" can inject values from its own resolvables, as well as those from all its ancestor state's (node's).
		     * This method is used to create a narrower context when injecting ancestor nodes.
		     *
		     * @example
		     * `let ABCD = new ResolveContext([A, B, C, D]);`
		     *
		     * Given a path `[A, B, C, D]`, where `A`, `B`, `C` and `D` are nodes for states `a`, `b`, `c`, `d`:
		     * When injecting `D`, `D` should have access to all resolvables from `A`, `B`, `C`, `D`.
		     * However, `B` should only be able to access resolvables from `A`, `B`.
		     *
		     * When resolving for the `B` node, first take the full "To Path" Context `[A,B,C,D]` and limit to the subpath `[A,B]`.
		     * `let AB = ABCD.subcontext(a)`
		     */
		    ResolveContext.prototype.subContext = function (state) {
		        return new ResolveContext(pathFactory_1.PathFactory.subPath(this._path, function (node) { return node.state === state; }));
		    };
		    /**
		     * Adds Resolvables to the node that matches the state
		     *
		     * This adds a [[Resolvable]] (generally one created on the fly; not declared on a [[StateDeclaration.resolve]] block).
		     * The resolvable is added to the node matching the `state` parameter.
		     *
		     * These new resolvables are not automatically fetched.
		     * The calling code should either fetch them, fetch something that depends on them,
		     * or rely on [[resolvePath]] being called when some state is being entered.
		     *
		     * Note: each resolvable's [[ResolvePolicy]] is merged with the state's policy, and the global default.
		     *
		     * @param newResolvables the new Resolvables
		     * @param state Used to find the node to put the resolvable on
		     */
		    ResolveContext.prototype.addResolvables = function (newResolvables, state) {
		        var node = common_1.find(this._path, hof_1.propEq('state', state));
		        var keys = newResolvables.map(function (r) { return r.token; });
		        node.resolvables = node.resolvables.filter(function (r) { return keys.indexOf(r.token) === -1; }).concat(newResolvables);
		    };
		    /**
		     * Returns a promise for an array of resolved path Element promises
		     *
		     * @param when
		     * @param trans
		     * @returns {Promise<any>|any}
		     */
		    ResolveContext.prototype.resolvePath = function (when, trans) {
		        var _this = this;
		        if (when === void 0) { when = "LAZY"; }
		        // This option determines which 'when' policy Resolvables we are about to fetch.
		        var whenOption = common_1.inArray(ALL_WHENS, when) ? when : "LAZY";
		        // If the caller specified EAGER, only the EAGER Resolvables are fetched.
		        // if the caller specified LAZY, both EAGER and LAZY Resolvables are fetched.`
		        var matchedWhens = whenOption === interface_1.resolvePolicies.when.EAGER ? EAGER_WHENS : ALL_WHENS;
		        // get the subpath to the state argument, if provided
		        trace_1.trace.traceResolvePath(this._path, when, trans);
		        var promises = this._path.reduce(function (acc, node) {
		            var matchesRequestedPolicy = function (resolvable) {
		                return common_1.inArray(matchedWhens, resolvable.getPolicy(node.state).when);
		            };
		            var nodeResolvables = node.resolvables.filter(matchesRequestedPolicy);
		            var subContext = _this.subContext(node.state);
		            // For the matching Resolvables, start their async fetch process.
		            var getResult = function (r) { return r.get(subContext, trans)
		                .then(function (value) { return ({ token: r.token, value: value }); }); };
		            return acc.concat(nodeResolvables.map(getResult));
		        }, []);
		        return coreservices_1.services.$q.all(promises);
		    };
		    ResolveContext.prototype.injector = function () {
		        return this._injector || (this._injector = new UIInjectorImpl(this));
		    };
		    ResolveContext.prototype.findNode = function (resolvable) {
		        return common_1.find(this._path, function (node) { return common_1.inArray(node.resolvables, resolvable); });
		    };
		    /**
		     * Gets the async dependencies of a Resolvable
		     *
		     * Given a Resolvable, returns its dependencies as a Resolvable[]
		     */
		    ResolveContext.prototype.getDependencies = function (resolvable) {
		        var _this = this;
		        var node = this.findNode(resolvable);
		        // Find which other resolvables are "visible" to the `resolvable` argument
		        // subpath stopping at resolvable's node, or the whole path (if the resolvable isn't in the path)
		        var subPath = pathFactory_1.PathFactory.subPath(this._path, function (x) { return x === node; }) || this._path;
		        var availableResolvables = subPath
		            .reduce(function (acc, node) { return acc.concat(node.resolvables); }, []) //all of subpath's resolvables
		            .filter(function (res) { return res !== resolvable; }); // filter out the `resolvable` argument
		        var getDependency = function (token) {
		            var matching = availableResolvables.filter(function (r) { return r.token === token; });
		            if (matching.length)
		                return common_1.tail(matching);
		            var fromInjector = _this.injector().getNative(token);
		            if (!fromInjector) {
		                throw new Error("Could not find Dependency Injection token: " + strings_1.stringify(token));
		            }
		            return new resolvable_1.Resolvable(token, function () { return fromInjector; }, [], fromInjector);
		        };
		        return resolvable.deps.map(getDependency);
		    };
		    return ResolveContext;
		}());
		exports.ResolveContext = ResolveContext;
		var UIInjectorImpl = (function () {
		    function UIInjectorImpl(context) {
		        this.context = context;
		        this.native = this.get(exports.NATIVE_INJECTOR_TOKEN) || coreservices_1.services.$injector;
		    }
		    UIInjectorImpl.prototype.get = function (token) {
		        var resolvable = this.context.getResolvable(token);
		        if (resolvable) {
		            if (!resolvable.resolved) {
		                throw new Error("Resolvable async .get() not complete:" + strings_1.stringify(resolvable.token));
		            }
		            return resolvable.data;
		        }
		        return this.native && this.native.get(token);
		    };
		    UIInjectorImpl.prototype.getAsync = function (token) {
		        var resolvable = this.context.getResolvable(token);
		        if (resolvable)
		            return resolvable.get(this.context);
		        return coreservices_1.services.$q.when(this.native.get(token));
		    };
		    UIInjectorImpl.prototype.getNative = function (token) {
		        return this.native.get(token);
		    };
		    return UIInjectorImpl;
		}());
	
	
	/***/ },
	/* 18 */
	/***/ function(module, exports) {
	
		"use strict";
		exports.resolvePolicies = {
		    when: {
		        LAZY: "LAZY",
		        EAGER: "EAGER"
		    },
		    async: {
		        WAIT: "WAIT",
		        NOWAIT: "NOWAIT",
		        RXWAIT: "RXWAIT"
		    }
		};
	
	
	/***/ },
	/* 19 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		/** @module resolve */ /** for typedoc */
		var common_1 = __webpack_require__(3);
		var coreservices_1 = __webpack_require__(6);
		var trace_1 = __webpack_require__(12);
		var strings_1 = __webpack_require__(9);
		var predicates_1 = __webpack_require__(4);
		// TODO: explicitly make this user configurable
		exports.defaultResolvePolicy = {
		    when: "LAZY",
		    async: "WAIT"
		};
		/**
		 * The basic building block for the resolve system.
		 *
		 * Resolvables encapsulate a state's resolve's resolveFn, the resolveFn's declared dependencies, the wrapped (.promise),
		 * and the unwrapped-when-complete (.data) result of the resolveFn.
		 *
		 * Resolvable.get() either retrieves the Resolvable's existing promise, or else invokes resolve() (which invokes the
		 * resolveFn) and returns the resulting promise.
		 *
		 * Resolvable.get() and Resolvable.resolve() both execute within a context path, which is passed as the first
		 * parameter to those fns.
		 */
		var Resolvable = (function () {
		    function Resolvable(arg1, resolveFn, deps, policy, data) {
		        this.resolved = false;
		        this.promise = undefined;
		        if (arg1 instanceof Resolvable) {
		            common_1.extend(this, arg1);
		        }
		        else if (predicates_1.isFunction(resolveFn)) {
		            if (arg1 == null || arg1 == undefined)
		                throw new Error("new Resolvable(): token argument is required");
		            if (!predicates_1.isFunction(resolveFn))
		                throw new Error("new Resolvable(): resolveFn argument must be a function");
		            this.token = arg1;
		            this.policy = policy;
		            this.resolveFn = resolveFn;
		            this.deps = deps || [];
		            this.data = data;
		            this.resolved = data !== undefined;
		            this.promise = this.resolved ? coreservices_1.services.$q.when(this.data) : undefined;
		        }
		        else if (predicates_1.isObject(arg1) && arg1.token && predicates_1.isFunction(arg1.resolveFn)) {
		            var literal = arg1;
		            return new Resolvable(literal.token, literal.resolveFn, literal.deps, literal.policy, literal.data);
		        }
		    }
		    Resolvable.prototype.getPolicy = function (state) {
		        var thisPolicy = this.policy || {};
		        var statePolicy = state && state.resolvePolicy || {};
		        return {
		            when: thisPolicy.when || statePolicy.when || exports.defaultResolvePolicy.when,
		            async: thisPolicy.async || statePolicy.async || exports.defaultResolvePolicy.async,
		        };
		    };
		    /**
		     * Asynchronously resolve this Resolvable's data
		     *
		     * Given a ResolveContext that this Resolvable is found in:
		     * Wait for this Resolvable's dependencies, then invoke this Resolvable's function
		     * and update the Resolvable's state
		     */
		    Resolvable.prototype.resolve = function (resolveContext, trans) {
		        var _this = this;
		        var $q = coreservices_1.services.$q;
		        // Gets all dependencies from ResolveContext and wait for them to be resolved
		        var getResolvableDependencies = function () {
		            return $q.all(resolveContext.getDependencies(_this).map(function (r) {
		                return r.get(resolveContext, trans);
		            }));
		        };
		        // Invokes the resolve function passing the resolved dependencies as arguments
		        var invokeResolveFn = function (resolvedDeps) {
		            return _this.resolveFn.apply(null, resolvedDeps);
		        };
		        /**
		         * For RXWAIT policy:
		         *
		         * Given an observable returned from a resolve function:
		         * - enables .cache() mode (this allows multicast subscribers)
		         * - then calls toPromise() (this triggers subscribe() and thus fetches)
		         * - Waits for the promise, then return the cached observable (not the first emitted value).
		         */
		        var waitForRx = function (observable$) {
		            var cached = observable$.cache(1);
		            return cached.take(1).toPromise().then(function () { return cached; });
		        };
		        // If the resolve policy is RXWAIT, wait for the observable to emit something. otherwise pass through.
		        var node = resolveContext.findNode(this);
		        var state = node && node.state;
		        var maybeWaitForRx = this.getPolicy(state).async === "RXWAIT" ? waitForRx : common_1.identity;
		        // After the final value has been resolved, update the state of the Resolvable
		        var applyResolvedValue = function (resolvedValue) {
		            _this.data = resolvedValue;
		            _this.resolved = true;
		            trace_1.trace.traceResolvableResolved(_this, trans);
		            return _this.data;
		        };
		        // Sets the promise property first, then getsResolvableDependencies in the context of the promise chain. Always waits one tick.
		        return this.promise = $q.when()
		            .then(getResolvableDependencies)
		            .then(invokeResolveFn)
		            .then(maybeWaitForRx)
		            .then(applyResolvedValue);
		    };
		    /**
		     * Gets a promise for this Resolvable's data.
		     *
		     * Fetches the data and returns a promise.
		     * Returns the existing promise if it has already been fetched once.
		     */
		    Resolvable.prototype.get = function (resolveContext, trans) {
		        return this.promise || this.resolve(resolveContext, trans);
		    };
		    Resolvable.prototype.toString = function () {
		        return "Resolvable(token: " + strings_1.stringify(this.token) + ", requires: [" + this.deps.map(strings_1.stringify) + "])";
		    };
		    Resolvable.prototype.clone = function () {
		        return new Resolvable(this);
		    };
		    Resolvable.fromData = function (token, data) {
		        return new Resolvable(token, function () { return data; }, null, null, data);
		    };
		    return Resolvable;
		}());
		exports.Resolvable = Resolvable;
	
	
	/***/ },
	/* 20 */
	/***/ function(module, exports, __webpack_require__) {
	
		/** @module path */ /** for typedoc */
		"use strict";
		var common_1 = __webpack_require__(3);
		var hof_1 = __webpack_require__(5);
		var targetState_1 = __webpack_require__(14);
		var node_1 = __webpack_require__(21);
		/**
		 * This class contains functions which convert TargetStates, Nodes and paths from one type to another.
		 */
		var PathFactory = (function () {
		    function PathFactory() {
		    }
		    /** Given a PathNode[], create an TargetState */
		    PathFactory.makeTargetState = function (path) {
		        var state = common_1.tail(path).state;
		        return new targetState_1.TargetState(state, state, path.map(hof_1.prop("paramValues")).reduce(common_1.mergeR, {}));
		    };
		    PathFactory.buildPath = function (targetState) {
		        var toParams = targetState.params();
		        return targetState.$state().path.map(function (state) { return new node_1.PathNode(state).applyRawParams(toParams); });
		    };
		    /** Given a fromPath: PathNode[] and a TargetState, builds a toPath: PathNode[] */
		    PathFactory.buildToPath = function (fromPath, targetState) {
		        var toPath = PathFactory.buildPath(targetState);
		        if (targetState.options().inherit) {
		            return PathFactory.inheritParams(fromPath, toPath, Object.keys(targetState.params()));
		        }
		        return toPath;
		    };
		    /**
		     * Creates ViewConfig objects and adds to nodes.
		     *
		     * On each [[PathNode]], creates ViewConfig objects from the views: property of the node's state
		     */
		    PathFactory.applyViewConfigs = function ($view, path, states) {
		        // Only apply the viewConfigs to the nodes for the given states
		        path.filter(function (node) { return common_1.inArray(states, node.state); }).forEach(function (node) {
		            var viewDecls = common_1.values(node.state.views || {});
		            var subPath = PathFactory.subPath(path, function (n) { return n === node; });
		            var viewConfigs = viewDecls.map(function (view) { return $view.createViewConfig(subPath, view); });
		            node.views = viewConfigs.reduce(common_1.unnestR, []);
		        });
		    };
		    /**
		     * Given a fromPath and a toPath, returns a new to path which inherits parameters from the fromPath
		     *
		     * For a parameter in a node to be inherited from the from path:
		     * - The toPath's node must have a matching node in the fromPath (by state).
		     * - The parameter name must not be found in the toKeys parameter array.
		     *
		     * Note: the keys provided in toKeys are intended to be those param keys explicitly specified by some
		     * caller, for instance, $state.transitionTo(..., toParams).  If a key was found in toParams,
		     * it is not inherited from the fromPath.
		     */
		    PathFactory.inheritParams = function (fromPath, toPath, toKeys) {
		        if (toKeys === void 0) { toKeys = []; }
		        function nodeParamVals(path, state) {
		            var node = common_1.find(path, hof_1.propEq('state', state));
		            return common_1.extend({}, node && node.paramValues);
		        }
		        /**
		         * Given an [[PathNode]] "toNode", return a new [[PathNode]] with param values inherited from the
		         * matching node in fromPath.  Only inherit keys that aren't found in "toKeys" from the node in "fromPath""
		         */
		        function makeInheritedParamsNode(toNode) {
		            // All param values for the node (may include default key/vals, when key was not found in toParams)
		            var toParamVals = common_1.extend({}, toNode && toNode.paramValues);
		            // limited to only those keys found in toParams
		            var incomingParamVals = common_1.pick(toParamVals, toKeys);
		            toParamVals = common_1.omit(toParamVals, toKeys);
		            var fromParamVals = nodeParamVals(fromPath, toNode.state) || {};
		            // extend toParamVals with any fromParamVals, then override any of those those with incomingParamVals
		            var ownParamVals = common_1.extend(toParamVals, fromParamVals, incomingParamVals);
		            return new node_1.PathNode(toNode.state).applyRawParams(ownParamVals);
		        }
		        // The param keys specified by the incoming toParams
		        return toPath.map(makeInheritedParamsNode);
		    };
		    /**
		     * Computes the tree changes (entering, exiting) between a fromPath and toPath.
		     */
		    PathFactory.treeChanges = function (fromPath, toPath, reloadState) {
		        var keep = 0, max = Math.min(fromPath.length, toPath.length);
		        var staticParams = function (state) {
		            return state.parameters({ inherit: false }).filter(hof_1.not(hof_1.prop('dynamic'))).map(hof_1.prop('id'));
		        };
		        var nodesMatch = function (node1, node2) {
		            return node1.equals(node2, staticParams(node1.state));
		        };
		        while (keep < max && fromPath[keep].state !== reloadState && nodesMatch(fromPath[keep], toPath[keep])) {
		            keep++;
		        }
		        /** Given a retained node, return a new node which uses the to node's param values */
		        function applyToParams(retainedNode, idx) {
		            var cloned = node_1.PathNode.clone(retainedNode);
		            cloned.paramValues = toPath[idx].paramValues;
		            return cloned;
		        }
		        var from, retained, exiting, entering, to;
		        from = fromPath;
		        retained = from.slice(0, keep);
		        exiting = from.slice(keep);
		        // Create a new retained path (with shallow copies of nodes) which have the params of the toPath mapped
		        var retainedWithToParams = retained.map(applyToParams);
		        entering = toPath.slice(keep);
		        to = (retainedWithToParams).concat(entering);
		        return { from: from, to: to, retained: retained, exiting: exiting, entering: entering };
		    };
		    /**
		     * Return a subpath of a path, which stops at the first matching node
		     *
		     * Given an array of nodes, returns a subset of the array starting from the first node,
		     * stopping when the first node matches the predicate.
		     *
		     * @param path a path of [[PathNode]]s
		     * @param predicate a [[Predicate]] fn that matches [[PathNode]]s
		     * @returns a subpath up to the matching node, or undefined if no match is found
		     */
		    PathFactory.subPath = function (path, predicate) {
		        var node = common_1.find(path, predicate);
		        var elementIdx = path.indexOf(node);
		        return elementIdx === -1 ? undefined : path.slice(0, elementIdx + 1);
		    };
		    /** Gets the raw parameter values from a path */
		    PathFactory.paramValues = function (path) { return path.reduce(function (acc, node) { return common_1.extend(acc, node.paramValues); }, {}); };
		    return PathFactory;
		}());
		exports.PathFactory = PathFactory;
	
	
	/***/ },
	/* 21 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		/** @module path */ /** for typedoc */
		var common_1 = __webpack_require__(3);
		var hof_1 = __webpack_require__(5);
		var param_1 = __webpack_require__(22);
		/**
		 * A node in a [[TreeChanges]] path
		 *
		 * For a [[TreeChanges]] path, this class holds the stateful information for a single node in the path.
		 * Each PathNode corresponds to a state being entered, exited, or retained.
		 * The stateful information includes parameter values and resolve data.
		 */
		var PathNode = (function () {
		    function PathNode(stateOrPath) {
		        if (stateOrPath instanceof PathNode) {
		            var node = stateOrPath;
		            this.state = node.state;
		            this.paramSchema = node.paramSchema.slice();
		            this.paramValues = common_1.extend({}, node.paramValues);
		            this.resolvables = node.resolvables.slice();
		            this.views = node.views && node.views.slice();
		        }
		        else {
		            var state = stateOrPath;
		            this.state = state;
		            this.paramSchema = state.parameters({ inherit: false });
		            this.paramValues = {};
		            this.resolvables = state.resolvables.map(function (res) { return res.clone(); });
		        }
		    }
		    /** Sets [[paramValues]] for the node, from the values of an object hash */
		    PathNode.prototype.applyRawParams = function (params) {
		        var getParamVal = function (paramDef) { return [paramDef.id, paramDef.value(params[paramDef.id])]; };
		        this.paramValues = this.paramSchema.reduce(function (memo, pDef) { return common_1.applyPairs(memo, getParamVal(pDef)); }, {});
		        return this;
		    };
		    /** Gets a specific [[Param]] metadata that belongs to the node */
		    PathNode.prototype.parameter = function (name) {
		        return common_1.find(this.paramSchema, hof_1.propEq("id", name));
		    };
		    /**
		     * @returns true if the state and parameter values for another PathNode are
		     * equal to the state and param values for this PathNode
		     */
		    PathNode.prototype.equals = function (node, keys) {
		        var _this = this;
		        if (keys === void 0) { keys = this.paramSchema.map(function (p) { return p.id; }); }
		        var paramValsEq = function (key) {
		            return _this.parameter(key).type.equals(_this.paramValues[key], node.paramValues[key]);
		        };
		        return this.state === node.state && keys.map(paramValsEq).reduce(common_1.allTrueR, true);
		    };
		    /** Returns a clone of the PathNode */
		    PathNode.clone = function (node) {
		        return new PathNode(node);
		    };
		    /**
		     * Returns a new path which is a subpath of the first path which matched the second path.
		     *
		     * The new path starts from root and contains any nodes that match the nodes in the second path.
		     * Nodes are compared using their state property and parameter values.
		     *
		     * @param pathA the first path
		     * @param pathB the second path
		     * @param ignoreDynamicParams don't compare dynamic parameter values
		     */
		    PathNode.matching = function (pathA, pathB, ignoreDynamicParams) {
		        if (ignoreDynamicParams === void 0) { ignoreDynamicParams = true; }
		        var matching = [];
		        for (var i = 0; i < pathA.length && i < pathB.length; i++) {
		            var a = pathA[i], b = pathB[i];
		            if (a.state !== b.state)
		                break;
		            var changedParams = param_1.Param.changed(a.paramSchema, a.paramValues, b.paramValues)
		                .filter(function (param) { return !(ignoreDynamicParams && param.dynamic); });
		            if (changedParams.length)
		                break;
		            matching.push(a);
		        }
		        return matching;
		    };
		    return PathNode;
		}());
		exports.PathNode = PathNode;
	
	
	/***/ },
	/* 22 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		/** @module params */ /** for typedoc */
		var common_1 = __webpack_require__(3);
		var hof_1 = __webpack_require__(5);
		var predicates_1 = __webpack_require__(4);
		var coreservices_1 = __webpack_require__(6);
		var urlMatcherConfig_1 = __webpack_require__(23);
		var type_1 = __webpack_require__(24);
		var hasOwn = Object.prototype.hasOwnProperty;
		var isShorthand = function (cfg) {
		    return ["value", "type", "squash", "array", "dynamic"].filter(hasOwn.bind(cfg || {})).length === 0;
		};
		(function (DefType) {
		    DefType[DefType["PATH"] = 0] = "PATH";
		    DefType[DefType["SEARCH"] = 1] = "SEARCH";
		    DefType[DefType["CONFIG"] = 2] = "CONFIG";
		})(exports.DefType || (exports.DefType = {}));
		var DefType = exports.DefType;
		function unwrapShorthand(cfg) {
		    cfg = isShorthand(cfg) && { value: cfg } || cfg;
		    return common_1.extend(cfg, {
		        $$fn: predicates_1.isInjectable(cfg.value) ? cfg.value : function () { return cfg.value; }
		    });
		}
		function getType(cfg, urlType, location, id, paramTypes) {
		    if (cfg.type && urlType && urlType.name !== 'string')
		        throw new Error("Param '" + id + "' has two type configurations.");
		    if (cfg.type && urlType && urlType.name === 'string' && paramTypes.type(cfg.type))
		        return paramTypes.type(cfg.type);
		    if (urlType)
		        return urlType;
		    if (!cfg.type)
		        return (location === DefType.CONFIG ? paramTypes.type("any") : paramTypes.type("string"));
		    return cfg.type instanceof type_1.ParamType ? cfg.type : paramTypes.type(cfg.type);
		}
		/**
		 * returns false, true, or the squash value to indicate the "default parameter url squash policy".
		 */
		function getSquashPolicy(config, isOptional) {
		    var squash = config.squash;
		    if (!isOptional || squash === false)
		        return false;
		    if (!predicates_1.isDefined(squash) || squash == null)
		        return urlMatcherConfig_1.matcherConfig.defaultSquashPolicy();
		    if (squash === true || predicates_1.isString(squash))
		        return squash;
		    throw new Error("Invalid squash policy: '" + squash + "'. Valid policies: false, true, or arbitrary string");
		}
		function getReplace(config, arrayMode, isOptional, squash) {
		    var replace, configuredKeys, defaultPolicy = [
		        { from: "", to: (isOptional || arrayMode ? undefined : "") },
		        { from: null, to: (isOptional || arrayMode ? undefined : "") }
		    ];
		    replace = predicates_1.isArray(config.replace) ? config.replace : [];
		    if (predicates_1.isString(squash))
		        replace.push({ from: squash, to: undefined });
		    configuredKeys = common_1.map(replace, hof_1.prop("from"));
		    return common_1.filter(defaultPolicy, function (item) { return configuredKeys.indexOf(item.from) === -1; }).concat(replace);
		}
		var Param = (function () {
		    function Param(id, type, config, location, paramTypes) {
		        config = unwrapShorthand(config);
		        type = getType(config, type, location, id, paramTypes);
		        var arrayMode = getArrayMode();
		        type = arrayMode ? type.$asArray(arrayMode, location === DefType.SEARCH) : type;
		        var isOptional = config.value !== undefined;
		        var dynamic = predicates_1.isDefined(config.dynamic) ? !!config.dynamic : !!type.dynamic;
		        var squash = getSquashPolicy(config, isOptional);
		        var replace = getReplace(config, arrayMode, isOptional, squash);
		        // array config: param name (param[]) overrides default settings.  explicit config overrides param name.
		        function getArrayMode() {
		            var arrayDefaults = { array: (location === DefType.SEARCH ? "auto" : false) };
		            var arrayParamNomenclature = id.match(/\[\]$/) ? { array: true } : {};
		            return common_1.extend(arrayDefaults, arrayParamNomenclature, config).array;
		        }
		        common_1.extend(this, { id: id, type: type, location: location, squash: squash, replace: replace, isOptional: isOptional, dynamic: dynamic, config: config, array: arrayMode });
		    }
		    Param.prototype.isDefaultValue = function (value) {
		        return this.isOptional && this.type.equals(this.value(), value);
		    };
		    /**
		     * [Internal] Gets the decoded representation of a value if the value is defined, otherwise, returns the
		     * default value, which may be the result of an injectable function.
		     */
		    Param.prototype.value = function (value) {
		        var _this = this;
		        /**
		         * [Internal] Get the default value of a parameter, which may be an injectable function.
		         */
		        var $$getDefaultValue = function () {
		            if (!coreservices_1.services.$injector)
		                throw new Error("Injectable functions cannot be called at configuration time");
		            var defaultValue = coreservices_1.services.$injector.invoke(_this.config.$$fn);
		            if (defaultValue !== null && defaultValue !== undefined && !_this.type.is(defaultValue))
		                throw new Error("Default value (" + defaultValue + ") for parameter '" + _this.id + "' is not an instance of ParamType (" + _this.type.name + ")");
		            return defaultValue;
		        };
		        var $replace = function (val) {
		            var replacement = common_1.map(common_1.filter(_this.replace, hof_1.propEq('from', val)), hof_1.prop("to"));
		            return replacement.length ? replacement[0] : val;
		        };
		        value = $replace(value);
		        return !predicates_1.isDefined(value) ? $$getDefaultValue() : this.type.$normalize(value);
		    };
		    Param.prototype.isSearch = function () {
		        return this.location === DefType.SEARCH;
		    };
		    Param.prototype.validates = function (value) {
		        // There was no parameter value, but the param is optional
		        if ((!predicates_1.isDefined(value) || value === null) && this.isOptional)
		            return true;
		        // The value was not of the correct ParamType, and could not be decoded to the correct ParamType
		        var normalized = this.type.$normalize(value);
		        if (!this.type.is(normalized))
		            return false;
		        // The value was of the correct type, but when encoded, did not match the ParamType's regexp
		        var encoded = this.type.encode(normalized);
		        return !(predicates_1.isString(encoded) && !this.type.pattern.exec(encoded));
		    };
		    Param.prototype.toString = function () {
		        return "{Param:" + this.id + " " + this.type + " squash: '" + this.squash + "' optional: " + this.isOptional + "}";
		    };
		    /** Creates a new [[Param]] from a CONFIG block */
		    Param.fromConfig = function (id, type, config, paramTypes) {
		        return new Param(id, type, config, DefType.CONFIG, paramTypes);
		    };
		    /** Creates a new [[Param]] from a url PATH */
		    Param.fromPath = function (id, type, config, paramTypes) {
		        return new Param(id, type, config, DefType.PATH, paramTypes);
		    };
		    /** Creates a new [[Param]] from a url SEARCH */
		    Param.fromSearch = function (id, type, config, paramTypes) {
		        return new Param(id, type, config, DefType.SEARCH, paramTypes);
		    };
		    Param.values = function (params, values) {
		        if (values === void 0) { values = {}; }
		        return params.map(function (param) { return [param.id, param.value(values[param.id])]; }).reduce(common_1.applyPairs, {});
		    };
		    /**
		     * Finds [[Param]] objects which have different param values
		     *
		     * Filters a list of [[Param]] objects to only those whose parameter values differ in two param value objects
		     *
		     * @param params: The list of Param objects to filter
		     * @param values1: The first set of parameter values
		     * @param values2: the second set of parameter values
		     *
		     * @returns any Param objects whose values were different between values1 and values2
		     */
		    Param.changed = function (params, values1, values2) {
		        if (values1 === void 0) { values1 = {}; }
		        if (values2 === void 0) { values2 = {}; }
		        return params.filter(function (param) { return !param.type.equals(values1[param.id], values2[param.id]); });
		    };
		    /**
		     * Checks if two param value objects are equal (for a set of [[Param]] objects)
		     *
		     * @param params The list of [[Param]] objects to check
		     * @param values1 The first set of param values
		     * @param values2 The second set of param values
		     *
		     * @returns true if the param values in values1 and values2 are equal
		     */
		    Param.equals = function (params, values1, values2) {
		        if (values1 === void 0) { values1 = {}; }
		        if (values2 === void 0) { values2 = {}; }
		        return Param.changed(params, values1, values2).length === 0;
		    };
		    /** Returns true if a the parameter values are valid, according to the Param definitions */
		    Param.validates = function (params, values) {
		        if (values === void 0) { values = {}; }
		        return params.map(function (param) { return param.validates(values[param.id]); }).reduce(common_1.allTrueR, true);
		    };
		    return Param;
		}());
		exports.Param = Param;
	
	
	/***/ },
	/* 23 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		/** @module url */ /** for typedoc */
		var predicates_1 = __webpack_require__(4);
		var MatcherConfig = (function () {
		    function MatcherConfig() {
		        this._isCaseInsensitive = false;
		        this._isStrictMode = true;
		        this._defaultSquashPolicy = false;
		    }
		    MatcherConfig.prototype.caseInsensitive = function (value) {
		        return this._isCaseInsensitive = predicates_1.isDefined(value) ? value : this._isCaseInsensitive;
		    };
		    MatcherConfig.prototype.strictMode = function (value) {
		        return this._isStrictMode = predicates_1.isDefined(value) ? value : this._isStrictMode;
		    };
		    MatcherConfig.prototype.defaultSquashPolicy = function (value) {
		        if (predicates_1.isDefined(value) && value !== true && value !== false && !predicates_1.isString(value))
		            throw new Error("Invalid squash policy: " + value + ". Valid policies: false, true, arbitrary-string");
		        return this._defaultSquashPolicy = predicates_1.isDefined(value) ? value : this._defaultSquashPolicy;
		    };
		    return MatcherConfig;
		}());
		exports.MatcherConfig = MatcherConfig;
		// TODO: Do not export global instance; create one in UIRouter() constructor
		exports.matcherConfig = new MatcherConfig();
	
	
	/***/ },
	/* 24 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		/** @module params */ /** for typedoc */
		var common_1 = __webpack_require__(3);
		var predicates_1 = __webpack_require__(4);
		/**
		 * Wraps up a `ParamType` object to handle array values.
		 */
		function ArrayType(type, mode) {
		    var _this = this;
		    // Wrap non-array value as array
		    function arrayWrap(val) {
		        return predicates_1.isArray(val) ? val : (predicates_1.isDefined(val) ? [val] : []);
		    }
		    // Unwrap array value for "auto" mode. Return undefined for empty array.
		    function arrayUnwrap(val) {
		        switch (val.length) {
		            case 0: return undefined;
		            case 1: return mode === "auto" ? val[0] : val;
		            default: return val;
		        }
		    }
		    // Wraps type (.is/.encode/.decode) functions to operate on each value of an array
		    function arrayHandler(callback, allTruthyMode) {
		        return function handleArray(val) {
		            if (predicates_1.isArray(val) && val.length === 0)
		                return val;
		            var arr = arrayWrap(val);
		            var result = common_1.map(arr, callback);
		            return (allTruthyMode === true) ? common_1.filter(result, function (x) { return !x; }).length === 0 : arrayUnwrap(result);
		        };
		    }
		    // Wraps type (.equals) functions to operate on each value of an array
		    function arrayEqualsHandler(callback) {
		        return function handleArray(val1, val2) {
		            var left = arrayWrap(val1), right = arrayWrap(val2);
		            if (left.length !== right.length)
		                return false;
		            for (var i = 0; i < left.length; i++) {
		                if (!callback(left[i], right[i]))
		                    return false;
		            }
		            return true;
		        };
		    }
		    ['encode', 'decode', 'equals', '$normalize'].forEach(function (name) {
		        var paramTypeFn = type[name].bind(type);
		        var wrapperFn = name === 'equals' ? arrayEqualsHandler : arrayHandler;
		        _this[name] = wrapperFn(paramTypeFn);
		    });
		    common_1.extend(this, {
		        dynamic: type.dynamic,
		        name: type.name,
		        pattern: type.pattern,
		        is: arrayHandler(type.is.bind(type), true),
		        $arrayMode: mode
		    });
		}
		/**
		 * A class that implements Custom Parameter Type functionality.
		 *
		 * This class has naive implementations for all the [[ParamTypeDefinition]] methods.
		 *
		 * An instance of this class is created when a custom [[ParamTypeDefinition]] object is registered with the [[UrlMatcherFactory.type]].
		 *
		 * Used by [[UrlMatcher]] when matching or formatting URLs, or comparing and validating parameter values.
		 *
		 * @example
		 * ```
		 *
		 * {
		 *   decode: function(val) { return parseInt(val, 10); },
		 *   encode: function(val) { return val && val.toString(); },
		 *   equals: function(a, b) { return this.is(a) && a === b; },
		 *   is: function(val) { return angular.isNumber(val) && isFinite(val) && val % 1 === 0; },
		 *   pattern: /\d+/
		 * }
		 * ```
		 */
		var ParamType = (function () {
		    /**
		     * @param def  A configuration object which contains the custom type definition.  The object's
		     *        properties will override the default methods and/or pattern in `ParamType`'s public interface.
		     * @returns a new ParamType object
		     */
		    function ParamType(def) {
		        this.pattern = /.*/;
		        common_1.extend(this, def);
		    }
		    // consider these four methods to be "abstract methods" that should be overridden
		    /** @inheritdoc */
		    ParamType.prototype.is = function (val, key) { return true; };
		    /** @inheritdoc */
		    ParamType.prototype.encode = function (val, key) { return val; };
		    /** @inheritdoc */
		    ParamType.prototype.decode = function (val, key) { return val; };
		    /** @inheritdoc */
		    ParamType.prototype.equals = function (a, b) { return a == b; };
		    ParamType.prototype.$subPattern = function () {
		        var sub = this.pattern.toString();
		        return sub.substr(1, sub.length - 2);
		    };
		    ParamType.prototype.toString = function () {
		        return "{ParamType:" + this.name + "}";
		    };
		    /** Given an encoded string, or a decoded object, returns a decoded object */
		    ParamType.prototype.$normalize = function (val) {
		        return this.is(val) ? val : this.decode(val);
		    };
		    /**
		     * Wraps an existing custom ParamType as an array of ParamType, depending on 'mode'.
		     * e.g.:
		     * - urlmatcher pattern "/path?{queryParam[]:int}"
		     * - url: "/path?queryParam=1&queryParam=2
		     * - $stateParams.queryParam will be [1, 2]
		     * if `mode` is "auto", then
		     * - url: "/path?queryParam=1 will create $stateParams.queryParam: 1
		     * - url: "/path?queryParam=1&queryParam=2 will create $stateParams.queryParam: [1, 2]
		     */
		    ParamType.prototype.$asArray = function (mode, isSearch) {
		        if (!mode)
		            return this;
		        if (mode === "auto" && !isSearch)
		            throw new Error("'auto' array mode is for query parameters only");
		        return new ArrayType(this, mode);
		    };
		    return ParamType;
		}());
		exports.ParamType = ParamType;
	
	
	/***/ },
	/* 25 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		/** @module core */ /** */
		var urlMatcherFactory_1 = __webpack_require__(26);
		var urlRouter_1 = __webpack_require__(29);
		var urlRouter_2 = __webpack_require__(29);
		var transitionService_1 = __webpack_require__(30);
		var view_1 = __webpack_require__(37);
		var stateRegistry_1 = __webpack_require__(38);
		var stateService_1 = __webpack_require__(43);
		var globals_1 = __webpack_require__(44);
		/**
		 * The master class used to instantiate an instance of UI-Router.
		 *
		 * This class instantiates and wires the global UI-Router services.
		 *
		 * After instantiating a new instance of the Router class, configure it for your app.  For instance, register
		 * your app states with the [[stateRegistry]] (and set url options using ...).  Then, tell UI-Router to monitor
		 * the URL by calling `urlRouter.listen()` ([[URLRouter.listen]])
		 */
		var UIRouter = (function () {
		    function UIRouter() {
		        this.viewService = new view_1.ViewService();
		        this.transitionService = new transitionService_1.TransitionService(this);
		        this.globals = new globals_1.Globals(this.transitionService);
		        this.urlMatcherFactory = new urlMatcherFactory_1.UrlMatcherFactory();
		        this.urlRouterProvider = new urlRouter_1.UrlRouterProvider(this.urlMatcherFactory, this.globals.params);
		        this.urlRouter = new urlRouter_2.UrlRouter(this.urlRouterProvider);
		        this.stateRegistry = new stateRegistry_1.StateRegistry(this.urlMatcherFactory, this.urlRouterProvider);
		        this.stateService = new stateService_1.StateService(this);
		        this.viewService.rootContext(this.stateRegistry.root());
		        this.globals.$current = this.stateRegistry.root();
		        this.globals.current = this.globals.$current.self;
		    }
		    return UIRouter;
		}());
		exports.UIRouter = UIRouter;
	
	
	/***/ },
	/* 26 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		/** @module url */ /** for typedoc */
		var common_1 = __webpack_require__(3);
		var predicates_1 = __webpack_require__(4);
		var urlMatcher_1 = __webpack_require__(27);
		var urlMatcherConfig_1 = __webpack_require__(23);
		var param_1 = __webpack_require__(22);
		var paramTypes_1 = __webpack_require__(28);
		/** @hidden */
		function getDefaultConfig() {
		    return {
		        strict: urlMatcherConfig_1.matcherConfig.strictMode(),
		        caseInsensitive: urlMatcherConfig_1.matcherConfig.caseInsensitive()
		    };
		}
		/**
		 * Factory for [[UrlMatcher]] instances.
		 *
		 * The factory is available to ng1 services as
		 * `$urlMatcherFactor` or ng1 providers as `$urlMatcherFactoryProvider`.
		 */
		var UrlMatcherFactory = (function () {
		    function UrlMatcherFactory() {
		        this.paramTypes = new paramTypes_1.ParamTypes();
		        common_1.extend(this, { UrlMatcher: urlMatcher_1.UrlMatcher, Param: param_1.Param });
		    }
		    /**
		     * Defines whether URL matching should be case sensitive (the default behavior), or not.
		     *
		     * @param value `false` to match URL in a case sensitive manner; otherwise `true`;
		     * @returns the current value of caseInsensitive
		     */
		    UrlMatcherFactory.prototype.caseInsensitive = function (value) {
		        return urlMatcherConfig_1.matcherConfig.caseInsensitive(value);
		    };
		    /**
		     * Defines whether URLs should match trailing slashes, or not (the default behavior).
		     *
		     * @param value `false` to match trailing slashes in URLs, otherwise `true`.
		     * @returns the current value of strictMode
		     */
		    UrlMatcherFactory.prototype.strictMode = function (value) {
		        return urlMatcherConfig_1.matcherConfig.strictMode(value);
		    };
		    /**
		     * Sets the default behavior when generating or matching URLs with default parameter values.
		     *
		     * @param value A string that defines the default parameter URL squashing behavior.
		     *    - `nosquash`: When generating an href with a default parameter value, do not squash the parameter value from the URL
		     *    - `slash`: When generating an href with a default parameter value, squash (remove) the parameter value, and, if the
		     *             parameter is surrounded by slashes, squash (remove) one slash from the URL
		     *    - any other string, e.g. "~": When generating an href with a default parameter value, squash (remove)
		     *             the parameter value from the URL and replace it with this string.
		     * @returns the current value of defaultSquashPolicy
		     */
		    UrlMatcherFactory.prototype.defaultSquashPolicy = function (value) {
		        return urlMatcherConfig_1.matcherConfig.defaultSquashPolicy(value);
		    };
		    /**
		     * Creates a [[UrlMatcher]] for the specified pattern.
		     *
		     * @param pattern  The URL pattern.
		     * @param config  The config object hash.
		     * @returns The UrlMatcher.
		     */
		    UrlMatcherFactory.prototype.compile = function (pattern, config) {
		        return new urlMatcher_1.UrlMatcher(pattern, this.paramTypes, common_1.extend(getDefaultConfig(), config));
		    };
		    /**
		     * Returns true if the specified object is a [[UrlMatcher]], or false otherwise.
		     *
		     * @param object  The object to perform the type check against.
		     * @returns `true` if the object matches the `UrlMatcher` interface, by
		     *          implementing all the same methods.
		     */
		    UrlMatcherFactory.prototype.isMatcher = function (object) {
		        // TODO: typeof?
		        if (!predicates_1.isObject(object))
		            return false;
		        var result = true;
		        common_1.forEach(urlMatcher_1.UrlMatcher.prototype, function (val, name) {
		            if (predicates_1.isFunction(val))
		                result = result && (predicates_1.isDefined(object[name]) && predicates_1.isFunction(object[name]));
		        });
		        return result;
		    };
		    ;
		    /**
		     * Creates and registers a custom [[ParamType]] object
		     *
		     * A [[ParamType]] can be used to generate URLs with typed parameters.
		     *
		     * @param name  The type name.
		     * @param definition The type definition. See [[ParamTypeDefinition]] for information on the values accepted.
		     * @param definitionFn A function that is injected before the app runtime starts.
		     *        The result of this function should be a [[ParamTypeDefinition]].
		     *        The result is merged into the existing `definition`.
		     *        See [[ParamType]] for information on the values accepted.
		     *
		     * @returns - if a type was registered: the [[UrlMatcherFactory]]
		     *   - if only the `name` parameter was specified: the currently registered [[ParamType]] object, or undefined
		     *
		     * Note: Register custom types *before using them* in a state definition.
		     *
		     * See [[ParamTypeDefinition]] for examples
		     */
		    UrlMatcherFactory.prototype.type = function (name, definition, definitionFn) {
		        var type = this.paramTypes.type(name, definition, definitionFn);
		        return !predicates_1.isDefined(definition) ? type : this;
		    };
		    ;
		    /** @hidden */
		    UrlMatcherFactory.prototype.$get = function () {
		        this.paramTypes.enqueue = false;
		        this.paramTypes._flushTypeQueue();
		        return this;
		    };
		    ;
		    return UrlMatcherFactory;
		}());
		exports.UrlMatcherFactory = UrlMatcherFactory;
	
	
	/***/ },
	/* 27 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		/** @module url */ /** for typedoc */
		var common_1 = __webpack_require__(3);
		var hof_1 = __webpack_require__(5);
		var predicates_1 = __webpack_require__(4);
		var param_1 = __webpack_require__(22);
		var predicates_2 = __webpack_require__(4);
		var param_2 = __webpack_require__(22);
		var common_2 = __webpack_require__(3);
		var common_3 = __webpack_require__(3);
		/** @hidden */
		function quoteRegExp(string, param) {
		    var surroundPattern = ['', ''], result = string.replace(/[\\\[\]\^$*+?.()|{}]/g, "\\$&");
		    if (!param)
		        return result;
		    switch (param.squash) {
		        case false:
		            surroundPattern = ['(', ')' + (param.isOptional ? '?' : '')];
		            break;
		        case true:
		            result = result.replace(/\/$/, '');
		            surroundPattern = ['(?:\/(', ')|\/)?'];
		            break;
		        default:
		            surroundPattern = [("(" + param.squash + "|"), ')?'];
		            break;
		    }
		    return result + surroundPattern[0] + param.type.pattern.source + surroundPattern[1];
		}
		/** @hidden */
		var memoizeTo = function (obj, prop, fn) {
		    return obj[prop] = obj[prop] || fn();
		};
		/**
		 * Matches URLs against patterns.
		 *
		 * Matches URLs against patterns and extracts named parameters from the path or the search
		 * part of the URL.
		 *
		 * A URL pattern consists of a path pattern, optionally followed by '?' and a list of search (query)
		 * parameters. Multiple search parameter names are separated by '&'. Search parameters
		 * do not influence whether or not a URL is matched, but their values are passed through into
		 * the matched parameters returned by [[UrlMatcher.exec]].
		 *
		 * - *Path parameters* are defined using curly brace placeholders (`/somepath/{param}`)
		 * or colon placeholders (`/somePath/:param`).
		 *
		 * - *A parameter RegExp* may be defined for a param after a colon
		 * (`/somePath/{param:[a-zA-Z0-9]+}`) in a curly brace placeholder.
		 * The regexp must match for the url to be matched.
		 * Should the regexp itself contain curly braces, they must be in matched pairs or escaped with a backslash.
		 *
		 * - *Custom parameter types* may also be specified after a colon (`/somePath/{param:int}`)
		 * in curly brace parameters.  See [[UrlMatcherFactory.type]] for more information.
		 *
		 * - *Catch-all parameters* are defined using an asterisk placeholder (`/somepath/*catchallparam`).  A catch-all
		 * parameter value will contain the remainder of the URL.
		 *
		 * ---
		 *
		 * Parameter names may contain only word characters (latin letters, digits, and underscore) and
		 * must be unique within the pattern (across both path and search parameters).
		 * A path parameter matches any number of characters other than '/'. For catch-all
		 * placeholders the path parameter matches any number of characters.
		 *
		 * Examples:
		 *
		 * * `'/hello/'` - Matches only if the path is exactly '/hello/'. There is no special treatment for
		 *   trailing slashes, and patterns have to match the entire path, not just a prefix.
		 * * `'/user/:id'` - Matches '/user/bob' or '/user/1234!!!' or even '/user/' but not '/user' or
		 *   '/user/bob/details'. The second path segment will be captured as the parameter 'id'.
		 * * `'/user/{id}'` - Same as the previous example, but using curly brace syntax.
		 * * `'/user/{id:[^/]*}'` - Same as the previous example.
		 * * `'/user/{id:[0-9a-fA-F]{1,8}}'` - Similar to the previous example, but only matches if the id
		 *   parameter consists of 1 to 8 hex digits.
		 * * `'/files/{path:.*}'` - Matches any URL starting with '/files/' and captures the rest of the
		 *   path into the parameter 'path'.
		 * * `'/files/*path'` - ditto.
		 * * `'/calendar/{start:date}'` - Matches "/calendar/2014-11-12" (because the pattern defined
		 *   in the built-in  `date` ParamType matches `2014-11-12`) and provides a Date object in $stateParams.start
		 *
		 */
		var UrlMatcher = (function () {
		    /**
		     * @param pattern The pattern to compile into a matcher.
		     * @param paramTypes The [[ParamTypes]] registry
		     * @param config  A configuration object
		     * - `caseInsensitive` - `true` if URL matching should be case insensitive, otherwise `false`, the default value (for backward compatibility) is `false`.
		     * - `strict` - `false` if matching against a URL with a trailing slash should be treated as equivalent to a URL without a trailing slash, the default value is `true`.
		     */
		    function UrlMatcher(pattern, paramTypes, config) {
		        var _this = this;
		        this.config = config;
		        /** @hidden */
		        this._cache = { path: [], pattern: null };
		        /** @hidden */
		        this._children = [];
		        /** @hidden */
		        this._params = [];
		        /** @hidden */
		        this._segments = [];
		        /** @hidden */
		        this._compiled = [];
		        this.pattern = pattern;
		        this.config = common_1.defaults(this.config, {
		            params: {},
		            strict: true,
		            caseInsensitive: false,
		            paramMap: common_1.identity
		        });
		        // Find all placeholders and create a compiled pattern, using either classic or curly syntax:
		        //   '*' name
		        //   ':' name
		        //   '{' name '}'
		        //   '{' name ':' regexp '}'
		        // The regular expression is somewhat complicated due to the need to allow curly braces
		        // inside the regular expression. The placeholder regexp breaks down as follows:
		        //    ([:*])([\w\[\]]+)              - classic placeholder ($1 / $2) (search version has - for snake-case)
		        //    \{([\w\[\]]+)(?:\:\s*( ... ))?\}  - curly brace placeholder ($3) with optional regexp/type ... ($4) (search version has - for snake-case
		        //    (?: ... | ... | ... )+         - the regexp consists of any number of atoms, an atom being either
		        //    [^{}\\]+                       - anything other than curly braces or backslash
		        //    \\.                            - a backslash escape
		        //    \{(?:[^{}\\]+|\\.)*\}          - a matched set of curly braces containing other atoms
		        var placeholder = /([:*])([\w\[\]]+)|\{([\w\[\]]+)(?:\:\s*((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g, searchPlaceholder = /([:]?)([\w\[\].-]+)|\{([\w\[\].-]+)(?:\:\s*((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g, last = 0, m, patterns = [];
		        var checkParamErrors = function (id) {
		            if (!UrlMatcher.nameValidator.test(id))
		                throw new Error("Invalid parameter name '" + id + "' in pattern '" + pattern + "'");
		            if (common_1.find(_this._params, hof_1.propEq('id', id)))
		                throw new Error("Duplicate parameter name '" + id + "' in pattern '" + pattern + "'");
		        };
		        // Split into static segments separated by path parameter placeholders.
		        // The number of segments is always 1 more than the number of parameters.
		        var matchDetails = function (m, isSearch) {
		            // IE[78] returns '' for unmatched groups instead of null
		            var id = m[2] || m[3], regexp = isSearch ? m[4] : m[4] || (m[1] === '*' ? '.*' : null);
		            return {
		                id: id,
		                regexp: regexp,
		                cfg: _this.config.params[id],
		                segment: pattern.substring(last, m.index),
		                type: !regexp ? null : paramTypes.type(regexp || "string") || common_1.inherit(paramTypes.type("string"), {
		                    pattern: new RegExp(regexp, _this.config.caseInsensitive ? 'i' : undefined)
		                })
		            };
		        };
		        var p, segment;
		        while ((m = placeholder.exec(pattern))) {
		            p = matchDetails(m, false);
		            if (p.segment.indexOf('?') >= 0)
		                break; // we're into the search part
		            checkParamErrors(p.id);
		            this._params.push(param_1.Param.fromPath(p.id, p.type, this.config.paramMap(p.cfg, false), paramTypes));
		            this._segments.push(p.segment);
		            patterns.push([p.segment, common_1.tail(this._params)]);
		            last = placeholder.lastIndex;
		        }
		        segment = pattern.substring(last);
		        // Find any search parameter names and remove them from the last segment
		        var i = segment.indexOf('?');
		        if (i >= 0) {
		            var search = segment.substring(i);
		            segment = segment.substring(0, i);
		            if (search.length > 0) {
		                last = 0;
		                while ((m = searchPlaceholder.exec(search))) {
		                    p = matchDetails(m, true);
		                    checkParamErrors(p.id);
		                    this._params.push(param_1.Param.fromSearch(p.id, p.type, this.config.paramMap(p.cfg, true), paramTypes));
		                    last = placeholder.lastIndex;
		                }
		            }
		        }
		        this._segments.push(segment);
		        common_1.extend(this, {
		            _compiled: patterns.map(function (pattern) { return quoteRegExp.apply(null, pattern); }).concat(quoteRegExp(segment)),
		            prefix: this._segments[0]
		        });
		        Object.freeze(this);
		    }
		    /**
		     * Creates a new concatenated UrlMatcher
		     *
		     * Builds a new UrlMatcher by appending another UrlMatcher to this one.
		     *
		     * @param url A `UrlMatcher` instance to append as a child of the current `UrlMatcher`.
		     */
		    UrlMatcher.prototype.append = function (url) {
		        this._children.push(url);
		        common_1.forEach(url._cache, function (val, key) { return url._cache[key] = predicates_1.isArray(val) ? [] : null; });
		        url._cache.path = this._cache.path.concat(this);
		        return url;
		    };
		    /** @hidden */
		    UrlMatcher.prototype.isRoot = function () {
		        return this._cache.path.length === 0;
		    };
		    /** Returns the input pattern string */
		    UrlMatcher.prototype.toString = function () {
		        return this.pattern;
		    };
		    /**
		     * Tests the specified url/path against this matcher.
		     *
		     * Tests if the given url matches this matcher's pattern, and returns an object containing the captured
		     * parameter values.  Returns null if the path does not match.
		     *
		     * The returned object contains the values
		     * of any search parameters that are mentioned in the pattern, but their value may be null if
		     * they are not present in `search`. This means that search parameters are always treated
		     * as optional.
		     *
		     * @example
		     * ```js
		     *
		     * new UrlMatcher('/user/{id}?q&r').exec('/user/bob', {
		     *   x: '1', q: 'hello'
		     * });
		     * // returns { id: 'bob', q: 'hello', r: null }
		     * ```
		     *
		     * @param path    The URL path to match, e.g. `$location.path()`.
		     * @param search  URL search parameters, e.g. `$location.search()`.
		     * @param hash    URL hash e.g. `$location.hash()`.
		     * @param options
		     *
		     * @returns The captured parameter values.
		     */
		    UrlMatcher.prototype.exec = function (path, search, hash, options) {
		        var _this = this;
		        if (search === void 0) { search = {}; }
		        if (options === void 0) { options = {}; }
		        var match = memoizeTo(this._cache, 'pattern', function () {
		            return new RegExp([
		                '^',
		                common_1.unnest(_this._cache.path.concat(_this).map(hof_1.prop('_compiled'))).join(''),
		                _this.config.strict === false ? '\/?' : '',
		                '$'
		            ].join(''), _this.config.caseInsensitive ? 'i' : undefined);
		        }).exec(path);
		        if (!match)
		            return null;
		        //options = defaults(options, { isolate: false });
		        var allParams = this.parameters(), pathParams = allParams.filter(function (param) { return !param.isSearch(); }), searchParams = allParams.filter(function (param) { return param.isSearch(); }), nPathSegments = this._cache.path.concat(this).map(function (urlm) { return urlm._segments.length - 1; }).reduce(function (a, x) { return a + x; }), values = {};
		        if (nPathSegments !== match.length - 1)
		            throw new Error("Unbalanced capture group in route '" + this.pattern + "'");
		        function decodePathArray(string) {
		            var reverseString = function (str) { return str.split("").reverse().join(""); };
		            var unquoteDashes = function (str) { return str.replace(/\\-/g, "-"); };
		            var split = reverseString(string).split(/-(?!\\)/);
		            var allReversed = common_1.map(split, reverseString);
		            return common_1.map(allReversed, unquoteDashes).reverse();
		        }
		        for (var i = 0; i < nPathSegments; i++) {
		            var param = pathParams[i];
		            var value = match[i + 1];
		            // if the param value matches a pre-replace pair, replace the value before decoding.
		            for (var j = 0; j < param.replace.length; j++) {
		                if (param.replace[j].from === value)
		                    value = param.replace[j].to;
		            }
		            if (value && param.array === true)
		                value = decodePathArray(value);
		            if (predicates_2.isDefined(value))
		                value = param.type.decode(value);
		            values[param.id] = param.value(value);
		        }
		        searchParams.forEach(function (param) {
		            var value = search[param.id];
		            for (var j = 0; j < param.replace.length; j++) {
		                if (param.replace[j].from === value)
		                    value = param.replace[j].to;
		            }
		            if (predicates_2.isDefined(value))
		                value = param.type.decode(value);
		            values[param.id] = param.value(value);
		        });
		        if (hash)
		            values["#"] = hash;
		        return values;
		    };
		    /**
		     * @hidden
		     * Returns all the [[Param]] objects of all path and search parameters of this pattern in order of appearance.
		     *
		     * @returns {Array.<Param>}  An array of [[Param]] objects. Must be treated as read-only. If the
		     *    pattern has no parameters, an empty array is returned.
		     */
		    UrlMatcher.prototype.parameters = function (opts) {
		        if (opts === void 0) { opts = {}; }
		        if (opts.inherit === false)
		            return this._params;
		        return common_1.unnest(this._cache.path.concat(this).map(hof_1.prop('_params')));
		    };
		    /**
		     * @hidden
		     * Returns a single parameter from this UrlMatcher by id
		     *
		     * @param id
		     * @param opts
		     * @returns {T|Param|any|boolean|UrlMatcher|null}
		     */
		    UrlMatcher.prototype.parameter = function (id, opts) {
		        if (opts === void 0) { opts = {}; }
		        var parent = common_1.tail(this._cache.path);
		        return (common_1.find(this._params, hof_1.propEq('id', id)) ||
		            (opts.inherit !== false && parent && parent.parameter(id)) ||
		            null);
		    };
		    /**
		     * Validates the input parameter values against this UrlMatcher
		     *
		     * Checks an object hash of parameters to validate their correctness according to the parameter
		     * types of this `UrlMatcher`.
		     *
		     * @param params The object hash of parameters to validate.
		     * @returns Returns `true` if `params` validates, otherwise `false`.
		     */
		    UrlMatcher.prototype.validates = function (params) {
		        var _this = this;
		        var validParamVal = function (param, val) {
		            return !param || param.validates(val);
		        };
		        return common_1.pairs(params || {}).map(function (_a) {
		            var key = _a[0], val = _a[1];
		            return validParamVal(_this.parameter(key), val);
		        }).reduce(common_1.allTrueR, true);
		    };
		    /**
		     * Given a set of parameter values, creates a URL from this UrlMatcher.
		     *
		     * Creates a URL that matches this pattern by substituting the specified values
		     * for the path and search parameters.
		     *
		     * @example
		     * ```js
		     *
		     * new UrlMatcher('/user/{id}?q').format({ id:'bob', q:'yes' });
		     * // returns '/user/bob?q=yes'
		     * ```
		     *
		     * @param values  the values to substitute for the parameters in this pattern.
		     * @returns the formatted URL (path and optionally search part).
		     */
		    UrlMatcher.prototype.format = function (values) {
		        if (values === void 0) { values = {}; }
		        if (!this.validates(values))
		            return null;
		        // Build the full path of UrlMatchers (including all parent UrlMatchers)
		        var urlMatchers = this._cache.path.slice().concat(this);
		        // Extract all the static segments and Params into an ordered array
		        var pathSegmentsAndParams = urlMatchers.map(UrlMatcher.pathSegmentsAndParams).reduce(common_2.unnestR, []);
		        // Extract the query params into a separate array
		        var queryParams = urlMatchers.map(UrlMatcher.queryParams).reduce(common_2.unnestR, []);
		        /**
		         * Given a Param,
		         * Applies the parameter value, then returns details about it
		         */
		        function getDetails(param) {
		            // Normalize to typed value
		            var value = param.value(values[param.id]);
		            var isDefaultValue = param.isDefaultValue(value);
		            // Check if we're in squash mode for the parameter
		            var squash = isDefaultValue ? param.squash : false;
		            // Allow the Parameter's Type to encode the value
		            var encoded = param.type.encode(value);
		            return { param: param, value: value, isDefaultValue: isDefaultValue, squash: squash, encoded: encoded };
		        }
		        // Build up the path-portion from the list of static segments and parameters
		        var pathString = pathSegmentsAndParams.reduce(function (acc, x) {
		            // The element is a static segment (a raw string); just append it
		            if (predicates_1.isString(x))
		                return acc + x;
		            // Otherwise, it's a Param.  Fetch details about the parameter value
		            var _a = getDetails(x), squash = _a.squash, encoded = _a.encoded, param = _a.param;
		            // If squash is === true, try to remove a slash from the path
		            if (squash === true)
		                return (acc.match(/\/$/)) ? acc.slice(0, -1) : acc;
		            // If squash is a string, use the string for the param value
		            if (predicates_1.isString(squash))
		                return acc + squash;
		            if (squash !== false)
		                return acc; // ?
		            if (encoded == null)
		                return acc;
		            // If this parameter value is an array, encode the value using encodeDashes
		            if (predicates_1.isArray(encoded))
		                return acc + common_1.map(encoded, UrlMatcher.encodeDashes).join("-");
		            // If the parameter type is "raw", then do not encodeURIComponent
		            if (param.type.raw)
		                return acc + encoded;
		            // Encode the value
		            return acc + encodeURIComponent(encoded);
		        }, "");
		        // Build the query string by applying parameter values (array or regular)
		        // then mapping to key=value, then flattening and joining using "&"
		        var queryString = queryParams.map(function (param) {
		            var _a = getDetails(param), squash = _a.squash, encoded = _a.encoded, isDefaultValue = _a.isDefaultValue;
		            if (encoded == null || (isDefaultValue && squash !== false))
		                return;
		            if (!predicates_1.isArray(encoded))
		                encoded = [encoded];
		            if (encoded.length === 0)
		                return;
		            if (!param.type.raw)
		                encoded = common_1.map(encoded, encodeURIComponent);
		            return encoded.map(function (val) { return (param.id + "=" + val); });
		        }).filter(common_1.identity).reduce(common_2.unnestR, []).join("&");
		        // Concat the pathstring with the queryString (if exists) and the hashString (if exists)
		        return pathString + (queryString ? "?" + queryString : "") + (values["#"] ? "#" + values["#"] : "");
		    };
		    /** @hidden */
		    UrlMatcher.encodeDashes = function (str) {
		        return encodeURIComponent(str).replace(/-/g, function (c) { return ("%5C%" + c.charCodeAt(0).toString(16).toUpperCase()); });
		    };
		    /** @hidden Given a matcher, return an array with the matcher's path segments and path params, in order */
		    UrlMatcher.pathSegmentsAndParams = function (matcher) {
		        var staticSegments = matcher._segments;
		        var pathParams = matcher._params.filter(function (p) { return p.location === param_2.DefType.PATH; });
		        return common_3.arrayTuples(staticSegments, pathParams.concat(undefined)).reduce(common_2.unnestR, []).filter(function (x) { return x !== "" && predicates_2.isDefined(x); });
		    };
		    /** @hidden Given a matcher, return an array with the matcher's query params */
		    UrlMatcher.queryParams = function (matcher) {
		        return matcher._params.filter(function (p) { return p.location === param_2.DefType.SEARCH; });
		    };
		    /** @hidden */
		    UrlMatcher.nameValidator = /^\w+([-.]+\w+)*(?:\[\])?$/;
		    return UrlMatcher;
		}());
		exports.UrlMatcher = UrlMatcher;
	
	
	/***/ },
	/* 28 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		/** @module params */ /** for typedoc */
		var common_1 = __webpack_require__(3);
		var predicates_1 = __webpack_require__(4);
		var hof_1 = __webpack_require__(5);
		var coreservices_1 = __webpack_require__(6);
		var type_1 = __webpack_require__(24);
		// Use tildes to pre-encode slashes.
		// If the slashes are simply URLEncoded, the browser can choose to pre-decode them,
		// and bidirectional encoding/decoding fails.
		// Tilde was chosen because it's not a RFC 3986 section 2.2 Reserved Character
		function valToString(val) { return val != null ? val.toString().replace(/(~|\/)/g, function (m) { return ({ '~': '~~', '/': '~2F' }[m]); }) : val; }
		function valFromString(val) { return val != null ? val.toString().replace(/(~~|~2F)/g, function (m) { return ({ '~~': '~', '~2F': '/' }[m]); }) : val; }
		var ParamTypes = (function () {
		    function ParamTypes() {
		        this.enqueue = true;
		        this.typeQueue = [];
		        this.defaultTypes = {
		            "hash": {
		                encode: valToString,
		                decode: valFromString,
		                is: hof_1.is(String),
		                pattern: /.*/,
		                equals: function (a, b) { return a == b; } // allow coersion for null/undefined/""
		            },
		            "string": {
		                encode: valToString,
		                decode: valFromString,
		                is: hof_1.is(String),
		                pattern: /[^/]*/
		            },
		            "int": {
		                encode: valToString,
		                decode: function (val) { return parseInt(val, 10); },
		                is: function (val) { return predicates_1.isDefined(val) && this.decode(val.toString()) === val; },
		                pattern: /-?\d+/
		            },
		            "bool": {
		                encode: function (val) { return val && 1 || 0; },
		                decode: function (val) { return parseInt(val, 10) !== 0; },
		                is: hof_1.is(Boolean),
		                pattern: /0|1/
		            },
		            "date": {
		                encode: function (val) {
		                    return !this.is(val) ? undefined : [
		                        val.getFullYear(),
		                        ('0' + (val.getMonth() + 1)).slice(-2),
		                        ('0' + val.getDate()).slice(-2)
		                    ].join("-");
		                },
		                decode: function (val) {
		                    if (this.is(val))
		                        return val;
		                    var match = this.capture.exec(val);
		                    return match ? new Date(match[1], match[2] - 1, match[3]) : undefined;
		                },
		                is: function (val) { return val instanceof Date && !isNaN(val.valueOf()); },
		                equals: function (l, r) {
		                    return ['getFullYear', 'getMonth', 'getDate']
		                        .reduce(function (acc, fn) { return acc && l[fn]() === r[fn](); }, true);
		                },
		                pattern: /[0-9]{4}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[1-2][0-9]|3[0-1])/,
		                capture: /([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])/
		            },
		            "json": {
		                encode: common_1.toJson,
		                decode: common_1.fromJson,
		                is: hof_1.is(Object),
		                equals: common_1.equals,
		                pattern: /[^/]*/
		            },
		            "any": {
		                encode: common_1.identity,
		                decode: common_1.identity,
		                equals: common_1.equals,
		                pattern: /.*/
		            }
		        };
		        // Register default types. Store them in the prototype of this.types.
		        var makeType = function (definition, name) { return new type_1.ParamType(common_1.extend({ name: name }, definition)); };
		        this.types = common_1.inherit(common_1.map(this.defaultTypes, makeType), {});
		    }
		    ParamTypes.prototype.type = function (name, definition, definitionFn) {
		        if (!predicates_1.isDefined(definition))
		            return this.types[name];
		        if (this.types.hasOwnProperty(name))
		            throw new Error("A type named '" + name + "' has already been defined.");
		        this.types[name] = new type_1.ParamType(common_1.extend({ name: name }, definition));
		        if (definitionFn) {
		            this.typeQueue.push({ name: name, def: definitionFn });
		            if (!this.enqueue)
		                this._flushTypeQueue();
		        }
		        return this;
		    };
		    ParamTypes.prototype._flushTypeQueue = function () {
		        while (this.typeQueue.length) {
		            var type = this.typeQueue.shift();
		            if (type.pattern)
		                throw new Error("You cannot override a type's .pattern at runtime.");
		            common_1.extend(this.types[type.name], coreservices_1.services.$injector.invoke(type.def));
		        }
		    };
		    return ParamTypes;
		}());
		exports.ParamTypes = ParamTypes;
	
	
	/***/ },
	/* 29 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		/** @module url */ /** for typedoc */
		var common_1 = __webpack_require__(3);
		var predicates_1 = __webpack_require__(4);
		var coreservices_1 = __webpack_require__(6);
		/** @hidden */
		var $location = coreservices_1.services.location;
		/** @hidden Returns a string that is a prefix of all strings matching the RegExp */
		function regExpPrefix(re) {
		    var prefix = /^\^((?:\\[^a-zA-Z0-9]|[^\\\[\]\^$*+?.()|{}]+)*)/.exec(re.source);
		    return (prefix != null) ? prefix[1].replace(/\\(.)/g, "$1") : '';
		}
		/** @hidden Interpolates matched values into a String.replace()-style pattern */
		function interpolate(pattern, match) {
		    return pattern.replace(/\$(\$|\d{1,2})/, function (m, what) {
		        return match[what === '$' ? 0 : Number(what)];
		    });
		}
		/** @hidden */
		function handleIfMatch($injector, $stateParams, handler, match) {
		    if (!match)
		        return false;
		    var result = $injector.invoke(handler, handler, { $match: match, $stateParams: $stateParams });
		    return predicates_1.isDefined(result) ? result : true;
		}
		/** @hidden */
		function appendBasePath(url, isHtml5, absolute) {
		    var baseHref = coreservices_1.services.locationConfig.baseHref();
		    if (baseHref === '/')
		        return url;
		    if (isHtml5)
		        return baseHref.slice(0, -1) + url;
		    if (absolute)
		        return baseHref.slice(1) + url;
		    return url;
		}
		// TODO: Optimize groups of rules with non-empty prefix into some sort of decision tree
		/** @hidden */
		function update(rules, otherwiseFn, evt) {
		    if (evt && evt.defaultPrevented)
		        return;
		    function check(rule) {
		        var handled = rule(coreservices_1.services.$injector, $location);
		        if (!handled)
		            return false;
		        if (predicates_1.isString(handled)) {
		            $location.setUrl(handled, true);
		        }
		        return true;
		    }
		    var n = rules.length;
		    for (var i = 0; i < n; i++) {
		        if (check(rules[i]))
		            return;
		    }
		    // always check otherwise last to allow dynamic updates to the set of rules
		    if (otherwiseFn)
		        check(otherwiseFn);
		}
		/**
		 * Manages rules for client-side URL
		 *
		 * This class manages the router rules for what to do when the URL changes.
		 */
		var UrlRouterProvider = (function () {
		    function UrlRouterProvider($urlMatcherFactory, $stateParams) {
		        /** @hidden */
		        this.rules = [];
		        /** @hidden */
		        this.interceptDeferred = false;
		        this.$urlMatcherFactory = $urlMatcherFactory;
		        this.$stateParams = $stateParams;
		    }
		    /**
		     * Registers a url handler function.
		     *
		     * Registers a low level url handler (a `rule`). A rule detects specific URL patterns and returns
		     * a redirect, or performs some action.
		     *
		     * If a rule returns a string, the URL is replaced with the string, and all rules are fired again.
		     *
		     * @example
		     * ```js
		     *
		     * var app = angular.module('app', ['ui.router.router']);
		     *
		     * app.config(function ($urlRouterProvider) {
		     *   // Here's an example of how you might allow case insensitive urls
		     *   $urlRouterProvider.rule(function ($injector, $location) {
		     *     var path = $location.path(),
		     *         normalized = path.toLowerCase();
		     *
		     *     if (path !== normalized) {
		     *       return normalized;
		     *     }
		     *   });
		     * });
		     * ```
		     *
		     * @param rule
		     * Handler function that takes `$injector` and `$location` services as arguments.
		     * You can use them to detect a url and return a different url as a string.
		     *
		     * @return [[$urlRouterProvider]] (`this`)
		     */
		    UrlRouterProvider.prototype.rule = function (rule) {
		        if (!predicates_1.isFunction(rule))
		            throw new Error("'rule' must be a function");
		        this.rules.push(rule);
		        return this;
		    };
		    ;
		    /**
		     * Remove a rule previously registered
		     *
		     * @param rule the matcher rule that was previously registered using [[rule]]
		     * @return true if the rule was found (and removed)
		     */
		    UrlRouterProvider.prototype.removeRule = function (rule) {
		        return this.rules.length !== common_1.removeFrom(this.rules, rule).length;
		    };
		    /**
		     * Defines the path or behavior to use when no url can be matched.
		     *
		     * @example
		     * ```js
		     *
		     * var app = angular.module('app', ['ui.router.router']);
		     *
		     * app.config(function ($urlRouterProvider) {
		     *   // if the path doesn't match any of the urls you configured
		     *   // otherwise will take care of routing the user to the
		     *   // specified url
		     *   $urlRouterProvider.otherwise('/index');
		     *
		     *   // Example of using function rule as param
		     *   $urlRouterProvider.otherwise(function ($injector, $location) {
		     *     return '/a/valid/url';
		     *   });
		     * });
		     * ```
		     *
		     * @param rule
		     * The url path you want to redirect to or a function rule that returns the url path or performs a `$state.go()`.
		     * The function version is passed two params: `$injector` and `$location` services, and should return a url string.
		     *
		     * @return {object} `$urlRouterProvider` - `$urlRouterProvider` instance
		     */
		    UrlRouterProvider.prototype.otherwise = function (rule) {
		        if (!predicates_1.isFunction(rule) && !predicates_1.isString(rule))
		            throw new Error("'rule' must be a string or function");
		        this.otherwiseFn = predicates_1.isString(rule) ? function () { return rule; } : rule;
		        return this;
		    };
		    ;
		    /**
		     * Registers a handler for a given url matching.
		     *
		     * If the handler is a string, it is
		     * treated as a redirect, and is interpolated according to the syntax of match
		     * (i.e. like `String.replace()` for `RegExp`, or like a `UrlMatcher` pattern otherwise).
		     *
		     * If the handler is a function, it is injectable.
		     * It gets invoked if `$location` matches.
		     * You have the option of inject the match object as `$match`.
		     *
		     * The handler can return
		     *
		     * - **falsy** to indicate that the rule didn't match after all, then `$urlRouter`
		     *   will continue trying to find another one that matches.
		     * - **string** which is treated as a redirect and passed to `$location.url()`
		     * - **void** or any **truthy** value tells `$urlRouter` that the url was handled.
		     *
		     * @example
		     * ```js
		     *
		     * var app = angular.module('app', ['ui.router.router']);
		     *
		     * app.config(function ($urlRouterProvider) {
		     *   $urlRouterProvider.when($state.url, function ($match, $stateParams) {
		     *     if ($state.$current.navigable !== state ||
		     *         !equalForKeys($match, $stateParams) {
		     *      $state.transitionTo(state, $match, false);
		     *     }
		     *   });
		     * });
		     * ```
		     *
		     * @param what A pattern string to match, compiled as a [[UrlMatcher]].
		     * @param handler The path (or function that returns a path) that you want to redirect your user to.
		     * @param ruleCallback [optional] A callback that receives the `rule` registered with [[UrlMatcher.rule]]
		     *
		     * Note: the handler may also invoke arbitrary code, such as `$state.go()`
		     */
		    UrlRouterProvider.prototype.when = function (what, handler, ruleCallback) {
		        if (ruleCallback === void 0) { ruleCallback = function (rule) { }; }
		        var _a = this, $urlMatcherFactory = _a.$urlMatcherFactory, $stateParams = _a.$stateParams;
		        var redirect, handlerIsString = predicates_1.isString(handler);
		        // @todo Queue this
		        if (predicates_1.isString(what))
		            what = $urlMatcherFactory.compile(what);
		        if (!handlerIsString && !predicates_1.isFunction(handler) && !predicates_1.isArray(handler))
		            throw new Error("invalid 'handler' in when()");
		        var strategies = {
		            matcher: function (_what, _handler) {
		                if (handlerIsString) {
		                    redirect = $urlMatcherFactory.compile(_handler);
		                    _handler = ['$match', redirect.format.bind(redirect)];
		                }
		                return common_1.extend(function () {
		                    return handleIfMatch(coreservices_1.services.$injector, $stateParams, _handler, _what.exec($location.path(), $location.search(), $location.hash()));
		                }, {
		                    prefix: predicates_1.isString(_what.prefix) ? _what.prefix : ''
		                });
		            },
		            regex: function (_what, _handler) {
		                if (_what.global || _what.sticky)
		                    throw new Error("when() RegExp must not be global or sticky");
		                if (handlerIsString) {
		                    redirect = _handler;
		                    _handler = ['$match', function ($match) { return interpolate(redirect, $match); }];
		                }
		                return common_1.extend(function () {
		                    return handleIfMatch(coreservices_1.services.$injector, $stateParams, _handler, _what.exec($location.path()));
		                }, {
		                    prefix: regExpPrefix(_what)
		                });
		            }
		        };
		        var check = {
		            matcher: $urlMatcherFactory.isMatcher(what),
		            regex: what instanceof RegExp
		        };
		        for (var n in check) {
		            if (check[n]) {
		                var rule = strategies[n](what, handler);
		                ruleCallback(rule);
		                return this.rule(rule);
		            }
		        }
		        throw new Error("invalid 'what' in when()");
		    };
		    ;
		    /**
		     * Disables monitoring of the URL.
		     *
		     * Call this method before UI-Router has bootstrapped.
		     * It will stop UI-Router from performing the initial url sync.
		     *
		     * This can be useful to perform some asynchronous initialization before the router starts.
		     * Once the initialization is complete, call [[listen]] to tell UI-Router to start watching and synchronizing the URL.
		     *
		     * @example
		     * ```js
		     *
		     * var app = angular.module('app', ['ui.router']);
		     *
		     * app.config(function ($urlRouterProvider) {
		     *   // Prevent $urlRouter from automatically intercepting URL changes;
		     *   $urlRouterProvider.deferIntercept();
		     * })
		     *
		     * app.run(function (MyService, $urlRouter, $http) {
		     *   $http.get("/stuff").then(function(resp) {
		     *     MyService.doStuff(resp.data);
		     *     $urlRouter.listen();
		     *     $urlRouter.sync();
		     *   });
		     * });
		     * ```
		     *
		     * @param defer Indicates whether to defer location change interception. Passing
		     *        no parameter is equivalent to `true`.
		     */
		    UrlRouterProvider.prototype.deferIntercept = function (defer) {
		        if (defer === undefined)
		            defer = true;
		        this.interceptDeferred = defer;
		    };
		    ;
		    return UrlRouterProvider;
		}());
		exports.UrlRouterProvider = UrlRouterProvider;
		var UrlRouter = (function () {
		    /** @hidden */
		    function UrlRouter(urlRouterProvider) {
		        this.urlRouterProvider = urlRouterProvider;
		        common_1.bindFunctions(UrlRouter.prototype, this, this);
		    }
		    /**
		     * Checks the current URL for a matching rule
		     *
		     * Triggers an update; the same update that happens when the address bar url changes, aka `$locationChangeSuccess`.
		     * This method is useful when you need to use `preventDefault()` on the `$locationChangeSuccess` event,
		     * perform some custom logic (route protection, auth, config, redirection, etc) and then finally proceed
		     * with the transition by calling `$urlRouter.sync()`.
		     *
		     * @example
		     * ```js
		     *
		     * angular.module('app', ['ui.router'])
		     *   .run(function($rootScope, $urlRouter) {
		     *     $rootScope.$on('$locationChangeSuccess', function(evt) {
		     *       // Halt state change from even starting
		     *       evt.preventDefault();
		     *       // Perform custom logic
		     *       var meetsRequirement = ...
		     *       // Continue with the update and state transition if logic allows
		     *       if (meetsRequirement) $urlRouter.sync();
		     *     });
		     * });
		     * ```
		     */
		    UrlRouter.prototype.sync = function () {
		        update(this.urlRouterProvider.rules, this.urlRouterProvider.otherwiseFn);
		    };
		    /**
		     * Starts listening for URL changes
		     *
		     * Call this sometime after calling [[deferIntercept]] to start monitoring the url.
		     * This causes [[UrlRouter]] to start listening for changes to the URL, if it wasn't already listening.
		     */
		    UrlRouter.prototype.listen = function () {
		        var _this = this;
		        return this.listener = this.listener || $location.onChange(function (evt) { return update(_this.urlRouterProvider.rules, _this.urlRouterProvider.otherwiseFn, evt); });
		    };
		    /**
		     * Internal API.
		     */
		    UrlRouter.prototype.update = function (read) {
		        if (read) {
		            this.location = $location.path();
		            return;
		        }
		        if ($location.path() === this.location)
		            return;
		        $location.setUrl(this.location, true);
		    };
		    /**
		     * Internal API.
		     *
		     * Pushes a new location to the browser history.
		     *
		     * @param urlMatcher
		     * @param params
		     * @param options
		     */
		    UrlRouter.prototype.push = function (urlMatcher, params, options) {
		        var replace = options && !!options.replace;
		        $location.setUrl(urlMatcher.format(params || {}), replace);
		    };
		    /**
		     * Builds and returns a URL with interpolated parameters
		     *
		     * @example
		     * ```js
		     *
		     * $bob = $urlRouter.href(new UrlMatcher("/about/:person"), {
		     *   person: "bob"
		     * });
		     * // $bob == "/about/bob";
		     * ```
		     *
		     * @param urlMatcher The [[UrlMatcher]] object which is used as the template of the URL to generate.
		     * @param params An object of parameter values to fill the matcher's required parameters.
		     * @param options Options object. The options are:
		     *
		     * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. "http://www.example.com/fullurl".
		     *
		     * @returns Returns the fully compiled URL, or `null` if `params` fail validation against `urlMatcher`
		     */
		    UrlRouter.prototype.href = function (urlMatcher, params, options) {
		        if (!urlMatcher.validates(params))
		            return null;
		        var url = urlMatcher.format(params);
		        options = options || { absolute: false };
		        var cfg = coreservices_1.services.locationConfig;
		        var isHtml5 = cfg.html5Mode();
		        if (!isHtml5 && url !== null) {
		            url = "#" + cfg.hashPrefix() + url;
		        }
		        url = appendBasePath(url, isHtml5, options.absolute);
		        if (!options.absolute || !url) {
		            return url;
		        }
		        var slash = (!isHtml5 && url ? '/' : ''), port = cfg.port();
		        port = (port === 80 || port === 443 ? '' : ':' + port);
		        return [cfg.protocol(), '://', cfg.host(), port, slash, url].join('');
		    };
		    return UrlRouter;
		}());
		exports.UrlRouter = UrlRouter;
	
	
	/***/ },
	/* 30 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		var transition_1 = __webpack_require__(11);
		var hookRegistry_1 = __webpack_require__(15);
		var resolve_1 = __webpack_require__(31);
		var views_1 = __webpack_require__(32);
		var url_1 = __webpack_require__(33);
		var redirectTo_1 = __webpack_require__(34);
		var onEnterExitRetain_1 = __webpack_require__(35);
		var lazyLoadStates_1 = __webpack_require__(36);
		/**
		 * The default [[Transition]] options.
		 *
		 * Include this object when applying custom defaults:
		 * let reloadOpts = { reload: true, notify: true }
		 * let options = defaults(theirOpts, customDefaults, defaultOptions);
		 */
		exports.defaultTransOpts = {
		    location: true,
		    relative: null,
		    inherit: false,
		    notify: true,
		    reload: false,
		    custom: {},
		    current: function () { return null; },
		    source: "unknown"
		};
		/**
		 * This class provides services related to Transitions.
		 *
		 * - Most importantly, it allows global Transition Hooks to be registered.
		 * - It allows the default transition error handler to be set.
		 * - It also has a factory function for creating new [[Transition]] objects, (used internally by the [[StateService]]).
		 *
		 * At bootstrap, [[UIRouter]] creates a single instance (singleton) of this class.
		 */
		var TransitionService = (function () {
		    function TransitionService(_router) {
		        this._router = _router;
		        this.$view = _router.viewService;
		        hookRegistry_1.HookRegistry.mixin(new hookRegistry_1.HookRegistry(), this);
		        this._deregisterHookFns = {};
		        this.registerTransitionHooks();
		    }
		    /** @hidden */
		    TransitionService.prototype.registerTransitionHooks = function () {
		        var fns = this._deregisterHookFns;
		        // Wire up redirectTo hook
		        fns.redirectTo = redirectTo_1.registerRedirectToHook(this);
		        // Wire up onExit/Retain/Enter state hooks
		        fns.onExit = onEnterExitRetain_1.registerOnExitHook(this);
		        fns.onRetain = onEnterExitRetain_1.registerOnRetainHook(this);
		        fns.onEnter = onEnterExitRetain_1.registerOnEnterHook(this);
		        // Wire up Resolve hooks
		        fns.eagerResolve = resolve_1.registerEagerResolvePath(this);
		        fns.lazyResolve = resolve_1.registerLazyResolveState(this);
		        // Wire up the View management hooks
		        fns.loadViews = views_1.registerLoadEnteringViews(this);
		        fns.activateViews = views_1.registerActivateViews(this);
		        // After globals.current is updated at priority: 10000
		        fns.updateUrl = url_1.registerUpdateUrl(this);
		        // Lazy load state trees
		        fns.lazyLoad = lazyLoadStates_1.registerLazyLoadHook(this);
		    };
		    /** @inheritdoc */
		    TransitionService.prototype.onBefore = function (matchCriteria, callback, options) { throw ""; };
		    ;
		    /** @inheritdoc */
		    TransitionService.prototype.onStart = function (matchCriteria, callback, options) { throw ""; };
		    ;
		    /** @inheritdoc */
		    TransitionService.prototype.onExit = function (matchCriteria, callback, options) { throw ""; };
		    ;
		    /** @inheritdoc */
		    TransitionService.prototype.onRetain = function (matchCriteria, callback, options) { throw ""; };
		    ;
		    /** @inheritdoc */
		    TransitionService.prototype.onEnter = function (matchCriteria, callback, options) { throw ""; };
		    ;
		    /** @inheritdoc */
		    TransitionService.prototype.onFinish = function (matchCriteria, callback, options) { throw ""; };
		    ;
		    /** @inheritdoc */
		    TransitionService.prototype.onSuccess = function (matchCriteria, callback, options) { throw ""; };
		    ;
		    /** @inheritdoc */
		    TransitionService.prototype.onError = function (matchCriteria, callback, options) { throw ""; };
		    ;
		    /**
		     * Creates a new [[Transition]] object
		     *
		     * This is a factory function for creating new Transition objects.
		     * It is used internally by the [[StateService]] and should generally not be called by application code.
		     *
		     * @param fromPath the path to the current state (the from state)
		     * @param targetState the target state (destination)
		     * @returns a Transition
		     */
		    TransitionService.prototype.create = function (fromPath, targetState) {
		        return new transition_1.Transition(fromPath, targetState, this._router);
		    };
		    return TransitionService;
		}());
		exports.TransitionService = TransitionService;
	
	
	/***/ },
	/* 31 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		/** @module hooks */ /** for typedoc */
		var common_1 = __webpack_require__(3);
		var resolveContext_1 = __webpack_require__(17);
		var hof_1 = __webpack_require__(5);
		/**
		 * A [[TransitionHookFn]] which resolves all EAGER Resolvables in the To Path
		 *
		 * Registered using `transitionService.onStart({}, eagerResolvePath);`
		 *
		 * When a Transition starts, this hook resolves all the EAGER Resolvables, which the transition then waits for.
		 *
		 * See [[StateDeclaration.resolve]]
		 */
		var eagerResolvePath = function (trans) {
		    return new resolveContext_1.ResolveContext(trans.treeChanges().to)
		        .resolvePath("EAGER", trans)
		        .then(common_1.noop);
		};
		exports.registerEagerResolvePath = function (transitionService) {
		    return transitionService.onStart({}, eagerResolvePath, { priority: 1000 });
		};
		/**
		 * A [[TransitionHookFn]] which resolves all LAZY Resolvables for the state (and all its ancestors) in the To Path
		 *
		 * Registered using `transitionService.onEnter({ entering: () => true }, lazyResolveState);`
		 *
		 * When a State is being entered, this hook resolves all the Resolvables for this state, which the transition then waits for.
		 *
		 * See [[StateDeclaration.resolve]]
		 */
		var lazyResolveState = function (trans, state) {
		    return new resolveContext_1.ResolveContext(trans.treeChanges().to)
		        .subContext(state)
		        .resolvePath("LAZY", trans)
		        .then(common_1.noop);
		};
		exports.registerLazyResolveState = function (transitionService) {
		    return transitionService.onEnter({ entering: hof_1.val(true) }, lazyResolveState, { priority: 1000 });
		};
	
	
	/***/ },
	/* 32 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		/** @module hooks */ /** for typedoc */
		var common_1 = __webpack_require__(3);
		var coreservices_1 = __webpack_require__(6);
		/**
		 * A [[TransitionHookFn]] which waits for the views to load
		 *
		 * Registered using `transitionService.onStart({}, loadEnteringViews);`
		 *
		 * Allows the views to do async work in [[ViewConfig.load]] before the transition continues.
		 * In angular 1, this includes loading the templates.
		 */
		var loadEnteringViews = function (transition) {
		    var enteringViews = transition.views("entering");
		    if (!enteringViews.length)
		        return;
		    return coreservices_1.services.$q.all(enteringViews.map(function (view) { return view.load(); })).then(common_1.noop);
		};
		exports.registerLoadEnteringViews = function (transitionService) {
		    return transitionService.onStart({}, loadEnteringViews);
		};
		/**
		 * A [[TransitionHookFn]] which activates the new views when a transition is successful.
		 *
		 * Registered using `transitionService.onSuccess({}, activateViews);`
		 *
		 * After a transition is complete, this hook deactivates the old views from the previous state,
		 * and activates the new views from the destination state.
		 *
		 * See [[ViewService]]
		 */
		var activateViews = function (transition) {
		    var enteringViews = transition.views("entering");
		    var exitingViews = transition.views("exiting");
		    if (!enteringViews.length && !exitingViews.length)
		        return;
		    var $view = transition.router.viewService;
		    exitingViews.forEach(function (vc) { return $view.deactivateViewConfig(vc); });
		    enteringViews.forEach(function (vc) { return $view.activateViewConfig(vc); });
		    $view.sync();
		};
		exports.registerActivateViews = function (transitionService) {
		    return transitionService.onSuccess({}, activateViews);
		};
	
	
	/***/ },
	/* 33 */
	/***/ function(module, exports) {
	
		"use strict";
		/**
		 * A [[TransitionHookFn]] which updates the URL after a successful transition
		 *
		 * Registered using `transitionService.onSuccess({}, updateUrl);`
		 */
		var updateUrl = function (transition) {
		    var options = transition.options();
		    var $state = transition.router.stateService;
		    var $urlRouter = transition.router.urlRouter;
		    // Dont update the url in these situations:
		    // The transition was triggered by a URL sync (options.source === 'url')
		    // The user doesn't want the url to update (options.location === false)
		    // The destination state, and all parents have no navigable url
		    if (options.source !== 'url' && options.location && $state.$current.navigable) {
		        var urlOptions = { replace: options.location === 'replace' };
		        $urlRouter.push($state.$current.navigable.url, $state.params, urlOptions);
		    }
		    $urlRouter.update(true);
		};
		exports.registerUpdateUrl = function (transitionService) {
		    return transitionService.onSuccess({}, updateUrl, { priority: 9999 });
		};
	
	
	/***/ },
	/* 34 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		/** @module hooks */ /** */
		var predicates_1 = __webpack_require__(4);
		var coreservices_1 = __webpack_require__(6);
		var targetState_1 = __webpack_require__(14);
		/**
		 * A [[TransitionHookFn]] that redirects to a different state or params
		 *
		 * Registered using `transitionService.onStart({ to: (state) => !!state.redirectTo }, redirectHook);`
		 *
		 * See [[StateDeclaration.redirectTo]]
		 */
		var redirectToHook = function (trans) {
		    var redirect = trans.to().redirectTo;
		    if (!redirect)
		        return;
		    function handleResult(result) {
		        var $state = trans.router.stateService;
		        if (result instanceof targetState_1.TargetState)
		            return result;
		        if (predicates_1.isString(result))
		            return $state.target(result, trans.params(), trans.options());
		        if (result['state'] || result['params'])
		            return $state.target(result['state'] || trans.to(), result['params'] || trans.params(), trans.options());
		    }
		    if (predicates_1.isFunction(redirect)) {
		        return coreservices_1.services.$q.when(redirect(trans)).then(handleResult);
		    }
		    return handleResult(redirect);
		};
		exports.registerRedirectToHook = function (transitionService) {
		    return transitionService.onStart({ to: function (state) { return !!state.redirectTo; } }, redirectToHook);
		};
	
	
	/***/ },
	/* 35 */
	/***/ function(module, exports) {
	
		"use strict";
		/**
		 * A factory which creates an onEnter, onExit or onRetain transition hook function
		 *
		 * The returned function invokes the (for instance) state.onEnter hook when the
		 * state is being entered.
		 *
		 * @hidden
		 */
		function makeEnterExitRetainHook(hookName) {
		    return function (transition, state) {
		        var hookFn = state[hookName];
		        return hookFn(transition, state);
		    };
		}
		/**
		 * The [[TransitionStateHookFn]] for onExit
		 *
		 * When the state is being exited, the state's .onExit function is invoked.
		 *
		 * Registered using `transitionService.onExit({ exiting: (state) => !!state.onExit }, onExitHook);`
		 *
		 * See: [[IHookRegistry.onExit]]
		 */
		var onExitHook = makeEnterExitRetainHook('onExit');
		exports.registerOnExitHook = function (transitionService) {
		    return transitionService.onExit({ exiting: function (state) { return !!state.onExit; } }, onExitHook);
		};
		/**
		 * The [[TransitionStateHookFn]] for onRetain
		 *
		 * When the state was already entered, and is not being exited or re-entered, the state's .onRetain function is invoked.
		 *
		 * Registered using `transitionService.onRetain({ retained: (state) => !!state.onRetain }, onRetainHook);`
		 *
		 * See: [[IHookRegistry.onRetain]]
		 */
		var onRetainHook = makeEnterExitRetainHook('onRetain');
		exports.registerOnRetainHook = function (transitionService) {
		    return transitionService.onRetain({ retained: function (state) { return !!state.onRetain; } }, onRetainHook);
		};
		/**
		 * The [[TransitionStateHookFn]] for onEnter
		 *
		 * When the state is being entered, the state's .onEnter function is invoked.
		 *
		 * Registered using `transitionService.onEnter({ entering: (state) => !!state.onEnter }, onEnterHook);`
		 *
		 * See: [[IHookRegistry.onEnter]]
		 */
		var onEnterHook = makeEnterExitRetainHook('onEnter');
		exports.registerOnEnterHook = function (transitionService) {
		    return transitionService.onEnter({ entering: function (state) { return !!state.onEnter; } }, onEnterHook);
		};
	
	
	/***/ },
	/* 36 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		var coreservices_1 = __webpack_require__(6);
		/**
		 * A [[TransitionHookFn]] that lazy loads a state tree.
		 *
		 * When transitioning to a state "abc" which has a `lazyLoad` function defined:
		 * - Invoke the `lazyLoad` function
		 *   - The function should return a promise for an array of lazy loaded [[StateDeclaration]]s
		 * - Wait for the promise to resolve
		 * - Deregister the original state "abc"
		 *   - The original state definition is a placeholder for the lazy loaded states
		 * - Register the new states
		 * - Retry the transition
		 *
		 * See [[StateDeclaration.lazyLoad]]
		 */
		var lazyLoadHook = function (transition) {
		    var toState = transition.to();
		    var registry = transition.router.stateRegistry;
		    function retryOriginalTransition() {
		        if (transition.options().source === 'url') {
		            var loc = coreservices_1.services.location, path_1 = loc.path(), search_1 = loc.search(), hash_1 = loc.hash();
		            var matchState = function (state) { return [state, state.url && state.url.exec(path_1, search_1, hash_1)]; };
		            var matches = registry.get().map(function (s) { return s.$$state(); }).map(matchState).filter(function (_a) {
		                var state = _a[0], params = _a[1];
		                return !!params;
		            });
		            if (matches.length) {
		                var _a = matches[0], state = _a[0], params = _a[1];
		                return transition.router.stateService.target(state, params, transition.options());
		            }
		            transition.router.urlRouter.sync();
		        }
		        // The original transition was not triggered via url sync
		        // The lazy state should be loaded now, so re-try the original transition
		        var orig = transition.targetState();
		        return transition.router.stateService.target(orig.identifier(), orig.params(), orig.options());
		    }
		    /**
		     * Replace the placeholder state with the newly loaded states from the NgModule.
		     */
		    function updateStateRegistry(result) {
		        // deregister placeholder state
		        registry.deregister(transition.$to());
		        if (result && Array.isArray(result.states)) {
		            result.states.forEach(function (state) { return registry.register(state); });
		        }
		    }
		    var hook = toState.lazyLoad;
		    // Store/get the lazy load promise on/from the hookfn so it doesn't get re-invoked
		    var promise = hook['_promise'];
		    if (!promise) {
		        promise = hook['_promise'] = hook(transition).then(updateStateRegistry);
		        var cleanup = function () { return delete hook['_promise']; };
		        promise.then(cleanup, cleanup);
		    }
		    return promise.then(retryOriginalTransition);
		};
		exports.registerLazyLoadHook = function (transitionService) {
		    return transitionService.onBefore({ to: function (state) { return !!state.lazyLoad; } }, lazyLoadHook);
		};
	
	
	/***/ },
	/* 37 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		/** @module view */ /** for typedoc */
		var common_1 = __webpack_require__(3);
		var hof_1 = __webpack_require__(5);
		var predicates_1 = __webpack_require__(4);
		var trace_1 = __webpack_require__(12);
		/**
		 * The View service
		 */
		var ViewService = (function () {
		    function ViewService() {
		        var _this = this;
		        this.uiViews = [];
		        this.viewConfigs = [];
		        this._viewConfigFactories = {};
		        this.sync = function () {
		            var uiViewsByFqn = _this.uiViews.map(function (uiv) { return [uiv.fqn, uiv]; }).reduce(common_1.applyPairs, {});
		            /**
		             * Given a ui-view and a ViewConfig, determines if they "match".
		             *
		             * A ui-view has a fully qualified name (fqn) and a context object.  The fqn is built from its overall location in
		             * the DOM, describing its nesting relationship to any parent ui-view tags it is nested inside of.
		             *
		             * A ViewConfig has a target ui-view name and a context anchor.  The ui-view name can be a simple name, or
		             * can be a segmented ui-view path, describing a portion of a ui-view fqn.
		             *
		             * In order for a ui-view to match ViewConfig, ui-view's $type must match the ViewConfig's $type
		             *
		             * If the ViewConfig's target ui-view name is a simple name (no dots), then a ui-view matches if:
		             * - the ui-view's name matches the ViewConfig's target name
		             * - the ui-view's context matches the ViewConfig's anchor
		             *
		             * If the ViewConfig's target ui-view name is a segmented name (with dots), then a ui-view matches if:
		             * - There exists a parent ui-view where:
		             *    - the parent ui-view's name matches the first segment (index 0) of the ViewConfig's target name
		             *    - the parent ui-view's context matches the ViewConfig's anchor
		             * - And the remaining segments (index 1..n) of the ViewConfig's target name match the tail of the ui-view's fqn
		             *
		             * Example:
		             *
		             * DOM:
		             * <div ui-view>                        <!-- created in the root context (name: "") -->
		             *   <div ui-view="foo">                <!-- created in the context named: "A"      -->
		             *     <div ui-view>                    <!-- created in the context named: "A.B"    -->
		             *       <div ui-view="bar">            <!-- created in the context named: "A.B.C"  -->
		             *       </div>
		             *     </div>
		             *   </div>
		             * </div>
		             *
		             * uiViews: [
		             *  { fqn: "$default",                  creationContext: { name: "" } },
		             *  { fqn: "$default.foo",              creationContext: { name: "A" } },
		             *  { fqn: "$default.foo.$default",     creationContext: { name: "A.B" } }
		             *  { fqn: "$default.foo.$default.bar", creationContext: { name: "A.B.C" } }
		             * ]
		             *
		             * These four view configs all match the ui-view with the fqn: "$default.foo.$default.bar":
		             *
		             * - ViewConfig1: { uiViewName: "bar",                       uiViewContextAnchor: "A.B.C" }
		             * - ViewConfig2: { uiViewName: "$default.bar",              uiViewContextAnchor: "A.B" }
		             * - ViewConfig3: { uiViewName: "foo.$default.bar",          uiViewContextAnchor: "A" }
		             * - ViewConfig4: { uiViewName: "$default.foo.$default.bar", uiViewContextAnchor: "" }
		             *
		             * Using ViewConfig3 as an example, it matches the ui-view with fqn "$default.foo.$default.bar" because:
		             * - The ViewConfig's segmented target name is: [ "foo", "$default", "bar" ]
		             * - There exists a parent ui-view (which has fqn: "$default.foo") where:
		             *    - the parent ui-view's name "foo" matches the first segment "foo" of the ViewConfig's target name
		             *    - the parent ui-view's context "A" matches the ViewConfig's anchor context "A"
		             * - And the remaining segments [ "$default", "bar" ].join("."_ of the ViewConfig's target name match
		             *   the tail of the ui-view's fqn "default.bar"
		             */
		            var matches = function (uiView) { return function (viewConfig) {
		                // Don't supply an ng1 ui-view with an ng2 ViewConfig, etc
		                if (uiView.$type !== viewConfig.viewDecl.$type)
		                    return false;
		                // Split names apart from both viewConfig and uiView into segments
		                var vc = viewConfig.viewDecl;
		                var vcSegments = vc.$uiViewName.split(".");
		                var uivSegments = uiView.fqn.split(".");
		                // Check if the tails of the segment arrays match. ex, these arrays' tails match:
		                // vc: ["foo", "bar"], uiv fqn: ["$default", "foo", "bar"]
		                if (!common_1.equals(vcSegments, uivSegments.slice(0 - vcSegments.length)))
		                    return false;
		                // Now check if the fqn ending at the first segment of the viewConfig matches the context:
		                // ["$default", "foo"].join(".") == "$default.foo", does the ui-view $default.foo context match?
		                var negOffset = (1 - vcSegments.length) || undefined;
		                var fqnToFirstSegment = uivSegments.slice(0, negOffset).join(".");
		                var uiViewContext = uiViewsByFqn[fqnToFirstSegment].creationContext;
		                return vc.$uiViewContextAnchor === (uiViewContext && uiViewContext.name);
		            }; };
		            // Return the number of dots in the fully qualified name
		            function uiViewDepth(uiView) {
		                return uiView.fqn.split(".").length;
		            }
		            // Return the ViewConfig's context's depth in the context tree.
		            function viewConfigDepth(config) {
		                var context = config.viewDecl.$context, count = 0;
		                while (++count && context.parent)
		                    context = context.parent;
		                return count;
		            }
		            // Given a depth function, returns a compare function which can return either ascending or descending order
		            var depthCompare = hof_1.curry(function (depthFn, posNeg, left, right) { return posNeg * (depthFn(left) - depthFn(right)); });
		            var matchingConfigPair = function (uiView) {
		                var matchingConfigs = _this.viewConfigs.filter(matches(uiView));
		                if (matchingConfigs.length > 1)
		                    matchingConfigs.sort(depthCompare(viewConfigDepth, -1)); // descending
		                return [uiView, matchingConfigs[0]];
		            };
		            var configureUIView = function (_a) {
		                var uiView = _a[0], viewConfig = _a[1];
		                // If a parent ui-view is reconfigured, it could destroy child ui-views.
		                // Before configuring a child ui-view, make sure it's still in the active uiViews array.
		                if (_this.uiViews.indexOf(uiView) !== -1)
		                    uiView.configUpdated(viewConfig);
		            };
		            _this.uiViews.sort(depthCompare(uiViewDepth, 1)).map(matchingConfigPair).forEach(configureUIView);
		        };
		    }
		    ViewService.prototype.rootContext = function (context) {
		        return this._rootContext = context || this._rootContext;
		    };
		    ;
		    ViewService.prototype.viewConfigFactory = function (viewType, factory) {
		        this._viewConfigFactories[viewType] = factory;
		    };
		    ViewService.prototype.createViewConfig = function (path, decl) {
		        var cfgFactory = this._viewConfigFactories[decl.$type];
		        if (!cfgFactory)
		            throw new Error("ViewService: No view config factory registered for type " + decl.$type);
		        var cfgs = cfgFactory(path, decl);
		        return predicates_1.isArray(cfgs) ? cfgs : [cfgs];
		    };
		    /**
		     * De-registers a ViewConfig.
		     *
		     * @param viewConfig The ViewConfig view to deregister.
		     */
		    ViewService.prototype.deactivateViewConfig = function (viewConfig) {
		        trace_1.trace.traceViewServiceEvent("<- Removing", viewConfig);
		        common_1.removeFrom(this.viewConfigs, viewConfig);
		    };
		    ;
		    ViewService.prototype.activateViewConfig = function (viewConfig) {
		        trace_1.trace.traceViewServiceEvent("-> Registering", viewConfig);
		        this.viewConfigs.push(viewConfig);
		    };
		    ;
		    /**
		     * Allows a `ui-view` element to register its canonical name with a callback that allows it to
		     * be updated with a template, controller, and local variables.
		     *
		     * @param {String} name The fully-qualified name of the `ui-view` object being registered.
		     * @param {Function} configUpdatedCallback A callback that receives updates to the content & configuration
		     *                   of the view.
		     * @return {Function} Returns a de-registration function used when the view is destroyed.
		     */
		    ViewService.prototype.registerUIView = function (uiView) {
		        trace_1.trace.traceViewServiceUIViewEvent("-> Registering", uiView);
		        var uiViews = this.uiViews;
		        var fqnMatches = function (uiv) { return uiv.fqn === uiView.fqn; };
		        if (uiViews.filter(fqnMatches).length)
		            trace_1.trace.traceViewServiceUIViewEvent("!!!! duplicate uiView named:", uiView);
		        uiViews.push(uiView);
		        this.sync();
		        return function () {
		            var idx = uiViews.indexOf(uiView);
		            if (idx === -1) {
		                trace_1.trace.traceViewServiceUIViewEvent("Tried removing non-registered uiView", uiView);
		                return;
		            }
		            trace_1.trace.traceViewServiceUIViewEvent("<- Deregistering", uiView);
		            common_1.removeFrom(uiViews)(uiView);
		        };
		    };
		    ;
		    /**
		     * Returns the list of views currently available on the page, by fully-qualified name.
		     *
		     * @return {Array} Returns an array of fully-qualified view names.
		     */
		    ViewService.prototype.available = function () {
		        return this.uiViews.map(hof_1.prop("fqn"));
		    };
		    /**
		     * Returns the list of views on the page containing loaded content.
		     *
		     * @return {Array} Returns an array of fully-qualified view names.
		     */
		    ViewService.prototype.active = function () {
		        return this.uiViews.filter(hof_1.prop("$config")).map(hof_1.prop("name"));
		    };
		    /**
		     * Normalizes a view's name from a state.views configuration block.
		     *
		     * @param context the context object (state declaration) that the view belongs to
		     * @param rawViewName the name of the view, as declared in the [[StateDeclaration.views]]
		     *
		     * @returns the normalized uiViewName and uiViewContextAnchor that the view targets
		     */
		    ViewService.normalizeUIViewTarget = function (context, rawViewName) {
		        if (rawViewName === void 0) { rawViewName = ""; }
		        // TODO: Validate incoming view name with a regexp to allow:
		        // ex: "view.name@foo.bar" , "^.^.view.name" , "view.name@^.^" , "" ,
		        // "@" , "$default@^" , "!$default.$default" , "!foo.bar"
		        var viewAtContext = rawViewName.split("@");
		        var uiViewName = viewAtContext[0] || "$default"; // default to unnamed view
		        var uiViewContextAnchor = predicates_1.isString(viewAtContext[1]) ? viewAtContext[1] : "^"; // default to parent context
		        // Handle relative view-name sugar syntax.
		        // Matches rawViewName "^.^.^.foo.bar" into array: ["^.^.^.foo.bar", "^.^.^", "foo.bar"],
		        var relativeViewNameSugar = /^(\^(?:\.\^)*)\.(.*$)/.exec(uiViewName);
		        if (relativeViewNameSugar) {
		            // Clobbers existing contextAnchor (rawViewName validation will fix this)
		            uiViewContextAnchor = relativeViewNameSugar[1]; // set anchor to "^.^.^"
		            uiViewName = relativeViewNameSugar[2]; // set view-name to "foo.bar"
		        }
		        if (uiViewName.charAt(0) === '!') {
		            uiViewName = uiViewName.substr(1);
		            uiViewContextAnchor = ""; // target absolutely from root
		        }
		        // handle parent relative targeting "^.^.^"
		        var relativeMatch = /^(\^(?:\.\^)*)$/;
		        if (relativeMatch.exec(uiViewContextAnchor)) {
		            var anchor = uiViewContextAnchor.split(".").reduce((function (anchor, x) { return anchor.parent; }), context);
		            uiViewContextAnchor = anchor.name;
		        }
		        return { uiViewName: uiViewName, uiViewContextAnchor: uiViewContextAnchor };
		    };
		    return ViewService;
		}());
		exports.ViewService = ViewService;
	
	
	/***/ },
	/* 38 */
	/***/ function(module, exports, __webpack_require__) {
	
		/** @module state */ /** for typedoc */
		"use strict";
		var stateMatcher_1 = __webpack_require__(39);
		var stateBuilder_1 = __webpack_require__(40);
		var stateQueueManager_1 = __webpack_require__(41);
		var common_1 = __webpack_require__(3);
		var StateRegistry = (function () {
		    function StateRegistry(urlMatcherFactory, urlRouterProvider) {
		        this.urlRouterProvider = urlRouterProvider;
		        this.states = {};
		        this.listeners = [];
		        this.matcher = new stateMatcher_1.StateMatcher(this.states);
		        this.builder = new stateBuilder_1.StateBuilder(this.matcher, urlMatcherFactory);
		        this.stateQueue = new stateQueueManager_1.StateQueueManager(this.states, this.builder, urlRouterProvider, this.listeners);
		        var rootStateDef = {
		            name: '',
		            url: '^',
		            views: null,
		            params: {
		                '#': { value: null, type: 'hash', dynamic: true }
		            },
		            abstract: true
		        };
		        var _root = this._root = this.stateQueue.register(rootStateDef);
		        _root.navigable = null;
		    }
		    /**
		     * Listen for a State Registry events
		     *
		     * Adds a callback that is invoked when states are registered or deregistered with the StateRegistry.
		     *
		     * @example
		     * ```js
		     *
		     * let allStates = registry.get();
		     *
		     * // Later, invoke deregisterFn() to remove the listener
		     * let deregisterFn = registry.onStatesChanged((event, states) => {
		     *   switch(event) {
		     *     case: 'registered':
		     *       states.forEach(state => allStates.push(state));
		     *       break;
		     *     case: 'deregistered':
		     *       states.forEach(state => {
		     *         let idx = allStates.indexOf(state);
		     *         if (idx !== -1) allStates.splice(idx, 1);
		     *       });
		     *       break;
		     *   }
		     * });
		     * ```
		     *
		     * @param listener a callback function invoked when the registered states changes.
		     *        The function receives two parameters, `event` and `state`.
		     *        See [[StateRegistryListener]]
		     * @return a function that deregisters the listener
		     */
		    StateRegistry.prototype.onStatesChanged = function (listener) {
		        this.listeners.push(listener);
		        return function deregisterListener() {
		            common_1.removeFrom(this.listeners)(listener);
		        }.bind(this);
		    };
		    /**
		     * Gets the implicit root state
		     *
		     * Gets the root of the state tree.
		     * The root state is implicitly created by UI-Router.
		     * Note: this returns the internal [[State]] representation, not a [[StateDeclaration]]
		     *
		     * @return the root [[State]]
		     */
		    StateRegistry.prototype.root = function () {
		        return this._root;
		    };
		    /**
		     * Adds a state to the registry
		     *
		     * Registers a [[StateDefinition]] or queues it for registration.
		     *
		     * Note: a state will be queued if the state's parent isn't yet registered.
		     * It will also be queued if the queue is not yet in [[StateQueueManager.autoFlush]] mode.
		     *
		     * @param stateDefinition the definition of the state to register.
		     * @returns the internal [[State]] object.
		     *          If the state was successfully registered, then the object is fully built (See: [[StateBuilder]]).
		     *          If the state was only queued, then the object is not fully built.
		     */
		    StateRegistry.prototype.register = function (stateDefinition) {
		        return this.stateQueue.register(stateDefinition);
		    };
		    /** @hidden */
		    StateRegistry.prototype._deregisterTree = function (state) {
		        var _this = this;
		        var all = this.get().map(function (s) { return s.$$state(); });
		        var getChildren = function (states) {
		            var children = all.filter(function (s) { return states.indexOf(s.parent) !== -1; });
		            return children.length === 0 ? children : children.concat(getChildren(children));
		        };
		        var children = getChildren([state]);
		        var deregistered = [state].concat(children).reverse();
		        deregistered.forEach(function (state) {
		            _this.urlRouterProvider.removeRule(state._urlRule);
		            delete _this.states[state.name];
		        });
		        return deregistered;
		    };
		    /**
		     * Removes a state from the registry
		     *
		     * This removes a state from the registry.
		     * If the state has children, they are are also removed from the registry.
		     *
		     * @param stateOrName the state's name or object representation
		     * @returns {State[]} a list of removed states
		     */
		    StateRegistry.prototype.deregister = function (stateOrName) {
		        var _state = this.get(stateOrName);
		        if (!_state)
		            throw new Error("Can't deregister state; not found: " + stateOrName);
		        var deregisteredStates = this._deregisterTree(_state.$$state());
		        this.listeners.forEach(function (listener) { return listener("deregistered", deregisteredStates.map(function (s) { return s.self; })); });
		        return deregisteredStates;
		    };
		    StateRegistry.prototype.get = function (stateOrName, base) {
		        var _this = this;
		        if (arguments.length === 0)
		            return Object.keys(this.states).map(function (name) { return _this.states[name].self; });
		        var found = this.matcher.find(stateOrName, base);
		        return found && found.self || null;
		    };
		    StateRegistry.prototype.decorator = function (name, func) {
		        return this.builder.builder(name, func);
		    };
		    return StateRegistry;
		}());
		exports.StateRegistry = StateRegistry;
	
	
	/***/ },
	/* 39 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		/** @module state */ /** for typedoc */
		var predicates_1 = __webpack_require__(4);
		var glob_1 = __webpack_require__(7);
		var common_1 = __webpack_require__(3);
		var StateMatcher = (function () {
		    function StateMatcher(_states) {
		        this._states = _states;
		    }
		    StateMatcher.prototype.isRelative = function (stateName) {
		        stateName = stateName || "";
		        return stateName.indexOf(".") === 0 || stateName.indexOf("^") === 0;
		    };
		    StateMatcher.prototype.find = function (stateOrName, base) {
		        if (!stateOrName && stateOrName !== "")
		            return undefined;
		        var isStr = predicates_1.isString(stateOrName);
		        var name = isStr ? stateOrName : stateOrName.name;
		        if (this.isRelative(name))
		            name = this.resolvePath(name, base);
		        var state = this._states[name];
		        if (state && (isStr || (!isStr && (state === stateOrName || state.self === stateOrName)))) {
		            return state;
		        }
		        else if (isStr) {
		            var matches = common_1.values(this._states)
		                .filter(function (state) { return new glob_1.Glob(state.name).matches(name); });
		            if (matches.length > 1) {
		                console.log("stateMatcher.find: Found multiple matches for " + name + " using glob: ", matches.map(function (match) { return match.name; }));
		            }
		            return matches[0];
		        }
		        return undefined;
		    };
		    StateMatcher.prototype.resolvePath = function (name, base) {
		        if (!base)
		            throw new Error("No reference point given for path '" + name + "'");
		        var baseState = this.find(base);
		        var splitName = name.split("."), i = 0, pathLength = splitName.length, current = baseState;
		        for (; i < pathLength; i++) {
		            if (splitName[i] === "" && i === 0) {
		                current = baseState;
		                continue;
		            }
		            if (splitName[i] === "^") {
		                if (!current.parent)
		                    throw new Error("Path '" + name + "' not valid for state '" + baseState.name + "'");
		                current = current.parent;
		                continue;
		            }
		            break;
		        }
		        var relName = splitName.slice(i).join(".");
		        return current.name + (current.name && relName ? "." : "") + relName;
		    };
		    return StateMatcher;
		}());
		exports.StateMatcher = StateMatcher;
	
	
	/***/ },
	/* 40 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		/** @module state */ /** for typedoc */
		var common_1 = __webpack_require__(3);
		var predicates_1 = __webpack_require__(4);
		var strings_1 = __webpack_require__(9);
		var hof_1 = __webpack_require__(5);
		var param_1 = __webpack_require__(22);
		var resolvable_1 = __webpack_require__(19);
		var coreservices_1 = __webpack_require__(6);
		var parseUrl = function (url) {
		    if (!predicates_1.isString(url))
		        return false;
		    var root = url.charAt(0) === '^';
		    return { val: root ? url.substring(1) : url, root: root };
		};
		function nameBuilder(state) {
		    if (state.lazyLoad)
		        state.name = state.self.name + ".**";
		    return state.name;
		}
		function selfBuilder(state) {
		    state.self.$$state = function () { return state; };
		    return state.self;
		}
		function dataBuilder(state) {
		    if (state.parent && state.parent.data) {
		        state.data = state.self.data = common_1.inherit(state.parent.data, state.data);
		    }
		    return state.data;
		}
		var getUrlBuilder = function ($urlMatcherFactoryProvider, root) {
		    return function urlBuilder(state) {
		        var stateDec = state;
		        if (stateDec && stateDec.url && stateDec.lazyLoad) {
		            stateDec.url += "{remainder:any}"; // match any path (.*)
		        }
		        var parsed = parseUrl(stateDec.url), parent = state.parent;
		        var url = !parsed ? stateDec.url : $urlMatcherFactoryProvider.compile(parsed.val, {
		            params: state.params || {},
		            paramMap: function (paramConfig, isSearch) {
		                if (stateDec.reloadOnSearch === false && isSearch)
		                    paramConfig = common_1.extend(paramConfig || {}, { dynamic: true });
		                return paramConfig;
		            }
		        });
		        if (!url)
		            return null;
		        if (!$urlMatcherFactoryProvider.isMatcher(url))
		            throw new Error("Invalid url '" + url + "' in state '" + state + "'");
		        return (parsed && parsed.root) ? url : ((parent && parent.navigable) || root()).url.append(url);
		    };
		};
		var getNavigableBuilder = function (isRoot) {
		    return function navigableBuilder(state) {
		        return !isRoot(state) && state.url ? state : (state.parent ? state.parent.navigable : null);
		    };
		};
		var getParamsBuilder = function (paramTypes) {
		    return function paramsBuilder(state) {
		        var makeConfigParam = function (config, id) { return param_1.Param.fromConfig(id, null, config, paramTypes); };
		        var urlParams = (state.url && state.url.parameters({ inherit: false })) || [];
		        var nonUrlParams = common_1.values(common_1.mapObj(common_1.omit(state.params || {}, urlParams.map(hof_1.prop('id'))), makeConfigParam));
		        return urlParams.concat(nonUrlParams).map(function (p) { return [p.id, p]; }).reduce(common_1.applyPairs, {});
		    };
		};
		function pathBuilder(state) {
		    return state.parent ? state.parent.path.concat(state) : [state];
		}
		function includesBuilder(state) {
		    var includes = state.parent ? common_1.extend({}, state.parent.includes) : {};
		    includes[state.name] = true;
		    return includes;
		}
		/**
		 * This is a [[StateBuilder.builder]] function for the `resolve:` block on a [[StateDeclaration]].
		 *
		 * When the [[StateBuilder]] builds a [[State]] object from a raw [[StateDeclaration]], this builder
		 * validates the `resolve` property and converts it to a [[Resolvable]] array.
		 *
		 * resolve: input value can be:
		 *
		 * {
		 *   // analyzed but not injected
		 *   myFooResolve: function() { return "myFooData"; },
		 *
		 *   // function.toString() parsed, "DependencyName" dep as string (not min-safe)
		 *   myBarResolve: function(DependencyName) { return DependencyName.fetchSomethingAsPromise() },
		 *
		 *   // Array split; "DependencyName" dep as string
		 *   myBazResolve: [ "DependencyName", function(dep) { return dep.fetchSomethingAsPromise() },
		 *
		 *   // Array split; DependencyType dep as token (compared using ===)
		 *   myQuxResolve: [ DependencyType, function(dep) { return dep.fetchSometingAsPromise() },
		 *
		 *   // val.$inject used as deps
		 *   // where:
		 *   //     corgeResolve.$inject = ["DependencyName"];
		 *   //     function corgeResolve(dep) { dep.fetchSometingAsPromise() }
		 *   // then "DependencyName" dep as string
		 *   myCorgeResolve: corgeResolve,
		 *
		 *  // inject service by name
		 *  // When a string is found, desugar creating a resolve that injects the named service
		 *   myGraultResolve: "SomeService"
		 * }
		 *
		 * or:
		 *
		 * [
		 *   new Resolvable("myFooResolve", function() { return "myFooData" }),
		 *   new Resolvable("myBarResolve", function(dep) { return dep.fetchSomethingAsPromise() }, [ "DependencyName" ]),
		 *   { provide: "myBazResolve", useFactory: function(dep) { dep.fetchSomethingAsPromise() }, deps: [ "DependencyName" ] }
		 * ]
		 */
		function resolvablesBuilder(state) {
		    /** convert resolve: {} and resolvePolicy: {} objects to an array of tuples */
		    var objects2Tuples = function (resolveObj, resolvePolicies) {
		        return Object.keys(resolveObj || {}).map(function (token) { return ({ token: token, val: resolveObj[token], deps: undefined, policy: resolvePolicies[token] }); });
		    };
		    /** fetch DI annotations from a function or ng1-style array */
		    var annotate = function (fn) {
		        return fn['$inject'] || coreservices_1.services.$injector.annotate(fn, coreservices_1.services.$injector.strictDi);
		    };
		    /** true if the object has both `token` and `resolveFn`, and is probably a [[ResolveLiteral]] */
		    var isResolveLiteral = function (obj) { return !!(obj.token && obj.resolveFn); };
		    /** true if the object looks like a provide literal, or a ng2 Provider */
		    var isLikeNg2Provider = function (obj) { return !!((obj.provide || obj.token) && (obj.useValue || obj.useFactory || obj.useExisting || obj.useClass)); };
		    /** true if the object looks like a tuple from obj2Tuples */
		    var isTupleFromObj = function (obj) { return !!(obj && obj.val && (predicates_1.isString(obj.val) || predicates_1.isArray(obj.val) || predicates_1.isFunction(obj.val))); };
		    /** extracts the token from a Provider or provide literal */
		    var token = function (p) { return p.provide || p.token; };
		    /** Given a literal resolve or provider object, returns a Resolvable */
		    var literal2Resolvable = hof_1.pattern([
		        [hof_1.prop('resolveFn'), function (p) { return new resolvable_1.Resolvable(token(p), p.resolveFn, p.deps, p.policy); }],
		        [hof_1.prop('useFactory'), function (p) { return new resolvable_1.Resolvable(token(p), p.useFactory, (p.deps || p.dependencies), p.policy); }],
		        [hof_1.prop('useClass'), function (p) { return new resolvable_1.Resolvable(token(p), function () { return new p.useClass(); }, [], p.policy); }],
		        [hof_1.prop('useValue'), function (p) { return new resolvable_1.Resolvable(token(p), function () { return p.useValue; }, [], p.policy, p.useValue); }],
		        [hof_1.prop('useExisting'), function (p) { return new resolvable_1.Resolvable(token(p), common_1.identity, [p.useExisting], p.policy); }],
		    ]);
		    var tuple2Resolvable = hof_1.pattern([
		        [hof_1.pipe(hof_1.prop("val"), predicates_1.isString), function (tuple) { return new resolvable_1.Resolvable(tuple.token, common_1.identity, [tuple.val], tuple.policy); }],
		        [hof_1.pipe(hof_1.prop("val"), predicates_1.isArray), function (tuple) { return new resolvable_1.Resolvable(tuple.token, common_1.tail(tuple.val), tuple.val.slice(0, -1), tuple.policy); }],
		        [hof_1.pipe(hof_1.prop("val"), predicates_1.isFunction), function (tuple) { return new resolvable_1.Resolvable(tuple.token, tuple.val, annotate(tuple.val), tuple.policy); }],
		    ]);
		    var item2Resolvable = hof_1.pattern([
		        [hof_1.is(resolvable_1.Resolvable), function (r) { return r; }],
		        [isResolveLiteral, literal2Resolvable],
		        [isLikeNg2Provider, literal2Resolvable],
		        [isTupleFromObj, tuple2Resolvable],
		        [hof_1.val(true), function (obj) { throw new Error("Invalid resolve value: " + strings_1.stringify(obj)); }]
		    ]);
		    // If resolveBlock is already an array, use it as-is.
		    // Otherwise, assume it's an object and convert to an Array of tuples
		    var decl = state.resolve;
		    var items = predicates_1.isArray(decl) ? decl : objects2Tuples(decl, state.resolvePolicy || {});
		    return items.map(item2Resolvable);
		}
		exports.resolvablesBuilder = resolvablesBuilder;
		/**
		 * @internalapi A internal global service
		 *
		 * StateBuilder is a factory for the internal [[State]] objects.
		 *
		 * When you register a state with the [[StateRegistry]], you register a plain old javascript object which
		 * conforms to the [[StateDeclaration]] interface.  This factory takes that object and builds the corresponding
		 * [[State]] object, which has an API and is used internally.
		 *
		 * Custom properties or API may be added to the internal [[State]] object by registering a decorator function
		 * using the [[builder]] method.
		 */
		var StateBuilder = (function () {
		    function StateBuilder(matcher, $urlMatcherFactoryProvider) {
		        this.matcher = matcher;
		        var self = this;
		        var root = function () { return matcher.find(""); };
		        var isRoot = function (state) { return state.name === ""; };
		        function parentBuilder(state) {
		            if (isRoot(state))
		                return null;
		            return matcher.find(self.parentName(state)) || root();
		        }
		        this.builders = {
		            name: [nameBuilder],
		            self: [selfBuilder],
		            parent: [parentBuilder],
		            data: [dataBuilder],
		            // Build a URLMatcher if necessary, either via a relative or absolute URL
		            url: [getUrlBuilder($urlMatcherFactoryProvider, root)],
		            // Keep track of the closest ancestor state that has a URL (i.e. is navigable)
		            navigable: [getNavigableBuilder(isRoot)],
		            params: [getParamsBuilder($urlMatcherFactoryProvider.paramTypes)],
		            // Each framework-specific ui-router implementation should define its own `views` builder
		            // e.g., src/ng1/statebuilders/views.ts
		            views: [],
		            // Keep a full path from the root down to this state as this is needed for state activation.
		            path: [pathBuilder],
		            // Speed up $state.includes() as it's used a lot
		            includes: [includesBuilder],
		            resolvables: [resolvablesBuilder]
		        };
		    }
		    /**
		     * Registers a [[BuilderFunction]] for a specific [[State]] property (e.g., `parent`, `url`, or `path`).
		     * More than one BuilderFunction can be registered for a given property.
		     *
		     * The BuilderFunction(s) will be used to define the property on any subsequently built [[State]] objects.
		     *
		     * @param name The name of the State property being registered for.
		     * @param fn The BuilderFunction which will be used to build the State property
		     * @returns a function which deregisters the BuilderFunction
		     */
		    StateBuilder.prototype.builder = function (name, fn) {
		        var builders = this.builders;
		        var array = builders[name] || [];
		        // Backwards compat: if only one builder exists, return it, else return whole arary.
		        if (predicates_1.isString(name) && !predicates_1.isDefined(fn))
		            return array.length > 1 ? array : array[0];
		        if (!predicates_1.isString(name) || !predicates_1.isFunction(fn))
		            return;
		        builders[name] = array;
		        builders[name].push(fn);
		        return function () { return builders[name].splice(builders[name].indexOf(fn, 1)) && null; };
		    };
		    /**
		     * Builds all of the properties on an essentially blank State object, returning a State object which has all its
		     * properties and API built.
		     *
		     * @param state an uninitialized State object
		     * @returns the built State object
		     */
		    StateBuilder.prototype.build = function (state) {
		        var _a = this, matcher = _a.matcher, builders = _a.builders;
		        var parent = this.parentName(state);
		        if (parent && !matcher.find(parent))
		            return null;
		        for (var key in builders) {
		            if (!builders.hasOwnProperty(key))
		                continue;
		            var chain = builders[key].reduce(function (parentFn, step) { return function (_state) { return step(_state, parentFn); }; }, common_1.noop);
		            state[key] = chain(state);
		        }
		        return state;
		    };
		    StateBuilder.prototype.parentName = function (state) {
		        var name = state.name || "";
		        var segments = name.split('.');
		        if (segments.length > 1) {
		            if (state.parent) {
		                throw new Error("States that specify the 'parent:' property should not have a '.' in their name (" + name + ")");
		            }
		            var lastSegment = segments.pop();
		            if (lastSegment === '**')
		                segments.pop();
		            return segments.join(".");
		        }
		        if (!state.parent)
		            return "";
		        return predicates_1.isString(state.parent) ? state.parent : state.parent.name;
		    };
		    StateBuilder.prototype.name = function (state) {
		        var name = state.name;
		        if (name.indexOf('.') !== -1 || !state.parent)
		            return name;
		        var parentName = predicates_1.isString(state.parent) ? state.parent : state.parent.name;
		        return parentName ? parentName + "." + name : name;
		    };
		    return StateBuilder;
		}());
		exports.StateBuilder = StateBuilder;
	
	
	/***/ },
	/* 41 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		/** @module state */ /** for typedoc */
		var common_1 = __webpack_require__(3);
		var predicates_1 = __webpack_require__(4);
		var stateObject_1 = __webpack_require__(42);
		var StateQueueManager = (function () {
		    function StateQueueManager(states, builder, $urlRouterProvider, listeners) {
		        this.states = states;
		        this.builder = builder;
		        this.$urlRouterProvider = $urlRouterProvider;
		        this.listeners = listeners;
		        this.queue = [];
		    }
		    StateQueueManager.prototype.register = function (config) {
		        var _a = this, states = _a.states, queue = _a.queue, $state = _a.$state;
		        // Wrap a new object around the state so we can store our private details easily.
		        // @TODO: state = new State(extend({}, config, { ... }))
		        var state = common_1.inherit(new stateObject_1.State(), common_1.extend({}, config, {
		            self: config,
		            resolve: config.resolve || [],
		            toString: function () { return config.name; }
		        }));
		        if (!predicates_1.isString(state.name))
		            throw new Error("State must have a valid name");
		        if (states.hasOwnProperty(state.name) || common_1.pluck(queue, 'name').indexOf(state.name) !== -1)
		            throw new Error("State '" + state.name + "' is already defined");
		        queue.push(state);
		        if (this.$state) {
		            this.flush($state);
		        }
		        return state;
		    };
		    StateQueueManager.prototype.flush = function ($state) {
		        var _a = this, queue = _a.queue, states = _a.states, builder = _a.builder;
		        var registered = [], // states that got registered
		        orphans = [], // states that dodn't yet have a parent registered
		        previousQueueLength = {}; // keep track of how long the queue when an orphan was first encountered
		        while (queue.length > 0) {
		            var state = queue.shift();
		            var result = builder.build(state);
		            var orphanIdx = orphans.indexOf(state);
		            if (result) {
		                if (states.hasOwnProperty(state.name))
		                    throw new Error("State '" + name + "' is already defined");
		                states[state.name] = state;
		                this.attachRoute($state, state);
		                if (orphanIdx >= 0)
		                    orphans.splice(orphanIdx, 1);
		                registered.push(state);
		                continue;
		            }
		            var prev = previousQueueLength[state.name];
		            previousQueueLength[state.name] = queue.length;
		            if (orphanIdx >= 0 && prev === queue.length) {
		                // Wait until two consecutive iterations where no additional states were dequeued successfully.
		                // throw new Error(`Cannot register orphaned state '${state.name}'`);
		                queue.push(state);
		                return states;
		            }
		            else if (orphanIdx < 0) {
		                orphans.push(state);
		            }
		            queue.push(state);
		        }
		        if (registered.length) {
		            this.listeners.forEach(function (listener) { return listener("registered", registered.map(function (s) { return s.self; })); });
		        }
		        return states;
		    };
		    StateQueueManager.prototype.autoFlush = function ($state) {
		        this.$state = $state;
		        this.flush($state);
		    };
		    StateQueueManager.prototype.attachRoute = function ($state, state) {
		        var $urlRouterProvider = this.$urlRouterProvider;
		        if (state.abstract || !state.url)
		            return;
		        $urlRouterProvider.when(state.url, ['$match', '$stateParams', function ($match, $stateParams) {
		                if ($state.$current.navigable !== state || !common_1.equalForKeys($match, $stateParams)) {
		                    $state.transitionTo(state, $match, { inherit: true, source: "url" });
		                }
		            }], function (rule) { return state._urlRule = rule; });
		    };
		    return StateQueueManager;
		}());
		exports.StateQueueManager = StateQueueManager;
	
	
	/***/ },
	/* 42 */
	/***/ function(module, exports, __webpack_require__) {
	
		/** @module state */ /** for typedoc */
		"use strict";
		var common_1 = __webpack_require__(3);
		var hof_1 = __webpack_require__(5);
		/**
		 * @ngdoc object
		 * @name ui.router.state.type:State
		 *
		 * @description
		 * Definition object for states. Includes methods for manipulating the state heirarchy.
		 *
		 * @param {Object} config  A configuration object hash that includes the results of user-supplied
		 *        values, as well as values from `StateBuilder`.
		 *
		 * @returns {Object}  Returns a new `State` object.
		 */
		var State = (function () {
		    function State(config) {
		        common_1.extend(this, config);
		        // Object.freeze(this);
		    }
		    /**
		     * @ngdoc function
		     * @name ui.router.state.type:State#is
		     * @methodOf ui.router.state.type:State
		     *
		     * @description
		     * Compares the identity of the state against the passed value, which is either an object
		     * reference to the actual `State` instance, the original definition object passed to
		     * `$stateProvider.state()`, or the fully-qualified name.
		     *
		     * @param {Object} ref Can be one of (a) a `State` instance, (b) an object that was passed
		     *        into `$stateProvider.state()`, (c) the fully-qualified name of a state as a string.
		     * @returns {boolean} Returns `true` if `ref` matches the current `State` instance.
		     */
		    State.prototype.is = function (ref) {
		        return this === ref || this.self === ref || this.fqn() === ref;
		    };
		    /**
		     * @ngdoc function
		     * @name ui.router.state.type:State#fqn
		     * @methodOf ui.router.state.type:State
		     *
		     * @description
		     * Returns the fully-qualified name of the state, based on its current position in the tree.
		     *
		     * @returns {string} Returns a dot-separated name of the state.
		     */
		    State.prototype.fqn = function () {
		        if (!this.parent || !(this.parent instanceof this.constructor))
		            return this.name;
		        var name = this.parent.fqn();
		        return name ? name + "." + this.name : this.name;
		    };
		    /**
		     * @ngdoc function
		     * @name ui.router.state.type:State#root
		     * @methodOf ui.router.state.type:State
		     *
		     * @description
		     * Returns the root node of this state's tree.
		     *
		     * @returns {State} The root of this state's tree.
		     */
		    State.prototype.root = function () {
		        return this.parent && this.parent.root() || this;
		    };
		    State.prototype.parameters = function (opts) {
		        opts = common_1.defaults(opts, { inherit: true });
		        var inherited = opts.inherit && this.parent && this.parent.parameters() || [];
		        return inherited.concat(common_1.values(this.params));
		    };
		    State.prototype.parameter = function (id, opts) {
		        if (opts === void 0) { opts = {}; }
		        return (this.url && this.url.parameter(id, opts) ||
		            common_1.find(common_1.values(this.params), hof_1.propEq('id', id)) ||
		            opts.inherit && this.parent && this.parent.parameter(id));
		    };
		    State.prototype.toString = function () {
		        return this.fqn();
		    };
		    return State;
		}());
		exports.State = State;
	
	
	/***/ },
	/* 43 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		/** @module state */ /** */
		var common_1 = __webpack_require__(3);
		var predicates_1 = __webpack_require__(4);
		var queue_1 = __webpack_require__(8);
		var coreservices_1 = __webpack_require__(6);
		var pathFactory_1 = __webpack_require__(20);
		var node_1 = __webpack_require__(21);
		var transitionService_1 = __webpack_require__(30);
		var rejectFactory_1 = __webpack_require__(10);
		var targetState_1 = __webpack_require__(14);
		var param_1 = __webpack_require__(22);
		var glob_1 = __webpack_require__(7);
		var common_2 = __webpack_require__(3);
		var common_3 = __webpack_require__(3);
		var resolveContext_1 = __webpack_require__(17);
		var StateService = (function () {
		    /** @hidden */
		    function StateService(router) {
		        this.router = router;
		        this.invalidCallbacks = [];
		        /** @hidden */
		        this._defaultErrorHandler = function $defaultErrorHandler($error$) {
		            if ($error$ instanceof Error && $error$.stack) {
		                console.error($error$);
		                console.error($error$.stack);
		            }
		            else if ($error$ instanceof rejectFactory_1.Rejection) {
		                console.error($error$.toString());
		                if ($error$.detail && $error$.detail.stack)
		                    console.error($error$.detail.stack);
		            }
		            else {
		                console.error($error$);
		            }
		        };
		        var getters = ['current', '$current', 'params', 'transition'];
		        var boundFns = Object.keys(StateService.prototype).filter(function (key) { return getters.indexOf(key) === -1; });
		        common_3.bindFunctions(StateService.prototype, this, this, boundFns);
		    }
		    Object.defineProperty(StateService.prototype, "transition", {
		        get: function () { return this.router.globals.transition; },
		        enumerable: true,
		        configurable: true
		    });
		    Object.defineProperty(StateService.prototype, "params", {
		        get: function () { return this.router.globals.params; },
		        enumerable: true,
		        configurable: true
		    });
		    Object.defineProperty(StateService.prototype, "current", {
		        get: function () { return this.router.globals.current; },
		        enumerable: true,
		        configurable: true
		    });
		    Object.defineProperty(StateService.prototype, "$current", {
		        get: function () { return this.router.globals.$current; },
		        enumerable: true,
		        configurable: true
		    });
		    /**
		     * Handler for when [[transitionTo]] is called with an invalid state.
		     *
		     * Invokes the [[onInvalid]] callbacks, in natural order.
		     * Each callback's return value is checked in sequence until one of them returns an instance of TargetState.
		     * The results of the callbacks are wrapped in $q.when(), so the callbacks may return promises.
		     *
		     * If a callback returns an TargetState, then it is used as arguments to $state.transitionTo() and the result returned.
		     */
		    StateService.prototype._handleInvalidTargetState = function (fromPath, toState) {
		        var _this = this;
		        var fromState = pathFactory_1.PathFactory.makeTargetState(fromPath);
		        var globals = this.router.globals;
		        var latestThing = function () { return globals.transitionHistory.peekTail(); };
		        var latest = latestThing();
		        var callbackQueue = new queue_1.Queue(this.invalidCallbacks.slice());
		        var injector = new resolveContext_1.ResolveContext(fromPath).injector();
		        var checkForRedirect = function (result) {
		            if (!(result instanceof targetState_1.TargetState)) {
		                return;
		            }
		            var target = result;
		            // Recreate the TargetState, in case the state is now defined.
		            target = _this.target(target.identifier(), target.params(), target.options());
		            if (!target.valid())
		                return rejectFactory_1.Rejection.invalid(target.error()).toPromise();
		            if (latestThing() !== latest)
		                return rejectFactory_1.Rejection.superseded().toPromise();
		            return _this.transitionTo(target.identifier(), target.params(), target.options());
		        };
		        function invokeNextCallback() {
		            var nextCallback = callbackQueue.dequeue();
		            if (nextCallback === undefined)
		                return rejectFactory_1.Rejection.invalid(toState.error()).toPromise();
		            var callbackResult = coreservices_1.services.$q.when(nextCallback(toState, fromState, injector));
		            return callbackResult.then(checkForRedirect).then(function (result) { return result || invokeNextCallback(); });
		        }
		        return invokeNextCallback();
		    };
		    /**
		     * Registers an Invalid State handler
		     *
		     * Registers a [[OnInvalidCallback]] function to be invoked when [[StateService.transitionTo]]
		     * has been called with an invalid state reference parameter
		     *
		     * Example:
		     * ```js
		     * stateService.onInvalid(function(to, from, injector) {
		     *   if (to.name() === 'foo') {
		     *     let lazyLoader = injector.get('LazyLoadService');
		     *     return lazyLoader.load('foo')
		     *         .then(() => stateService.target('foo'));
		     *   }
		     * });
		     * ```
		     *
		     * @param {function} callback invoked when the toState is invalid
		     *   This function receives the (invalid) toState, the fromState, and an injector.
		     *   The function may optionally return a [[TargetState]] or a Promise for a TargetState.
		     *   If one is returned, it is treated as a redirect.
		     *
		     * @returns a function which deregisters the callback
		     */
		    StateService.prototype.onInvalid = function (callback) {
		        this.invalidCallbacks.push(callback);
		        return function deregisterListener() {
		            common_1.removeFrom(this.invalidCallbacks)(callback);
		        }.bind(this);
		    };
		    /**
		     * @ngdoc function
		     * @name ui.router.state.$state#reload
		     * @methodOf ui.router.state.$state
		     *
		     * @description
		     * A method that force reloads the current state, or a partial state hierarchy. All resolves are re-resolved,
		     * controllers reinstantiated, and events re-fired.
		     *
		     * @example
		     * <pre>
		     * let app angular.module('app', ['ui.router']);
		     *
		     * app.controller('ctrl', function ($scope, $state) {
		     *   $scope.reload = function(){
		     *     $state.reload();
		     *   }
		     * });
		     * </pre>
		     *
		     * `reload()` is just an alias for:
		     * <pre>
		     * $state.transitionTo($state.current, $stateParams, {
		     *   reload: true, inherit: false, notify: true
		     * });
		     * </pre>
		     *
		     * @param {string=|object=} reloadState - A state name or a state object, which is the root of the resolves to be re-resolved.
		     * @example
		     * <pre>
		     * //assuming app application consists of 3 states: 'contacts', 'contacts.detail', 'contacts.detail.item'
		     * //and current state is 'contacts.detail.item'
		     * let app angular.module('app', ['ui.router']);
		     *
		     * app.controller('ctrl', function ($scope, $state) {
		     *   $scope.reload = function(){
		     *     //will reload 'contact.detail' and nested 'contact.detail.item' states
		     *     $state.reload('contact.detail');
		     *   }
		     * });
		     * </pre>
		     *
		     * @returns {promise} A promise representing the state of the new transition. See
		     * {@link ui.router.state.$state#methods_go $state.go}.
		     */
		    StateService.prototype.reload = function (reloadState) {
		        return this.transitionTo(this.current, this.params, {
		            reload: predicates_1.isDefined(reloadState) ? reloadState : true,
		            inherit: false,
		            notify: false
		        });
		    };
		    ;
		    /**
		     * @ngdoc function
		     * @name ui.router.state.$state#go
		     * @methodOf ui.router.state.$state
		     *
		     * @description
		     * Convenience method for transitioning to a new state. `$state.go` calls
		     * `$state.transitionTo` internally but automatically sets options to
		     * `{ location: true, inherit: true, relative: $state.$current, notify: true }`.
		     * This allows you to easily use an absolute or relative to path and specify
		     * only the parameters you'd like to update (while letting unspecified parameters
		     * inherit from the currently active ancestor states).
		     *
		     * @example
		     * <pre>
		     * let app = angular.module('app', ['ui.router']);
		     *
		     * app.controller('ctrl', function ($scope, $state) {
		     *   $scope.changeState = function () {
		     *     $state.go('contact.detail');
		     *   };
		     * });
		     * </pre>
		     * <img src='../ngdoc_assets/StateGoExamples.png'/>
		     *
		     * @param {string|object} to Absolute state name, state object, or relative state path. Some examples:
		     *
		     * - `$state.go('contact.detail')` - will go to the `contact.detail` state
		     * - `$state.go('^')` - will go to a parent state
		     * - `$state.go('^.sibling')` - will go to a sibling state
		     * - `$state.go('.child.grandchild')` - will go to grandchild state
		     *
		     * @param {object=} params A map of the parameters that will be sent to the state,
		     * will populate $stateParams. Any parameters that are not specified will be inherited from currently
		     * defined parameters. This allows, for example, going to a sibling state that shares parameters
		     * specified in a parent state. Parameter inheritance only works between common ancestor states, I.e.
		     * transitioning to a sibling will get you the parameters for all parents, transitioning to a child
		     * will get you all current parameters, etc.
		     * @param {object=} options Options object. The options are:
		     *
		     * - **`location`** - {boolean=true|string=} - If `true` will update the url in the location bar, if `false`
		     *    will not. If string, must be `"replace"`, which will update url and also replace last history record.
		     * - **`inherit`** - {boolean=true}, If `true` will inherit url parameters from current url.
		     * - **`relative`** - {object=$state.$current}, When transitioning with relative path (e.g '^'),
		     *    defines which state to be relative from.
		     * - **`notify`** - {boolean=true}, If `true` will broadcast $stateChangeStart and $stateChangeSuccess events.
		     * - **`reload`** (v0.2.5) - {boolean=false}, If `true` will force transition even if the state or params
		     *    have not changed, aka a reload of the same state. It differs from reloadOnSearch because you'd
		     *    use this when you want to force a reload when *everything* is the same, including search params.
		     *
		     * @returns {promise} A promise representing the state of the new transition.
		     *
		     * Possible success values:
		     *
		     * - $state.current
		     *
		     * <br/>Possible rejection values:
		     *
		     * - 'transition superseded' - when a newer transition has been started after this one
		     * - 'transition prevented' - when `event.preventDefault()` has been called in a `$stateChangeStart` listener
		     * - 'transition aborted' - when `event.preventDefault()` has been called in a `$stateNotFound` listener or
		     *   when a `$stateNotFound` `event.retry` promise errors.
		     * - 'transition failed' - when a state has been unsuccessfully found after 2 tries.
		     * - *resolve error* - when an error has occurred with a `resolve`
		     *
		     */
		    StateService.prototype.go = function (to, params, options) {
		        var defautGoOpts = { relative: this.$current, inherit: true };
		        var transOpts = common_1.defaults(options, defautGoOpts, transitionService_1.defaultTransOpts);
		        return this.transitionTo(to, params, transOpts);
		    };
		    ;
		    /** Factory method for creating a TargetState */
		    StateService.prototype.target = function (identifier, params, options) {
		        if (options === void 0) { options = {}; }
		        // If we're reloading, find the state object to reload from
		        if (predicates_1.isObject(options.reload) && !options.reload.name)
		            throw new Error('Invalid reload state object');
		        var reg = this.router.stateRegistry;
		        options.reloadState = options.reload === true ? reg.root() : reg.matcher.find(options.reload, options.relative);
		        if (options.reload && !options.reloadState)
		            throw new Error("No such reload state '" + (predicates_1.isString(options.reload) ? options.reload : options.reload.name) + "'");
		        var stateDefinition = reg.matcher.find(identifier, options.relative);
		        return new targetState_1.TargetState(identifier, stateDefinition, params, options);
		    };
		    ;
		    /**
		     * @ngdoc function
		     * @name ui.router.state.$state#transitionTo
		     * @methodOf ui.router.state.$state
		     *
		     * @description
		     * Low-level method for transitioning to a new state. {@link ui.router.state.$state#methods_go $state.go}
		     * uses `transitionTo` internally. `$state.go` is recommended in most situations.
		     *
		     * @example
		     * <pre>
		     * let app = angular.module('app', ['ui.router']);
		     *
		     * app.controller('ctrl', function ($scope, $state) {
		     *   $scope.changeState = function () {
		     *     $state.transitionTo('contact.detail');
		     *   };
		     * });
		     * </pre>
		     *
		     * @param {string|object} to State name or state object.
		     * @param {object=} toParams A map of the parameters that will be sent to the state,
		     * will populate $stateParams.
		     * @param {object=} options Options object. The options are:
		     *
		     * - **`location`** - {boolean=true|string=} - If `true` will update the url in the location bar, if `false`
		     *    will not. If string, must be `"replace"`, which will update url and also replace last history record.
		     * - **`inherit`** - {boolean=false}, If `true` will inherit url parameters from current url.
		     * - **`relative`** - {object=}, When transitioning with relative path (e.g '^'),
		     *    defines which state to be relative from.
		     * - **`notify`** - {boolean=true}, If `true` will broadcast $stateChangeStart and $stateChangeSuccess events.
		     * - **`reload`** (v0.2.5) - {boolean=false}, If `true` will force transition even if the state or params
		     *    have not changed, aka a reload of the same state. It differs from reloadOnSearch because you'd
		     *    use this when you want to force a reload when *everything* is the same, including search params.
		     *
		     * @returns {promise} A promise representing the state of the new transition. See
		     * {@link ui.router.state.$state#methods_go $state.go}.
		     */
		    StateService.prototype.transitionTo = function (to, toParams, options) {
		        var _this = this;
		        if (toParams === void 0) { toParams = {}; }
		        if (options === void 0) { options = {}; }
		        var router = this.router;
		        var globals = router.globals;
		        var transHistory = globals.transitionHistory;
		        options = common_1.defaults(options, transitionService_1.defaultTransOpts);
		        options = common_1.extend(options, { current: transHistory.peekTail.bind(transHistory) });
		        var ref = this.target(to, toParams, options);
		        var latestSuccess = globals.successfulTransitions.peekTail();
		        var rootPath = function () { return [new node_1.PathNode(_this.router.stateRegistry.root())]; };
		        var currentPath = latestSuccess ? latestSuccess.treeChanges().to : rootPath();
		        if (!ref.exists())
		            return this._handleInvalidTargetState(currentPath, ref);
		        if (!ref.valid())
		            return common_1.silentRejection(ref.error());
		        /**
		         * Special handling for Ignored, Aborted, and Redirected transitions
		         *
		         * The semantics for the transition.run() promise and the StateService.transitionTo()
		         * promise differ. For instance, the run() promise may be rejected because it was
		         * IGNORED, but the transitionTo() promise is resolved because from the user perspective
		         * no error occurred.  Likewise, the transition.run() promise may be rejected because of
		         * a Redirect, but the transitionTo() promise is chained to the new Transition's promise.
		         */
		        var rejectedTransitionHandler = function (transition) { return function (error) {
		            if (error instanceof rejectFactory_1.Rejection) {
		                if (error.type === rejectFactory_1.RejectType.IGNORED) {
		                    // Consider ignored `Transition.run()` as a successful `transitionTo`
		                    router.urlRouter.update();
		                    return coreservices_1.services.$q.when(globals.current);
		                }
		                var detail = error.detail;
		                if (error.type === rejectFactory_1.RejectType.SUPERSEDED && error.redirected && detail instanceof targetState_1.TargetState) {
		                    // If `Transition.run()` was redirected, allow the `transitionTo()` promise to resolve successfully
		                    // by returning the promise for the new (redirect) `Transition.run()`.
		                    var redirect = transition.redirect(detail);
		                    return redirect.run().catch(rejectedTransitionHandler(redirect));
		                }
		                if (error.type === rejectFactory_1.RejectType.ABORTED) {
		                    router.urlRouter.update();
		                }
		            }
		            var errorHandler = _this.defaultErrorHandler();
		            errorHandler(error);
		            return coreservices_1.services.$q.reject(error);
		        }; };
		        var transition = this.router.transitionService.create(currentPath, ref);
		        var transitionToPromise = transition.run().catch(rejectedTransitionHandler(transition));
		        common_1.silenceUncaughtInPromise(transitionToPromise); // issue #2676
		        // Return a promise for the transition, which also has the transition object on it.
		        return common_1.extend(transitionToPromise, { transition: transition });
		    };
		    ;
		    /**
		     * @ngdoc function
		     * @name ui.router.state.$state#is
		     * @methodOf ui.router.state.$state
		     *
		     * @description
		     * Similar to {@link ui.router.state.$state#methods_includes $state.includes},
		     * but only checks for the full state name. If params is supplied then it will be
		     * tested for strict equality against the current active params object, so all params
		     * must match with none missing and no extras.
		     *
		     * @example
		     * <pre>
		     * $state.$current.name = 'contacts.details.item';
		     *
		     * // absolute name
		     * $state.is('contact.details.item'); // returns true
		     * $state.is(contactDetailItemStateObject); // returns true
		     *
		     * // relative name (. and ^), typically from a template
		     * // E.g. from the 'contacts.details' template
		     * <div ng-class="{highlighted: $state.is('.item')}">Item</div>
		     * </pre>
		     *
		     * @param {string|object} stateOrName The state name (absolute or relative) or state object you'd like to check.
		     * @param {object=} params A param object, e.g. `{sectionId: section.id}`, that you'd like
		     * to test against the current active state.
		     * @param {object=} options An options object.  The options are:
		     *
		     * - **`relative`** - {string|object} -  If `stateOrName` is a relative state name and `options.relative` is set, .is will
		     * test relative to `options.relative` state (or name).
		     *
		     * @returns {boolean} Returns true if it is the state.
		     */
		    StateService.prototype.is = function (stateOrName, params, options) {
		        options = common_1.defaults(options, { relative: this.$current });
		        var state = this.router.stateRegistry.matcher.find(stateOrName, options.relative);
		        if (!predicates_1.isDefined(state))
		            return undefined;
		        if (this.$current !== state)
		            return false;
		        return predicates_1.isDefined(params) && params !== null ? param_1.Param.equals(state.parameters(), this.params, params) : true;
		    };
		    ;
		    /**
		     * @ngdoc function
		     * @name ui.router.state.$state#includes
		     * @methodOf ui.router.state.$state
		     *
		     * @description
		     * A method to determine if the current active state is equal to or is the child of the
		     * state stateName. If any params are passed then they will be tested for a match as well.
		     * Not all the parameters need to be passed, just the ones you'd like to test for equality.
		     *
		     * @example
		     * Partial and relative names
		     * <pre>
		     * $state.$current.name = 'contacts.details.item';
		     *
		     * // Using partial names
		     * $state.includes("contacts"); // returns true
		     * $state.includes("contacts.details"); // returns true
		     * $state.includes("contacts.details.item"); // returns true
		     * $state.includes("contacts.list"); // returns false
		     * $state.includes("about"); // returns false
		     *
		     * // Using relative names (. and ^), typically from a template
		     * // E.g. from the 'contacts.details' template
		     * <div ng-class="{highlighted: $state.includes('.item')}">Item</div>
		     * </pre>
		     *
		     * Basic globbing patterns
		     * <pre>
		     * $state.$current.name = 'contacts.details.item.url';
		     *
		     * $state.includes("*.details.*.*"); // returns true
		     * $state.includes("*.details.**"); // returns true
		     * $state.includes("**.item.**"); // returns true
		     * $state.includes("*.details.item.url"); // returns true
		     * $state.includes("*.details.*.url"); // returns true
		     * $state.includes("*.details.*"); // returns false
		     * $state.includes("item.**"); // returns false
		     * </pre>
		     *
		     * @param {string|object} stateOrName A partial name, relative name, glob pattern,
		     * or state object to be searched for within the current state name.
		     * @param {object=} params A param object, e.g. `{sectionId: section.id}`,
		     * that you'd like to test against the current active state.
		     * @param {object=} options An options object.  The options are:
		     *
		     * - **`relative`** - {string|object=} -  If `stateOrName` is a relative state reference and `options.relative` is set,
		     * .includes will test relative to `options.relative` state (or name).
		     *
		     * @returns {boolean} Returns true if it does include the state
		     */
		    StateService.prototype.includes = function (stateOrName, params, options) {
		        options = common_1.defaults(options, { relative: this.$current });
		        var glob = predicates_1.isString(stateOrName) && glob_1.Glob.fromString(stateOrName);
		        if (glob) {
		            if (!glob.matches(this.$current.name))
		                return false;
		            stateOrName = this.$current.name;
		        }
		        var state = this.router.stateRegistry.matcher.find(stateOrName, options.relative), include = this.$current.includes;
		        if (!predicates_1.isDefined(state))
		            return undefined;
		        if (!predicates_1.isDefined(include[state.name]))
		            return false;
		        // @TODO Replace with Param.equals() ?
		        return params ? common_2.equalForKeys(param_1.Param.values(state.parameters(), params), this.params, Object.keys(params)) : true;
		    };
		    ;
		    /**
		     * @ngdoc function
		     * @name ui.router.state.$state#href
		     * @methodOf ui.router.state.$state
		     *
		     * @description
		     * A url generation method that returns the compiled url for the given state populated with the given params.
		     *
		     * @example
		     * <pre>
		     * expect($state.href("about.person", { person: "bob" })).toEqual("/about/bob");
		     * </pre>
		     *
		     * @param {string|object} stateOrName The state name or state object you'd like to generate a url from.
		     * @param {object=} params An object of parameter values to fill the state's required parameters.
		     * @param {object=} options Options object. The options are:
		     *
		     * - **`lossy`** - {boolean=true} -  If true, and if there is no url associated with the state provided in the
		     *    first parameter, then the constructed href url will be built from the first navigable ancestor (aka
		     *    ancestor with a valid url).
		     * - **`inherit`** - {boolean=true}, If `true` will inherit url parameters from current url.
		     * - **`relative`** - {object=$state.$current}, When transitioning with relative path (e.g '^'),
		     *    defines which state to be relative from.
		     * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. "http://www.example.com/fullurl".
		     *
		     * @returns {string} compiled state url
		     */
		    StateService.prototype.href = function (stateOrName, params, options) {
		        var defaultHrefOpts = {
		            lossy: true,
		            inherit: true,
		            absolute: false,
		            relative: this.$current
		        };
		        options = common_1.defaults(options, defaultHrefOpts);
		        params = params || {};
		        var state = this.router.stateRegistry.matcher.find(stateOrName, options.relative);
		        if (!predicates_1.isDefined(state))
		            return null;
		        if (options.inherit)
		            params = this.params.$inherit(params, this.$current, state);
		        var nav = (state && options.lossy) ? state.navigable : state;
		        if (!nav || nav.url === undefined || nav.url === null) {
		            return null;
		        }
		        return this.router.urlRouter.href(nav.url, param_1.Param.values(state.parameters(), params), {
		            absolute: options.absolute
		        });
		    };
		    ;
		    /**
		     * Sets or gets the default [[transitionTo]] error handler.
		     *
		     * The error handler is called when a [[Transition]] is rejected or when any error occurred during the Transition.
		     * This includes errors caused by resolves and transition hooks.
		     *
		     * Note:
		     * This handler does not receive certain Transition rejections.
		     * Redirected and Ignored Transitions are not considered to be errors by [[StateService.transitionTo]].
		     *
		     * The built-in default error handler logs the error to the console.
		     *
		     * You can provide your own custom handler.
		     *
		     * @example
		     * ```js
		     *
		     * stateService.defaultErrorHandler(function() {
		     *   // Do not log transitionTo errors
		     * });
		     * ```
		     *
		     * @param handler a global error handler function
		     * @returns the current global error handler
		     */
		    StateService.prototype.defaultErrorHandler = function (handler) {
		        return this._defaultErrorHandler = handler || this._defaultErrorHandler;
		    };
		    StateService.prototype.get = function (stateOrName, base) {
		        var reg = this.router.stateRegistry;
		        if (arguments.length === 0)
		            return reg.get();
		        return reg.get(stateOrName, base || this.$current);
		    };
		    return StateService;
		}());
		exports.StateService = StateService;
	
	
	/***/ },
	/* 44 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		/** @module core */ /** */
		var stateParams_1 = __webpack_require__(45);
		var queue_1 = __webpack_require__(8);
		var common_1 = __webpack_require__(3);
		/**
		 * Global mutable state
		 */
		var Globals = (function () {
		    function Globals(transitionService) {
		        var _this = this;
		        this.params = new stateParams_1.StateParams();
		        this.transitionHistory = new queue_1.Queue([], 1);
		        this.successfulTransitions = new queue_1.Queue([], 1);
		        var beforeNewTransition = function ($transition$) {
		            _this.transition = $transition$;
		            _this.transitionHistory.enqueue($transition$);
		            var updateGlobalState = function () {
		                _this.successfulTransitions.enqueue($transition$);
		                _this.$current = $transition$.$to();
		                _this.current = _this.$current.self;
		                common_1.copy($transition$.params(), _this.params);
		            };
		            $transition$.onSuccess({}, updateGlobalState, { priority: 10000 });
		            var clearCurrentTransition = function () { if (_this.transition === $transition$)
		                _this.transition = null; };
		            $transition$.promise.then(clearCurrentTransition, clearCurrentTransition);
		        };
		        transitionService.onBefore({}, beforeNewTransition);
		    }
		    return Globals;
		}());
		exports.Globals = Globals;
	
	
	/***/ },
	/* 45 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		/** @module params */ /** for typedoc */
		var common_1 = __webpack_require__(3);
		var StateParams = (function () {
		    function StateParams(params) {
		        if (params === void 0) { params = {}; }
		        common_1.extend(this, params);
		    }
		    /**
		     * Merges a set of parameters with all parameters inherited between the common parents of the
		     * current state and a given destination state.
		     *
		     * @param {Object} newParams The set of parameters which will be composited with inherited params.
		     * @param {Object} $current Internal definition of object representing the current state.
		     * @param {Object} $to Internal definition of object representing state to transition to.
		     */
		    StateParams.prototype.$inherit = function (newParams, $current, $to) {
		        var parents = common_1.ancestors($current, $to), parentParams, inherited = {}, inheritList = [];
		        for (var i in parents) {
		            if (!parents[i] || !parents[i].params)
		                continue;
		            parentParams = Object.keys(parents[i].params);
		            if (!parentParams.length)
		                continue;
		            for (var j in parentParams) {
		                if (inheritList.indexOf(parentParams[j]) >= 0)
		                    continue;
		                inheritList.push(parentParams[j]);
		                inherited[parentParams[j]] = this[parentParams[j]];
		            }
		        }
		        return common_1.extend({}, inherited, newParams);
		    };
		    ;
		    return StateParams;
		}());
		exports.StateParams = StateParams;
	
	
	/***/ },
	/* 46 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		function __export(m) {
		    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
		}
		/**
		 * This module contains code for State Parameters.
		 *
		 * See [[ParamDeclaration]]
		 * @module params
		 * @preferred doc
		 */
		/** for typedoc */
		__export(__webpack_require__(22));
		__export(__webpack_require__(28));
		__export(__webpack_require__(45));
		__export(__webpack_require__(24));
	
	
	/***/ },
	/* 47 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		function __export(m) {
		    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
		}
		/** @module path */ /** for typedoc */
		__export(__webpack_require__(21));
		__export(__webpack_require__(20));
	
	
	/***/ },
	/* 48 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		function __export(m) {
		    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
		}
		/** @module resolve */ /** for typedoc */
		__export(__webpack_require__(18));
		__export(__webpack_require__(19));
		__export(__webpack_require__(17));
	
	
	/***/ },
	/* 49 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		function __export(m) {
		    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
		}
		/** @module state */ /** for typedoc */
		__export(__webpack_require__(40));
		__export(__webpack_require__(42));
		__export(__webpack_require__(39));
		__export(__webpack_require__(41));
		__export(__webpack_require__(38));
		__export(__webpack_require__(43));
		__export(__webpack_require__(14));
	
	
	/***/ },
	/* 50 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		function __export(m) {
		    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
		}
		/**
		 * This module contains APIs related to a Transition.
		 *
		 * See [[Transition]], [[$transitions]]
		 *
		 * @module transition
		 * @preferred
		 */
		/** for typedoc */
		__export(__webpack_require__(16));
		__export(__webpack_require__(15));
		__export(__webpack_require__(10));
		__export(__webpack_require__(11));
		__export(__webpack_require__(13));
		__export(__webpack_require__(30));
	
	
	/***/ },
	/* 51 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		function __export(m) {
		    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
		}
		/** @module url */ /** for typedoc */
		__export(__webpack_require__(27));
		__export(__webpack_require__(23));
		__export(__webpack_require__(26));
		__export(__webpack_require__(29));
	
	
	/***/ },
	/* 52 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		function __export(m) {
		    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
		}
		/** @module view */ /** for typedoc */
		__export(__webpack_require__(37));
	
	
	/***/ },
	/* 53 */
	/***/ function(module, exports, __webpack_require__) {
	
		/**
		 * # UI-Router for Angular 1
		 *
		 * - Provides an implementation for the [[CoreServices]] API, based on angular 1 services.
		 * - Also registers some services with the angular 1 injector.
		 * - Creates and bootstraps a new [[UIRouter]] object.  Ties it to the the angular 1 lifecycle.
		 *
		 * @module ng1
		 * @preferred
		 */
		"use strict";
		/** for typedoc */
		var router_1 = __webpack_require__(25);
		var coreservices_1 = __webpack_require__(6);
		var common_1 = __webpack_require__(3);
		var hof_1 = __webpack_require__(5);
		var predicates_1 = __webpack_require__(4);
		var resolveService_1 = __webpack_require__(54);
		var trace_1 = __webpack_require__(12);
		var views_1 = __webpack_require__(55);
		var templateFactory_1 = __webpack_require__(56);
		var stateProvider_1 = __webpack_require__(58);
		var onEnterExitRetain_1 = __webpack_require__(59);
		var angular = __webpack_require__(57);
		/** @hidden */
		var app = angular.module("ui.router.angular1", []);
		/**
		 * @ngdoc overview
		 * @name ui.router.util
		 *
		 * @description
		 * # ui.router.util sub-module
		 *
		 * This module is a dependency of other sub-modules. Do not include this module as a dependency
		 * in your angular app (use {@link ui.router} module instead).
		 *
		 */
		angular.module('ui.router.util', ['ng', 'ui.router.init']);
		/**
		 * @ngdoc overview
		 * @name ui.router.router
		 *
		 * @requires ui.router.util
		 *
		 * @description
		 * # ui.router.router sub-module
		 *
		 * This module is a dependency of other sub-modules. Do not include this module as a dependency
		 * in your angular app (use {@link ui.router} module instead).
		 */
		angular.module('ui.router.router', ['ui.router.util']);
		/**
		 * @ngdoc overview
		 * @name ui.router.state
		 *
		 * @requires ui.router.router
		 * @requires ui.router.util
		 *
		 * @description
		 * # ui.router.state sub-module
		 *
		 * This module is a dependency of the main ui.router module. Do not include this module as a dependency
		 * in your angular app (use {@link ui.router} module instead).
		 *
		 */
		angular.module('ui.router.state', ['ui.router.router', 'ui.router.util', 'ui.router.angular1']);
		/**
		 * @ngdoc overview
		 * @name ui.router
		 *
		 * @requires ui.router.state
		 *
		 * @description
		 * # ui.router
		 *
		 * ## The main module for ui.router
		 * There are several sub-modules included with the ui.router module, however only this module is needed
		 * as a dependency within your angular app. The other modules are for organization purposes.
		 *
		 * The modules are:
		 * * ui.router - the main "umbrella" module
		 * * ui.router.router -
		 *
		 * *You'll need to include **only** this module as the dependency within your angular app.*
		 *
		 * <pre>
		 * <!doctype html>
		 * <html ng-app="myApp">
		 * <head>
		 *   <script src="js/angular.js"></script>
		 *   <!-- Include the ui-router script -->
		 *   <script src="js/angular-ui-router.min.js"></script>
		 *   <script>
		 *     // ...and add 'ui.router' as a dependency
		 *     var myApp = angular.module('myApp', ['ui.router']);
		 *   </script>
		 * </head>
		 * <body>
		 * </body>
		 * </html>
		 * </pre>
		 */
		angular.module('ui.router', ['ui.router.init', 'ui.router.state', 'ui.router.angular1']);
		angular.module('ui.router.compat', ['ui.router']);
		/**
		 * Annotates a controller expression (may be a controller function(), a "controllername",
		 * or "controllername as name")
		 *
		 * - Temporarily decorates $injector.instantiate.
		 * - Invokes $controller() service
		 *   - Calls $injector.instantiate with controller constructor
		 * - Annotate constructor
		 * - Undecorate $injector
		 *
		 * returns an array of strings, which are the arguments of the controller expression
		 */
		function annotateController(controllerExpression) {
		    var $injector = coreservices_1.services.$injector;
		    var $controller = $injector.get("$controller");
		    var oldInstantiate = $injector.instantiate;
		    try {
		        var deps_1;
		        $injector.instantiate = function fakeInstantiate(constructorFunction) {
		            $injector.instantiate = oldInstantiate; // Un-decorate ASAP
		            deps_1 = $injector.annotate(constructorFunction);
		        };
		        $controller(controllerExpression, { $scope: {} });
		        return deps_1;
		    }
		    finally {
		        $injector.instantiate = oldInstantiate;
		    }
		}
		exports.annotateController = annotateController;
		var router = null;
		$uiRouter.$inject = ['$locationProvider'];
		/** This angular 1 provider instantiates a Router and exposes its services via the angular injector */
		function $uiRouter($locationProvider) {
		    // Create a new instance of the Router when the $uiRouterProvider is initialized
		    router = new router_1.UIRouter();
		    router.stateProvider = new stateProvider_1.StateProvider(router.stateRegistry, router.stateService);
		    // Apply ng1 specific StateBuilder code for `views`, `resolve`, and `onExit/Retain/Enter` properties
		    router.stateRegistry.decorator("views", views_1.ng1ViewsBuilder);
		    router.stateRegistry.decorator("onExit", onEnterExitRetain_1.getStateHookBuilder("onExit"));
		    router.stateRegistry.decorator("onRetain", onEnterExitRetain_1.getStateHookBuilder("onRetain"));
		    router.stateRegistry.decorator("onEnter", onEnterExitRetain_1.getStateHookBuilder("onEnter"));
		    router.viewService.viewConfigFactory('ng1', views_1.ng1ViewConfigFactory);
		    // Bind LocationConfig.hashPrefix to $locationProvider.hashPrefix
		    common_1.bindFunctions($locationProvider, coreservices_1.services.locationConfig, $locationProvider, ['hashPrefix']);
		    // Create a LocationService.onChange registry
		    var urlListeners = [];
		    coreservices_1.services.location.onChange = function (callback) {
		        urlListeners.push(callback);
		        return function () { return common_1.removeFrom(urlListeners)(callback); };
		    };
		    this.$get = $get;
		    $get.$inject = ['$location', '$browser', '$sniffer', '$rootScope', '$http', '$templateCache'];
		    function $get($location, $browser, $sniffer, $rootScope, $http, $templateCache) {
		        // Bind $locationChangeSuccess to the listeners registered in LocationService.onChange
		        $rootScope.$on("$locationChangeSuccess", function (evt) { return urlListeners.forEach(function (fn) { return fn(evt); }); });
		        // Bind LocationConfig.html5Mode to $locationProvider.html5Mode and $sniffer.history
		        coreservices_1.services.locationConfig.html5Mode = function () {
		            var html5Mode = $locationProvider.html5Mode();
		            html5Mode = predicates_1.isObject(html5Mode) ? html5Mode.enabled : html5Mode;
		            return html5Mode && $sniffer.history;
		        };
		        coreservices_1.services.location.setUrl = function (newUrl, replace) {
		            if (replace === void 0) { replace = false; }
		            $location.url(newUrl);
		            if (replace)
		                $location.replace();
		        };
		        coreservices_1.services.template.get = function (url) {
		            return $http.get(url, { cache: $templateCache, headers: { Accept: 'text/html' } }).then(hof_1.prop("data"));
		        };
		        // Bind these LocationService functions to $location
		        common_1.bindFunctions($location, coreservices_1.services.location, $location, ["replace", "url", "path", "search", "hash"]);
		        // Bind these LocationConfig functions to $location
		        common_1.bindFunctions($location, coreservices_1.services.locationConfig, $location, ['port', 'protocol', 'host']);
		        // Bind these LocationConfig functions to $browser
		        common_1.bindFunctions($browser, coreservices_1.services.locationConfig, $browser, ['baseHref']);
		        return router;
		    }
		}
		// The 'ui.router' ng1 module depends on 'ui.router.init' module.
		angular.module('ui.router.init', []).provider("$uiRouter", $uiRouter);
		runBlock.$inject = ['$injector', '$q'];
		function runBlock($injector, $q) {
		    coreservices_1.services.$injector = $injector;
		    coreservices_1.services.$q = $q;
		}
		angular.module('ui.router.init').run(runBlock);
		// This effectively calls $get() to init when we enter runtime
		angular.module('ui.router.init').run(['$uiRouter', function ($uiRouter) { }]);
		// $urlMatcherFactory service and $urlMatcherFactoryProvider
		angular.module('ui.router.util').provider('$urlMatcherFactory', ['$uiRouterProvider', function () { return router.urlMatcherFactory; }]);
		angular.module('ui.router.util').run(['$urlMatcherFactory', function ($urlMatcherFactory) { }]);
		// $urlRouter service and $urlRouterProvider
		function getUrlRouterProvider() {
		    router.urlRouterProvider["$get"] = function () {
		        router.urlRouter.update(true);
		        if (!this.interceptDeferred)
		            router.urlRouter.listen();
		        return router.urlRouter;
		    };
		    return router.urlRouterProvider;
		}
		angular.module('ui.router.router').provider('$urlRouter', ['$uiRouterProvider', getUrlRouterProvider]);
		angular.module('ui.router.router').run(['$urlRouter', function ($urlRouter) { }]);
		// $state service and $stateProvider
		// $urlRouter service and $urlRouterProvider
		function getStateProvider() {
		    router.stateProvider["$get"] = function () {
		        // Autoflush once we are in runtime
		        router.stateRegistry.stateQueue.autoFlush(router.stateService);
		        return router.stateService;
		    };
		    return router.stateProvider;
		}
		angular.module('ui.router.state').provider('$state', ['$uiRouterProvider', getStateProvider]);
		angular.module('ui.router.state').run(['$state', function ($state) { }]);
		// $stateParams service
		angular.module('ui.router.state').factory('$stateParams', ['$uiRouter', function ($uiRouter) {
		        return $uiRouter.globals.params;
		    }]);
		// $transitions service and $transitionsProvider
		function getTransitionsProvider() {
		    router.transitionService["$get"] = function () { return router.transitionService; };
		    return router.transitionService;
		}
		angular.module('ui.router.state').provider('$transitions', ['$uiRouterProvider', getTransitionsProvider]);
		// $templateFactory service
		angular.module('ui.router.util').factory('$templateFactory', ['$uiRouter', function () { return new templateFactory_1.TemplateFactory(); }]);
		// The $view service
		angular.module('ui.router').factory('$view', function () { return router.viewService; });
		// The old $resolve service
		angular.module('ui.router').factory('$resolve', resolveService_1.resolveFactory);
		// $trace service
		angular.module("ui.router").service("$trace", function () { return trace_1.trace; });
		watchDigests.$inject = ['$rootScope'];
		function watchDigests($rootScope) {
		    $rootScope.$watch(function () { trace_1.trace.approximateDigests++; });
		}
		exports.watchDigests = watchDigests;
		angular.module("ui.router").run(watchDigests);
		exports.getLocals = function (ctx) {
		    var tokens = ctx.getTokens().filter(predicates_1.isString);
		    var tuples = tokens.map(function (key) { return [key, ctx.getResolvable(key).data]; });
		    return tuples.reduce(common_1.applyPairs, {});
		};
		/** Injectable services */
		/**
		 * An injectable service object which has the current state parameters
		 *
		 * This angular service (singleton object) holds the current state parameters.
		 * The values in `$stateParams` are not updated until *after* a [[Transition]] successfully completes.
		 *
		 * This object can be injected into other services.
		 *
		 * @example
		 * ```js
		 *
		 * SomeService.$inject = ['$http', '$stateParams'];
		 * function SomeService($http, $stateParams) {
		 *   return {
		 *     getUser: function() {
		 *       return $http.get('/api/users/' + $stateParams.username);
		 *     }
		 *   }
		 * };
		 * angular.service('SomeService', SomeService);
		 * ```
		 *
		 * ### Deprecation warning:
		 *
		 * When `$stateParams` is injected into transition hooks, resolves and view controllers, they receive a different
		 * object than this global service object.  In those cases, the injected object has the parameter values for the
		 * *pending* Transition.
		 *
		 * Because of these confusing details, this service is deprecated.
		 *
		 * @deprecated Instead of using `$stateParams, inject the current [[Transition]] as `$transition$` and use [[Transition.params]]
		 * ```js
		 * MyController.$inject = ['$transition$'];
		 * function MyController($transition$) {
		 *   var username = $transition$.params().username;
		 *   // .. do something with username
		 * }
		 * ```
		 */
		var $stateParams;
		/**
		 * An injectable service primarily used to register transition hooks
		 *
		 * This angular service exposes the [[TransitionService]] singleton, which is primarily used to add transition hooks.
		 *
		 * The same object is also exposed as [[$transitionsProvider]] for injection during angular config time.
		 */
		var $transitions;
		/**
		 * A config-time injectable provider primarily used to register transition hooks
		 *
		 * This angular provider exposes the [[TransitionService]] singleton, which is primarily used to add transition hooks.
		 *
		 * The same object is also exposed as [[$transitions]] for injection at runtime.
		 */
		var $transitionsProvider;
		/**
		 * An injectable service used to query for current state information.
		 *
		 * This angular service exposes the [[StateService]] singleton.
		 */
		var $state;
		/**
		 * A config-time injectable provider used to register states.
		 *
		 * This angular service exposes the [[StateProvider]] singleton.
		 */
		var $stateProvider;
		/**
		 * A config-time injectable provider used to manage the URL.
		 *
		 * This angular service exposes the [[UrlRouterProvider]] singleton.
		 */
		var $urlRouterProvider;
		/**
		 * An injectable service used to configure URL redirects.
		 *
		 * This angular service exposes the [[UrlRouter]] singleton.
		 */
		var $urlRouter;
		/**
		 * An injectable service used to configure the URL.
		 *
		 * This service is used to set url mapping options, and create [[UrlMatcher]] objects.
		 *
		 * This angular service exposes the [[UrlMatcherFactory]] singleton.
		 * The singleton is also exposed at config-time as the [[$urlMatcherFactoryProvider]].
		 */
		var $urlMatcherFactory;
		/**
		 * An injectable service used to configure the URL.
		 *
		 * This service is used to set url mapping options, and create [[UrlMatcher]] objects.
		 *
		 * This angular service exposes the [[UrlMatcherFactory]] singleton at config-time.
		 * The singleton is also exposed at runtime as the [[$urlMatcherFactory]].
		 */
		var $urlMatcherFactoryProvider;
	
	
	/***/ },
	/* 54 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		/** @module ng1 */ /** */
		var stateObject_1 = __webpack_require__(42);
		var node_1 = __webpack_require__(21);
		var resolveContext_1 = __webpack_require__(17);
		var common_1 = __webpack_require__(3);
		var stateBuilder_1 = __webpack_require__(40);
		/**
		 * Implementation of the legacy `$resolve` service for angular 1.
		 */
		var $resolve = {
		    /**
		     * Asynchronously injects a resolve block.
		     *
		     * This emulates most of the behavior of the ui-router 0.2.x $resolve.resolve() service API.
		     *
		     * Given an object `invocables`, where keys are strings and values are injectable functions,
		     * injects each function, and waits for the resulting promise to resolve.
		     * When all resulting promises are resolved, returns the results as an object.
		     *
		     * @example
		     * ```js
		     *
		     * let invocables = {
		     *   foo: [ '$http', ($http) =>
		     *            $http.get('/api/foo').then(resp => resp.data) ],
		     *   bar: [ 'foo', '$http', (foo, $http) =>
		     *            $http.get('/api/bar/' + foo.barId).then(resp => resp.data) ]
		     * }
		     * $resolve.resolve(invocables)
		     *     .then(results => console.log(results.foo, results.bar))
		     * // Logs foo and bar:
		     * // { id: 123, barId: 456, fooData: 'foo data' }
		     * // { id: 456, barData: 'bar data' }
		     * ```
		     *
		     * @param invocables an object which looks like an [[StateDefinition.resolve]] object; keys are resolve names and values are injectable functions
		     * @param locals key/value pre-resolved data (locals)
		     * @param parent a promise for a "parent resolve"
		     */
		    resolve: function (invocables, locals, parent) {
		        if (locals === void 0) { locals = {}; }
		        var parentNode = new node_1.PathNode(new stateObject_1.State({ params: {}, resolvables: [] }));
		        var node = new node_1.PathNode(new stateObject_1.State({ params: {}, resolvables: [] }));
		        var context = new resolveContext_1.ResolveContext([parentNode, node]);
		        context.addResolvables(stateBuilder_1.resolvablesBuilder({ resolve: invocables }), node.state);
		        var resolveData = function (parentLocals) {
		            var rewrap = function (_locals) { return stateBuilder_1.resolvablesBuilder({ resolve: common_1.mapObj(_locals, function (local) { return function () { return local; }; }) }); };
		            context.addResolvables(rewrap(parentLocals), parentNode.state);
		            context.addResolvables(rewrap(locals), node.state);
		            var tuples2ObjR = function (acc, tuple) {
		                acc[tuple.token] = tuple.value;
		                return acc;
		            };
		            return context.resolvePath().then(function (results) { return results.reduce(tuples2ObjR, {}); });
		        };
		        return parent ? parent.then(resolveData) : resolveData({});
		    }
		};
		/** @hidden */
		exports.resolveFactory = function () { return $resolve; };
	
	
	/***/ },
	/* 55 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		var common_1 = __webpack_require__(3);
		var strings_1 = __webpack_require__(9);
		var view_1 = __webpack_require__(37);
		var predicates_1 = __webpack_require__(4);
		var coreservices_1 = __webpack_require__(6);
		var trace_1 = __webpack_require__(12);
		var templateFactory_1 = __webpack_require__(56);
		var resolveContext_1 = __webpack_require__(17);
		var resolvable_1 = __webpack_require__(19);
		var angular = __webpack_require__(57);
		exports.ng1ViewConfigFactory = function (path, view) {
		    return [new Ng1ViewConfig(path, view)];
		};
		/**
		 * This is a [[StateBuilder.builder]] function for angular1 `views`.
		 *
		 * When the [[StateBuilder]] builds a [[State]] object from a raw [[StateDeclaration]], this builder
		 * handles the `views` property with logic specific to angular-ui-router (ng1).
		 *
		 * If no `views: {}` property exists on the [[StateDeclaration]], then it creates the `views` object
		 * and applies the state-level configuration to a view named `$default`.
		 */
		function ng1ViewsBuilder(state) {
		    var tplKeys = ['templateProvider', 'templateUrl', 'template', 'notify', 'async'], ctrlKeys = ['controller', 'controllerProvider', 'controllerAs', 'resolveAs'], compKeys = ['component', 'bindings'], nonCompKeys = tplKeys.concat(ctrlKeys), allKeys = compKeys.concat(nonCompKeys);
		    var views = {}, viewsObject = state.views || { "$default": common_1.pick(state, allKeys) };
		    common_1.forEach(viewsObject, function (config, name) {
		        // Account for views: { "": { template... } }
		        name = name || "$default";
		        // Account for views: { header: "headerComponent" }
		        if (predicates_1.isString(config))
		            config = { component: config };
		        if (!Object.keys(config).length)
		            return;
		        // Configure this view for routing to an angular 1.5+ style .component (or any directive, really)
		        if (config.component) {
		            if (nonCompKeys.map(function (key) { return predicates_1.isDefined(config[key]); }).reduce(common_1.anyTrueR, false)) {
		                throw new Error("Cannot combine: " + compKeys.join("|") + " with: " + nonCompKeys.join("|") + " in stateview: 'name@" + state.name + "'");
		            }
		            // Dynamically build a template like "<component-name input1='::$resolve.foo'></component-name>"
		            config.templateProvider = ['$injector', function ($injector) {
		                    var resolveFor = function (key) {
		                        return config.bindings && config.bindings[key] || key;
		                    };
		                    var prefix = angular.version.minor >= 3 ? "::" : "";
		                    var attributeTpl = function (input) {
		                        var attrName = strings_1.kebobString(input.name);
		                        var resolveName = resolveFor(input.name);
		                        if (input.type === '@')
		                            return attrName + "='{{" + prefix + "$resolve." + resolveName + "}}'";
		                        return attrName + "='" + prefix + "$resolve." + resolveName + "'";
		                    };
		                    var attrs = getComponentInputs($injector, config.component).map(attributeTpl).join(" ");
		                    var kebobName = strings_1.kebobString(config.component);
		                    return "<" + kebobName + " " + attrs + "></" + kebobName + ">";
		                }];
		        }
		        config.resolveAs = config.resolveAs || '$resolve';
		        config.$type = "ng1";
		        config.$context = state;
		        config.$name = name;
		        var normalized = view_1.ViewService.normalizeUIViewTarget(config.$context, config.$name);
		        config.$uiViewName = normalized.uiViewName;
		        config.$uiViewContextAnchor = normalized.uiViewContextAnchor;
		        views[name] = config;
		    });
		    return views;
		}
		exports.ng1ViewsBuilder = ng1ViewsBuilder;
		// for ng 1.2 style, process the scope: { input: "=foo" }
		// for ng 1.3 through ng 1.5, process the component's bindToController: { input: "=foo" } object
		var scopeBindings = function (bindingsObj) { return Object.keys(bindingsObj || {})
		    .map(function (key) { return [key, /^([=<@])[?]?(.*)/.exec(bindingsObj[key])]; })
		    .filter(function (tuple) { return predicates_1.isDefined(tuple) && predicates_1.isDefined(tuple[1]); })
		    .map(function (tuple) { return ({ name: tuple[1][2] || tuple[0], type: tuple[1][1] }); }); };
		// Given a directive definition, find its object input attributes
		// Use different properties, depending on the type of directive (component, bindToController, normal)
		var getBindings = function (def) {
		    if (predicates_1.isObject(def.bindToController))
		        return scopeBindings(def.bindToController);
		    return scopeBindings(def.scope);
		};
		// Gets all the directive(s)' inputs ('@', '=', and '<')
		function getComponentInputs($injector, name) {
		    var cmpDefs = $injector.get(name + "Directive"); // could be multiple
		    if (!cmpDefs || !cmpDefs.length)
		        throw new Error("Unable to find component named '" + name + "'");
		    return cmpDefs.map(getBindings).reduce(common_1.unnestR, []);
		}
		var id = 0;
		var Ng1ViewConfig = (function () {
		    function Ng1ViewConfig(path, viewDecl) {
		        this.path = path;
		        this.viewDecl = viewDecl;
		        this.$id = id++;
		        this.loaded = false;
		    }
		    Ng1ViewConfig.prototype.load = function () {
		        var _this = this;
		        var $q = coreservices_1.services.$q;
		        if (!this.hasTemplate())
		            throw new Error("No template configuration specified for '" + this.viewDecl.$uiViewName + "@" + this.viewDecl.$uiViewContextAnchor + "'");
		        var context = new resolveContext_1.ResolveContext(this.path);
		        var params = this.path.reduce(function (acc, node) { return common_1.extend(acc, node.paramValues); }, {});
		        var promises = {
		            template: $q.when(this.getTemplate(params, new templateFactory_1.TemplateFactory(), context)),
		            controller: $q.when(this.getController(context))
		        };
		        return $q.all(promises).then(function (results) {
		            trace_1.trace.traceViewServiceEvent("Loaded", _this);
		            _this.controller = results.controller;
		            _this.template = results.template;
		            return _this;
		        });
		    };
		    /**
		     * Checks a view configuration to ensure that it specifies a template.
		     *
		     * @return {boolean} Returns `true` if the configuration contains a valid template, otherwise `false`.
		     */
		    Ng1ViewConfig.prototype.hasTemplate = function () {
		        return !!(this.viewDecl.template || this.viewDecl.templateUrl || this.viewDecl.templateProvider);
		    };
		    Ng1ViewConfig.prototype.getTemplate = function (params, $factory, context) {
		        return $factory.fromConfig(this.viewDecl, params, context);
		    };
		    /**
		     * Gets the controller for a view configuration.
		     *
		     * @returns {Function|Promise.<Function>} Returns a controller, or a promise that resolves to a controller.
		     */
		    Ng1ViewConfig.prototype.getController = function (context) {
		        var provider = this.viewDecl.controllerProvider;
		        if (!predicates_1.isInjectable(provider))
		            return this.viewDecl.controller;
		        var deps = coreservices_1.services.$injector.annotate(provider);
		        var providerFn = predicates_1.isArray(provider) ? common_1.tail(provider) : provider;
		        var resolvable = new resolvable_1.Resolvable("", providerFn, deps);
		        return resolvable.get(context);
		    };
		    return Ng1ViewConfig;
		}());
		exports.Ng1ViewConfig = Ng1ViewConfig;
	
	
	/***/ },
	/* 56 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		/** @module view */ /** for typedoc */
		var predicates_1 = __webpack_require__(4);
		var coreservices_1 = __webpack_require__(6);
		var common_1 = __webpack_require__(3);
		var resolvable_1 = __webpack_require__(19);
		/**
		 * Service which manages loading of templates from a ViewConfig.
		 */
		var TemplateFactory = (function () {
		    function TemplateFactory() {
		    }
		    /**
		     * Creates a template from a configuration object.
		     *
		     * @param config Configuration object for which to load a template.
		     * The following properties are search in the specified order, and the first one
		     * that is defined is used to create the template:
		     *
		     * @param params  Parameters to pass to the template function.
		     * @param context The resolve context associated with the template's view
		     *
		     * @return {string|object}  The template html as a string, or a promise for
		     * that string,or `null` if no template is configured.
		     */
		    TemplateFactory.prototype.fromConfig = function (config, params, context) {
		        return (predicates_1.isDefined(config.template) ? this.fromString(config.template, params) :
		            predicates_1.isDefined(config.templateUrl) ? this.fromUrl(config.templateUrl, params) :
		                predicates_1.isDefined(config.templateProvider) ? this.fromProvider(config.templateProvider, params, context) :
		                    null);
		    };
		    ;
		    /**
		     * Creates a template from a string or a function returning a string.
		     *
		     * @param template html template as a string or function that returns an html template as a string.
		     * @param params Parameters to pass to the template function.
		     *
		     * @return {string|object} The template html as a string, or a promise for that
		     * string.
		     */
		    TemplateFactory.prototype.fromString = function (template, params) {
		        return predicates_1.isFunction(template) ? template(params) : template;
		    };
		    ;
		    /**
		     * Loads a template from the a URL via `$http` and `$templateCache`.
		     *
		     * @param {string|Function} url url of the template to load, or a function
		     * that returns a url.
		     * @param {Object} params Parameters to pass to the url function.
		     * @return {string|Promise.<string>} The template html as a string, or a promise
		     * for that string.
		     */
		    TemplateFactory.prototype.fromUrl = function (url, params) {
		        if (predicates_1.isFunction(url))
		            url = url(params);
		        if (url == null)
		            return null;
		        return coreservices_1.services.template.get(url);
		    };
		    ;
		    /**
		     * Creates a template by invoking an injectable provider function.
		     *
		     * @param provider Function to invoke via `locals`
		     * @param {Function} injectFn a function used to invoke the template provider
		     * @return {string|Promise.<string>} The template html as a string, or a promise
		     * for that string.
		     */
		    TemplateFactory.prototype.fromProvider = function (provider, params, context) {
		        var deps = coreservices_1.services.$injector.annotate(provider);
		        var providerFn = predicates_1.isArray(provider) ? common_1.tail(provider) : provider;
		        var resolvable = new resolvable_1.Resolvable("", providerFn, deps);
		        return resolvable.get(context);
		    };
		    ;
		    return TemplateFactory;
		}());
		exports.TemplateFactory = TemplateFactory;
	
	
	/***/ },
	/* 57 */
	/***/ function(module, exports) {
	
		module.exports = __WEBPACK_EXTERNAL_MODULE_57__;
	
	/***/ },
	/* 58 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		/** @module ng1 */ /** for typedoc */
		var predicates_1 = __webpack_require__(4);
		var common_1 = __webpack_require__(3);
		/**
		 * @ngdoc object
		 * @name ui.router.state.$stateProvider
		 *
		 * @requires ui.router.router.$urlRouterProvider
		 * @requires ui.router.util.$urlMatcherFactoryProvider
		 *
		 * @description
		 * The new `$stateProvider` works similar to Angular's v1 router, but it focuses purely
		 * on state.
		 *
		 * A state corresponds to a "place" in the application in terms of the overall UI and
		 * navigation. A state describes (via the controller / template / view properties) what
		 * the UI looks like and does at that place.
		 *
		 * States often have things in common, and the primary way of factoring out these
		 * commonalities in this model is via the state hierarchy, i.e. parent/child states aka
		 * nested states.
		 *
		 * The `$stateProvider` provides interfaces to declare these states for your app.
		 */
		var StateProvider = (function () {
		    function StateProvider(stateRegistry, stateService) {
		        this.stateRegistry = stateRegistry;
		        this.stateService = stateService;
		        common_1.bindFunctions(StateProvider.prototype, this, this);
		    }
		    /**
		     * @ngdoc function
		     * @name ui.router.state.$stateProvider#decorator
		     * @methodOf ui.router.state.$stateProvider
		     *
		     * @description
		     * Allows you to extend (carefully) or override (at your own peril) the
		     * `stateBuilder` object used internally by `$stateProvider`. This can be used
		     * to add custom functionality to ui-router, for example inferring templateUrl
		     * based on the state name.
		     *
		     * When passing only a name, it returns the current (original or decorated) builder
		     * function that matches `name`.
		     *
		     * The builder functions that can be decorated are listed below. Though not all
		     * necessarily have a good use case for decoration, that is up to you to decide.
		     *
		     * In addition, users can attach custom decorators, which will generate new
		     * properties within the state's internal definition. There is currently no clear
		     * use-case for this beyond accessing internal states (i.e. $state.$current),
		     * however, expect this to become increasingly relevant as we introduce additional
		     * meta-programming features.
		     *
		     * **Warning**: Decorators should not be interdependent because the order of
		     * execution of the builder functions in non-deterministic. Builder functions
		     * should only be dependent on the state definition object and super function.
		     *
		     *
		     * Existing builder functions and current return values:
		     *
		     * - **parent** `{object}` - returns the parent state object.
		     * - **data** `{object}` - returns state data, including any inherited data that is not
		     *   overridden by own values (if any).
		     * - **url** `{object}` - returns a {@link ui.router.util.type:UrlMatcher UrlMatcher}
		     *   or `null`.
		     * - **navigable** `{object}` - returns closest ancestor state that has a URL (aka is
		     *   navigable).
		     * - **params** `{object}` - returns an array of state params that are ensured to
		     *   be a super-set of parent's params.
		     * - **views** `{object}` - returns a views object where each key is an absolute view
		     *   name (i.e. "viewName@stateName") and each value is the config object
		     *   (template, controller) for the view. Even when you don't use the views object
		     *   explicitly on a state config, one is still created for you internally.
		     *   So by decorating this builder function you have access to decorating template
		     *   and controller properties.
		     * - **ownParams** `{object}` - returns an array of params that belong to the state,
		     *   not including any params defined by ancestor states.
		     * - **path** `{string}` - returns the full path from the root down to this state.
		     *   Needed for state activation.
		     * - **includes** `{object}` - returns an object that includes every state that
		     *   would pass a `$state.includes()` test.
		     *
		     * @example
		     * <pre>
		     * // Override the internal 'views' builder with a function that takes the state
		     * // definition, and a reference to the internal function being overridden:
		     * $stateProvider.decorator('views', function (state, parent) {
		     *   let result = {},
		     *       views = parent(state);
		     *
		     *   angular.forEach(views, function (config, name) {
		     *     let autoName = (state.name + '.' + name).replace('.', '/');
		     *     config.templateUrl = config.templateUrl || '/partials/' + autoName + '.html';
		     *     result[name] = config;
		     *   });
		     *   return result;
		     * });
		     *
		     * $stateProvider.state('home', {
		     *   views: {
		     *     'contact.list': { controller: 'ListController' },
		     *     'contact.item': { controller: 'ItemController' }
		     *   }
		     * });
		     *
		     * // ...
		     *
		     * $state.go('home');
		     * // Auto-populates list and item views with /partials/home/contact/list.html,
		     * // and /partials/home/contact/item.html, respectively.
		     * </pre>
		     *
		     * @param {string} name The name of the builder function to decorate.
		     * @param {object} func A function that is responsible for decorating the original
		     * builder function. The function receives two parameters:
		     *
		     *   - `{object}` - state - The state config object.
		     *   - `{object}` - super - The original builder function.
		     *
		     * @return {object} $stateProvider - $stateProvider instance
		     */
		    StateProvider.prototype.decorator = function (name, func) {
		        return this.stateRegistry.decorator(name, func) || this;
		    };
		    StateProvider.prototype.state = function (name, definition) {
		        if (predicates_1.isObject(name)) {
		            definition = name;
		        }
		        else {
		            definition.name = name;
		        }
		        this.stateRegistry.register(definition);
		        return this;
		    };
		    /**
		     * Registers an invalid state handler
		     *
		     * This is a passthrough to [[StateService.onInvalid]] for ng1.
		     */
		    StateProvider.prototype.onInvalid = function (callback) {
		        return this.stateService.onInvalid(callback);
		    };
		    return StateProvider;
		}());
		exports.StateProvider = StateProvider;
	
	
	/***/ },
	/* 59 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		var coreservices_1 = __webpack_require__(6);
		var services_1 = __webpack_require__(53);
		var resolveContext_1 = __webpack_require__(17);
		var common_1 = __webpack_require__(3);
		/**
		 * This is a [[StateBuilder.builder]] function for angular1 `onEnter`, `onExit`,
		 * `onRetain` callback hooks on a [[Ng1StateDeclaration]].
		 *
		 * When the [[StateBuilder]] builds a [[State]] object from a raw [[StateDeclaration]], this builder
		 * ensures that those hooks are injectable for angular-ui-router (ng1).
		 */
		exports.getStateHookBuilder = function (hookName) {
		    return function stateHookBuilder(state, parentFn) {
		        var hook = state[hookName];
		        function decoratedNg1Hook(trans, state) {
		            var resolveContext = new resolveContext_1.ResolveContext(trans.treeChanges().to);
		            return coreservices_1.services.$injector.invoke(hook, this, common_1.extend({ $state$: state }, services_1.getLocals(resolveContext)));
		        }
		        return hook ? decoratedNg1Hook : undefined;
		    };
		};
	
	
	/***/ },
	/* 60 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		/**
		 * These are the UI-Router angular 1 directives.
		 *
		 * These directives are used in templates to create viewports and navigate to states
		 *
		 * @preferred @module ng1_directives
		 */ /** for typedoc */
		var angular = __webpack_require__(57);
		var common_1 = __webpack_require__(3);
		var predicates_1 = __webpack_require__(4);
		var hof_1 = __webpack_require__(5);
		/** @hidden */
		function parseStateRef(ref, current) {
		    var preparsed = ref.match(/^\s*({[^}]*})\s*$/), parsed;
		    if (preparsed)
		        ref = current + '(' + preparsed[1] + ')';
		    parsed = ref.replace(/\n/g, " ").match(/^([^(]+?)\s*(\((.*)\))?$/);
		    if (!parsed || parsed.length !== 4)
		        throw new Error("Invalid state ref '" + ref + "'");
		    return { state: parsed[1], paramExpr: parsed[3] || null };
		}
		/** @hidden */
		function stateContext(el) {
		    var $uiView = el.parent().inheritedData('$uiView');
		    var path = hof_1.parse('$cfg.path')($uiView);
		    return path ? common_1.tail(path).state.name : undefined;
		}
		/** @hidden */
		function getTypeInfo(el) {
		    // SVGAElement does not use the href attribute, but rather the 'xlinkHref' attribute.
		    var isSvg = Object.prototype.toString.call(el.prop('href')) === '[object SVGAnimatedString]';
		    var isForm = el[0].nodeName === "FORM";
		    return {
		        attr: isForm ? "action" : (isSvg ? 'xlink:href' : 'href'),
		        isAnchor: el.prop("tagName").toUpperCase() === "A",
		        clickable: !isForm
		    };
		}
		/** @hidden */
		function clickHook(el, $state, $timeout, type, current) {
		    return function (e) {
		        var button = e.which || e.button, target = current();
		        if (!(button > 1 || e.ctrlKey || e.metaKey || e.shiftKey || el.attr('target'))) {
		            // HACK: This is to allow ng-clicks to be processed before the transition is initiated:
		            var transition = $timeout(function () {
		                $state.go(target.state, target.params, target.options);
		            });
		            e.preventDefault();
		            // if the state has no URL, ignore one preventDefault from the <a> directive.
		            var ignorePreventDefaultCount = type.isAnchor && !target.href ? 1 : 0;
		            e.preventDefault = function () {
		                if (ignorePreventDefaultCount-- <= 0)
		                    $timeout.cancel(transition);
		            };
		        }
		    };
		}
		/** @hidden */
		function defaultOpts(el, $state) {
		    return {
		        relative: stateContext(el) || $state.$current,
		        inherit: true,
		        source: "sref"
		    };
		}
		/**
		 * `ui-sref`: A directive for linking to a state
		 *
		 * A directive that binds a link (`<a>` tag) to a state.
		 * If the state has an associated URL, the directive will automatically generate and
		 * update the `href` attribute via the [[StateService.href]]  method.
		 * Clicking the link will trigger a state transition with optional parameters.
		 *
		 * Also middle-clicking, right-clicking, and ctrl-clicking on the link will be
		 * handled natively by the browser.
		 *
		 * You can also use relative state paths within ui-sref, just like the relative
		 * paths passed to `$state.go()`.
		 * You just need to be aware that the path is relative to the state that the link lives in.
		 * In other words, the state that created the view containing the link.
		 *
		 * You can specify options to pass to [[StateService.go]] using the `ui-sref-opts` attribute.
		 * Options are restricted to `location`, `inherit`, and `reload`.
		 *
		 * Here's an example of how you'd use ui-sref and how it would compile.
		 * If you have the following template:
		 *
		 * @example
		 * ```html
		 *
		 * <pre>
		 * <a ui-sref="home">Home</a> | <a ui-sref="about">About</a> | <a ui-sref="{page: 2}">Next page</a>
		 *
		 * <ul>
		 *     <li ng-repeat="contact in contacts">
		 *         <a ui-sref="contacts.detail({ id: contact.id })">{{ contact.name }}</a>
		 *     </li>
		 * </ul>
		 * </pre>
		 * ```
		 *
		 * Then the compiled html would be (assuming Html5Mode is off and current state is contacts):
		 *
		 * ```html
		 *
		 * <pre>
		 * <a href="#/home" ui-sref="home">Home</a> | <a href="#/about" ui-sref="about">About</a> | <a href="#/contacts?page=2" ui-sref="{page: 2}">Next page</a>
		 *
		 * <ul>
		 *     <li ng-repeat="contact in contacts">
		 *         <a href="#/contacts/1" ui-sref="contacts.detail({ id: contact.id })">Joe</a>
		 *     </li>
		 *     <li ng-repeat="contact in contacts">
		 *         <a href="#/contacts/2" ui-sref="contacts.detail({ id: contact.id })">Alice</a>
		 *     </li>
		 *     <li ng-repeat="contact in contacts">
		 *         <a href="#/contacts/3" ui-sref="contacts.detail({ id: contact.id })">Bob</a>
		 *     </li>
		 * </ul>
		 *
		 * <a ui-sref="home" ui-sref-opts="{reload: true}">Home</a>
		 * </pre>
		 * ```
		 *
		 * @param {string} ui-sref 'stateName' can be any valid absolute or relative state
		 * @param {Object} ui-sref-opts options to pass to [[StateService.go]]
		 */
		var uiSref = ['$state', '$timeout',
		    function $StateRefDirective($state, $timeout) {
		        return {
		            restrict: 'A',
		            require: ['?^uiSrefActive', '?^uiSrefActiveEq'],
		            link: function (scope, element, attrs, uiSrefActive) {
		                var ref = parseStateRef(attrs.uiSref, $state.current.name);
		                var def = { state: ref.state, href: null, params: null, options: null };
		                var type = getTypeInfo(element);
		                var active = uiSrefActive[1] || uiSrefActive[0];
		                var unlinkInfoFn = null;
		                var hookFn;
		                def.options = common_1.extend(defaultOpts(element, $state), attrs.uiSrefOpts ? scope.$eval(attrs.uiSrefOpts) : {});
		                var update = function (val) {
		                    if (val)
		                        def.params = angular.copy(val);
		                    def.href = $state.href(ref.state, def.params, def.options);
		                    if (unlinkInfoFn)
		                        unlinkInfoFn();
		                    if (active)
		                        unlinkInfoFn = active.$$addStateInfo(ref.state, def.params);
		                    if (def.href !== null)
		                        attrs.$set(type.attr, def.href);
		                };
		                if (ref.paramExpr) {
		                    scope.$watch(ref.paramExpr, function (val) { if (val !== def.params)
		                        update(val); }, true);
		                    def.params = angular.copy(scope.$eval(ref.paramExpr));
		                }
		                update();
		                if (!type.clickable)
		                    return;
		                hookFn = clickHook(element, $state, $timeout, type, function () { return def; });
		                element.on("click", hookFn);
		                scope.$on('$destroy', function () {
		                    element.off("click", hookFn);
		                });
		            }
		        };
		    }];
		/**
		 * `ui-state`: A dynamic version of `ui-sref`
		 *
		 * Much like ui-sref, but will accept named $scope properties to evaluate for a state definition,
		 * params and override options.
		 *
		 * @example
		 * ```html
		 *
		 * <li ng-repeat="nav in navlinks">
		 *   <a ui-state="nav.statename">{{nav.description}}</a>
		 * </li>
		 *
		 * @param {string} ui-state 'stateName' can be any valid absolute or relative state
		 * @param {Object} ui-state-params params to pass to [[StateService.href]]
		 * @param {Object} ui-state-opts options to pass to [[StateService.go]]
		 */
		var uiState = ['$state', '$timeout',
		    function $StateRefDynamicDirective($state, $timeout) {
		        return {
		            restrict: 'A',
		            require: ['?^uiSrefActive', '?^uiSrefActiveEq'],
		            link: function (scope, element, attrs, uiSrefActive) {
		                var type = getTypeInfo(element);
		                var active = uiSrefActive[1] || uiSrefActive[0];
		                var group = [attrs.uiState, attrs.uiStateParams || null, attrs.uiStateOpts || null];
		                var watch = '[' + group.map(function (val) { return val || 'null'; }).join(', ') + ']';
		                var def = { state: null, params: null, options: null, href: null };
		                var unlinkInfoFn = null;
		                var hookFn;
		                function runStateRefLink(group) {
		                    def.state = group[0];
		                    def.params = group[1];
		                    def.options = group[2];
		                    def.href = $state.href(def.state, def.params, def.options);
		                    if (unlinkInfoFn)
		                        unlinkInfoFn();
		                    if (active)
		                        unlinkInfoFn = active.$$addStateInfo(def.state, def.params);
		                    if (def.href)
		                        attrs.$set(type.attr, def.href);
		                }
		                scope.$watch(watch, runStateRefLink, true);
		                runStateRefLink(scope.$eval(watch));
		                if (!type.clickable)
		                    return;
		                hookFn = clickHook(element, $state, $timeout, type, function () { return def; });
		                element.on("click", hookFn);
		                scope.$on('$destroy', function () {
		                    element.off("click", hookFn);
		                });
		            }
		        };
		    }];
		/**
		 * `ui-sref-active` and `ui-sref-active-eq`: A directive that adds a CSS class when a `ui-sref` is active
		 *
		 * A directive working alongside ui-sref to add classes to an element when the
		 * related ui-sref directive's state is active, and removing them when it is inactive.
		 * The primary use-case is to simplify the special appearance of navigation menus
		 * relying on `ui-sref`, by having the "active" state's menu button appear different,
		 * distinguishing it from the inactive menu items.
		 *
		 * ui-sref-active can live on the same element as ui-sref or on a parent element. The first
		 * ui-sref-active found at the same level or above the ui-sref will be used.
		 *
		 * Will activate when the ui-sref's target state or any child state is active. If you
		 * need to activate only when the ui-sref target state is active and *not* any of
		 * it's children, then you will use ui-sref-active-eq
		 *
		 * Given the following template:
		 * @example
		 * ```html
		 *
		 * <pre>
		 * <ul>
		 *   <li ui-sref-active="active" class="item">
		 *     <a href ui-sref="app.user({user: 'bilbobaggins'})">@bilbobaggins</a>
		 *   </li>
		 * </ul>
		 * </pre>
		 * ```
		 *
		 *
		 * When the app state is "app.user" (or any children states), and contains the state parameter "user" with value "bilbobaggins",
		 * the resulting HTML will appear as (note the 'active' class):
		 *
		 * ```html
		 *
		 * <pre>
		 * <ul>
		 *   <li ui-sref-active="active" class="item active">
		 *     <a ui-sref="app.user({user: 'bilbobaggins'})" href="/users/bilbobaggins">@bilbobaggins</a>
		 *   </li>
		 * </ul>
		 * </pre>
		 * ```
		 *
		 * The class name is interpolated **once** during the directives link time (any further changes to the
		 * interpolated value are ignored).
		 *
		 * Multiple classes may be specified in a space-separated format:
		 *
		 * ```html
		 * <pre>
		 * <ul>
		 *   <li ui-sref-active='class1 class2 class3'>
		 *     <a ui-sref="app.user">link</a>
		 *   </li>
		 * </ul>
		 * </pre>
		 * ```
		 *
		 * It is also possible to pass ui-sref-active an expression that evaluates
		 * to an object hash, whose keys represent active class names and whose
		 * values represent the respective state names/globs.
		 * ui-sref-active will match if the current active state **includes** any of
		 * the specified state names/globs, even the abstract ones.
		 *
		 * Given the following template, with "admin" being an abstract state:
		 * @example
		 * ```html
		 *
		 * <pre>
		 * <div ui-sref-active="{'active': 'admin.*'}">
		 *   <a ui-sref-active="active" ui-sref="admin.roles">Roles</a>
		 * </div>
		 * </pre>
		 * ```
		 *
		 * When the current state is "admin.roles" the "active" class will be applied
		 * to both the <div> and <a> elements. It is important to note that the state
		 * names/globs passed to ui-sref-active shadow the state provided by ui-sref.
		 */
		var uiSrefActive = ['$state', '$stateParams', '$interpolate', '$transitions', '$uiRouter',
		    function $StateRefActiveDirective($state, $stateParams, $interpolate, $transitions, $uiRouter) {
		        return {
		            restrict: "A",
		            controller: ['$scope', '$element', '$attrs', '$timeout',
		                function ($scope, $element, $attrs, $timeout) {
		                    var states = [], activeClasses = {}, activeEqClass, uiSrefActive;
		                    // There probably isn't much point in $observing this
		                    // uiSrefActive and uiSrefActiveEq share the same directive object with some
		                    // slight difference in logic routing
		                    activeEqClass = $interpolate($attrs.uiSrefActiveEq || '', false)($scope);
		                    try {
		                        uiSrefActive = $scope.$eval($attrs.uiSrefActive);
		                    }
		                    catch (e) {
		                    }
		                    uiSrefActive = uiSrefActive || $interpolate($attrs.uiSrefActive || '', false)($scope);
		                    if (predicates_1.isObject(uiSrefActive)) {
		                        common_1.forEach(uiSrefActive, function (stateOrName, activeClass) {
		                            if (predicates_1.isString(stateOrName)) {
		                                var ref = parseStateRef(stateOrName, $state.current.name);
		                                addState(ref.state, $scope.$eval(ref.paramExpr), activeClass);
		                            }
		                        });
		                    }
		                    // Allow uiSref to communicate with uiSrefActive[Equals]
		                    this.$$addStateInfo = function (newState, newParams) {
		                        // we already got an explicit state provided by ui-sref-active, so we
		                        // shadow the one that comes from ui-sref
		                        if (predicates_1.isObject(uiSrefActive) && states.length > 0) {
		                            return;
		                        }
		                        var deregister = addState(newState, newParams, uiSrefActive);
		                        update();
		                        return deregister;
		                    };
		                    function updateAfterTransition(trans) { trans.promise.then(update); }
		                    $scope.$on('$stateChangeSuccess', update);
		                    $scope.$on('$destroy', $transitions.onStart({}, updateAfterTransition));
		                    if ($uiRouter.globals.transition) {
		                        updateAfterTransition($uiRouter.globals.transition);
		                    }
		                    function addState(stateName, stateParams, activeClass) {
		                        var state = $state.get(stateName, stateContext($element));
		                        var stateHash = createStateHash(stateName, stateParams);
		                        var stateInfo = {
		                            state: state || { name: stateName },
		                            params: stateParams,
		                            hash: stateHash
		                        };
		                        states.push(stateInfo);
		                        activeClasses[stateHash] = activeClass;
		                        return function removeState() {
		                            var idx = states.indexOf(stateInfo);
		                            if (idx !== -1)
		                                states.splice(idx, 1);
		                        };
		                    }
		                    /**
		                     * @param {string} state
		                     * @param {Object|string} [params]
		                     * @return {string}
		                     */
		                    function createStateHash(state, params) {
		                        if (!predicates_1.isString(state)) {
		                            throw new Error('state should be a string');
		                        }
		                        if (predicates_1.isObject(params)) {
		                            return state + common_1.toJson(params);
		                        }
		                        params = $scope.$eval(params);
		                        if (predicates_1.isObject(params)) {
		                            return state + common_1.toJson(params);
		                        }
		                        return state;
		                    }
		                    // Update route state
		                    function update() {
		                        for (var i = 0; i < states.length; i++) {
		                            if (anyMatch(states[i].state, states[i].params)) {
		                                addClass($element, activeClasses[states[i].hash]);
		                            }
		                            else {
		                                removeClass($element, activeClasses[states[i].hash]);
		                            }
		                            if (exactMatch(states[i].state, states[i].params)) {
		                                addClass($element, activeEqClass);
		                            }
		                            else {
		                                removeClass($element, activeEqClass);
		                            }
		                        }
		                    }
		                    function addClass(el, className) { $timeout(function () { el.addClass(className); }); }
		                    function removeClass(el, className) { el.removeClass(className); }
		                    function anyMatch(state, params) { return $state.includes(state.name, params); }
		                    function exactMatch(state, params) { return $state.is(state.name, params); }
		                    update();
		                }]
		        };
		    }];
		angular.module('ui.router.state')
		    .directive('uiSref', uiSref)
		    .directive('uiSrefActive', uiSrefActive)
		    .directive('uiSrefActiveEq', uiSrefActive)
		    .directive('uiState', uiState);
	
	
	/***/ },
	/* 61 */
	/***/ function(module, exports, __webpack_require__) {
	
		/** @module state */ /** for typedoc */
		"use strict";
		var angular = __webpack_require__(57);
		/**
		 * @ngdoc filter
		 * @name ui.router.state.filter:isState
		 *
		 * @requires ui.router.state.$state
		 *
		 * @description
		 * Translates to {@link ui.router.state.$state#methods_is $state.is("stateName")}.
		 */
		$IsStateFilter.$inject = ['$state'];
		function $IsStateFilter($state) {
		    var isFilter = function (state, params, options) {
		        return $state.is(state, params, options);
		    };
		    isFilter.$stateful = true;
		    return isFilter;
		}
		exports.$IsStateFilter = $IsStateFilter;
		/**
		 * @ngdoc filter
		 * @name ui.router.state.filter:includedByState
		 *
		 * @requires ui.router.state.$state
		 *
		 * @description
		 * Translates to {@link ui.router.state.$state#methods_includes $state.includes('fullOrPartialStateName')}.
		 */
		$IncludedByStateFilter.$inject = ['$state'];
		function $IncludedByStateFilter($state) {
		    var includesFilter = function (state, params, options) {
		        return $state.includes(state, params, options);
		    };
		    includesFilter.$stateful = true;
		    return includesFilter;
		}
		exports.$IncludedByStateFilter = $IncludedByStateFilter;
		angular.module('ui.router.state')
		    .filter('isState', $IsStateFilter)
		    .filter('includedByState', $IncludedByStateFilter);
	
	
	/***/ },
	/* 62 */
	/***/ function(module, exports, __webpack_require__) {
	
		/** @module ng1_directives */ /** for typedoc */
		"use strict";
		var common_1 = __webpack_require__(3);
		var predicates_1 = __webpack_require__(4);
		var trace_1 = __webpack_require__(12);
		var views_1 = __webpack_require__(55);
		var hof_1 = __webpack_require__(5);
		var resolveContext_1 = __webpack_require__(17);
		var strings_1 = __webpack_require__(9);
		var services_1 = __webpack_require__(53);
		var angular = __webpack_require__(57);
		/**
		 * `ui-view`: A viewport directive which is filled in by a view from the active state.
		 *
		 * @param {string=} name A view name. The name should be unique amongst the other views in the
		 * same state. You can have views of the same name that live in different states.
		 *
		 * @param {string=} autoscroll It allows you to set the scroll behavior of the browser window
		 * when a view is populated. By default, $anchorScroll is overridden by ui-router's custom scroll
		 * service, {@link ui.router.state.$uiViewScroll}. This custom service let's you
		 * scroll ui-view elements into view when they are populated during a state activation.
		 *
		 * *Note: To revert back to old [`$anchorScroll`](http://docs.angularjs.org/api/ng.$anchorScroll)
		 * functionality, call `$uiViewScrollProvider.useAnchorScroll()`.*
		 *
		 * @param {string=} onload Expression to evaluate whenever the view updates.
		 *
		 * A view can be unnamed or named.
		 * @example
		 * ```html
		 *
		 * <!-- Unnamed -->
		 * <div ui-view></div>
		 *
		 * <!-- Named -->
		 * <div ui-view="viewName"></div>
		 * ```
		 *
		 * You can only have one unnamed view within any template (or root html). If you are only using a
		 * single view and it is unnamed then you can populate it like so:
		 * ```
		 *
		 * <div ui-view></div>
		 * $stateProvider.state("home", {
		 *   template: "<h1>HELLO!</h1>"
		 * })
		 * ```
		 *
		 * The above is a convenient shortcut equivalent to specifying your view explicitly with the {@link ui.router.state.$stateProvider#views `views`}
		 * config property, by name, in this case an empty name:
		 * ```js
		 *
		 * $stateProvider.state("home", {
		 *   views: {
		 *     "": {
		 *       template: "<h1>HELLO!</h1>"
		 *     }
		 *   }
		 * })
		 * ```
		 *
		 * But typically you'll only use the views property if you name your view or have more than one view
		 * in the same template. There's not really a compelling reason to name a view if its the only one,
		 * but you could if you wanted, like so:
		 *
		 * ```html
		 *
		 * <div ui-view="main"></div>
		 * ```
		 *
		 * ```js
		 *
		 * $stateProvider.state("home", {
		 *   views: {
		 *     "main": {
		 *       template: "<h1>HELLO!</h1>"
		 *     }
		 *   }
		 * })
		 * ```
		 *
		 * Really though, you'll use views to set up multiple views:
		 * ```html
		 *
		 * <div ui-view></div>
		 * <div ui-view="chart"></div>
		 * <div ui-view="data"></div>
		 * ```
		 *
		 * ```js
		 * $stateProvider.state("home", {
		 *   views: {
		 *     "": {
		 *       template: "<h1>HELLO!</h1>"
		 *     },
		 *     "chart": {
		 *       template: "<chart_thing/>"
		 *     },
		 *     "data": {
		 *       template: "<data_thing/>"
		 *     }
		 *   }
		 * })
		 * ```
		 *
		 * Examples for `autoscroll`:
		 *
		 * ```html
		 *
		 * <!-- If autoscroll present with no expression,
		 *      then scroll ui-view into view -->
		 * <ui-view autoscroll/>
		 *
		 * <!-- If autoscroll present with valid expression,
		 *      then scroll ui-view into view if expression evaluates to true -->
		 * <ui-view autoscroll='true'/>
		 * <ui-view autoscroll='false'/>
		 * <ui-view autoscroll='scopeVariable'/>
		 * ```
		 *
		 * Resolve data:
		 *
		 * The resolved data from the state's `resolve` block is placed on the scope as `$resolve` (this
		 * can be customized using [[ViewDeclaration.resolveAs]]).  This can be then accessed from the template.
		 *
		 * Note that when `controllerAs` is being used, `$resolve` is set on the controller instance *after* the
		 * controller is instantiated.  The `$onInit()` hook can be used to perform initialization code which
		 * depends on `$resolve` data.
		 *
		 * @example
		 * ```js
		 *
		 * $stateProvider.state('home', {
		 *   template: '<my-component user="$resolve.user"></my-component>',
		 *   resolve: {
		 *     user: function(UserService) { return UserService.fetchUser(); }
		 *   }
		 * });
		 * ```
		 */
		var uiView = ['$view', '$animate', '$uiViewScroll', '$interpolate', '$q',
		    function $ViewDirective($view, $animate, $uiViewScroll, $interpolate, $q) {
		        function getRenderer(attrs, scope) {
		            return {
		                enter: function (element, target, cb) {
		                    if (angular.version.minor > 2) {
		                        $animate.enter(element, null, target).then(cb);
		                    }
		                    else {
		                        $animate.enter(element, null, target, cb);
		                    }
		                },
		                leave: function (element, cb) {
		                    if (angular.version.minor > 2) {
		                        $animate.leave(element).then(cb);
		                    }
		                    else {
		                        $animate.leave(element, cb);
		                    }
		                }
		            };
		        }
		        function configsEqual(config1, config2) {
		            return config1 === config2;
		        }
		        var rootData = {
		            $cfg: { viewDecl: { $context: $view.rootContext() } },
		            $uiView: {}
		        };
		        var directive = {
		            count: 0,
		            restrict: 'ECA',
		            terminal: true,
		            priority: 400,
		            transclude: 'element',
		            compile: function (tElement, tAttrs, $transclude) {
		                return function (scope, $element, attrs) {
		                    var previousEl, currentEl, currentScope, unregister, onloadExp = attrs['onload'] || '', autoScrollExp = attrs['autoscroll'], renderer = getRenderer(attrs, scope), viewConfig = undefined, inherited = $element.inheritedData('$uiView') || rootData, name = $interpolate(attrs['uiView'] || attrs['name'] || '')(scope) || '$default';
		                    var activeUIView = {
		                        $type: 'ng1',
		                        id: directive.count++,
		                        name: name,
		                        fqn: inherited.$uiView.fqn ? inherited.$uiView.fqn + "." + name : name,
		                        config: null,
		                        configUpdated: configUpdatedCallback,
		                        get creationContext() {
		                            return hof_1.parse('$cfg.viewDecl.$context')(inherited);
		                        }
		                    };
		                    trace_1.trace.traceUIViewEvent("Linking", activeUIView);
		                    function configUpdatedCallback(config) {
		                        if (config && !(config instanceof views_1.Ng1ViewConfig))
		                            return;
		                        if (configsEqual(viewConfig, config))
		                            return;
		                        trace_1.trace.traceUIViewConfigUpdated(activeUIView, config && config.viewDecl && config.viewDecl.$context);
		                        viewConfig = config;
		                        updateView(config);
		                    }
		                    $element.data('$uiView', { $uiView: activeUIView });
		                    updateView();
		                    unregister = $view.registerUIView(activeUIView);
		                    scope.$on("$destroy", function () {
		                        trace_1.trace.traceUIViewEvent("Destroying/Unregistering", activeUIView);
		                        unregister();
		                    });
		                    function cleanupLastView() {
		                        if (previousEl) {
		                            trace_1.trace.traceUIViewEvent("Removing (previous) el", previousEl.data('$uiView'));
		                            previousEl.remove();
		                            previousEl = null;
		                        }
		                        if (currentScope) {
		                            trace_1.trace.traceUIViewEvent("Destroying scope", activeUIView);
		                            currentScope.$destroy();
		                            currentScope = null;
		                        }
		                        if (currentEl) {
		                            var _viewData_1 = currentEl.data('$uiViewAnim');
		                            trace_1.trace.traceUIViewEvent("Animate out", _viewData_1);
		                            renderer.leave(currentEl, function () {
		                                _viewData_1.$$animLeave.resolve();
		                                previousEl = null;
		                            });
		                            previousEl = currentEl;
		                            currentEl = null;
		                        }
		                    }
		                    function updateView(config) {
		                        var newScope = scope.$new();
		                        var animEnter = $q.defer(), animLeave = $q.defer();
		                        var $uiViewData = {
		                            $cfg: config,
		                            $uiView: activeUIView,
		                        };
		                        var $uiViewAnim = {
		                            $animEnter: animEnter.promise,
		                            $animLeave: animLeave.promise,
		                            $$animLeave: animLeave
		                        };
		                        var cloned = $transclude(newScope, function (clone) {
		                            clone.data('$uiViewAnim', $uiViewAnim);
		                            clone.data('$uiView', $uiViewData);
		                            renderer.enter(clone, $element, function onUIViewEnter() {
		                                animEnter.resolve();
		                                if (currentScope)
		                                    currentScope.$emit('$viewContentAnimationEnded');
		                                if (predicates_1.isDefined(autoScrollExp) && !autoScrollExp || scope.$eval(autoScrollExp)) {
		                                    $uiViewScroll(clone);
		                                }
		                            });
		                            cleanupLastView();
		                        });
		                        currentEl = cloned;
		                        currentScope = newScope;
		                        /**
		                         * @ngdoc event
		                         * @name ui.router.state.directive:ui-view#$viewContentLoaded
		                         * @eventOf ui.router.state.directive:ui-view
		                         * @eventType emits on ui-view directive scope
		                         * @description           *
		                         * Fired once the view is **loaded**, *after* the DOM is rendered.
		                         *
		                         * @param {Object} event Event object.
		                         */
		                        currentScope.$emit('$viewContentLoaded', config || viewConfig);
		                        currentScope.$eval(onloadExp);
		                    }
		                };
		            }
		        };
		        return directive;
		    }];
		$ViewDirectiveFill.$inject = ['$compile', '$controller', '$transitions', '$view', '$timeout'];
		/** @hidden */
		function $ViewDirectiveFill($compile, $controller, $transitions, $view, $timeout) {
		    var getControllerAs = hof_1.parse('viewDecl.controllerAs');
		    var getResolveAs = hof_1.parse('viewDecl.resolveAs');
		    return {
		        restrict: 'ECA',
		        priority: -400,
		        compile: function (tElement) {
		            var initial = tElement.html();
		            return function (scope, $element) {
		                var data = $element.data('$uiView');
		                if (!data)
		                    return;
		                var cfg = data.$cfg || { viewDecl: {} };
		                $element.html(cfg.template || initial);
		                trace_1.trace.traceUIViewFill(data.$uiView, $element.html());
		                var link = $compile($element.contents());
		                var controller = cfg.controller;
		                var controllerAs = getControllerAs(cfg);
		                var resolveAs = getResolveAs(cfg);
		                var resolveCtx = cfg.path && new resolveContext_1.ResolveContext(cfg.path);
		                var locals = resolveCtx && services_1.getLocals(resolveCtx);
		                scope[resolveAs] = locals;
		                if (controller) {
		                    var controllerInstance = $controller(controller, common_1.extend({}, locals, { $scope: scope, $element: $element }));
		                    if (controllerAs) {
		                        scope[controllerAs] = controllerInstance;
		                        scope[controllerAs][resolveAs] = locals;
		                    }
		                    // TODO: Use $view service as a central point for registering component-level hooks
		                    // Then, when a component is created, tell the $view service, so it can invoke hooks
		                    // $view.componentLoaded(controllerInstance, { $scope: scope, $element: $element });
		                    // scope.$on('$destroy', () => $view.componentUnloaded(controllerInstance, { $scope: scope, $element: $element }));
		                    $element.data('$ngControllerController', controllerInstance);
		                    $element.children().data('$ngControllerController', controllerInstance);
		                    registerControllerCallbacks($transitions, controllerInstance, scope, cfg);
		                }
		                // Wait for the component to appear in the DOM
		                if (predicates_1.isString(cfg.viewDecl.component)) {
		                    var cmp_1 = cfg.viewDecl.component;
		                    var kebobName_1 = strings_1.kebobString(cmp_1);
		                    var getComponentController = function () {
		                        var directiveEl = [].slice.call($element[0].children)
		                            .filter(function (el) { return el && el.tagName && el.tagName.toLowerCase() === kebobName_1; });
		                        return directiveEl && angular.element(directiveEl).data("$" + cmp_1 + "Controller");
		                    };
		                    var deregisterWatch_1 = scope.$watch(getComponentController, function (ctrlInstance) {
		                        if (!ctrlInstance)
		                            return;
		                        registerControllerCallbacks($transitions, ctrlInstance, scope, cfg);
		                        deregisterWatch_1();
		                    });
		                }
		                link(scope);
		            };
		        }
		    };
		}
		/** @hidden */
		var hasComponentImpl = typeof angular.module('ui.router')['component'] === 'function';
		/** @hidden TODO: move these callbacks to $view and/or `/hooks/components.ts` or something */
		function registerControllerCallbacks($transitions, controllerInstance, $scope, cfg) {
		    // Call $onInit() ASAP
		    if (predicates_1.isFunction(controllerInstance.$onInit) && !(cfg.viewDecl.component && hasComponentImpl))
		        controllerInstance.$onInit();
		    var viewState = common_1.tail(cfg.path).state.self;
		    var hookOptions = { bind: controllerInstance };
		    // Add component-level hook for onParamsChange
		    if (predicates_1.isFunction(controllerInstance.uiOnParamsChanged)) {
		        var resolveContext = new resolveContext_1.ResolveContext(cfg.path);
		        var viewCreationTrans_1 = resolveContext.getResolvable('$transition$').data;
		        // Fire callback on any successful transition
		        var paramsUpdated = function ($transition$) {
		            // Exit early if the $transition$ is the same as the view was created within.
		            // Exit early if the $transition$ will exit the state the view is for.
		            if ($transition$ === viewCreationTrans_1 || $transition$.exiting().indexOf(viewState) !== -1)
		                return;
		            var toParams = $transition$.params("to");
		            var fromParams = $transition$.params("from");
		            var toSchema = $transition$.treeChanges().to.map(function (node) { return node.paramSchema; }).reduce(common_1.unnestR, []);
		            var fromSchema = $transition$.treeChanges().from.map(function (node) { return node.paramSchema; }).reduce(common_1.unnestR, []);
		            // Find the to params that have different values than the from params
		            var changedToParams = toSchema.filter(function (param) {
		                var idx = fromSchema.indexOf(param);
		                return idx === -1 || !fromSchema[idx].type.equals(toParams[param.id], fromParams[param.id]);
		            });
		            // Only trigger callback if a to param has changed or is new
		            if (changedToParams.length) {
		                var changedKeys_1 = changedToParams.map(function (x) { return x.id; });
		                // Filter the params to only changed/new to params.  `$transition$.params()` may be used to get all params.
		                controllerInstance.uiOnParamsChanged(common_1.filter(toParams, function (val, key) { return changedKeys_1.indexOf(key) !== -1; }), $transition$);
		            }
		        };
		        $scope.$on('$destroy', $transitions.onSuccess({}, paramsUpdated, hookOptions));
		    }
		    // Add component-level hook for uiCanExit
		    if (predicates_1.isFunction(controllerInstance.uiCanExit)) {
		        var criteria = { exiting: viewState.name };
		        $scope.$on('$destroy', $transitions.onBefore(criteria, controllerInstance.uiCanExit, hookOptions));
		    }
		}
		angular.module('ui.router.state').directive('uiView', uiView);
		angular.module('ui.router.state').directive('uiView', $ViewDirectiveFill);
	
	
	/***/ },
	/* 63 */
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		/** @module ng1 */ /** */
		var angular = __webpack_require__(57);
		/**
		 * @ngdoc object
		 * @name ui.router.state.$uiViewScrollProvider
		 *
		 * @description
		 * Provider that returns the {@link ui.router.state.$uiViewScroll} service function.
		 */
		function $ViewScrollProvider() {
		    var useAnchorScroll = false;
		    /**
		     * @ngdoc function
		     * @name ui.router.state.$uiViewScrollProvider#useAnchorScroll
		     * @methodOf ui.router.state.$uiViewScrollProvider
		     *
		     * @description
		     * Reverts back to using the core [`$anchorScroll`](http://docs.angularjs.org/api/ng.$anchorScroll) service for
		     * scrolling based on the url anchor.
		     */
		    this.useAnchorScroll = function () {
		        useAnchorScroll = true;
		    };
		    /**
		     * @ngdoc object
		     * @name ui.router.state.$uiViewScroll
		     *
		     * @requires $anchorScroll
		     * @requires $timeout
		     *
		     * @description
		     * When called with a jqLite element, it scrolls the element into view (after a
		     * `$timeout` so the DOM has time to refresh).
		     *
		     * If you prefer to rely on `$anchorScroll` to scroll the view to the anchor,
		     * this can be enabled by calling {@link ui.router.state.$uiViewScrollProvider#methods_useAnchorScroll `$uiViewScrollProvider.useAnchorScroll()`}.
		     */
		    this.$get = ['$anchorScroll', '$timeout', function ($anchorScroll, $timeout) {
		            if (useAnchorScroll) {
		                return $anchorScroll;
		            }
		            return function ($element) {
		                return $timeout(function () {
		                    $element[0].scrollIntoView();
		                }, 0, false);
		            };
		        }];
		}
		angular.module('ui.router.state').provider('$uiViewScroll', $ViewScrollProvider);
	
	
	/***/ }
	/******/ ])
	});
	;
	//# sourceMappingURL=angular-ui-router.js.map

/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	(function(root, factory) {
	if (true) {
	module.exports = factory(__webpack_require__(1));
	} else if (typeof define === "function" && define.amd) {
	define(['angular'], factory);
	} else{
	factory(root.angular);
	}
	}(this, function(angular) {
	/**
	 * AngularJS Google Maps Ver. 1.18.3
	 *
	 * The MIT License (MIT)
	 * 
	 * Copyright (c) 2014, 2015, 1016 Allen Kim
	 * 
	 * Permission is hereby granted, free of charge, to any person obtaining a copy of
	 * this software and associated documentation files (the "Software"), to deal in
	 * the Software without restriction, including without limitation the rights to
	 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
	 * the Software, and to permit persons to whom the Software is furnished to do so,
	 * subject to the following conditions:
	 * 
	 * The above copyright notice and this permission notice shall be included in all
	 * copies or substantial portions of the Software.
	 * 
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
	 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
	 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
	 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
	 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
	 */
	angular.module('ngMap', []);
	
	/**
	 * @ngdoc controller
	 * @name MapController
	 */
	(function() {
	  'use strict';
	  var Attr2MapOptions;
	
	  var __MapController = function(
	      $scope, $element, $attrs, $parse, $interpolate, _Attr2MapOptions_, NgMap, NgMapPool, escapeRegExp
	    ) {
	    Attr2MapOptions = _Attr2MapOptions_;
	    var vm = this;
	    var exprStartSymbol = $interpolate.startSymbol();
	    var exprEndSymbol = $interpolate.endSymbol();
	
	    vm.mapOptions; /** @memberof __MapController */
	    vm.mapEvents;  /** @memberof __MapController */
	    vm.eventListeners;  /** @memberof __MapController */
	
	    /**
	     * Add an object to the collection of group
	     * @memberof __MapController
	     * @function addObject
	     * @param groupName the name of collection that object belongs to
	     * @param obj  an object to add into a collection, i.e. marker, shape
	     */
	    vm.addObject = function(groupName, obj) {
	      if (vm.map) {
	        vm.map[groupName] = vm.map[groupName] || {};
	        var len = Object.keys(vm.map[groupName]).length;
	        vm.map[groupName][obj.id || len] = obj;
	
	        if (vm.map instanceof google.maps.Map) {
	          //infoWindow.setMap works like infoWindow.open
	          if (groupName != "infoWindows" && obj.setMap) {
	            obj.setMap && obj.setMap(vm.map);
	          }
	          if (obj.centered && obj.position) {
	            vm.map.setCenter(obj.position);
	          }
	          (groupName == 'markers') && vm.objectChanged('markers');
	          (groupName == 'customMarkers') && vm.objectChanged('customMarkers');
	        }
	      }
	    };
	
	    /**
	     * Delete an object from the collection and remove from map
	     * @memberof __MapController
	     * @function deleteObject
	     * @param {Array} objs the collection of objects. i.e., map.markers
	     * @param {Object} obj the object to be removed. i.e., marker
	     */
	    vm.deleteObject = function(groupName, obj) {
	      /* delete from group */
	      if (obj.map) {
	        var objs = obj.map[groupName];
	        for (var name in objs) {
	          if (objs[name] === obj) {
	            void 0;
	            google.maps.event.clearInstanceListeners(obj);
	            delete objs[name];
	          }
	        }
	
	        /* delete from map */
	        obj.map && obj.setMap && obj.setMap(null);
	
	        (groupName == 'markers') && vm.objectChanged('markers');
	        (groupName == 'customMarkers') && vm.objectChanged('customMarkers');
	      }
	    };
	
	    /**
	     * @memberof __MapController
	     * @function observeAttrSetObj
	     * @param {Hash} orgAttrs attributes before its initialization
	     * @param {Hash} attrs    attributes after its initialization
	     * @param {Object} obj    map object that an action is to be done
	     * @description watch changes of attribute values and
	     * do appropriate action based on attribute name
	     */
	    vm.observeAttrSetObj = function(orgAttrs, attrs, obj) {
	      if (attrs.noWatcher) {
	        return false;
	      }
	      var attrsToObserve = Attr2MapOptions.getAttrsToObserve(orgAttrs);
	      for (var i=0; i<attrsToObserve.length; i++) {
	        var attrName = attrsToObserve[i];
	        attrs.$observe(attrName, NgMap.observeAndSet(attrName, obj));
	      }
	    };
	
	    /**
	     * @memberof __MapController
	     * @function zoomToIncludeMarkers
	     */
	    vm.zoomToIncludeMarkers = function() {
	      // Only fit to bounds if we have any markers
	      // object.keys is supported in all major browsers (IE9+)
	      if ((vm.map.markers != null && Object.keys(vm.map.markers).length > 0) || (vm.map.customMarkers != null && Object.keys(vm.map.customMarkers).length > 0)) {
	        var bounds = new google.maps.LatLngBounds();
	        for (var k1 in vm.map.markers) {
	          bounds.extend(vm.map.markers[k1].getPosition());
	        }
	        for (var k2 in vm.map.customMarkers) {
	          bounds.extend(vm.map.customMarkers[k2].getPosition());
	        }
	    	  if (vm.mapOptions.maximumZoom) {
	    		  vm.enableMaximumZoomCheck = true; //enable zoom check after resizing for markers
	    	  }
	        vm.map.fitBounds(bounds);
	      }
	    };
	
	    /**
	     * @memberof __MapController
	     * @function objectChanged
	     * @param {String} group name of group e.g., markers
	     */
	    vm.objectChanged = function(group) {
	      if ( vm.map &&
	        (group == 'markers' || group == 'customMarkers') &&
	        vm.map.zoomToIncludeMarkers == 'auto'
	      ) {
	        vm.zoomToIncludeMarkers();
	      }
	    };
	
	    /**
	     * @memberof __MapController
	     * @function initializeMap
	     * @description
	     *  . initialize Google map on <div> tag
	     *  . set map options, events, and observers
	     *  . reset zoom to include all (custom)markers
	     */
	    vm.initializeMap = function() {
	      var mapOptions = vm.mapOptions,
	          mapEvents = vm.mapEvents;
	
	      var lazyInitMap = vm.map; //prepared for lazy init
	      vm.map = NgMapPool.getMapInstance($element[0]);
	      NgMap.setStyle($element[0]);
	
	      // set objects for lazyInit
	      if (lazyInitMap) {
	
	        /**
	         * rebuild mapOptions for lazyInit
	         * because attributes values might have been changed
	         */
	        var filtered = Attr2MapOptions.filter($attrs);
	        var options = Attr2MapOptions.getOptions(filtered);
	        var controlOptions = Attr2MapOptions.getControlOptions(filtered);
	        mapOptions = angular.extend(options, controlOptions);
	        void 0;
	
	        for (var group in lazyInitMap) {
	          var groupMembers = lazyInitMap[group]; //e.g. markers
	          if (typeof groupMembers == 'object') {
	            for (var id in groupMembers) {
	              vm.addObject(group, groupMembers[id]);
	            }
	          }
	        }
	        vm.map.showInfoWindow = vm.showInfoWindow;
	        vm.map.hideInfoWindow = vm.hideInfoWindow;
	      }
	
	      // set options
	      mapOptions.zoom = mapOptions.zoom || 15;
	      var center = mapOptions.center;
	      var exprRegExp = new RegExp(escapeRegExp(exprStartSymbol) + '.*' + escapeRegExp(exprEndSymbol));
	
	      if (!mapOptions.center ||
	        ((typeof center === 'string') && center.match(exprRegExp))
	      ) {
	        mapOptions.center = new google.maps.LatLng(0, 0);
	      } else if( (typeof center === 'string') && center.match(/^[0-9.-]*,[0-9.-]*$/) ){
	        var lat = parseFloat(center.split(',')[0]);
	        var lng = parseFloat(center.split(',')[1]);
	        mapOptions.center = new google.maps.LatLng(lat, lng);
	      } else if (!(center instanceof google.maps.LatLng)) {
	        var geoCenter = mapOptions.center;
	        delete mapOptions.center;
	        NgMap.getGeoLocation(geoCenter, mapOptions.geoLocationOptions).
	          then(function (latlng) {
	            vm.map.setCenter(latlng);
	            var geoCallback = mapOptions.geoCallback;
	            geoCallback && $parse(geoCallback)($scope);
	          }, function () {
	            if (mapOptions.geoFallbackCenter) {
	              vm.map.setCenter(mapOptions.geoFallbackCenter);
	            }
	          });
	      }
	      vm.map.setOptions(mapOptions);
	
	      // set events
	      for (var eventName in mapEvents) {
	        var event = mapEvents[eventName];
	        var listener = google.maps.event.addListener(vm.map, eventName, event);
	        vm.eventListeners[eventName] = listener;
	      }
	
	      // set observers
	      vm.observeAttrSetObj(orgAttrs, $attrs, vm.map);
	      vm.singleInfoWindow = mapOptions.singleInfoWindow;
	
	      google.maps.event.trigger(vm.map, 'resize');
	
	      google.maps.event.addListenerOnce(vm.map, "idle", function () {
	        NgMap.addMap(vm);
	        if (mapOptions.zoomToIncludeMarkers) {
	          vm.zoomToIncludeMarkers();
	        }
	        //TODO: it's for backward compatibiliy. will be removed
	        $scope.map = vm.map;
	        $scope.$emit('mapInitialized', vm.map);
	
	        //callback
	        if ($attrs.mapInitialized) {
	          $parse($attrs.mapInitialized)($scope, {map: vm.map});
	        }
	      });
	
		  //add maximum zoom listeners if zoom-to-include-markers and and maximum-zoom are valid attributes
		  if (mapOptions.zoomToIncludeMarkers && mapOptions.maximumZoom) {
		    google.maps.event.addListener(vm.map, 'zoom_changed', function() {
	          if (vm.enableMaximumZoomCheck == true) {
				vm.enableMaximumZoomCheck = false;
		        google.maps.event.addListenerOnce(vm.map, 'bounds_changed', function() {
			      vm.map.setZoom(Math.min(mapOptions.maximumZoom, vm.map.getZoom()));
			    });
		  	  }
		    });
		  }
	    };
	
	    $scope.google = google; //used by $scope.eval to avoid eval()
	
	    /**
	     * get map options and events
	     */
	    var orgAttrs = Attr2MapOptions.orgAttributes($element);
	    var filtered = Attr2MapOptions.filter($attrs);
	    var options = Attr2MapOptions.getOptions(filtered, {scope: $scope});
	    var controlOptions = Attr2MapOptions.getControlOptions(filtered);
	    var mapOptions = angular.extend(options, controlOptions);
	    var mapEvents = Attr2MapOptions.getEvents($scope, filtered);
	    void 0;
	    Object.keys(mapEvents).length && void 0;
	
	    vm.mapOptions = mapOptions;
	    vm.mapEvents = mapEvents;
	    vm.eventListeners = {};
	
	    if (options.lazyInit) { // allows controlled initialization
	      // parse angular expression for dynamic ids
	      if (!!$attrs.id &&
	      	  // starts with, at position 0
		  $attrs.id.indexOf(exprStartSymbol, 0) === 0 &&
		  // ends with
		  $attrs.id.indexOf(exprEndSymbol, $attrs.id.length - exprEndSymbol.length) !== -1) {
	        var idExpression = $attrs.id.slice(2,-2);
	        var mapId = $parse(idExpression)($scope);
	      } else {
	        var mapId = $attrs.id;
	      }
	      vm.map = {id: mapId}; //set empty, not real, map
	      NgMap.addMap(vm);
	    } else {
	      vm.initializeMap();
	    }
	
	    //Trigger Resize
	    if(options.triggerResize) {
	      google.maps.event.trigger(vm.map, 'resize');
	    }
	
	    $element.bind('$destroy', function() {
	      NgMapPool.returnMapInstance(vm.map);
	      NgMap.deleteMap(vm);
	    });
	  }; // __MapController
	
	  __MapController.$inject = [
	    '$scope', '$element', '$attrs', '$parse', '$interpolate', 'Attr2MapOptions', 'NgMap', 'NgMapPool', 'escapeRegexpFilter'
	  ];
	  angular.module('ngMap').controller('__MapController', __MapController);
	})();
	
	/**
	 * @ngdoc directive
	 * @name bicycling-layer
	 * @param Attr2Options {service}
	 *   convert html attribute to Google map api options
	 * @description
	 *   Requires:  map directive
	 *   Restrict To:  Element
	 *
	 * @example
	 *
	 *   <map zoom="13" center="34.04924594193164, -118.24104309082031">
	 *     <bicycling-layer></bicycling-layer>
	 *    </map>
	 */
	(function() {
	  'use strict';
	  var parser;
	
	  var linkFunc = function(scope, element, attrs, mapController) {
	    mapController = mapController[0]||mapController[1];
	    var orgAttrs = parser.orgAttributes(element);
	    var filtered = parser.filter(attrs);
	    var options = parser.getOptions(filtered, {scope: scope});
	    var events = parser.getEvents(scope, filtered);
	
	    void 0;
	
	    var layer = getLayer(options, events);
	    mapController.addObject('bicyclingLayers', layer);
	    mapController.observeAttrSetObj(orgAttrs, attrs, layer);  //observers
	    element.bind('$destroy', function() {
	      mapController.deleteObject('bicyclingLayers', layer);
	    });
	  };
	
	  var getLayer = function(options, events) {
	    var layer = new google.maps.BicyclingLayer(options);
	    for (var eventName in events) {
	      google.maps.event.addListener(layer, eventName, events[eventName]);
	    }
	    return layer;
	  };
	
	  var bicyclingLayer= function(Attr2MapOptions) {
	    parser = Attr2MapOptions;
	    return {
	      restrict: 'E',
	      require: ['?^map','?^ngMap'],
	      link: linkFunc
	     };
	  };
	  bicyclingLayer.$inject = ['Attr2MapOptions'];
	
	  angular.module('ngMap').directive('bicyclingLayer', bicyclingLayer);
	})();
	
	/**
	 * @ngdoc directive
	 * @name custom-control
	 * @param Attr2Options {service} convert html attribute to Google map api options
	 * @param $compile {service} AngularJS $compile service
	 * @description
	 *   Build custom control and set to the map with position
	 *
	 *   Requires:  map directive
	 *
	 *   Restrict To:  Element
	 *
	 * @attr {String} position position of this control
	 *        i.e. TOP_RIGHT
	 * @attr {Number} index index of the control
	 * @example
	 *
	 * Example:
	 *  <map center="41.850033,-87.6500523" zoom="3">
	 *    <custom-control id="home" position="TOP_LEFT" index="1">
	 *      <div style="background-color: white;">
	 *        <b>Home</b>
	 *      </div>
	 *    </custom-control>
	 *  </map>
	 *
	 */
	(function() {
	  'use strict';
	  var parser, NgMap;
	
	  var linkFunc = function(scope, element, attrs, mapController, $transclude) {
	    mapController = mapController[0]||mapController[1];
	    var filtered = parser.filter(attrs);
	    var options = parser.getOptions(filtered, {scope: scope});
	    var events = parser.getEvents(scope, filtered);
	
	    /**
	     * build a custom control element
	     */
	    var customControlEl = element[0].parentElement.removeChild(element[0]);
	    var content = $transclude();
	    angular.element(customControlEl).append(content);
	
	    /**
	     * set events
	     */
	    for (var eventName in events) {
	      google.maps.event.addDomListener(customControlEl, eventName, events[eventName]);
	    }
	
	    mapController.addObject('customControls', customControlEl);
	    var position = options.position;
	    mapController.map.controls[google.maps.ControlPosition[position]].push(customControlEl);
	
	    element.bind('$destroy', function() {
	      mapController.deleteObject('customControls', customControlEl);
	    });
	  };
	
	  var customControl =  function(Attr2MapOptions, _NgMap_)  {
	    parser = Attr2MapOptions, NgMap = _NgMap_;
	
	    return {
	      restrict: 'E',
	      require: ['?^map','?^ngMap'],
	      link: linkFunc,
	      transclude: true
	    }; // return
	  };
	  customControl.$inject = ['Attr2MapOptions', 'NgMap'];
	
	  angular.module('ngMap').directive('customControl', customControl);
	})();
	
	/**
	 * @ngdoc directive
	 * @memberof ngmap
	 * @name custom-marker
	 * @param Attr2Options {service} convert html attribute to Google map api options
	 * @param $timeout {service} AngularJS $timeout
	 * @description
	 *   Marker with html
	 *   Requires:  map directive
	 *   Restrict To:  Element
	 *
	 * @attr {String} position required, position on map
	 * @attr {Number} z-index optional
	 * @attr {Boolean} visible optional
	 * @example
	 *
	 * Example:
	 *   <map center="41.850033,-87.6500523" zoom="3">
	 *     <custom-marker position="41.850033,-87.6500523">
	 *       <div>
	 *         <b>Home</b>
	 *       </div>
	 *     </custom-marker>
	 *   </map>
	 *
	 */
	/* global document */
	(function() {
	  'use strict';
	  var parser, $timeout, $compile, NgMap;
	
	  var CustomMarker = function(options) {
	    options = options || {};
	
	    this.el = document.createElement('div');
	    this.el.style.display = 'inline-block';
	    this.el.style.visibility = "hidden";
	    this.visible = true;
	    for (var key in options) { /* jshint ignore:line */
	     this[key] = options[key];
	    }
	  };
	
	  var setCustomMarker = function() {
	
	    CustomMarker.prototype = new google.maps.OverlayView();
	
	    CustomMarker.prototype.setContent = function(html, scope) {
	      this.el.innerHTML = html;
	      this.el.style.position = 'absolute';
	      if (scope) {
	        $compile(angular.element(this.el).contents())(scope);
	      }
	    };
	
	    CustomMarker.prototype.getDraggable = function() {
	      return this.draggable;
	    };
	
	    CustomMarker.prototype.setDraggable = function(draggable) {
	      this.draggable = draggable;
	    };
	
	    CustomMarker.prototype.getPosition = function() {
	      return this.position;
	    };
	
	    CustomMarker.prototype.setPosition = function(position) {
	      position && (this.position = position); /* jshint ignore:line */
	      var _this = this;
	      if (this.getProjection() && typeof this.position.lng == 'function') {
	        void 0;
	        var setPosition = function() {
	          if (!_this.getProjection()) { return; }
	          var posPixel = _this.getProjection().fromLatLngToDivPixel(_this.position);
	          var x = Math.round(posPixel.x - (_this.el.offsetWidth/2));
	          var y = Math.round(posPixel.y - _this.el.offsetHeight - 10); // 10px for anchor
	          _this.el.style.left = x + "px";
	          _this.el.style.top = y + "px";
	          _this.el.style.visibility = "visible";
	        };
	        if (_this.el.offsetWidth && _this.el.offsetHeight) {
	          setPosition();
	        } else {
	          //delayed left/top calculation when width/height are not set instantly
	          $timeout(setPosition, 300);
	        }
	      }
	    };
	
	    CustomMarker.prototype.setZIndex = function(zIndex) {
	      zIndex && (this.zIndex = zIndex); /* jshint ignore:line */
	      this.el.style.zIndex = this.zIndex;
	    };
	
	    CustomMarker.prototype.getVisible = function() {
	      return this.visible;
	    };
	
	    CustomMarker.prototype.setVisible = function(visible) {
	      this.el.style.display = visible ? 'inline-block' : 'none';
	      this.visible = visible;
	    };
	
	    CustomMarker.prototype.addClass = function(className) {
	      var classNames = this.el.className.trim().split(' ');
	      (classNames.indexOf(className) == -1) && classNames.push(className); /* jshint ignore:line */
	      this.el.className = classNames.join(' ');
	    };
	
	    CustomMarker.prototype.removeClass = function(className) {
	      var classNames = this.el.className.split(' ');
	      var index = classNames.indexOf(className);
	      (index > -1) && classNames.splice(index, 1); /* jshint ignore:line */
	      this.el.className = classNames.join(' ');
	    };
	
	    CustomMarker.prototype.onAdd = function() {
	      this.getPanes().overlayMouseTarget.appendChild(this.el);
	    };
	
	    CustomMarker.prototype.draw = function() {
	      this.setPosition();
	      this.setZIndex(this.zIndex);
	      this.setVisible(this.visible);
	    };
	
	    CustomMarker.prototype.onRemove = function() {
	      this.el.parentNode.removeChild(this.el);
	      //this.el = null;
	    };
	  };
	
	  var linkFunc = function(orgHtml, varsToWatch) {
	    //console.log('orgHtml', orgHtml, 'varsToWatch', varsToWatch);
	
	    return function(scope, element, attrs, mapController) {
	      mapController = mapController[0]||mapController[1];
	      var orgAttrs = parser.orgAttributes(element);
	
	      var filtered = parser.filter(attrs);
	      var options = parser.getOptions(filtered, {scope: scope});
	      var events = parser.getEvents(scope, filtered);
	
	      /**
	       * build a custom marker element
	       */
	      element[0].style.display = 'none';
	      void 0;
	      var customMarker = new CustomMarker(options);
	
	      $timeout(function() { //apply contents, class, and location after it is compiled
	
	        scope.$watch('[' + varsToWatch.join(',') + ']', function() {
	          customMarker.setContent(orgHtml, scope);
	        }, true);
	
	        customMarker.setContent(element[0].innerHTML, scope);
	        var classNames = element[0].firstElementChild.className;
	        customMarker.addClass('custom-marker');
	        customMarker.addClass(classNames);
	        void 0;
	
	        if (!(options.position instanceof google.maps.LatLng)) {
	          NgMap.getGeoLocation(options.position).then(
	                function(latlng) {
	                  customMarker.setPosition(latlng);
	                }
	          );
	        }
	
	      });
	
	      void 0;
	      for (var eventName in events) { /* jshint ignore:line */
	        google.maps.event.addDomListener(
	          customMarker.el, eventName, events[eventName]);
	      }
	      mapController.addObject('customMarkers', customMarker);
	
	      //set observers
	      mapController.observeAttrSetObj(orgAttrs, attrs, customMarker);
	
	      element.bind('$destroy', function() {
	        //Is it required to remove event listeners when DOM is removed?
	        mapController.deleteObject('customMarkers', customMarker);
	      });
	
	    }; // linkFunc
	  };
	
	
	  var customMarkerDirective = function(
	      _$timeout_, _$compile_, $interpolate, Attr2MapOptions, _NgMap_, escapeRegExp
	    )  {
	    parser = Attr2MapOptions;
	    $timeout = _$timeout_;
	    $compile = _$compile_;
	    NgMap = _NgMap_;
	
	    var exprStartSymbol = $interpolate.startSymbol();
	    var exprEndSymbol = $interpolate.endSymbol();
	    var exprRegExp = new RegExp(escapeRegExp(exprStartSymbol) + '([^' + exprEndSymbol.substring(0, 1) + ']+)' + escapeRegExp(exprEndSymbol), 'g');
	
	    return {
	      restrict: 'E',
	      require: ['?^map','?^ngMap'],
	      compile: function(element) {
	        setCustomMarker();
	        element[0].style.display ='none';
	        var orgHtml = element.html();
	        var matches = orgHtml.match(exprRegExp);
	        var varsToWatch = [];
	        //filter out that contains '::', 'this.'
	        (matches || []).forEach(function(match) {
	          var toWatch = match.replace(exprStartSymbol,'').replace(exprEndSymbol,'');
	          if (match.indexOf('::') == -1 &&
	            match.indexOf('this.') == -1 &&
	            varsToWatch.indexOf(toWatch) == -1) {
	            varsToWatch.push(match.replace(exprStartSymbol,'').replace(exprEndSymbol,''));
	          }
	        });
	
	        return linkFunc(orgHtml, varsToWatch);
	      }
	    }; // return
	  };// function
	  customMarkerDirective.$inject =
	    ['$timeout', '$compile', '$interpolate', 'Attr2MapOptions', 'NgMap', 'escapeRegexpFilter'];
	
	  angular.module('ngMap').directive('customMarker', customMarkerDirective);
	})();
	
	/**
	 * @ngdoc directive
	 * @name directions
	 * @description
	 *   Enable directions on map.
	 *   e.g., origin, destination, draggable, waypoints, etc
	 *
	 *   Requires:  map directive
	 *
	 *   Restrict To:  Element
	 *
	 * @attr {String} DirectionsRendererOptions
	 *   [Any DirectionsRendererOptions](https://developers.google.com/maps/documentation/javascript/reference#DirectionsRendererOptions)
	 * @attr {String} DirectionsRequestOptions
	 *   [Any DirectionsRequest options](https://developers.google.com/maps/documentation/javascript/reference#DirectionsRequest)
	 * @example
	 *  <map zoom="14" center="37.7699298, -122.4469157">
	 *    <directions
	 *      draggable="true"
	 *      panel="directions-panel"
	 *      travel-mode="{{travelMode}}"
	 *      waypoints="[{location:'kingston', stopover:true}]"
	 *      origin="{{origin}}"
	 *      destination="{{destination}}">
	 *    </directions>
	 *  </map>
	 */
	/* global document */
	(function() {
	  'use strict';
	  var NgMap, $timeout, NavigatorGeolocation;
	
	  var getDirectionsRenderer = function(options, events) {
	    if (options.panel) {
	      options.panel = document.getElementById(options.panel) ||
	        document.querySelector(options.panel);
	    }
	    var renderer = new google.maps.DirectionsRenderer(options);
	    for (var eventName in events) {
	      google.maps.event.addListener(renderer, eventName, events[eventName]);
	    }
	    return renderer;
	  };
	
	  var updateRoute = function(renderer, options) {
	    var directionsService = new google.maps.DirectionsService();
	
	    /* filter out valid keys only for DirectionsRequest object*/
	    var request = options;
	    request.travelMode = request.travelMode || 'DRIVING';
	    var validKeys = [
	      'origin', 'destination', 'travelMode', 'transitOptions', 'unitSystem',
	      'durationInTraffic', 'waypoints', 'optimizeWaypoints', 
	      'provideRouteAlternatives', 'avoidHighways', 'avoidTolls', 'region'
	    ];
	    for(var key in request){
	      (validKeys.indexOf(key) === -1) && (delete request[key]);
	    }
	
	    if(request.waypoints) {
	      // Check fo valid values
	      if(request.waypoints == "[]" || request.waypoints === "") {
	        delete request.waypoints;
	      }
	    }
	
	    var showDirections = function(request) {
	      directionsService.route(request, function(response, status) {
	        if (status == google.maps.DirectionsStatus.OK) {
	          $timeout(function() {
	            renderer.setDirections(response);
	          });
	        }
	      });
	    };
	
	    if (request.origin && request.destination) {
	      if (request.origin == 'current-location') {
	        NavigatorGeolocation.getCurrentPosition().then(function(ll) {
	          request.origin = new google.maps.LatLng(ll.coords.latitude, ll.coords.longitude);
	          showDirections(request);
	        });
	      } else if (request.destination == 'current-location') {
	        NavigatorGeolocation.getCurrentPosition().then(function(ll) {
	          request.destination = new google.maps.LatLng(ll.coords.latitude, ll.coords.longitude);
	          showDirections(request);
	        });
	      } else {
	        showDirections(request);
	      }
	    }
	  };
	
	  var directions = function(
	      Attr2MapOptions, _$timeout_, _NavigatorGeolocation_, _NgMap_) {
	    var parser = Attr2MapOptions;
	    NgMap = _NgMap_;
	    $timeout = _$timeout_;
	    NavigatorGeolocation = _NavigatorGeolocation_;
	
	    var linkFunc = function(scope, element, attrs, mapController) {
	      mapController = mapController[0]||mapController[1];
	
	      var orgAttrs = parser.orgAttributes(element);
	      var filtered = parser.filter(attrs);
	      var options = parser.getOptions(filtered, {scope: scope});
	      var events = parser.getEvents(scope, filtered);
	      var attrsToObserve = parser.getAttrsToObserve(orgAttrs);
	
	      var renderer = getDirectionsRenderer(options, events);
	      mapController.addObject('directionsRenderers', renderer);
	
	      attrsToObserve.forEach(function(attrName) {
	        (function(attrName) {
	          attrs.$observe(attrName, function(val) {
	            if (attrName == 'panel') {
	              $timeout(function(){
	                var panel =
	                  document.getElementById(val) || document.querySelector(val);
	                void 0;
	                panel && renderer.setPanel(panel);
	              });
	            } else if (options[attrName] !== val) { //apply only if changed
	              var optionValue = parser.toOptionValue(val, {key: attrName});
	              void 0;
	              options[attrName] = optionValue;
	              updateRoute(renderer, options);
	            }
	          });
	        })(attrName);
	      });
	
	      NgMap.getMap().then(function() {
	        updateRoute(renderer, options);
	      });
	      element.bind('$destroy', function() {
	        mapController.deleteObject('directionsRenderers', renderer);
	      });
	    };
	
	    return {
	      restrict: 'E',
	      require: ['?^map','?^ngMap'],
	      link: linkFunc
	    };
	  }; // var directions
	  directions.$inject =
	    ['Attr2MapOptions', '$timeout', 'NavigatorGeolocation', 'NgMap'];
	
	  angular.module('ngMap').directive('directions', directions);
	})();
	
	
	/**
	 * @ngdoc directive
	 * @name drawing-manager
	 * @param Attr2Options {service} convert html attribute to Google map api options
	 * @description
	 *   Requires:  map directive
	 *   Restrict To:  Element
	 *
	 * @example
	 * Example:
	 *
	 *  <map zoom="13" center="37.774546, -122.433523" map-type-id="SATELLITE">
	 *    <drawing-manager
	 *      on-overlaycomplete="onMapOverlayCompleted()"
	 *      position="ControlPosition.TOP_CENTER"
	 *      drawingModes="POLYGON,CIRCLE"
	 *      drawingControl="true"
	 *      circleOptions="fillColor: '#FFFF00';fillOpacity: 1;strokeWeight: 5;clickable: false;zIndex: 1;editable: true;" >
	 *    </drawing-manager>
	 *  </map>
	 *
	 *  TODO: Add remove button.
	 *  currently, for our solution, we have the shapes/markers in our own
	 *  controller, and we use some css classes to change the shape button
	 *  to a remove button (<div>X</div>) and have the remove operation in our own controller.
	 */
	(function() {
	  'use strict';
	  angular.module('ngMap').directive('drawingManager', [
	    'Attr2MapOptions', function(Attr2MapOptions) {
	    var parser = Attr2MapOptions;
	
	    return {
	      restrict: 'E',
	      require: ['?^map','?^ngMap'],
	
	      link: function(scope, element, attrs, mapController) {
	        mapController = mapController[0]||mapController[1];
	
	        var filtered = parser.filter(attrs);
	        var options = parser.getOptions(filtered, {scope: scope});
	        var controlOptions = parser.getControlOptions(filtered);
	        var events = parser.getEvents(scope, filtered);
	
	        /**
	         * set options
	         */
	        var drawingManager = new google.maps.drawing.DrawingManager({
	          drawingMode: options.drawingmode,
	          drawingControl: options.drawingcontrol,
	          drawingControlOptions: controlOptions.drawingControlOptions,
	          circleOptions:options.circleoptions,
	          markerOptions:options.markeroptions,
	          polygonOptions:options.polygonoptions,
	          polylineOptions:options.polylineoptions,
	          rectangleOptions:options.rectangleoptions
	        });
	
	        //Observers
	        attrs.$observe('drawingControlOptions', function (newValue) {
	          drawingManager.drawingControlOptions = parser.getControlOptions({drawingControlOptions: newValue}).drawingControlOptions;
	          drawingManager.setDrawingMode(null);
	          drawingManager.setMap(mapController.map);
	        });
	
	
	        /**
	         * set events
	         */
	        for (var eventName in events) {
	          google.maps.event.addListener(drawingManager, eventName, events[eventName]);
	        }
	
	        mapController.addObject('mapDrawingManager', drawingManager);
	
	        element.bind('$destroy', function() {
	          mapController.deleteObject('mapDrawingManager', drawingManager);
	        });
	      }
	    }; // return
	  }]);
	})();
	
	/**
	 * @ngdoc directive
	 * @name dynamic-maps-engine-layer
	 * @description
	 *   Requires:  map directive
	 *   Restrict To:  Element
	 *
	 * @example
	 * Example:
	 *   <map zoom="14" center="[59.322506, 18.010025]">
	 *     <dynamic-maps-engine-layer
	 *       layer-id="06673056454046135537-08896501997766553811">
	 *     </dynamic-maps-engine-layer>
	 *    </map>
	 */
	(function() {
	  'use strict';
	
	  angular.module('ngMap').directive('dynamicMapsEngineLayer', [
	    'Attr2MapOptions', function(Attr2MapOptions) {
	    var parser = Attr2MapOptions;
	
	    var getDynamicMapsEngineLayer = function(options, events) {
	      var layer = new google.maps.visualization.DynamicMapsEngineLayer(options);
	
	      for (var eventName in events) {
	        google.maps.event.addListener(layer, eventName, events[eventName]);
	      }
	
	      return layer;
	    };
	
	    return {
	      restrict: 'E',
	      require: ['?^map','?^ngMap'],
	
	      link: function(scope, element, attrs, mapController) {
	        mapController = mapController[0]||mapController[1];
	
	        var filtered = parser.filter(attrs);
	        var options = parser.getOptions(filtered, {scope: scope});
	        var events = parser.getEvents(scope, filtered, events);
	
	        var layer = getDynamicMapsEngineLayer(options, events);
	        mapController.addObject('mapsEngineLayers', layer);
	      }
	     }; // return
	  }]);
	})();
	
	/**
	 * @ngdoc directive
	 * @name fusion-tables-layer
	 * @description
	 *   Requires:  map directive
	 *   Restrict To:  Element
	 *
	 * @example
	 * Example:
	 *   <map zoom="11" center="41.850033, -87.6500523">
	 *     <fusion-tables-layer query="{
	 *       select: 'Geocodable address',
	 *       from: '1mZ53Z70NsChnBMm-qEYmSDOvLXgrreLTkQUvvg'}">
	 *     </fusion-tables-layer>
	 *   </map>
	 */
	(function() {
	  'use strict';
	
	  angular.module('ngMap').directive('fusionTablesLayer', [
	    'Attr2MapOptions', function(Attr2MapOptions) {
	    var parser = Attr2MapOptions;
	
	    var getLayer = function(options, events) {
	      var layer = new google.maps.FusionTablesLayer(options);
	
	      for (var eventName in events) {
	        google.maps.event.addListener(layer, eventName, events[eventName]);
	      }
	
	      return layer;
	    };
	
	    return {
	      restrict: 'E',
	      require: ['?^map','?^ngMap'],
	
	      link: function(scope, element, attrs, mapController) {
	        mapController = mapController[0]||mapController[1];
	
	        var filtered = parser.filter(attrs);
	        var options = parser.getOptions(filtered, {scope: scope});
	        var events = parser.getEvents(scope, filtered, events);
	        void 0;
	
	        var layer = getLayer(options, events);
	        mapController.addObject('fusionTablesLayers', layer);
	        element.bind('$destroy', function() {
	          mapController.deleteObject('fusionTablesLayers', layer);
	        });
	      }
	     }; // return
	  }]);
	})();
	
	/**
	 * @ngdoc directive
	 * @name heatmap-layer
	 * @param Attr2Options {service} convert html attribute to Google map api options
	 * @description
	 *   Requires:  map directive
	 *   Restrict To:  Element
	 *
	 * @example
	 *
	 * <map zoom="11" center="[41.875696,-87.624207]">
	 *   <heatmap-layer data="taxiData"></heatmap-layer>
	 * </map>
	 */
	(function() {
	  'use strict';
	
	  angular.module('ngMap').directive('heatmapLayer', [
	    'Attr2MapOptions', '$window', function(Attr2MapOptions, $window) {
	    var parser = Attr2MapOptions;
	    return {
	      restrict: 'E',
	      require: ['?^map','?^ngMap'],
	
	      link: function(scope, element, attrs, mapController) {
	        mapController = mapController[0]||mapController[1];
	
	        var filtered = parser.filter(attrs);
	
	        /**
	         * set options
	         */
	        var options = parser.getOptions(filtered, {scope: scope});
	        options.data = $window[attrs.data] || scope[attrs.data];
	        if (options.data instanceof Array) {
	          options.data = new google.maps.MVCArray(options.data);
	        } else {
	          throw "invalid heatmap data";
	        }
	        var layer = new google.maps.visualization.HeatmapLayer(options);
	
	        /**
	         * set events
	         */
	        var events = parser.getEvents(scope, filtered);
	        void 0;
	
	        mapController.addObject('heatmapLayers', layer);
	      }
	     }; // return
	  }]);
	})();
	
	/**
	 * @ngdoc directive
	 * @name info-window
	 * @param Attr2MapOptions {service}
	 *   convert html attribute to Google map api options
	 * @param $compile {service} $compile service
	 * @description
	 *  Defines infoWindow and provides compile method
	 *
	 *  Requires:  map directive
	 *
	 *  Restrict To:  Element
	 *
	 *  NOTE: this directive should **NOT** be used with `ng-repeat`
	 *  because InfoWindow itself is a template, and a template must be
	 *  reused by each marker, thus, should not be redefined repeatedly
	 *  by `ng-repeat`.
	 *
	 * @attr {Boolean} visible
	 *   Indicates to show it when map is initialized
	 * @attr {Boolean} visible-on-marker
	 *   Indicates to show it on a marker when map is initialized
	 * @attr {Expression} geo-callback
	 *   if position is an address, the expression is will be performed
	 *   when geo-lookup is successful. e.g., geo-callback="showDetail()"
	 * @attr {String} &lt;InfoWindowOption> Any InfoWindow options,
	 *   https://developers.google.com/maps/documentation/javascript/reference?csw=1#InfoWindowOptions
	 * @attr {String} &lt;InfoWindowEvent> Any InfoWindow events,
	 *   https://developers.google.com/maps/documentation/javascript/reference
	 * @example
	 * Usage:
	 *   <map MAP_ATTRIBUTES>
	 *    <info-window id="foo" ANY_OPTIONS ANY_EVENTS"></info-window>
	 *   </map>
	 *
	 * Example:
	 *  <map center="41.850033,-87.6500523" zoom="3">
	 *    <info-window id="1" position="41.850033,-87.6500523" >
	 *      <div ng-non-bindable>
	 *        Chicago, IL<br/>
	 *        LatLng: {{chicago.lat()}}, {{chicago.lng()}}, <br/>
	 *        World Coordinate: {{worldCoordinate.x}}, {{worldCoordinate.y}}, <br/>
	 *        Pixel Coordinate: {{pixelCoordinate.x}}, {{pixelCoordinate.y}}, <br/>
	 *        Tile Coordinate: {{tileCoordinate.x}}, {{tileCoordinate.y}} at Zoom Level {{map.getZoom()}}
	 *      </div>
	 *    </info-window>
	 *  </map>
	 */
	/* global google */
	(function() {
	  'use strict';
	
	  var infoWindow = function(Attr2MapOptions, $compile, $q, $templateRequest, $timeout, $parse, NgMap)  {
	    var parser = Attr2MapOptions;
	
	    var getInfoWindow = function(options, events, element) {
	      var infoWindow;
	
	      /**
	       * set options
	       */
	      if (options.position && !(options.position instanceof google.maps.LatLng)) {
	        delete options.position;
	      }
	      infoWindow = new google.maps.InfoWindow(options);
	
	      /**
	       * set events
	       */
	      for (var eventName in events) {
	        if (eventName) {
	          google.maps.event.addListener(infoWindow, eventName, events[eventName]);
	        }
	      }
	
	      /**
	       * set template and template-related functions
	       * it must have a container element with ng-non-bindable
	       */
	      var templatePromise = $q(function(resolve) {
	        if (angular.isString(element)) {
	          $templateRequest(element).then(function (requestedTemplate) {
	            resolve(angular.element(requestedTemplate).wrap('<div>').parent());
	          }, function(message) {
	            throw "info-window template request failed: " + message;
	          });
	        }
	        else {
	          resolve(element);
	        }
	      }).then(function(resolvedTemplate) {
	        var template = resolvedTemplate.html().trim();
	        if (angular.element(template).length != 1) {
	          throw "info-window working as a template must have a container";
	        }
	        infoWindow.__template = template.replace(/\s?ng-non-bindable[='"]+/,"");
	      });
	
	      infoWindow.__open = function(map, scope, anchor) {
	        templatePromise.then(function() {
	          $timeout(function() {
	            anchor && (scope.anchor = anchor);
	            var el = $compile(infoWindow.__template)(scope);
	            infoWindow.setContent(el[0]);
	            scope.$apply();
	            if (anchor && anchor.getPosition) {
	              infoWindow.open(map, anchor);
	            } else if (anchor && anchor instanceof google.maps.LatLng) {
	              infoWindow.open(map);
	              infoWindow.setPosition(anchor);
	            } else {
	              infoWindow.open(map);
	            }
	            var infoWindowContainerEl = infoWindow.content.parentElement.parentElement.parentElement;
	            infoWindowContainerEl.className = "ng-map-info-window";
	          });
	        });
	      };
	
	      return infoWindow;
	    };
	
	    var linkFunc = function(scope, element, attrs, mapController) {
	      mapController = mapController[0]||mapController[1];
	
	      element.css('display','none');
	
	      var orgAttrs = parser.orgAttributes(element);
	      var filtered = parser.filter(attrs);
	      var options = parser.getOptions(filtered, {scope: scope});
	      var events = parser.getEvents(scope, filtered);
	
	      var infoWindow = getInfoWindow(options, events, options.template || element);
	      var address;
	      if (options.position && !(options.position instanceof google.maps.LatLng)) {
	        address = options.position;
	      }
	      if (address) {
	        NgMap.getGeoLocation(address).then(function(latlng) {
	          infoWindow.setPosition(latlng);
	          infoWindow.__open(mapController.map, scope, latlng);
	          var geoCallback = attrs.geoCallback;
	          geoCallback && $parse(geoCallback)(scope);
	        });
	      }
	
	      mapController.addObject('infoWindows', infoWindow);
	      mapController.observeAttrSetObj(orgAttrs, attrs, infoWindow);
	
	      mapController.showInfoWindow =
	      mapController.map.showInfoWindow = mapController.showInfoWindow ||
	        function(p1, p2, p3) { //event, id, marker
	          var id = typeof p1 == 'string' ? p1 : p2;
	          var marker = typeof p1 == 'string' ? p2 : p3;
	          if (typeof marker == 'string') {
	            //Check if markers if defined to avoid odd 'undefined' errors
	            if (
	              typeof mapController.map.markers != "undefined"
	              && typeof mapController.map.markers[marker] != "undefined") {
	                marker = mapController.map.markers[marker];
	            } else if (
	              //additionally check if that marker is a custom marker
	              typeof mapController.map.customMarkers !== "undefined"
	              && typeof mapController.map.customMarkers[marker] !== "undefined") {
	                marker = mapController.map.customMarkers[marker];
	            } else {
	              //Better error output if marker with that id is not defined
	              throw new Error("Cant open info window for id " + marker + ". Marker or CustomMarker is not defined")
	            }
	          }
	
	          var infoWindow = mapController.map.infoWindows[id];
	          var anchor = marker ? marker : (this.getPosition ? this : null);
	          infoWindow.__open(mapController.map, scope, anchor);
	          if(mapController.singleInfoWindow) {
	            if(mapController.lastInfoWindow) {
	              scope.hideInfoWindow(mapController.lastInfoWindow);
	            }
	            mapController.lastInfoWindow = id;
	          }
	        };
	
	      mapController.hideInfoWindow =
	      mapController.map.hideInfoWindow = mapController.hideInfoWindow ||
	        function(p1, p2) {
	          var id = typeof p1 == 'string' ? p1 : p2;
	          var infoWindow = mapController.map.infoWindows[id];
	          infoWindow.close();
	        };
	
	      //TODO DEPRECATED
	      scope.showInfoWindow = mapController.map.showInfoWindow;
	      scope.hideInfoWindow = mapController.map.hideInfoWindow;
	
	      var map = infoWindow.mapId ? {id:infoWindow.mapId} : 0;
	      NgMap.getMap(map).then(function(map) {
	        infoWindow.visible && infoWindow.__open(map, scope);
	        if (infoWindow.visibleOnMarker) {
	          var markerId = infoWindow.visibleOnMarker;
	          infoWindow.__open(map, scope, map.markers[markerId]);
	        }
	      });
	
	    }; //link
	
	    return {
	      restrict: 'E',
	      require: ['?^map','?^ngMap'],
	      link: linkFunc
	    };
	
	  }; // infoWindow
	  infoWindow.$inject =
	    ['Attr2MapOptions', '$compile', '$q', '$templateRequest', '$timeout', '$parse', 'NgMap'];
	
	  angular.module('ngMap').directive('infoWindow', infoWindow);
	})();
	
	/**
	 * @ngdoc directive
	 * @name kml-layer
	 * @param Attr2MapOptions {service} convert html attribute to Google map api options
	 * @description
	 *   renders Kml layer on a map
	 *   Requires:  map directive
	 *   Restrict To:  Element
	 *
	 * @attr {Url} url url of the kml layer
	 * @attr {KmlLayerOptions} KmlLayerOptions
	 *   (https://developers.google.com/maps/documentation/javascript/reference#KmlLayerOptions) 
	 * @attr {String} &lt;KmlLayerEvent> Any KmlLayer events,
	 *   https://developers.google.com/maps/documentation/javascript/reference
	 * @example
	 * Usage:
	 *   <map MAP_ATTRIBUTES>
	 *    <kml-layer ANY_KML_LAYER ANY_KML_LAYER_EVENTS"></kml-layer>
	 *   </map>
	 *
	 * Example:
	 *
	 * <map zoom="11" center="[41.875696,-87.624207]">
	 *   <kml-layer url="https://gmaps-samples.googlecode.com/svn/trunk/ggeoxml/cta.kml" >
	 *   </kml-layer>
	 * </map>
	 */
	(function() {
	  'use strict';
	
	  angular.module('ngMap').directive('kmlLayer', [
	    'Attr2MapOptions', function(Attr2MapOptions) {
	    var parser = Attr2MapOptions;
	
	    var getKmlLayer = function(options, events) {
	      var kmlLayer = new google.maps.KmlLayer(options);
	      for (var eventName in events) {
	        google.maps.event.addListener(kmlLayer, eventName, events[eventName]);
	      }
	      return kmlLayer;
	    };
	
	    return {
	      restrict: 'E',
	      require: ['?^map','?^ngMap'],
	
	      link: function(scope, element, attrs, mapController) {
	        mapController = mapController[0]||mapController[1];
	
	        var orgAttrs = parser.orgAttributes(element);
	        var filtered = parser.filter(attrs);
	        var options = parser.getOptions(filtered, {scope: scope});
	        var events = parser.getEvents(scope, filtered);
	        void 0;
	
	        var kmlLayer = getKmlLayer(options, events);
	        mapController.addObject('kmlLayers', kmlLayer);
	        mapController.observeAttrSetObj(orgAttrs, attrs, kmlLayer);  //observers
	        element.bind('$destroy', function() {
	          mapController.deleteObject('kmlLayers', kmlLayer);
	        });
	      }
	     }; // return
	  }]);
	})();
	
	/**
	 * @ngdoc directive
	 * @name map-data
	 * @param Attr2MapOptions {service}
	 *   convert html attribute to Google map api options
	 * @description
	 *   set map data
	 *   Requires:  map directive
	 *   Restrict To:  Element
	 *
	 * @wn {String} method-name, run map.data[method-name] with attribute value
	 * @example
	 * Example:
	 *
	 *  <map zoom="11" center="[41.875696,-87.624207]">
	 *    <map-data load-geo-json="https://storage.googleapis.com/maps-devrel/google.json"></map-data>
	 *   </map>
	 */
	(function() {
	  'use strict';
	
	  angular.module('ngMap').directive('mapData', [
	    'Attr2MapOptions', 'NgMap', function(Attr2MapOptions, NgMap) {
	    var parser = Attr2MapOptions;
	    return {
	      restrict: 'E',
	      require: ['?^map','?^ngMap'],
	
	      link: function(scope, element, attrs, mapController) {
	        mapController = mapController[0] || mapController[1];
	        var filtered = parser.filter(attrs);
	        var options = parser.getOptions(filtered, {scope: scope});
	        var events = parser.getEvents(scope, filtered, events);
	
	        void 0;
	        NgMap.getMap(mapController.map.id).then(function(map) {
	          //options
	          for (var key in options) {
	            var val = options[key];
	            if (typeof scope[val] === "function") {
	              map.data[key](scope[val]);
	            } else {
	              map.data[key](val);
	            }
	          }
	
	          //events
	          for (var eventName in events) {
	            map.data.addListener(eventName, events[eventName]);
	          }
	        });
	      }
	     }; // return
	  }]);
	})();
	
	/**
	 * @ngdoc directive
	 * @name map-lazy-load
	 * @param Attr2Options {service} convert html attribute to Google map api options
	 * @description
	 *  Requires: Delay the initialization of map directive
	 *    until the map is ready to be rendered
	 *  Restrict To: Attribute
	 *
	 * @attr {String} map-lazy-load
	 *    Maps api script source file location.
	 *    Example:
	 *      'https://maps.google.com/maps/api/js'
	 * @attr {String} map-lazy-load-params
	 *   Maps api script source file location via angular scope variable.
	 *   Also requires the map-lazy-load attribute to be present in the directive.
	 *   Example: In your controller, set
	 *     $scope.googleMapsURL = 'https://maps.google.com/maps/api/js?v=3.20&client=XXXXXenter-api-key-hereXXXX'
	 *
	 * @example
	 * Example:
	 *
	 *   <div map-lazy-load="http://maps.google.com/maps/api/js">
	 *     <map center="Brampton" zoom="10">
	 *       <marker position="Brampton"></marker>
	 *     </map>
	 *   </div>
	 *
	 *   <div map-lazy-load="http://maps.google.com/maps/api/js"
	 *        map-lazy-load-params="{{googleMapsUrl}}">
	 *     <map center="Brampton" zoom="10">
	 *       <marker position="Brampton"></marker>
	 *     </map>
	 *   </div>
	 */
	/* global window, document */
	(function() {
	  'use strict';
	  var $timeout, $compile, src, savedHtml = [], elements = [];
	
	  var preLinkFunc = function(scope, element, attrs) {
	    var mapsUrl = attrs.mapLazyLoadParams || attrs.mapLazyLoad;
	
	    if(window.google === undefined || window.google.maps === undefined) {
	      elements.push({
	        scope: scope,
	        element: element,
	        savedHtml: savedHtml[elements.length],
	      });
	
	      window.lazyLoadCallback = function() {
	        void 0;
	        $timeout(function() { /* give some time to load */
	          elements.forEach(function(elm) {
	              elm.element.html(elm.savedHtml);
	              $compile(elm.element.contents())(elm.scope);
	          });
	        }, 100);
	      };
	
	      var scriptEl = document.createElement('script');
	      void 0;
	
	      scriptEl.src = mapsUrl +
	        (mapsUrl.indexOf('?') > -1 ? '&' : '?') +
	        'callback=lazyLoadCallback';
	
	        if (!document.querySelector('script[src="' + scriptEl.src + '"]')) {
	          document.body.appendChild(scriptEl);
	        }
	    } else {
	      element.html(savedHtml);
	      $compile(element.contents())(scope);
	    }
	  };
	
	  var compileFunc = function(tElement, tAttrs) {
	
	    (!tAttrs.mapLazyLoad) && void 0;
	    savedHtml.push(tElement.html());
	    src = tAttrs.mapLazyLoad;
	
	    /**
	     * if already loaded, stop processing it
	     */
	    if(window.google !== undefined && window.google.maps !== undefined) {
	      return false;
	    }
	
	    tElement.html('');  // will compile again after script is loaded
	
	    return {
	      pre: preLinkFunc
	    };
	  };
	
	  var mapLazyLoad = function(_$compile_, _$timeout_) {
	    $compile = _$compile_, $timeout = _$timeout_;
	    return {
	      compile: compileFunc
	    };
	  };
	  mapLazyLoad.$inject = ['$compile','$timeout'];
	
	  angular.module('ngMap').directive('mapLazyLoad', mapLazyLoad);
	})();
	
	/**
	 * @ngdoc directive
	 * @name map-type
	 * @param Attr2MapOptions {service} 
	 *   convert html attribute to Google map api options
	 * @description
	 *   Requires:  map directive
	 *   Restrict To:  Element
	 *
	 * @example
	 * Example:
	 *
	 *   <map zoom="13" center="34.04924594193164, -118.24104309082031">
	 *     <map-type name="coordinate" object="coordinateMapType"></map-type>
	 *   </map>
	 */
	(function() {
	  'use strict';
	
	  angular.module('ngMap').directive('mapType', ['$parse', 'NgMap',
	    function($parse, NgMap) {
	
	    return {
	      restrict: 'E',
	      require: ['?^map','?^ngMap'],
	
	      link: function(scope, element, attrs, mapController) {
	        mapController = mapController[0]||mapController[1];
	
	        var mapTypeName = attrs.name, mapTypeObject;
	        if (!mapTypeName) {
	          throw "invalid map-type name";
	        }
	        mapTypeObject = $parse(attrs.object)(scope);
	        if (!mapTypeObject) {
	          throw "invalid map-type object";
	        }
	
	        NgMap.getMap().then(function(map) {
	          map.mapTypes.set(mapTypeName, mapTypeObject);
	        });
	        mapController.addObject('mapTypes', mapTypeObject);
	      }
	     }; // return
	  }]);
	})();
	
	/**
	 * @ngdoc directive
	 * @memberof ngMap
	 * @name ng-map
	 * @param Attr2Options {service}
	 *  convert html attribute to Google map api options
	 * @description
	 * Implementation of {@link __MapController}
	 * Initialize a Google map within a `<div>` tag
	 *   with given options and register events
	 *
	 * @attr {Expression} map-initialized
	 *   callback function when map is initialized
	 *   e.g., map-initialized="mycallback(map)"
	 * @attr {Expression} geo-callback if center is an address or current location,
	 *   the expression is will be executed when geo-lookup is successful.
	 *   e.g., geo-callback="showMyStoreInfo()"
	 * @attr {Array} geo-fallback-center
	 *   The center of map incase geolocation failed. i.e. [0,0]
	 * @attr {Object} geo-location-options
	 *  The navigator geolocation options.
	 *  e.g., { maximumAge: 3000, timeout: 5000, enableHighAccuracy: true }.
	 *  If none specified, { timeout: 5000 }.
	 *  If timeout not specified, timeout: 5000 added
	 * @attr {Boolean} zoom-to-include-markers
	 *  When true, map boundary will be changed automatially
	 *  to include all markers when initialized
	 * @attr {Boolean} default-style
	 *  When false, the default styling,
	 *  `display:block;height:300px`, will be ignored.
	 * @attr {String} &lt;MapOption> Any Google map options,
	 *  https://developers.google.com/maps/documentation/javascript/reference?csw=1#MapOptions
	 * @attr {String} &lt;MapEvent> Any Google map events,
	 *  https://rawgit.com/allenhwkim/angularjs-google-maps/master/build/map_events.html
	 * @attr {Boolean} single-info-window
	 *  When true the map will only display one info window at the time,
	 *  if not set or false,
	 *  everytime an info window is open it will be displayed with the othe one.
	 * @attr {Boolean} trigger-resize
	 *  Default to false.  Set to true to trigger resize of the map.  Needs to be done anytime you resize the map
	 * @example
	 * Usage:
	 *   <map MAP_OPTIONS_OR_MAP_EVENTS ..>
	 *     ... Any children directives
	 *   </map>
	 *
	 * Example:
	 *   <map center="[40.74, -74.18]" on-click="doThat()">
	 *   </map>
	 *
	 *   <map geo-fallback-center="[40.74, -74.18]" zoom-to-inlude-markers="true">
	 *   </map>
	 */
	(function () {
	  'use strict';
	
	  var mapDirective = function () {
	    return {
	      restrict: 'AE',
	      controller: '__MapController',
	      controllerAs: 'ngmap'
	    };
	  };
	
	  angular.module('ngMap').directive('map', [mapDirective]);
	  angular.module('ngMap').directive('ngMap', [mapDirective]);
	})();
	
	/**
	 * @ngdoc directive
	 * @name maps-engine-layer
	 * @description
	 *   Requires:  map directive
	 *   Restrict To:  Element
	 *
	 * @example
	 * Example:
	 *  <map zoom="14" center="[59.322506, 18.010025]">
	 *    <maps-engine-layer layer-id="06673056454046135537-08896501997766553811">
	 *    </maps-engine-layer>
	 *  </map>
	 */
	(function() {
	  'use strict';
	
	  angular.module('ngMap').directive('mapsEngineLayer', ['Attr2MapOptions', function(Attr2MapOptions) {
	    var parser = Attr2MapOptions;
	
	    var getMapsEngineLayer = function(options, events) {
	      var layer = new google.maps.visualization.MapsEngineLayer(options);
	
	      for (var eventName in events) {
	        google.maps.event.addListener(layer, eventName, events[eventName]);
	      }
	
	      return layer;
	    };
	
	    return {
	      restrict: 'E',
	      require: ['?^map','?^ngMap'],
	
	      link: function(scope, element, attrs, mapController) {
	        mapController = mapController[0]||mapController[1];
	
	        var filtered = parser.filter(attrs);
	        var options = parser.getOptions(filtered, {scope: scope});
	        var events = parser.getEvents(scope, filtered, events);
	        void 0;
	
	        var layer = getMapsEngineLayer(options, events);
	        mapController.addObject('mapsEngineLayers', layer);
	      }
	     }; // return
	  }]);
	})();
	
	/**
	 * @ngdoc directive
	 * @name marker
	 * @param Attr2Options {service} convert html attribute to Google map api options
	 * @param NavigatorGeolocation It is used to find the current location
	 * @description
	 *  Draw a Google map marker on a map with given options and register events
	 *
	 *  Requires:  map directive
	 *
	 *  Restrict To:  Element
	 *
	 * @attr {String} position address, 'current', or [latitude, longitude]
	 *  example:
	 *    '1600 Pennsylvania Ave, 20500  Washingtion DC',
	 *    'current position',
	 *    '[40.74, -74.18]'
	 * @attr {Boolean} centered if set, map will be centered with this marker
	 * @attr {Expression} geo-callback if position is an address,
	 *   the expression is will be performed when geo-lookup is successful.
	 *   e.g., geo-callback="showStoreInfo()"
	 * @attr {Boolean} no-watcher if true, no attribute observer is added.
	 *   Useful for many ng-repeat
	 * @attr {String} &lt;MarkerOption>
	 *   [Any Marker options](https://developers.google.com/maps/documentation/javascript/reference?csw=1#MarkerOptions)
	 * @attr {String} &lt;MapEvent>
	 *   [Any Marker events](https://developers.google.com/maps/documentation/javascript/reference)
	 * @example
	 * Usage:
	 *   <map MAP_ATTRIBUTES>
	 *    <marker ANY_MARKER_OPTIONS ANY_MARKER_EVENTS"></MARKER>
	 *   </map>
	 *
	 * Example:
	 *   <map center="[40.74, -74.18]">
	 *    <marker position="[40.74, -74.18]" on-click="myfunc()"></div>
	 *   </map>
	 *
	 *   <map center="the cn tower">
	 *    <marker position="the cn tower" on-click="myfunc()"></div>
	 *   </map>
	 */
	/* global google */
	(function() {
	  'use strict';
	  var parser, $parse, NgMap;
	
	  var getMarker = function(options, events) {
	    var marker;
	
	    if (NgMap.defaultOptions.marker) {
	      for (var key in NgMap.defaultOptions.marker) {
	        if (typeof options[key] == 'undefined') {
	          void 0;
	          options[key] = NgMap.defaultOptions.marker[key];
	        }
	      }
	    }
	
	    if (!(options.position instanceof google.maps.LatLng)) {
	      options.position = new google.maps.LatLng(0,0);
	    }
	    marker = new google.maps.Marker(options);
	
	    /**
	     * set events
	     */
	    if (Object.keys(events).length > 0) {
	      void 0;
	    }
	    for (var eventName in events) {
	      if (eventName) {
	        google.maps.event.addListener(marker, eventName, events[eventName]);
	      }
	    }
	
	    return marker;
	  };
	
	  var linkFunc = function(scope, element, attrs, mapController) {
	    mapController = mapController[0]||mapController[1];
	
	    var orgAttrs = parser.orgAttributes(element);
	    var filtered = parser.filter(attrs);
	    var markerOptions = parser.getOptions(filtered, scope, {scope: scope});
	    var markerEvents = parser.getEvents(scope, filtered);
	    void 0;
	
	    var address;
	    if (!(markerOptions.position instanceof google.maps.LatLng)) {
	      address = markerOptions.position;
	    }
	    var marker = getMarker(markerOptions, markerEvents);
	    mapController.addObject('markers', marker);
	    if (address) {
	      NgMap.getGeoLocation(address).then(function(latlng) {
	        marker.setPosition(latlng);
	        markerOptions.centered && marker.map.setCenter(latlng);
	        var geoCallback = attrs.geoCallback;
	        geoCallback && $parse(geoCallback)(scope);
	      });
	    }
	
	    //set observers
	    mapController.observeAttrSetObj(orgAttrs, attrs, marker); /* observers */
	
	    element.bind('$destroy', function() {
	      mapController.deleteObject('markers', marker);
	    });
	  };
	
	  var marker = function(Attr2MapOptions, _$parse_, _NgMap_) {
	    parser = Attr2MapOptions;
	    $parse = _$parse_;
	    NgMap = _NgMap_;
	
	    return {
	      restrict: 'E',
	      require: ['^?map','?^ngMap'],
	      link: linkFunc
	    };
	  };
	
	  marker.$inject = ['Attr2MapOptions', '$parse', 'NgMap'];
	  angular.module('ngMap').directive('marker', marker);
	
	})();
	
	/**
	 * @ngdoc directive
	 * @name overlay-map-type
	 * @param Attr2MapOptions {service} convert html attribute to Google map api options
	 * @param $window {service}
	 * @description
	 *   Requires:  map directive
	 *   Restrict To:  Element
	 *
	 * @example
	 * Example:
	 *
	 * <map zoom="13" center="34.04924594193164, -118.24104309082031">
	 *   <overlay-map-type index="0" object="coordinateMapType"></map-type>
	 * </map>
	 */
	(function() {
	  'use strict';
	
	  angular.module('ngMap').directive('overlayMapType', [
	    'NgMap', function(NgMap) {
	
	    return {
	      restrict: 'E',
	      require: ['?^map','?^ngMap'],
	
	      link: function(scope, element, attrs, mapController) {
	        mapController = mapController[0]||mapController[1];
	
	        var initMethod = attrs.initMethod || "insertAt";
	        var overlayMapTypeObject = scope[attrs.object];
	
	        NgMap.getMap().then(function(map) {
	          if (initMethod == "insertAt") {
	            var index = parseInt(attrs.index, 10);
	            map.overlayMapTypes.insertAt(index, overlayMapTypeObject);
	          } else if (initMethod == "push") {
	            map.overlayMapTypes.push(overlayMapTypeObject);
	          }
	        });
	        mapController.addObject('overlayMapTypes', overlayMapTypeObject);
	      }
	     }; // return
	  }]);
	})();
	
	/**
	 * @ngdoc directive
	 * @name places-auto-complete
	 * @param Attr2MapOptions {service} convert html attribute to Google map api options
	 * @description
	 *   Provides address auto complete feature to an input element
	 *   Requires: input tag
	 *   Restrict To: Attribute
	 *
	 * @attr {AutoCompleteOptions}
	 *   [Any AutocompleteOptions](https://developers.google.com/maps/documentation/javascript/3.exp/reference#AutocompleteOptions)
	 *
	 * @example
	 * Example:
	 *   <script src="https://maps.googleapis.com/maps/api/js?libraries=places"></script>
	 *   <input places-auto-complete types="['geocode']" on-place-changed="myCallback(place)" component-restrictions="{country:'au'}"/>
	 */
	/* global google */
	(function() {
	  'use strict';
	
	  var placesAutoComplete = function(Attr2MapOptions, $timeout) {
	    var parser = Attr2MapOptions;
	
	    var linkFunc = function(scope, element, attrs, ngModelCtrl) {
	      if (attrs.placesAutoComplete ==='false') {
	        return false;
	      }
	      var filtered = parser.filter(attrs);
	      var options = parser.getOptions(filtered, {scope: scope});
	      var events = parser.getEvents(scope, filtered);
	      var autocomplete = new google.maps.places.Autocomplete(element[0], options);
	      for (var eventName in events) {
	        google.maps.event.addListener(autocomplete, eventName, events[eventName]);
	      }
	
	      var updateModel = function() {
	        $timeout(function(){
	          ngModelCtrl && ngModelCtrl.$setViewValue(element.val());
	        },100);
	      };
	      google.maps.event.addListener(autocomplete, 'place_changed', updateModel);
	      element[0].addEventListener('change', updateModel);
	
	      attrs.$observe('types', function(val) {
	        if (val) {
	          var optionValue = parser.toOptionValue(val, {key: 'types'});
	          autocomplete.setTypes(optionValue);
	        }
	      });
		  
		  attrs.$observe('componentRestrictions', function (val) {
			 if (val) {
			   autocomplete.setComponentRestrictions(scope.$eval(val));
			 }
		   });
	    };
		
	    return {
	      restrict: 'A',
	      require: '?ngModel',
	      link: linkFunc
	    };
	  };
	
	  placesAutoComplete.$inject = ['Attr2MapOptions', '$timeout'];
	  angular.module('ngMap').directive('placesAutoComplete', placesAutoComplete);
	})();
	
	/**
	 * @ngdoc directive
	 * @name shape
	 * @param Attr2MapOptions {service} convert html attribute to Google map api options
	 * @description
	 *   Initialize a Google map shape in map with given options and register events
	 *   The shapes are:
	 *     . circle
	 *     . polygon
	 *     . polyline
	 *     . rectangle
	 *     . groundOverlay(or image)
	 *
	 *   Requires:  map directive
	 *
	 *   Restrict To:  Element
	 *
	 * @attr {Boolean} centered if set, map will be centered with this marker
	 * @attr {Expression} geo-callback if shape is a circle and the center is
	 *   an address, the expression is will be performed when geo-lookup
	 *   is successful. e.g., geo-callback="showDetail()"
	 * @attr {String} &lt;OPTIONS>
	 *   For circle, [any circle options](https://developers.google.com/maps/documentation/javascript/reference#CircleOptions)
	 *   For polygon, [any polygon options](https://developers.google.com/maps/documentation/javascript/reference#PolygonOptions)
	 *   For polyline, [any polyline options](https://developers.google.com/maps/documentation/javascript/reference#PolylineOptions)
	 *   For rectangle, [any rectangle options](https://developers.google.com/maps/documentation/javascript/reference#RectangleOptions)
	 *   For image, [any groundOverlay options](https://developers.google.com/maps/documentation/javascript/reference#GroundOverlayOptions)
	 * @attr {String} &lt;MapEvent> [Any Shape events](https://developers.google.com/maps/documentation/javascript/reference)
	 * @example
	 * Usage:
	 *   <map MAP_ATTRIBUTES>
	 *    <shape name=SHAPE_NAME ANY_SHAPE_OPTIONS ANY_SHAPE_EVENTS"></MARKER>
	 *   </map>
	 *
	 * Example:
	 *
	 *   <map zoom="11" center="[40.74, -74.18]">
	 *     <shape id="polyline" name="polyline" geodesic="true"
	 *       stroke-color="#FF0000" stroke-opacity="1.0" stroke-weight="2"
	 *       path="[[40.74,-74.18],[40.64,-74.10],[40.54,-74.05],[40.44,-74]]" >
	 *     </shape>
	 *   </map>
	 *
	 *   <map zoom="11" center="[40.74, -74.18]">
	 *     <shape id="polygon" name="polygon" stroke-color="#FF0000"
	 *       stroke-opacity="1.0" stroke-weight="2"
	 *       paths="[[40.74,-74.18],[40.64,-74.18],[40.84,-74.08],[40.74,-74.18]]" >
	 *     </shape>
	 *   </map>
	 *
	 *   <map zoom="11" center="[40.74, -74.18]">
	 *     <shape id="rectangle" name="rectangle" stroke-color='#FF0000'
	 *       stroke-opacity="0.8" stroke-weight="2"
	 *       bounds="[[40.74,-74.18], [40.78,-74.14]]" editable="true" >
	 *     </shape>
	 *   </map>
	 *
	 *   <map zoom="11" center="[40.74, -74.18]">
	 *     <shape id="circle" name="circle" stroke-color='#FF0000'
	 *       stroke-opacity="0.8"stroke-weight="2"
	 *       center="[40.70,-74.14]" radius="4000" editable="true" >
	 *     </shape>
	 *   </map>
	 *
	 *   <map zoom="11" center="[40.74, -74.18]">
	 *     <shape id="image" name="image"
	 *       url="https://www.lib.utexas.edu/maps/historical/newark_nj_1922.jpg"
	 *       bounds="[[40.71,-74.22],[40.77,-74.12]]" opacity="0.7"
	 *       clickable="true">
	 *     </shape>
	 *   </map>
	 *
	 *  For full-working example, please visit
	 *    [shape example](https://rawgit.com/allenhwkim/angularjs-google-maps/master/build/shape.html)
	 */
	/* global google */
	(function() {
	  'use strict';
	
	  var getShape = function(options, events) {
	    var shape;
	
	    var shapeName = options.name;
	    delete options.name;  //remove name bcoz it's not for options
	    void 0;
	
	    /**
	     * set options
	     */
	    switch(shapeName) {
	      case "circle":
	        if (!(options.center instanceof google.maps.LatLng)) {
	          options.center = new google.maps.LatLng(0,0);
	        } 
	        shape = new google.maps.Circle(options);
	        break;
	      case "polygon":
	        shape = new google.maps.Polygon(options);
	        break;
	      case "polyline":
	        shape = new google.maps.Polyline(options);
	        break;
	      case "rectangle":
	        shape = new google.maps.Rectangle(options);
	        break;
	      case "groundOverlay":
	      case "image":
	        var url = options.url;
	        var opts = {opacity: options.opacity, clickable: options.clickable, id:options.id};
	        shape = new google.maps.GroundOverlay(url, options.bounds, opts);
	        break;
	    }
	
	    /**
	     * set events
	     */
	    for (var eventName in events) {
	      if (events[eventName]) {
	        google.maps.event.addListener(shape, eventName, events[eventName]);
	      }
	    }
	    return shape;
	  };
	
	  var shape = function(Attr2MapOptions, $parse, NgMap) {
	    var parser = Attr2MapOptions;
	
	    var linkFunc = function(scope, element, attrs, mapController) {
	      mapController = mapController[0]||mapController[1];
	
	      var orgAttrs = parser.orgAttributes(element);
	      var filtered = parser.filter(attrs);
	      var shapeOptions = parser.getOptions(filtered, {scope: scope});
	      var shapeEvents = parser.getEvents(scope, filtered);
	
	      var address, shapeType;
	      shapeType = shapeOptions.name;
	      if (!(shapeOptions.center instanceof google.maps.LatLng)) {
	        address = shapeOptions.center;
	      }
	      var shape = getShape(shapeOptions, shapeEvents);
	      mapController.addObject('shapes', shape);
	
	      if (address && shapeType == 'circle') {
	        NgMap.getGeoLocation(address).then(function(latlng) {
	          shape.setCenter(latlng);
	          shape.centered && shape.map.setCenter(latlng);
	          var geoCallback = attrs.geoCallback;
	          geoCallback && $parse(geoCallback)(scope);
	        });
	      }
	
	      //set observers
	      mapController.observeAttrSetObj(orgAttrs, attrs, shape);
	      element.bind('$destroy', function() {
	        mapController.deleteObject('shapes', shape);
	      });
	    };
	
	    return {
	      restrict: 'E',
	      require: ['?^map','?^ngMap'],
	      link: linkFunc
	     }; // return
	  };
	  shape.$inject = ['Attr2MapOptions', '$parse', 'NgMap'];
	
	  angular.module('ngMap').directive('shape', shape);
	
	})();
	
	/**
	 * @ngdoc directive
	 * @name streetview-panorama
	 * @param Attr2MapOptions {service} convert html attribute to Google map api options
	 * @description
	 *   Requires:  map directive
	 *   Restrict To:  Element
	 *
	 * @attr container Optional, id or css selector, if given, streetview will be in the given html element
	 * @attr {String} &lt;StreetViewPanoramaOption>
	 *   [Any Google StreetViewPanorama options](https://developers.google.com/maps/documentation/javascript/reference?csw=1#StreetViewPanoramaOptions)
	 * @attr {String} &lt;StreetViewPanoramaEvent>
	 *   [Any Google StreetViewPanorama events](https://developers.google.com/maps/documentation/javascript/reference#StreetViewPanorama)
	 *
	 * @example
	 *   <map zoom="11" center="[40.688738,-74.043871]" >
	 *     <street-view-panorama
	 *       click-to-go="true"
	 *       disable-default-ui="true"
	 *       disable-double-click-zoom="true"
	 *       enable-close-button="true"
	 *       pano="my-pano"
	 *       position="40.688738,-74.043871"
	 *       pov="{heading:0, pitch: 90}"
	 *       scrollwheel="false"
	 *       visible="true">
	 *     </street-view-panorama>
	 *   </map>
	 */
	/* global google, document */
	(function() {
	  'use strict';
	
	  var streetViewPanorama = function(Attr2MapOptions, NgMap) {
	    var parser = Attr2MapOptions;
	
	    var getStreetViewPanorama = function(map, options, events) {
	      var svp, container;
	      if (options.container) {
	        container = document.getElementById(options.container);
	        container = container || document.querySelector(options.container);
	      }
	      if (container) {
	        svp = new google.maps.StreetViewPanorama(container, options);
	      } else {
	        svp = map.getStreetView();
	        svp.setOptions(options);
	      }
	
	      for (var eventName in events) {
	        eventName &&
	          google.maps.event.addListener(svp, eventName, events[eventName]);
	      }
	      return svp;
	    };
	
	    var linkFunc = function(scope, element, attrs) {
	      var filtered = parser.filter(attrs);
	      var options = parser.getOptions(filtered, {scope: scope});
	      var controlOptions = parser.getControlOptions(filtered);
	      var svpOptions = angular.extend(options, controlOptions);
	
	      var svpEvents = parser.getEvents(scope, filtered);
	      void 0;
	
	      NgMap.getMap().then(function(map) {
	        var svp = getStreetViewPanorama(map, svpOptions, svpEvents);
	
	        map.setStreetView(svp);
	        (!svp.getPosition()) && svp.setPosition(map.getCenter());
	        google.maps.event.addListener(svp, 'position_changed', function() {
	          if (svp.getPosition() !== map.getCenter()) {
	            map.setCenter(svp.getPosition());
	          }
	        });
	        //needed for geo-callback
	        var listener =
	          google.maps.event.addListener(map, 'center_changed', function() {
	            svp.setPosition(map.getCenter());
	            google.maps.event.removeListener(listener);
	          });
	      });
	
	    }; //link
	
	    return {
	      restrict: 'E',
	      require: ['?^map','?^ngMap'],
	      link: linkFunc
	    };
	
	  };
	  streetViewPanorama.$inject = ['Attr2MapOptions', 'NgMap'];
	
	  angular.module('ngMap').directive('streetViewPanorama', streetViewPanorama);
	})();
	
	/**
	 * @ngdoc directive
	 * @name traffic-layer
	 * @param Attr2MapOptions {service} convert html attribute to Google map api options
	 * @description
	 *   Requires:  map directive
	 *   Restrict To:  Element
	 *
	 * @example
	 * Example:
	 *
	 *   <map zoom="13" center="34.04924594193164, -118.24104309082031">
	 *     <traffic-layer></traffic-layer>
	 *    </map>
	 */
	(function() {
	  'use strict';
	
	  angular.module('ngMap').directive('trafficLayer', [
	    'Attr2MapOptions', function(Attr2MapOptions) {
	    var parser = Attr2MapOptions;
	
	    var getLayer = function(options, events) {
	      var layer = new google.maps.TrafficLayer(options);
	      for (var eventName in events) {
	        google.maps.event.addListener(layer, eventName, events[eventName]);
	      }
	      return layer;
	    };
	
	    return {
	      restrict: 'E',
	      require: ['?^map','?^ngMap'],
	
	      link: function(scope, element, attrs, mapController) {
	        mapController = mapController[0]||mapController[1];
	
	        var orgAttrs = parser.orgAttributes(element);
	        var filtered = parser.filter(attrs);
	        var options = parser.getOptions(filtered, {scope: scope});
	        var events = parser.getEvents(scope, filtered);
	        void 0;
	
	        var layer = getLayer(options, events);
	        mapController.addObject('trafficLayers', layer);
	        mapController.observeAttrSetObj(orgAttrs, attrs, layer);  //observers
	        element.bind('$destroy', function() {
	          mapController.deleteObject('trafficLayers', layer);
	        });
	      }
	     }; // return
	  }]);
	})();
	
	/**
	 * @ngdoc directive
	 * @name transit-layer
	 * @param Attr2MapOptions {service} convert html attribute to Google map api options
	 * @description
	 *   Requires:  map directive
	 *   Restrict To:  Element
	 *
	 * @example
	 * Example:
	 *
	 *  <map zoom="13" center="34.04924594193164, -118.24104309082031">
	 *    <transit-layer></transit-layer>
	 *  </map>
	 */
	(function() {
	  'use strict';
	
	  angular.module('ngMap').directive('transitLayer', [
	    'Attr2MapOptions', function(Attr2MapOptions) {
	    var parser = Attr2MapOptions;
	
	    var getLayer = function(options, events) {
	      var layer = new google.maps.TransitLayer(options);
	      for (var eventName in events) {
	        google.maps.event.addListener(layer, eventName, events[eventName]);
	      }
	      return layer;
	    };
	
	    return {
	      restrict: 'E',
	      require: ['?^map','?^ngMap'],
	
	      link: function(scope, element, attrs, mapController) {
	        mapController = mapController[0]||mapController[1];
	
	        var orgAttrs = parser.orgAttributes(element);
	        var filtered = parser.filter(attrs);
	        var options = parser.getOptions(filtered, {scope: scope});
	        var events = parser.getEvents(scope, filtered);
	        void 0;
	
	        var layer = getLayer(options, events);
	        mapController.addObject('transitLayers', layer);
	        mapController.observeAttrSetObj(orgAttrs, attrs, layer);  //observers
	        element.bind('$destroy', function() {
	          mapController.deleteObject('transitLayers', layer);
	        });
	      }
	     }; // return
	  }]);
	})();
	
	/**
	 * @ngdoc filter
	 * @name camel-case
	 * @description
	 *   Converts string to camel cased
	 */
	(function() {
	  'use strict';
	
	  var SPECIAL_CHARS_REGEXP = /([\:\-\_]+(.))/g;
	  var MOZ_HACK_REGEXP = /^moz([A-Z])/;
	
	  var camelCaseFilter = function() {
	    return function(name) {
	      return name.
	        replace(SPECIAL_CHARS_REGEXP,
	          function(_, separator, letter, offset) {
	            return offset ? letter.toUpperCase() : letter;
	        }).
	        replace(MOZ_HACK_REGEXP, 'Moz$1');
	    };
	  };
	
	  angular.module('ngMap').filter('camelCase', camelCaseFilter);
	})();
	
	/**
	 * @ngdoc filter
	 * @name escape-regex
	 * @description
	 *   Escapes all regex special characters in a string
	 */
	(function() {
	  'use strict';
	
	
	
	  var escapeRegexpFilter = function() {
	    return function(string) {
				return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'); // $& means the whole matched string
			};
	  };
	
	  angular.module('ngMap').filter('escapeRegexp', escapeRegexpFilter);
	})();
	
	/**
	 * @ngdoc filter
	 * @name jsonize
	 * @description
	 *   Converts json-like string to json string
	 */
	(function() {
	  'use strict';
	
	  var jsonizeFilter = function() {
	    return function(str) {
	      try {       // if parsable already, return as it is
	        JSON.parse(str);
	        return str;
	      } catch(e) { // if not parsable, change little
	        return str
	          // wrap keys without quote with valid double quote
	          .replace(/([\$\w]+)\s*:/g,
	            function(_, $1) {
	              return '"'+$1+'":';
	            }
	          )
	          // replacing single quote wrapped ones to double quote
	          .replace(/'([^']+)'/g,
	            function(_, $1) {
	              return '"'+$1+'"';
	            }
	          )
	          .replace(/''/g, '""');
	      }
	    };
	  };
	
	  angular.module('ngMap').filter('jsonize', jsonizeFilter);
	})();
	
	/**
	 * @ngdoc service
	 * @name Attr2MapOptions
	 * @description
	 *   Converts tag attributes to options used by google api v3 objects
	 */
	/* global google */
	(function() {
	  'use strict';
	
	  //i.e. "2015-08-12T06:12:40.858Z"
	  var isoDateRE =
	    /^(\d{4}\-\d\d\-\d\d([tT][\d:\.]*)?)([zZ]|([+\-])(\d\d):?(\d\d))?$/;
	
	  var Attr2MapOptions = function(
	      $parse, $timeout, $log, $interpolate, NavigatorGeolocation, GeoCoder,
	      camelCaseFilter, jsonizeFilter, escapeRegExp
	    ) {
	
	    var exprStartSymbol = $interpolate.startSymbol();
	    var exprEndSymbol = $interpolate.endSymbol();
	
	    /**
	     * Returns the attributes of an element as hash
	     * @memberof Attr2MapOptions
	     * @param {HTMLElement} el html element
	     * @returns {Hash} attributes
	     */
	    var orgAttributes = function(el) {
	      (el.length > 0) && (el = el[0]);
	      var orgAttributes = {};
	      for (var i=0; i<el.attributes.length; i++) {
	        var attr = el.attributes[i];
	        orgAttributes[attr.name] = attr.value;
	      }
	      return orgAttributes;
	    };
	
	    var getJSON = function(input) {
	      var re =/^[\+\-]?[0-9\.]+,[ ]*\ ?[\+\-]?[0-9\.]+$/; //lat,lng
	      if (input.match(re)) {
	        input = "["+input+"]";
	      }
	      return JSON.parse(jsonizeFilter(input));
	    };
	    
	    var getLatLng = function(input) {
	      var output = input;
	      if (input[0].constructor == Array) { 
	        if ((input[0][0].constructor == Array && input[0][0].length == 2) || input[0][0].constructor == Object) {
	            var preoutput;
	            var outputArray = [];
	            for (var i = 0; i < input.length; i++) {
	                preoutput = input[i].map(function(el){
	                    return new google.maps.LatLng(el[0], el[1]);
	                });
	                outputArray.push(preoutput);
	            }
	            output = outputArray;
	        } else {
	            output = input.map(function(el) {
	                return new google.maps.LatLng(el[0], el[1]);
	            });
	        }
	      } else if (!isNaN(parseFloat(input[0])) && isFinite(input[0])) {
	        output = new google.maps.LatLng(output[0], output[1]);
	      }
	      return output;
	    };
	
	    var toOptionValue = function(input, options) {
	      var output;
	      try { // 1. Number?
	        output = getNumber(input);
	      } catch(err) {
	        try { // 2. JSON?
	          var output = getJSON(input);
	          if (output instanceof Array) {
	            if (output[0].constructor == Object) {
	              output = output;
	            } else if (output[0] instanceof Array) {
	              if (output[0][0].constructor == Object) {
	                output = output;
	              } else {
	                output = getLatLng(output);
	              }
	            } else {
	                output = getLatLng(output);
	            }
	          }
	          // JSON is an object (not array or null)
	          else if (output === Object(output)) {
	            // check for nested hashes and convert to Google API options
	            var newOptions = options;
	            newOptions.doNotConverStringToNumber = true;
	            output = getOptions(output, newOptions);
	          }
	        } catch(err2) {
	          // 3. Google Map Object function Expression. i.e. LatLng(80,-49)
	          if (input.match(/^[A-Z][a-zA-Z0-9]+\(.*\)$/)) {
	            try {
	              var exp = "new google.maps."+input;
	              output = eval(exp); /* jshint ignore:line */
	            } catch(e) {
	              output = input;
	            }
	          // 4. Google Map Object constant Expression. i.e. MayTypeId.HYBRID
	          } else if (input.match(/^([A-Z][a-zA-Z0-9]+)\.([A-Z]+)$/)) {
	            try {
	              var matches = input.match(/^([A-Z][a-zA-Z0-9]+)\.([A-Z]+)$/);
	              output = google.maps[matches[1]][matches[2]];
	            } catch(e) {
	              output = input;
	            }
	          // 5. Google Map Object constant Expression. i.e. HYBRID
	          } else if (input.match(/^[A-Z]+$/)) {
	            try {
	              var capitalizedKey = options.key.charAt(0).toUpperCase() +
	                options.key.slice(1);
	              if (options.key.match(/temperatureUnit|windSpeedUnit|labelColor/)) {
	                capitalizedKey = capitalizedKey.replace(/s$/,"");
	                output = google.maps.weather[capitalizedKey][input];
	              } else {
	                output = google.maps[capitalizedKey][input];
	              }
	            } catch(e) {
	              output = input;
	            }
	          // 6. Date Object as ISO String
	          } else if (input.match(isoDateRE)) {
	            try {
	              output = new Date(input);
	            } catch(e) {
	              output = input;
	            }
	          // 7. evaluate dynamically bound values
	        } else if (input.match(new RegExp('^' + escapeRegExp(exprStartSymbol))) && options.scope) {
	            try {
	              var expr = input.replace(new RegExp(escapeRegExp(exprStartSymbol)),'').replace(new RegExp(escapeRegExp(exprEndSymbol), 'g'),'');
	              output = options.scope.$eval(expr);
	            } catch (err) {
	              output = input;
	            }
	          } else {
	            output = input;
	          }
	        } // catch(err2)
	      } // catch(err)
	
	      // convert output more for center and position
	      if (
	        (options.key == 'center' || options.key == 'position') &&
	        output instanceof Array
	      ) {
	        output = new google.maps.LatLng(output[0], output[1]);
	      }
	
	      // convert output more for shape bounds
	      if (options.key == 'bounds' && output instanceof Array) {
	        output = new google.maps.LatLngBounds(output[0], output[1]);
	      }
	
	      // convert output more for shape icons
	      if (options.key == 'icons' && output instanceof Array) {
	
	        for (var i=0; i<output.length; i++) {
	          var el = output[i];
	          if (el.icon.path.match(/^[A-Z_]+$/)) {
	            el.icon.path =  google.maps.SymbolPath[el.icon.path];
	          }
	        }
	      }
	
	      // convert output more for marker icon
	      if (options.key == 'icon' && output instanceof Object) {
	        if ((""+output.path).match(/^[A-Z_]+$/)) {
	          output.path = google.maps.SymbolPath[output.path];
	        }
	        for (var key in output) { //jshint ignore:line
	          var arr = output[key];
	          if (key == "anchor" || key == "origin" || key == "labelOrigin") {
	            output[key] = new google.maps.Point(arr[0], arr[1]);
	          } else if (key == "size" || key == "scaledSize") {
	            output[key] = new google.maps.Size(arr[0], arr[1]);
	          }
	        }
	      }
	
	      return output;
	    };
	
	    var getAttrsToObserve = function(attrs) {
	      var attrsToObserve = [];
	      var exprRegExp = new RegExp(escapeRegExp(exprStartSymbol) + '.*' + escapeRegExp(exprEndSymbol), 'g');
	
	      if (!attrs.noWatcher) {
	        for (var attrName in attrs) { //jshint ignore:line
	          var attrValue = attrs[attrName];
	          if (attrValue && attrValue.match(exprRegExp)) { // if attr value is {{..}}
	            attrsToObserve.push(camelCaseFilter(attrName));
	          }
	        }
	      }
	
	      return attrsToObserve;
	    };
	
	    /**
	     * filters attributes by skipping angularjs methods $.. $$..
	     * @memberof Attr2MapOptions
	     * @param {Hash} attrs tag attributes
	     * @returns {Hash} filterd attributes
	     */
	    var filter = function(attrs) {
	      var options = {};
	      for(var key in attrs) {
	        if (key.match(/^\$/) || key.match(/^ng[A-Z]/)) {
	          void(0);
	        } else {
	          options[key] = attrs[key];
	        }
	      }
	      return options;
	    };
	
	    /**
	     * converts attributes hash to Google Maps API v3 options
	     * ```
	     *  . converts numbers to number
	     *  . converts class-like string to google maps instance
	     *    i.e. `LatLng(1,1)` to `new google.maps.LatLng(1,1)`
	     *  . converts constant-like string to google maps constant
	     *    i.e. `MapTypeId.HYBRID` to `google.maps.MapTypeId.HYBRID`
	     *    i.e. `HYBRID"` to `google.maps.MapTypeId.HYBRID`
	     * ```
	     * @memberof Attr2MapOptions
	     * @param {Hash} attrs tag attributes
	     * @param {Hash} options
	     * @returns {Hash} options converted attributess
	     */
	    var getOptions = function(attrs, params) {
	      params = params || {};
	      var options = {};
	      for(var key in attrs) {
	        if (attrs[key] || attrs[key] === 0) {
	          if (key.match(/^on[A-Z]/)) { //skip events, i.e. on-click
	            continue;
	          } else if (key.match(/ControlOptions$/)) { // skip controlOptions
	            continue;
	          } else {
	            // nested conversions need to be typechecked
	            // (non-strings are fully converted)
	            if (typeof attrs[key] !== 'string') {
	              options[key] = attrs[key];
	            } else {
	              if (params.doNotConverStringToNumber &&
	                attrs[key].match(/^[0-9]+$/)
	              ) {
	                options[key] = attrs[key];
	              } else {
	                options[key] = toOptionValue(attrs[key], {key: key, scope: params.scope});
	              }
	            }
	          }
	        } // if (attrs[key])
	      } // for(var key in attrs)
	      return options;
	    };
	
	    /**
	     * converts attributes hash to scope-specific event function
	     * @memberof Attr2MapOptions
	     * @param {scope} scope angularjs scope
	     * @param {Hash} attrs tag attributes
	     * @returns {Hash} events converted events
	     */
	    var getEvents = function(scope, attrs) {
	      var events = {};
	      var toLowercaseFunc = function($1){
	        return "_"+$1.toLowerCase();
	      };
	      var EventFunc = function(attrValue) {
	        // funcName(argsStr)
	        var matches = attrValue.match(/([^\(]+)\(([^\)]*)\)/);
	        var funcName = matches[1];
	        var argsStr = matches[2].replace(/event[ ,]*/,'');  //remove string 'event'
	        var argsExpr = $parse("["+argsStr+"]"); //for perf when triggering event
	        return function(event) {
	          var args = argsExpr(scope); //get args here to pass updated model values
	          function index(obj,i) {return obj[i];}
	          var f = funcName.split('.').reduce(index, scope);
	          f && f.apply(this, [event].concat(args));
	          $timeout( function() {
	            scope.$apply();
	          });
	        };
	      };
	
	      for(var key in attrs) {
	        if (attrs[key]) {
	          if (!key.match(/^on[A-Z]/)) { //skip if not events
	            continue;
	          }
	
	          //get event name as underscored. i.e. zoom_changed
	          var eventName = key.replace(/^on/,'');
	          eventName = eventName.charAt(0).toLowerCase() + eventName.slice(1);
	          eventName = eventName.replace(/([A-Z])/g, toLowercaseFunc);
	
	          var attrValue = attrs[key];
	          events[eventName] = new EventFunc(attrValue);
	        }
	      }
	      return events;
	    };
	
	    /**
	     * control means map controls, i.e streetview, pan, etc, not a general control
	     * @memberof Attr2MapOptions
	     * @param {Hash} filtered filtered tag attributes
	     * @returns {Hash} Google Map options
	     */
	    var getControlOptions = function(filtered) {
	      var controlOptions = {};
	      if (typeof filtered != 'object') {
	        return false;
	      }
	
	      for (var attr in filtered) {
	        if (filtered[attr]) {
	          if (!attr.match(/(.*)ControlOptions$/)) {
	            continue; // if not controlOptions, skip it
	          }
	
	          //change invalid json to valid one, i.e. {foo:1} to {"foo": 1}
	          var orgValue = filtered[attr];
	          var newValue = orgValue.replace(/'/g, '"');
	          newValue = newValue.replace(/([^"]+)|("[^"]+")/g, function($0, $1, $2) {
	            if ($1) {
	              return $1.replace(/([a-zA-Z0-9]+?):/g, '"$1":');
	            } else {
	              return $2;
	            }
	          });
	          try {
	            var options = JSON.parse(newValue);
	            for (var key in options) { //assign the right values
	              if (options[key]) {
	                var value = options[key];
	                if (typeof value === 'string') {
	                  value = value.toUpperCase();
	                } else if (key === "mapTypeIds") {
	                  value = value.map( function(str) {
	                    if (str.match(/^[A-Z]+$/)) { // if constant
	                      return google.maps.MapTypeId[str.toUpperCase()];
	                    } else { // else, custom map-type
	                      return str;
	                    }
	                  });
	                }
	
	                if (key === "style") {
	                  var str = attr.charAt(0).toUpperCase() + attr.slice(1);
	                  var objName = str.replace(/Options$/,'')+"Style";
	                  options[key] = google.maps[objName][value];
	                } else if (key === "position") {
	                  options[key] = google.maps.ControlPosition[value];
	                } else {
	                  options[key] = value;
	                }
	              }
	            }
	            controlOptions[attr] = options;
	          } catch (e) {
	            void 0;
	          }
	        }
	      } // for
	
	      return controlOptions;
	    };
	
	    return {
	      filter: filter,
	      getOptions: getOptions,
	      getEvents: getEvents,
	      getControlOptions: getControlOptions,
	      toOptionValue: toOptionValue,
	      getAttrsToObserve: getAttrsToObserve,
	      orgAttributes: orgAttributes
	    }; // return
	
	  };
	  Attr2MapOptions.$inject= [
	    '$parse', '$timeout', '$log', '$interpolate', 'NavigatorGeolocation', 'GeoCoder',
	    'camelCaseFilter', 'jsonizeFilter', 'escapeRegexpFilter'
	  ];
	
	  angular.module('ngMap').service('Attr2MapOptions', Attr2MapOptions);
	})();
	
	/**
	 * @ngdoc service
	 * @name GeoCoder
	 * @description
	 *   Provides [defered/promise API](https://docs.angularjs.org/api/ng/service/$q)
	 *   service for Google Geocoder service
	 */
	(function() {
	  'use strict';
	  var $q;
	  /**
	   * @memberof GeoCoder
	   * @param {Hash} options
	   *   https://developers.google.com/maps/documentation/geocoding/#geocoding
	   * @example
	   * ```
	   *   GeoCoder.geocode({address: 'the cn tower'}).then(function(result) {
	   *     //... do something with result
	   *   });
	   * ```
	   * @returns {HttpPromise} Future object
	   */
	  var geocodeFunc = function(options) {
	    var deferred = $q.defer();
	    var geocoder = new google.maps.Geocoder();
	    geocoder.geocode(options, function (results, status) {
	      if (status == google.maps.GeocoderStatus.OK) {
	        deferred.resolve(results);
	      } else {
	        deferred.reject(status);
	      }
	    });
	    return deferred.promise;
	  };
	
	  var GeoCoder = function(_$q_) {
	    $q = _$q_;
	    return {
	      geocode : geocodeFunc
	    };
	  };
	  GeoCoder.$inject = ['$q'];
	
	  angular.module('ngMap').service('GeoCoder', GeoCoder);
	})();
	
	/**
	 * @ngdoc service
	 * @name GoogleMapsApi
	 * @description
	 *   Load Google Maps API Service
	 */
	(function() {
	  'use strict';
	  var $q;
	  var $timeout;
	
	  var GoogleMapsApi = function(_$q_, _$timeout_) {
	    $q = _$q_;
	    $timeout = _$timeout_;
	
	    return {
	
	      /**
	       * Load google maps into document by creating a script tag
	       * @memberof GoogleMapsApi
	       * @param {string} mapsUrl
	       * @example
	       *   GoogleMapsApi.load(myUrl).then(function() {
	       *     console.log('google map has been loaded')
	       *   });
	       */
	      load: function (mapsUrl) {
	
	        var deferred = $q.defer();
	
	        if (window.google === undefined || window.google.maps === undefined) {
	
	          window.lazyLoadCallback = function() {
	            $timeout(function() { /* give some time to load */
	              deferred.resolve(window.google)
	            }, 100);
	          };
	
	          var scriptEl = document.createElement('script');
	          scriptEl.src = mapsUrl +
	            (mapsUrl.indexOf('?') > -1 ? '&' : '?') +
	            'callback=lazyLoadCallback';
	
	          if (!document.querySelector('script[src="' + scriptEl.src + '"]')) {
	            document.body.appendChild(scriptEl);
	          }
	        } else {
	          deferred.resolve(window.google)
	        }
	
	        return deferred.promise;
	      }
	
	    }
	  }
	  GoogleMapsApi.$inject = ['$q', '$timeout'];
	
	  angular.module('ngMap').service('GoogleMapsApi', GoogleMapsApi);
	})();
	
	
	
	/**
	 * @ngdoc service
	 * @name NavigatorGeolocation
	 * @description
	 *  Provides [defered/promise API](https://docs.angularjs.org/api/ng/service/$q)
	 *  service for navigator.geolocation methods
	 */
	/* global google */
	(function() {
	  'use strict';
	  var $q;
	
	  /**
	   * @memberof NavigatorGeolocation
	   * @param {Object} geoLocationOptions the navigator geolocations options.
	   *  i.e. { maximumAge: 3000, timeout: 5000, enableHighAccuracy: true }.
	   *  If none specified, { timeout: 5000 }. 
	   *  If timeout not specified, timeout: 5000 added
	   * @param {function} success success callback function
	   * @param {function} failure failure callback function
	   * @example
	   * ```
	   *  NavigatorGeolocation.getCurrentPosition()
	   *    .then(function(position) {
	   *      var lat = position.coords.latitude, lng = position.coords.longitude;
	   *      .. do something lat and lng
	   *    });
	   * ```
	   * @returns {HttpPromise} Future object
	   */
	  var getCurrentPosition = function(geoLocationOptions) {
	    var deferred = $q.defer();
	    if (navigator.geolocation) {
	
	      if (geoLocationOptions === undefined) {
	        geoLocationOptions = { timeout: 5000 };
	      }
	      else if (geoLocationOptions.timeout === undefined) {
	        geoLocationOptions.timeout = 5000;
	      }
	
	      navigator.geolocation.getCurrentPosition(
	        function(position) {
	          deferred.resolve(position);
	        }, function(evt) {
	          void 0;
	          deferred.reject(evt);
	        },
	        geoLocationOptions
	      );
	    } else {
	      deferred.reject("Browser Geolocation service failed.");
	    }
	    return deferred.promise;
	  };
	
	  var NavigatorGeolocation = function(_$q_) {
	    $q = _$q_;
	    return {
	      getCurrentPosition: getCurrentPosition
	    };
	  };
	  NavigatorGeolocation.$inject = ['$q'];
	
	  angular.module('ngMap').
	    service('NavigatorGeolocation', NavigatorGeolocation);
	})();
	
	/**
	 * @ngdoc factory
	 * @name NgMapPool
	 * @description
	 *   Provide map instance to avoid memory leak
	 */
	(function() {
	  'use strict';
	  /**
	   * @memberof NgMapPool
	   * @desc map instance pool
	   */
	  var mapInstances = [];
	  var $window, $document, $timeout;
	
	  var add = function(el) {
	    var mapDiv = $document.createElement("div");
	    mapDiv.style.width = "100%";
	    mapDiv.style.height = "100%";
	    el.appendChild(mapDiv);
	    var map = new $window.google.maps.Map(mapDiv, {});
	    mapInstances.push(map);
	    return map;
	  };
	
	  var findById = function(el, id) {
	    var notInUseMap;
	    for (var i=0; i<mapInstances.length; i++) {
	      var map = mapInstances[i];
	      if (map.id == id && !map.inUse) {
	        var mapDiv = map.getDiv();
	        el.appendChild(mapDiv);
	        notInUseMap = map;
	        break;
	      }
	    }
	    return notInUseMap;
	  };
	
	  var findUnused = function(el) { //jshint ignore:line
	    var notInUseMap;
	    for (var i=0; i<mapInstances.length; i++) {
	      var map = mapInstances[i];
	      if (map.id) {
	        continue;
	      }
	      if (!map.inUse) {
	        var mapDiv = map.getDiv();
	        el.appendChild(mapDiv);
	        notInUseMap = map;
	        break;
	      }
	    }
	    return notInUseMap;
	  };
	
	  /**
	   * @memberof NgMapPool
	   * @function getMapInstance
	   * @param {HtmlElement} el map container element
	   * @return map instance for the given element
	   */
	  var getMapInstance = function(el) {
	    var map = findById(el, el.id) || findUnused(el);
	    if (!map) {
	      map = add(el);
	    } else {
	      /* firing map idle event, which is used by map controller */
	      $timeout(function() {
	        google.maps.event.trigger(map, 'idle');
	      }, 100);
	    }
	    map.inUse = true;
	    return map;
	  };
	
	  /**
	   * @memberof NgMapPool
	   * @function returnMapInstance
	   * @param {Map} an instance of google.maps.Map
	   * @desc sets the flag inUse of the given map instance to false, so that it 
	   * can be reused later
	   */
	  var returnMapInstance = function(map) {
	    map.inUse = false;
	  };
	  
	  /**
	   * @memberof NgMapPool
	   * @function resetMapInstances
	   * @desc resets mapInstance array
	   */
	  var resetMapInstances = function() {
	    for(var i = 0;i < mapInstances.length;i++) {
	        mapInstances[i] = null;
	    }
	    mapInstances = [];
	  };
	  
	  /**
	   * @memberof NgMapPool
	   * @function deleteMapInstance
	   * @desc delete a mapInstance
	   */
	  var deleteMapInstance= function(mapId) {
		  for( var i=0; i<mapInstances.length; i++ ) {
			  if( (mapInstances[i] !== null) && (mapInstances[i].id == mapId)) {
				  mapInstances[i]= null;
				  mapInstances.splice( i, 1 );
			  }
		  }
	  };
	
	  var NgMapPool = function(_$document_, _$window_, _$timeout_) {
	    $document = _$document_[0], $window = _$window_, $timeout = _$timeout_;
	
	    return {
		  mapInstances: mapInstances,
	      resetMapInstances: resetMapInstances,
	      getMapInstance: getMapInstance,
	      returnMapInstance: returnMapInstance,
	      deleteMapInstance: deleteMapInstance
	    };
	  };
	
	  NgMapPool.$inject = [ '$document', '$window', '$timeout'];
	
	  angular.module('ngMap').factory('NgMapPool', NgMapPool);
	
	})();
	
	/**
	 * @ngdoc provider
	 * @name NgMap
	 * @description
	 *  common utility service for ng-map
	 */
	(function() {
	  'use strict';
	  var $window, $document, $q;
	  var NavigatorGeolocation, Attr2MapOptions, GeoCoder, camelCaseFilter, NgMapPool;
	
	  var mapControllers = {};
	
	  var getStyle = function(el, styleProp) {
	    var y;
	    if (el.currentStyle) {
	      y = el.currentStyle[styleProp];
	    } else if ($window.getComputedStyle) {
	      y = $document.defaultView.
	        getComputedStyle(el, null).
	        getPropertyValue(styleProp);
	    }
	    return y;
	  };
	
	  /**
	   * @memberof NgMap
	   * @function initMap
	   * @param id optional, id of the map. default 0
	   */
	  var initMap = function(id) {
	    var ctrl = mapControllers[id || 0];
	    if (!(ctrl.map instanceof google.maps.Map)) {
	      ctrl.initializeMap();
	      return ctrl.map;
	    } else {
	      void 0;
	    }
	  };
	
	  /**
	   * @memberof NgMap
	   * @function getMap
	   * @param {String} optional, id e.g., 'foo'
	   * @returns promise
	   */
	  var getMap = function(id, options) {
	    options = options || {};
	    id = typeof id === 'object' ? id.id : id;
	
	    var deferred = $q.defer();
	    var timeout = options.timeout || 10000;
	
	    function waitForMap(timeElapsed){
	      var keys = Object.keys(mapControllers);
	      var theFirstController = mapControllers[keys[0]];
	      if(id && mapControllers[id]){
	        deferred.resolve(mapControllers[id].map);
	      } else if (!id && theFirstController && theFirstController.map) {
	        deferred.resolve(theFirstController.map);
	      } else if (timeElapsed > timeout) {
	        deferred.reject('could not find map');
	      } else {
	        $window.setTimeout( function(){
	          waitForMap(timeElapsed+100);
	        }, 100);
	      }
	    }
	    waitForMap(0);
	
	    return deferred.promise;
	  };
	
	  /**
	   * @memberof NgMap
	   * @function addMap
	   * @param mapController {__MapContoller} a map controller
	   * @returns promise
	   */
	  var addMap = function(mapCtrl) {
	    if (mapCtrl.map) {
	      var len = Object.keys(mapControllers).length;
	      mapControllers[mapCtrl.map.id || len] = mapCtrl;
	    }
	  };
	
	  /**
	   * @memberof NgMap
	   * @function deleteMap
	   * @param mapController {__MapContoller} a map controller
	   */
	  var deleteMap = function(mapCtrl) {
	    var len = Object.keys(mapControllers).length - 1;
	    var mapId = mapCtrl.map.id || len;
	    if (mapCtrl.map) {
	      for (var eventName in mapCtrl.eventListeners) {
	        void 0;
	        var listener = mapCtrl.eventListeners[eventName];
	        google.maps.event.removeListener(listener);
	      }
	      if (mapCtrl.map.controls) {
	        mapCtrl.map.controls.forEach(function(ctrl) {
	          ctrl.clear();
	        });
	      }
	    }
	
	    //Remove Heatmap Layers
	    if (mapCtrl.map.heatmapLayers) {
	      Object.keys(mapCtrl.map.heatmapLayers).forEach(function (layer) {
	        mapCtrl.deleteObject('heatmapLayers', mapCtrl.map.heatmapLayers[layer]);
	      });
	    }
	
	    NgMapPool.deleteMapInstance(mapId);
	
	    delete mapControllers[mapId];
	  };
	
	  /**
	   * @memberof NgMap
	   * @function getGeoLocation
	   * @param {String} address
	   * @param {Hash} options geo options
	   * @returns promise
	   */
	  var getGeoLocation = function(string, options) {
	    var deferred = $q.defer();
	    if (!string || string.match(/^current/i)) { // current location
	      NavigatorGeolocation.getCurrentPosition(options).then(
	        function(position) {
	          var lat = position.coords.latitude;
	          var lng = position.coords.longitude;
	          var latLng = new google.maps.LatLng(lat,lng);
	          deferred.resolve(latLng);
	        },
	        function(error) {
	          deferred.reject(error);
	        }
	      );
	    } else {
	      GeoCoder.geocode({address: string}).then(
	        function(results) {
	          deferred.resolve(results[0].geometry.location);
	        },
	        function(error) {
	          deferred.reject(error);
	        }
	      );
	      // var geocoder = new google.maps.Geocoder();
	      // geocoder.geocode(options, function (results, status) {
	      //   if (status == google.maps.GeocoderStatus.OK) {
	      //     deferred.resolve(results);
	      //   } else {
	      //     deferred.reject(status);
	      //   }
	      // });
	    }
	
	    return deferred.promise;
	  };
	
	  /**
	   * @memberof NgMap
	   * @function observeAndSet
	   * @param {String} attrName attribute name
	   * @param {Object} object A Google maps object to be changed
	   * @returns attribue observe function
	   */
	  var observeAndSet = function(attrName, object) {
	    void 0;
	    return function(val) {
	      if (val) {
	        var setMethod = camelCaseFilter('set-'+attrName);
	        var optionValue = Attr2MapOptions.toOptionValue(val, {key: attrName});
	        if (object[setMethod]) { //if set method does exist
	          void 0;
	          /* if an location is being observed */
	          if (attrName.match(/center|position/) &&
	            typeof optionValue == 'string') {
	            getGeoLocation(optionValue).then(function(latlng) {
	              object[setMethod](latlng);
	            });
	          } else {
	            object[setMethod](optionValue);
	          }
	        }
	      }
	    };
	  };
	
	  /**
	   * @memberof NgMap
	   * @function setStyle
	   * @param {HtmlElement} map contriner element
	   * @desc set display, width, height of map container element
	   */
	  var setStyle = function(el) {
	    //if style is not given to the map element, set display and height
	    var defaultStyle = el.getAttribute('default-style');
	    if (defaultStyle == "true") {
	      el.style.display = 'block';
	      el.style.height = '300px';
	    } else {
	      if (getStyle(el, 'display') != "block") {
	        el.style.display = 'block';
	      }
	      if (getStyle(el, 'height').match(/^(0|auto)/)) {
	        el.style.height = '300px';
	      }
	    }
	  };
	
	  angular.module('ngMap').provider('NgMap', function() {
	    var defaultOptions = {};
	
	    /**
	     * @memberof NgMap
	     * @function setDefaultOptions
	     * @param {Hash} options
	     * @example
	     *  app.config(function(NgMapProvider) {
	     *    NgMapProvider.setDefaultOptions({
	     *      marker: {
	     *        optimized: false
	     *      }
	     *    });
	     *  });
	     */
	    this.setDefaultOptions = function(options) {
	      defaultOptions = options;
	    };
	
	    var NgMap = function(
	        _$window_, _$document_, _$q_,
	        _NavigatorGeolocation_, _Attr2MapOptions_,
	        _GeoCoder_, _camelCaseFilter_, _NgMapPool_
	      ) {
	      $window = _$window_;
	      $document = _$document_[0];
	      $q = _$q_;
	      NavigatorGeolocation = _NavigatorGeolocation_;
	      Attr2MapOptions = _Attr2MapOptions_;
	      GeoCoder = _GeoCoder_;
	      camelCaseFilter = _camelCaseFilter_;
	      NgMapPool = _NgMapPool_;
	
	      return {
	        defaultOptions: defaultOptions,
	        addMap: addMap,
	        deleteMap: deleteMap,
	        getMap: getMap,
	        initMap: initMap,
	        setStyle: setStyle,
	        getGeoLocation: getGeoLocation,
	        observeAndSet: observeAndSet
	      };
	    };
	    NgMap.$inject = [
	      '$window', '$document', '$q',
	      'NavigatorGeolocation', 'Attr2MapOptions',
	      'GeoCoder', 'camelCaseFilter', 'NgMapPool'
	    ];
	
	    this.$get = NgMap;
	  });
	})();
	
	/**
	 * @ngdoc service
	 * @name StreetView
	 * @description
	 *  Provides [defered/promise API](https://docs.angularjs.org/api/ng/service/$q)
	 *  service for [Google StreetViewService]
	 *  (https://developers.google.com/maps/documentation/javascript/streetview)
	 */
	(function() {
	  'use strict';
	  var $q;
	
	  /**
	   * Retrieves panorama id from the given map (and or position)
	   * @memberof StreetView
	   * @param {map} map Google map instance
	   * @param {LatLng} latlng Google LatLng instance
	   *   default: the center of the map
	   * @example
	   *   StreetView.getPanorama(map).then(function(panoId) {
	   *     $scope.panoId = panoId;
	   *   });
	   * @returns {HttpPromise} Future object
	   */
	  var getPanorama = function(map, latlng) {
	    latlng = latlng || map.getCenter();
	    var deferred = $q.defer();
	    var svs = new google.maps.StreetViewService();
	    svs.getPanoramaByLocation( (latlng||map.getCenter), 100,
	      function (data, status) {
	        // if streetView available
	        if (status === google.maps.StreetViewStatus.OK) {
	          deferred.resolve(data.location.pano);
	        } else {
	          // no street view available in this range, or some error occurred
	          deferred.resolve(false);
	          //deferred.reject('Geocoder failed due to: '+ status);
	        }
	      }
	    );
	    return deferred.promise;
	  };
	
	  /**
	   * Set panorama view on the given map with the panorama id
	   * @memberof StreetView
	   * @param {map} map Google map instance
	   * @param {String} panoId Panorama id fro getPanorama method
	   * @example
	   *   StreetView.setPanorama(map, panoId);
	   */
	  var setPanorama = function(map, panoId) {
	    var svp = new google.maps.StreetViewPanorama(
	      map.getDiv(), {enableCloseButton: true}
	    );
	    svp.setPano(panoId);
	  };
	
	  var StreetView = function(_$q_) {
	    $q = _$q_;
	
	    return {
	      getPanorama: getPanorama,
	      setPanorama: setPanorama
	    };
	  };
	  StreetView.$inject = ['$q'];
	
	  angular.module('ngMap').service('StreetView', StreetView);
	})();
	
	return 'ngMap';
	}));

/***/ },
/* 42 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.default = routes;
	routes.$inject = ['$stateProvider', '$urlRouterProvider'];
	
	function routes($stateProvider, $urlRouterProvider) {
	
	    $stateProvider.state({
	        name: 'home',
	        url: '/',
	        data: { public: true },
	        component: 'home'
	    });
	
	    $stateProvider.state({
	        name: 'user',
	        url: '/user',
	        data: { public: true },
	        component: 'user'
	    });
	
	    $stateProvider.state({
	        name: 'lynchMap',
	        url: '/lynchMap',
	        data: { public: true },
	        component: 'lynchMap'
	    });
	
	    $stateProvider.state({
	        name: 'incidents',
	        url: '/incidents',
	        data: { public: true },
	        component: 'incidents'
	    });
	
	    $stateProvider.state({
	        name: 'incident',
	        url: '/incident',
	        data: { public: true },
	        component: 'incident'
	    });
	
	    $stateProvider.state({
	        name: 'addIncident',
	        url: '/addIncident',
	        data: { public: true },
	        component: 'addIncident'
	    });
	
	    $stateProvider.state({
	        name: 'about',
	        url: '/about',
	        data: { public: true },
	        component: 'about'
	    });
	
	    $stateProvider.state({
	        name: 'login',
	        url: '/login',
	        data: { public: true },
	        component: 'login'
	    });
	
	    $stateProvider.state({
	        name: 'logout',
	        url: '/logout',
	        data: { public: true },
	        component: 'logout'
	    });
	
	    $stateProvider.state({
	        name: 'signup',
	        url: '/signup',
	        data: { public: true },
	        component: 'signup'
	    });
	
	    $urlRouterProvider.otherwise('/');
	}

/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * State-based routing for AngularJS
	 * @version v1.0.0-beta.3
	 * @link https://ui-router.github.io
	 * @license MIT License, http://www.opensource.org/licenses/MIT
	 */
	(function webpackUniversalModuleDefinition(root, factory) {
		if(true)
			module.exports = factory(__webpack_require__(1));
		else if(typeof define === 'function' && define.amd)
			define("angular-ui-router", ["angular"], factory);
		else if(typeof exports === 'object')
			exports["angular-ui-router"] = factory(require("angular"));
		else
			root["angular-ui-router"] = factory(root["angular"]);
	})(this, function(__WEBPACK_EXTERNAL_MODULE_57__) {
	return /******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	/******/
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	/******/
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId])
	/******/ 			return installedModules[moduleId].exports;
	/******/
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			exports: {},
	/******/ 			id: moduleId,
	/******/ 			loaded: false
	/******/ 		};
	/******/
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	/******/
	/******/ 		// Flag the module as loaded
	/******/ 		module.loaded = true;
	/******/
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	/******/
	/******/
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;
	/******/
	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;
	/******/
	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "";
	/******/
	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(0);
	/******/ })
	/************************************************************************/
	/******/ ({
	
	/***/ 0:
	/***/ function(module, exports, __webpack_require__) {
	
		"use strict";
		var angular = __webpack_require__(57);
		(function () {
		    var isFunction = angular.isFunction, isString = angular.isString;
		    function applyPairs(memo, keyValTuple) {
		        var key, value;
		        if (Array.isArray(keyValTuple))
		            key = keyValTuple[0], value = keyValTuple[1];
		        if (!isString(key))
		            throw new Error("invalid parameters to applyPairs");
		        memo[key] = value;
		        return memo;
		    }
		    function stateChangeStartHandler($transition$) {
		        if (!$transition$.options().notify || !$transition$.valid() || $transition$.ignored())
		            return;
		        var $injector = $transition$.injector();
		        var $stateEvents = $injector.get('$stateEvents');
		        var $rootScope = $injector.get('$rootScope');
		        var $state = $injector.get('$state');
		        var $urlRouter = $injector.get('$urlRouter');
		        var enabledEvents = $stateEvents.provider.enabled();
		        var toParams = $transition$.params("to");
		        var fromParams = $transition$.params("from");
		        if (enabledEvents.$stateChangeSuccess) {
		            var startEvent = $rootScope.$broadcast('$stateChangeStart', $transition$.to(), toParams, $transition$.from(), fromParams, $transition$.options(), $transition$);
		            if (startEvent.defaultPrevented) {
		                if (enabledEvents.$stateChangeCancel) {
		                    $rootScope.$broadcast('$stateChangeCancel', $transition$.to(), toParams, $transition$.from(), fromParams, $transition$.options(), $transition$);
		                }
		                //Don't update and resync url if there's been a new transition started. see issue #2238, #600
		                if ($state.transition == null)
		                    $urlRouter.update();
		                return false;
		            }
		            $transition$.promise.then(function () {
		                $rootScope.$broadcast('$stateChangeSuccess', $transition$.to(), toParams, $transition$.from(), fromParams, $transition$.options(), $transition$);
		            });
		        }
		        if (enabledEvents.$stateChangeError) {
		            $transition$.promise["catch"](function (error) {
		                if (error && (error.type === 2 /* RejectType.SUPERSEDED */ || error.type === 3 /* RejectType.ABORTED */))
		                    return;
		                var evt = $rootScope.$broadcast('$stateChangeError', $transition$.to(), toParams, $transition$.from(), fromParams, error, $transition$.options(), $transition$);
		                if (!evt.defaultPrevented) {
		                    $urlRouter.update();
		                }
		            });
		        }
		    }
		    stateNotFoundHandler.$inject = ['$to$', '$from$', '$state', '$rootScope', '$urlRouter'];
		    function stateNotFoundHandler($to$, $from$, injector) {
		        var $state = injector.get('$state');
		        var $rootScope = injector.get('$rootScope');
		        var $urlRouter = injector.get('$urlRouter');
		        var redirect = { to: $to$.identifier(), toParams: $to$.params(), options: $to$.options() };
		        var e = $rootScope.$broadcast('$stateNotFound', redirect, $from$.state(), $from$.params());
		        if (e.defaultPrevented || e.retry)
		            $urlRouter.update();
		        function redirectFn() {
		            return $state.target(redirect.to, redirect.toParams, redirect.options);
		        }
		        if (e.defaultPrevented) {
		            return false;
		        }
		        else if (e.retry || !!$state.get(redirect.to)) {
		            return e.retry && isFunction(e.retry.then) ? e.retry.then(redirectFn) : redirectFn();
		        }
		    }
		    $StateEventsProvider.$inject = ['$stateProvider'];
		    function $StateEventsProvider($stateProvider) {
		        $StateEventsProvider.prototype.instance = this;
		        var runtime = false;
		        var allEvents = ['$stateChangeStart', '$stateNotFound', '$stateChangeSuccess', '$stateChangeError'];
		        var enabledStateEvents = allEvents.map(function (e) { return [e, true]; }).reduce(applyPairs, {});
		        function assertNotRuntime() {
		            if (runtime)
		                throw new Error("Cannot enable events at runtime (use $stateEventsProvider");
		        }
		        /**
		         * Enables the deprecated UI-Router 0.2.x State Events
		         * [ '$stateChangeStart', '$stateNotFound', '$stateChangeSuccess', '$stateChangeError' ]
		         */
		        this.enable = function () {
		            var events = [];
		            for (var _i = 0; _i < arguments.length; _i++) {
		                events[_i - 0] = arguments[_i];
		            }
		            assertNotRuntime();
		            if (!events || !events.length)
		                events = allEvents;
		            events.forEach(function (event) { return enabledStateEvents[event] = true; });
		        };
		        /**
		         * Disables the deprecated UI-Router 0.2.x State Events
		         * [ '$stateChangeStart', '$stateNotFound', '$stateChangeSuccess', '$stateChangeError' ]
		         */
		        this.disable = function () {
		            var events = [];
		            for (var _i = 0; _i < arguments.length; _i++) {
		                events[_i - 0] = arguments[_i];
		            }
		            assertNotRuntime();
		            if (!events || !events.length)
		                events = allEvents;
		            events.forEach(function (event) { return delete enabledStateEvents[event]; });
		        };
		        this.enabled = function () { return enabledStateEvents; };
		        this.$get = $get;
		        $get.$inject = ['$transitions'];
		        function $get($transitions) {
		            runtime = true;
		            if (enabledStateEvents["$stateNotFound"])
		                $stateProvider.onInvalid(stateNotFoundHandler);
		            if (enabledStateEvents.$stateChangeStart)
		                $transitions.onBefore({}, stateChangeStartHandler, { priority: 1000 });
		            return {
		                provider: $StateEventsProvider.prototype.instance
		            };
		        }
		    }
		    angular.module('ui.router.state.events', ['ui.router.state'])
		        .provider("$stateEvents", $StateEventsProvider)
		        .run(['$stateEvents', function ($stateEvents) {
		        }]);
		})();
	
	
	/***/ },
	
	/***/ 57:
	/***/ function(module, exports) {
	
		module.exports = __WEBPACK_EXTERNAL_MODULE_57__;
	
	/***/ }
	
	/******/ })
	});
	;
	//# sourceMappingURL=stateEvents.js.map

/***/ }
/******/ ]);
//# sourceMappingURL=main.js.map